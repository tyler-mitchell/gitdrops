/**
 * GQty AUTO-GENERATED CODE: PLEASE DO NOT MODIFY MANUALLY
 */

/** eslint-disable @typescript-eslint/no-explicit-any */

import { SchemaUnionsKey } from "gqty";

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export interface Scalars {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A (potentially binary) string encoded using base64. */
  Base64String: any;
  /** Represents non-fractional signed whole numeric values. Since the value may exceed the size of a 32-bit integer, it's encoded as a string. */
  BigInt: any;
  /** An ISO-8601 encoded date string. */
  Date: any;
  /** An ISO-8601 encoded UTC date string. */
  DateTime: string;
  /** A Git object ID. */
  GitObjectID: any;
  /** Git SSH string */
  GitSSHRemote: any;
  /** An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC. */
  GitTimestamp: any;
  /** A string containing HTML code. */
  HTML: any;
  /** An ISO-8601 encoded UTC date string with millisecond precision. */
  PreciseDateTime: any;
  /** An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string. */
  URI: any;
  /** A valid x509 certificate string */
  X509Certificate: any;
}

/** Autogenerated input type of AbortQueuedMigrations */
export interface AbortQueuedMigrationsInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the organization that is running the migrations. */
  ownerId: Scalars["ID"];
}

/** Autogenerated input type of AbortRepositoryMigration */
export interface AbortRepositoryMigrationInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the migration to be aborted. */
  migrationId: Scalars["ID"];
}

/** Autogenerated input type of AcceptEnterpriseAdministratorInvitation */
export interface AcceptEnterpriseAdministratorInvitationInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The id of the invitation being accepted */
  invitationId: Scalars["ID"];
}

/** Autogenerated input type of AcceptTopicSuggestion */
export interface AcceptTopicSuggestionInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of the suggested topic. */
  name: Scalars["String"];
  /** The Node ID of the repository. */
  repositoryId: Scalars["ID"];
}

/** The actor's type. */
export const ActorType = {
  /** Indicates a team actor. */
  TEAM: "TEAM",
  /** Indicates a user actor. */
  USER: "USER",
} as const;

export type ActorType = (typeof ActorType)[keyof typeof ActorType];
/** Autogenerated input type of AddAssigneesToAssignable */
export interface AddAssigneesToAssignableInput {
  /** The id of the assignable object to add assignees to. */
  assignableId: Scalars["ID"];
  /** The id of users to add as assignees. */
  assigneeIds: Array<Scalars["ID"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of AddComment */
export interface AddCommentInput {
  /** The contents of the comment. */
  body: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the subject to modify. */
  subjectId: Scalars["ID"];
}

/** Autogenerated input type of AddDiscussionComment */
export interface AddDiscussionCommentInput {
  /** The contents of the comment. */
  body: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the discussion to comment on. */
  discussionId: Scalars["ID"];
  /** The Node ID of the discussion comment within this discussion to reply to. */
  replyToId?: InputMaybe<Scalars["ID"]>;
}

/** Autogenerated input type of AddDiscussionPollVote */
export interface AddDiscussionPollVoteInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the discussion poll option to vote for. */
  pollOptionId: Scalars["ID"];
}

/** Autogenerated input type of AddEnterpriseOrganizationMember */
export interface AddEnterpriseOrganizationMemberInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise which owns the organization. */
  enterpriseId: Scalars["ID"];
  /** The ID of the organization the users will be added to. */
  organizationId: Scalars["ID"];
  /** The role to assign the users in the organization */
  role?: InputMaybe<OrganizationMemberRole>;
  /** The IDs of the enterprise members to add. */
  userIds: Array<Scalars["ID"]>;
}

/** Autogenerated input type of AddEnterpriseSupportEntitlement */
export interface AddEnterpriseSupportEntitlementInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the Enterprise which the admin belongs to. */
  enterpriseId: Scalars["ID"];
  /** The login of a member who will receive the support entitlement. */
  login: Scalars["String"];
}

/** Autogenerated input type of AddLabelsToLabelable */
export interface AddLabelsToLabelableInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ids of the labels to add. */
  labelIds: Array<Scalars["ID"]>;
  /** The id of the labelable object to add labels to. */
  labelableId: Scalars["ID"];
}

/** Autogenerated input type of AddProjectCard */
export interface AddProjectCardInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The content of the card. Must be a member of the ProjectCardItem union */
  contentId?: InputMaybe<Scalars["ID"]>;
  /** The note on the card. */
  note?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the ProjectColumn. */
  projectColumnId: Scalars["ID"];
}

/** Autogenerated input type of AddProjectColumn */
export interface AddProjectColumnInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of the column. */
  name: Scalars["String"];
  /** The Node ID of the project. */
  projectId: Scalars["ID"];
}

/** Autogenerated input type of AddProjectV2DraftIssue */
export interface AddProjectV2DraftIssueInput {
  /** The IDs of the assignees of the draft issue. */
  assigneeIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The body of the draft issue. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the Project to add the draft issue to. */
  projectId: Scalars["ID"];
  /** The title of the draft issue. A project item can also be created by providing the URL of an Issue or Pull Request if you have access. */
  title: Scalars["String"];
}

/** Autogenerated input type of AddProjectV2ItemById */
export interface AddProjectV2ItemByIdInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The id of the Issue or Pull Request to add. */
  contentId: Scalars["ID"];
  /** The ID of the Project to add the item to. */
  projectId: Scalars["ID"];
}

/** Autogenerated input type of AddPullRequestReviewComment */
export interface AddPullRequestReviewCommentInput {
  /**
   * The text of the comment. This field is required
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `body` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   *
   */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /**
   * The SHA of the commit to comment on.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `commitOID` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   *
   */
  commitOID?: InputMaybe<Scalars["GitObjectID"]>;
  /**
   * The comment id to reply to.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `inReplyTo` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   *
   */
  inReplyTo?: InputMaybe<Scalars["ID"]>;
  /**
   * The relative path of the file to comment on.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `path` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   *
   */
  path?: InputMaybe<Scalars["String"]>;
  /**
   * The line index in the diff to comment on.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `position` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   *
   */
  position?: InputMaybe<Scalars["Int"]>;
  /**
   * The node ID of the pull request reviewing
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `pullRequestId` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   *
   */
  pullRequestId?: InputMaybe<Scalars["ID"]>;
  /**
   * The Node ID of the review to modify.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `pullRequestReviewId` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead
   * **Reason:** We are deprecating the addPullRequestReviewComment mutation
   *
   */
  pullRequestReviewId?: InputMaybe<Scalars["ID"]>;
}

/** Autogenerated input type of AddPullRequestReview */
export interface AddPullRequestReviewInput {
  /** The contents of the review body comment. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /**
   * The review line comments.
   *
   * **Upcoming Change on 2023-10-01 UTC**
   * **Description:** `comments` will be removed. use the `threads` argument instead
   * **Reason:** We are deprecating comment fields that use diff-relative positioning
   *
   */
  comments?: InputMaybe<Array<InputMaybe<DraftPullRequestReviewComment>>>;
  /** The commit OID the review pertains to. */
  commitOID?: InputMaybe<Scalars["GitObjectID"]>;
  /** The event to perform on the pull request review. */
  event?: InputMaybe<PullRequestReviewEvent>;
  /** The Node ID of the pull request to modify. */
  pullRequestId: Scalars["ID"];
  /** The review line comment threads. */
  threads?: InputMaybe<Array<InputMaybe<DraftPullRequestReviewThread>>>;
}

/** Autogenerated input type of AddPullRequestReviewThread */
export interface AddPullRequestReviewThreadInput {
  /** Body of the thread's first comment. */
  body: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The line of the blob to which the thread refers, required for line-level threads. The end of the line range for multi-line comments. */
  line?: InputMaybe<Scalars["Int"]>;
  /** Path to the file being commented on. */
  path: Scalars["String"];
  /** The node ID of the pull request reviewing */
  pullRequestId?: InputMaybe<Scalars["ID"]>;
  /** The Node ID of the review to modify. */
  pullRequestReviewId?: InputMaybe<Scalars["ID"]>;
  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
  side?: InputMaybe<DiffSide>;
  /** The first line of the range to which the comment refers. */
  startLine?: InputMaybe<Scalars["Int"]>;
  /** The side of the diff on which the start line resides. */
  startSide?: InputMaybe<DiffSide>;
  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file */
  subjectType?: InputMaybe<PullRequestReviewThreadSubjectType>;
}

/** Autogenerated input type of AddPullRequestReviewThreadReply */
export interface AddPullRequestReviewThreadReplyInput {
  /** The text of the reply. */
  body: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the pending review to which the reply will belong. */
  pullRequestReviewId?: InputMaybe<Scalars["ID"]>;
  /** The Node ID of the thread to which this reply is being written. */
  pullRequestReviewThreadId: Scalars["ID"];
}

/** Autogenerated input type of AddReaction */
export interface AddReactionInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of the emoji to react with. */
  content: ReactionContent;
  /** The Node ID of the subject to modify. */
  subjectId: Scalars["ID"];
}

/** Autogenerated input type of AddStar */
export interface AddStarInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Starrable ID to star. */
  starrableId: Scalars["ID"];
}

/** Autogenerated input type of AddUpvote */
export interface AddUpvoteInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the discussion or comment to upvote. */
  subjectId: Scalars["ID"];
}

/** Autogenerated input type of AddVerifiableDomain */
export interface AddVerifiableDomainInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The URL of the domain */
  domain: Scalars["URI"];
  /** The ID of the owner to add the domain to */
  ownerId: Scalars["ID"];
}

/** Autogenerated input type of ApproveDeployments */
export interface ApproveDeploymentsInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Optional comment for approving deployments */
  comment?: InputMaybe<Scalars["String"]>;
  /** The ids of environments to reject deployments */
  environmentIds: Array<Scalars["ID"]>;
  /** The node ID of the workflow run containing the pending deployments. */
  workflowRunId: Scalars["ID"];
}

/** Autogenerated input type of ApproveVerifiableDomain */
export interface ApproveVerifiableDomainInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the verifiable domain to approve. */
  id: Scalars["ID"];
}

/** Autogenerated input type of ArchiveProjectV2Item */
export interface ArchiveProjectV2ItemInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the ProjectV2Item to archive. */
  itemId: Scalars["ID"];
  /** The ID of the Project to archive the item from. */
  projectId: Scalars["ID"];
}

/** Autogenerated input type of ArchiveRepository */
export interface ArchiveRepositoryInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the repository to mark as archived. */
  repositoryId: Scalars["ID"];
}

/** Ordering options for Audit Log connections. */
export interface AuditLogOrder {
  /** The ordering direction. */
  direction?: InputMaybe<OrderDirection>;
  /** The field to order Audit Logs by. */
  field?: InputMaybe<AuditLogOrderField>;
}

/** Properties by which Audit Log connections can be ordered. */
export const AuditLogOrderField = {
  /** Order audit log entries by timestamp */
  CREATED_AT: "CREATED_AT",
} as const;

export type AuditLogOrderField =
  (typeof AuditLogOrderField)[keyof typeof AuditLogOrderField];
/** Parameters to be used for the branch_name_pattern rule */
export interface BranchNamePatternParametersInput {
  /** How this rule will appear to users. */
  name?: InputMaybe<Scalars["String"]>;
  /** If true, the rule will fail if the pattern matches. */
  negate?: InputMaybe<Scalars["Boolean"]>;
  /** The operator to use for matching. */
  operator: Scalars["String"];
  /** The pattern to match with. */
  pattern: Scalars["String"];
}

/** Information about a sponsorship to make for a user or organization with a GitHub Sponsors profile, as part of sponsoring many users or organizations at once. */
export interface BulkSponsorship {
  /** The amount to pay to the sponsorable in US dollars. Valid values: 1-12000. */
  amount: Scalars["Int"];
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: InputMaybe<Scalars["ID"]>;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of CancelEnterpriseAdminInvitation */
export interface CancelEnterpriseAdminInvitationInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the pending enterprise administrator invitation. */
  invitationId: Scalars["ID"];
}

/** Autogenerated input type of CancelSponsorship */
export interface CancelSponsorshipInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */
  sponsorId?: InputMaybe<Scalars["ID"]>;
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */
  sponsorLogin?: InputMaybe<Scalars["String"]>;
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: InputMaybe<Scalars["ID"]>;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of ChangeUserStatus */
export interface ChangeUserStatusInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:. */
  emoji?: InputMaybe<Scalars["String"]>;
  /** If set, the user status will not be shown after this date. */
  expiresAt?: InputMaybe<Scalars["DateTime"]>;
  /** Whether this status should indicate you are not fully available on GitHub, e.g., you are away. */
  limitedAvailability?: InputMaybe<Scalars["Boolean"]>;
  /** A short description of your current status. */
  message?: InputMaybe<Scalars["String"]>;
  /** The ID of the organization whose members will be allowed to see the status. If omitted, the status will be publicly visible. */
  organizationId?: InputMaybe<Scalars["ID"]>;
}

/** Information from a check run analysis to specific lines of code. */
export interface CheckAnnotationData {
  /** Represents an annotation's information level */
  annotationLevel: CheckAnnotationLevel;
  /** The location of the annotation */
  location: CheckAnnotationRange;
  /** A short description of the feedback for these lines of code. */
  message: Scalars["String"];
  /** The path of the file to add an annotation to. */
  path: Scalars["String"];
  /** Details about this annotation. */
  rawDetails?: InputMaybe<Scalars["String"]>;
  /** The title that represents the annotation. */
  title?: InputMaybe<Scalars["String"]>;
}

/** Represents an annotation's information level. */
export const CheckAnnotationLevel = {
  /** An annotation indicating an inescapable error. */
  FAILURE: "FAILURE",
  /** An annotation indicating some information. */
  NOTICE: "NOTICE",
  /** An annotation indicating an ignorable error. */
  WARNING: "WARNING",
} as const;

export type CheckAnnotationLevel =
  (typeof CheckAnnotationLevel)[keyof typeof CheckAnnotationLevel];
/** Information from a check run analysis to specific lines of code. */
export interface CheckAnnotationRange {
  /** The ending column of the range. */
  endColumn?: InputMaybe<Scalars["Int"]>;
  /** The ending line of the range. */
  endLine: Scalars["Int"];
  /** The starting column of the range. */
  startColumn?: InputMaybe<Scalars["Int"]>;
  /** The starting line of the range. */
  startLine: Scalars["Int"];
}

/** The possible states for a check suite or run conclusion. */
export const CheckConclusionState = {
  /** The check suite or run requires action. */
  ACTION_REQUIRED: "ACTION_REQUIRED",
  /** The check suite or run has been cancelled. */
  CANCELLED: "CANCELLED",
  /** The check suite or run has failed. */
  FAILURE: "FAILURE",
  /** The check suite or run was neutral. */
  NEUTRAL: "NEUTRAL",
  /** The check suite or run was skipped. */
  SKIPPED: "SKIPPED",
  /** The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion. */
  STALE: "STALE",
  /** The check suite or run has failed at startup. */
  STARTUP_FAILURE: "STARTUP_FAILURE",
  /** The check suite or run has succeeded. */
  SUCCESS: "SUCCESS",
  /** The check suite or run has timed out. */
  TIMED_OUT: "TIMED_OUT",
} as const;

export type CheckConclusionState =
  (typeof CheckConclusionState)[keyof typeof CheckConclusionState];
/** Possible further actions the integrator can perform. */
export interface CheckRunAction {
  /** A short explanation of what this action would do. */
  description: Scalars["String"];
  /** A reference for the action on the integrator's system.  */
  identifier: Scalars["String"];
  /** The text to be displayed on a button in the web UI. */
  label: Scalars["String"];
}

/** The filters that are available when fetching check runs. */
export interface CheckRunFilter {
  /** Filters the check runs created by this application ID. */
  appId?: InputMaybe<Scalars["Int"]>;
  /** Filters the check runs by this name. */
  checkName?: InputMaybe<Scalars["String"]>;
  /** Filters the check runs by this type. */
  checkType?: InputMaybe<CheckRunType>;
  /** Filters the check runs by these conclusions. */
  conclusions?: InputMaybe<Array<CheckConclusionState>>;
  /** Filters the check runs by this status. Superceded by statuses. */
  status?: InputMaybe<CheckStatusState>;
  /** Filters the check runs by this status. Overrides status. */
  statuses?: InputMaybe<Array<CheckStatusState>>;
}

/** Descriptive details about the check run. */
export interface CheckRunOutput {
  /** The annotations that are made as part of the check run. */
  annotations?: InputMaybe<Array<CheckAnnotationData>>;
  /** Images attached to the check run output displayed in the GitHub pull request UI. */
  images?: InputMaybe<Array<CheckRunOutputImage>>;
  /** The summary of the check run (supports Commonmark). */
  summary: Scalars["String"];
  /** The details of the check run (supports Commonmark). */
  text?: InputMaybe<Scalars["String"]>;
  /** A title to provide for this check run. */
  title: Scalars["String"];
}

/** Images attached to the check run output displayed in the GitHub pull request UI. */
export interface CheckRunOutputImage {
  /** The alternative text for the image. */
  alt: Scalars["String"];
  /** A short image description. */
  caption?: InputMaybe<Scalars["String"]>;
  /** The full URL of the image. */
  imageUrl: Scalars["URI"];
}

/** The possible states of a check run in a status rollup. */
export const CheckRunState = {
  /** The check run requires action. */
  ACTION_REQUIRED: "ACTION_REQUIRED",
  /** The check run has been cancelled. */
  CANCELLED: "CANCELLED",
  /** The check run has been completed. */
  COMPLETED: "COMPLETED",
  /** The check run has failed. */
  FAILURE: "FAILURE",
  /** The check run is in progress. */
  IN_PROGRESS: "IN_PROGRESS",
  /** The check run was neutral. */
  NEUTRAL: "NEUTRAL",
  /** The check run is in pending state. */
  PENDING: "PENDING",
  /** The check run has been queued. */
  QUEUED: "QUEUED",
  /** The check run was skipped. */
  SKIPPED: "SKIPPED",
  /** The check run was marked stale by GitHub. Only GitHub can use this conclusion. */
  STALE: "STALE",
  /** The check run has failed at startup. */
  STARTUP_FAILURE: "STARTUP_FAILURE",
  /** The check run has succeeded. */
  SUCCESS: "SUCCESS",
  /** The check run has timed out. */
  TIMED_OUT: "TIMED_OUT",
  /** The check run is in waiting state. */
  WAITING: "WAITING",
} as const;

export type CheckRunState = (typeof CheckRunState)[keyof typeof CheckRunState];
/** The possible types of check runs. */
export const CheckRunType = {
  /** Every check run available. */
  ALL: "ALL",
  /** The latest check run. */
  LATEST: "LATEST",
} as const;

export type CheckRunType = (typeof CheckRunType)[keyof typeof CheckRunType];
/** The possible states for a check suite or run status. */
export const CheckStatusState = {
  /** The check suite or run has been completed. */
  COMPLETED: "COMPLETED",
  /** The check suite or run is in progress. */
  IN_PROGRESS: "IN_PROGRESS",
  /** The check suite or run is in pending state. */
  PENDING: "PENDING",
  /** The check suite or run has been queued. */
  QUEUED: "QUEUED",
  /** The check suite or run has been requested. */
  REQUESTED: "REQUESTED",
  /** The check suite or run is in waiting state. */
  WAITING: "WAITING",
} as const;

export type CheckStatusState =
  (typeof CheckStatusState)[keyof typeof CheckStatusState];
/** The auto-trigger preferences that are available for check suites. */
export interface CheckSuiteAutoTriggerPreference {
  /** The node ID of the application that owns the check suite. */
  appId: Scalars["ID"];
  /** Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository. */
  setting: Scalars["Boolean"];
}

/** The filters that are available when fetching check suites. */
export interface CheckSuiteFilter {
  /** Filters the check suites created by this application ID. */
  appId?: InputMaybe<Scalars["Int"]>;
  /** Filters the check suites by this name. */
  checkName?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of ClearLabelsFromLabelable */
export interface ClearLabelsFromLabelableInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The id of the labelable object to clear the labels from. */
  labelableId: Scalars["ID"];
}

/** Autogenerated input type of ClearProjectV2ItemFieldValue */
export interface ClearProjectV2ItemFieldValueInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the field to be cleared. */
  fieldId: Scalars["ID"];
  /** The ID of the item to be cleared. */
  itemId: Scalars["ID"];
  /** The ID of the Project. */
  projectId: Scalars["ID"];
}

/** Autogenerated input type of CloneProject */
export interface CloneProjectInput {
  /** The description of the project. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether or not to clone the source project's workflows. */
  includeWorkflows: Scalars["Boolean"];
  /** The name of the project. */
  name: Scalars["String"];
  /** The visibility of the project, defaults to false (private). */
  public?: InputMaybe<Scalars["Boolean"]>;
  /** The source project to clone. */
  sourceId: Scalars["ID"];
  /** The owner ID to create the project under. */
  targetOwnerId: Scalars["ID"];
}

/** Autogenerated input type of CloneTemplateRepository */
export interface CloneTemplateRepositoryInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** A short description of the new repository. */
  description?: InputMaybe<Scalars["String"]>;
  /** Whether to copy all branches from the template to the new repository. Defaults to copying only the default branch of the template. */
  includeAllBranches?: InputMaybe<Scalars["Boolean"]>;
  /** The name of the new repository. */
  name: Scalars["String"];
  /** The ID of the owner for the new repository. */
  ownerId: Scalars["ID"];
  /** The Node ID of the template repository. */
  repositoryId: Scalars["ID"];
  /** Indicates the repository's visibility level. */
  visibility: RepositoryVisibility;
}

/** Autogenerated input type of CloseDiscussion */
export interface CloseDiscussionInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the discussion to be closed. */
  discussionId: Scalars["ID"];
  /** The reason why the discussion is being closed. */
  reason?: InputMaybe<DiscussionCloseReason>;
}

/** Autogenerated input type of CloseIssue */
export interface CloseIssueInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the issue to be closed. */
  issueId: Scalars["ID"];
  /** The reason the issue is to be closed. */
  stateReason?: InputMaybe<IssueClosedStateReason>;
}

/** Autogenerated input type of ClosePullRequest */
export interface ClosePullRequestInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the pull request to be closed. */
  pullRequestId: Scalars["ID"];
}

/** Collaborators affiliation level with a subject. */
export const CollaboratorAffiliation = {
  /** All collaborators the authenticated user can see. */
  ALL: "ALL",
  /** All collaborators with permissions to an organization-owned subject, regardless of organization membership status. */
  DIRECT: "DIRECT",
  /** All outside collaborators of an organization-owned subject. */
  OUTSIDE: "OUTSIDE",
} as const;

export type CollaboratorAffiliation =
  (typeof CollaboratorAffiliation)[keyof typeof CollaboratorAffiliation];
/** A comment author association with repository. */
export const CommentAuthorAssociation = {
  /** Author has been invited to collaborate on the repository. */
  COLLABORATOR: "COLLABORATOR",
  /** Author has previously committed to the repository. */
  CONTRIBUTOR: "CONTRIBUTOR",
  /** Author has not previously committed to GitHub. */
  FIRST_TIMER: "FIRST_TIMER",
  /** Author has not previously committed to the repository. */
  FIRST_TIME_CONTRIBUTOR: "FIRST_TIME_CONTRIBUTOR",
  /** Author is a placeholder for an unclaimed user. */
  MANNEQUIN: "MANNEQUIN",
  /** Author is a member of the organization that owns the repository. */
  MEMBER: "MEMBER",
  /** Author has no association with the repository. */
  NONE: "NONE",
  /** Author is the owner of the repository. */
  OWNER: "OWNER",
} as const;

export type CommentAuthorAssociation =
  (typeof CommentAuthorAssociation)[keyof typeof CommentAuthorAssociation];
/** The possible errors that will prevent a user from updating a comment. */
export const CommentCannotUpdateReason = {
  /** Unable to create comment because repository is archived. */
  ARCHIVED: "ARCHIVED",
  /** You cannot update this comment */
  DENIED: "DENIED",
  /** You must be the author or have write access to this repository to update this comment. */
  INSUFFICIENT_ACCESS: "INSUFFICIENT_ACCESS",
  /** Unable to create comment because issue is locked. */
  LOCKED: "LOCKED",
  /** You must be logged in to update this comment. */
  LOGIN_REQUIRED: "LOGIN_REQUIRED",
  /** Repository is under maintenance. */
  MAINTENANCE: "MAINTENANCE",
  /** At least one email address must be verified to update this comment. */
  VERIFIED_EMAIL_REQUIRED: "VERIFIED_EMAIL_REQUIRED",
} as const;

export type CommentCannotUpdateReason =
  (typeof CommentCannotUpdateReason)[keyof typeof CommentCannotUpdateReason];
/** Specifies an author for filtering Git commits. */
export interface CommitAuthor {
  /** Email addresses to filter by. Commits authored by any of the specified email addresses will be returned. */
  emails?: InputMaybe<Array<Scalars["String"]>>;
  /** ID of a User to filter by. If non-null, only commits authored by this user will be returned. This field takes precedence over emails. */
  id?: InputMaybe<Scalars["ID"]>;
}

/** Parameters to be used for the commit_author_email_pattern rule */
export interface CommitAuthorEmailPatternParametersInput {
  /** How this rule will appear to users. */
  name?: InputMaybe<Scalars["String"]>;
  /** If true, the rule will fail if the pattern matches. */
  negate?: InputMaybe<Scalars["Boolean"]>;
  /** The operator to use for matching. */
  operator: Scalars["String"];
  /** The pattern to match with. */
  pattern: Scalars["String"];
}

/** Ordering options for commit contribution connections. */
export interface CommitContributionOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field by which to order commit contributions. */
  field: CommitContributionOrderField;
}

/** Properties by which commit contribution connections can be ordered. */
export const CommitContributionOrderField = {
  /** Order commit contributions by how many commits they represent. */
  COMMIT_COUNT: "COMMIT_COUNT",
  /** Order commit contributions by when they were made. */
  OCCURRED_AT: "OCCURRED_AT",
} as const;

export type CommitContributionOrderField =
  (typeof CommitContributionOrderField)[keyof typeof CommitContributionOrderField];
/** A message to include with a new commit */
export interface CommitMessage {
  /** The body of the message. */
  body?: InputMaybe<Scalars["String"]>;
  /** The headline of the message. */
  headline: Scalars["String"];
}

/** Parameters to be used for the commit_message_pattern rule */
export interface CommitMessagePatternParametersInput {
  /** How this rule will appear to users. */
  name?: InputMaybe<Scalars["String"]>;
  /** If true, the rule will fail if the pattern matches. */
  negate?: InputMaybe<Scalars["Boolean"]>;
  /** The operator to use for matching. */
  operator: Scalars["String"];
  /** The pattern to match with. */
  pattern: Scalars["String"];
}

/**
 * A git ref for a commit to be appended to.
 *
 * The ref must be a branch, i.e. its fully qualified name must start
 * with `refs/heads/` (although the input is not required to be fully
 * qualified).
 *
 * The Ref may be specified by its global node ID or by the
 * `repositoryNameWithOwner` and `branchName`.
 *
 * ### Examples
 *
 * Specify a branch using a global node ID:
 *
 *     { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }
 *
 * Specify a branch using `repositoryNameWithOwner` and `branchName`:
 *
 *     {
 *       "repositoryNameWithOwner": "github/graphql-client",
 *       "branchName": "main"
 *     }
 *
 *
 */
export interface CommittableBranch {
  /** The unqualified name of the branch to append the commit to. */
  branchName?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the Ref to be updated. */
  id?: InputMaybe<Scalars["ID"]>;
  /** The nameWithOwner of the repository to commit to. */
  repositoryNameWithOwner?: InputMaybe<Scalars["String"]>;
}

/** Parameters to be used for the committer_email_pattern rule */
export interface CommitterEmailPatternParametersInput {
  /** How this rule will appear to users. */
  name?: InputMaybe<Scalars["String"]>;
  /** If true, the rule will fail if the pattern matches. */
  negate?: InputMaybe<Scalars["Boolean"]>;
  /** The operator to use for matching. */
  operator: Scalars["String"];
  /** The pattern to match with. */
  pattern: Scalars["String"];
}

/** The status of a git comparison between two refs. */
export const ComparisonStatus = {
  /** The head ref is ahead of the base ref. */
  AHEAD: "AHEAD",
  /** The head ref is behind the base ref. */
  BEHIND: "BEHIND",
  /** The head ref is both ahead and behind of the base ref, indicating git history has diverged. */
  DIVERGED: "DIVERGED",
  /** The head ref and base ref are identical. */
  IDENTICAL: "IDENTICAL",
} as const;

export type ComparisonStatus =
  (typeof ComparisonStatus)[keyof typeof ComparisonStatus];
/** Varying levels of contributions from none to many. */
export const ContributionLevel = {
  /** Lowest 25% of days of contributions. */
  FIRST_QUARTILE: "FIRST_QUARTILE",
  /** Highest 25% of days of contributions. More contributions than the third quartile. */
  FOURTH_QUARTILE: "FOURTH_QUARTILE",
  /** No contributions occurred. */
  NONE: "NONE",
  /** Second lowest 25% of days of contributions. More contributions than the first quartile. */
  SECOND_QUARTILE: "SECOND_QUARTILE",
  /** Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile. */
  THIRD_QUARTILE: "THIRD_QUARTILE",
} as const;

export type ContributionLevel =
  (typeof ContributionLevel)[keyof typeof ContributionLevel];
/** Ordering options for contribution connections. */
export interface ContributionOrder {
  /** The ordering direction. */
  direction: OrderDirection;
}

/** Autogenerated input type of ConvertProjectCardNoteToIssue */
export interface ConvertProjectCardNoteToIssueInput {
  /** The body of the newly created issue. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ProjectCard ID to convert. */
  projectCardId: Scalars["ID"];
  /** The ID of the repository to create the issue in. */
  repositoryId: Scalars["ID"];
  /** The title of the newly created issue. Defaults to the card's note text. */
  title?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of ConvertPullRequestToDraft */
export interface ConvertPullRequestToDraftInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the pull request to convert to draft */
  pullRequestId: Scalars["ID"];
}

/** Autogenerated input type of CopyProjectV2 */
export interface CopyProjectV2Input {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Include draft issues in the new project */
  includeDraftIssues?: InputMaybe<Scalars["Boolean"]>;
  /** The owner ID of the new project. */
  ownerId: Scalars["ID"];
  /** The ID of the source Project to copy. */
  projectId: Scalars["ID"];
  /** The title of the project. */
  title: Scalars["String"];
}

/** Autogenerated input type of CreateAttributionInvitation */
export interface CreateAttributionInvitationInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the owner scoping the reattributable data. */
  ownerId: Scalars["ID"];
  /** The Node ID of the account owning the data to reattribute. */
  sourceId: Scalars["ID"];
  /** The Node ID of the account which may claim the data. */
  targetId: Scalars["ID"];
}

/** Autogenerated input type of CreateBranchProtectionRule */
export interface CreateBranchProtectionRuleInput {
  /** Can this branch be deleted. */
  allowsDeletions?: InputMaybe<Scalars["Boolean"]>;
  /** Are force pushes allowed on this branch. */
  allowsForcePushes?: InputMaybe<Scalars["Boolean"]>;
  /** Is branch creation a protected operation. */
  blocksCreations?: InputMaybe<Scalars["Boolean"]>;
  /** A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. */
  bypassForcePushActorIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. */
  bypassPullRequestActorIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  dismissesStaleReviews?: InputMaybe<Scalars["Boolean"]>;
  /** Can admins overwrite branch protection. */
  isAdminEnforced?: InputMaybe<Scalars["Boolean"]>;
  /** Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
  lockAllowsFetchAndMerge?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
  lockBranch?: InputMaybe<Scalars["Boolean"]>;
  /** The glob-like pattern used to determine matching branches. */
  pattern: Scalars["String"];
  /** A list of User, Team, or App IDs allowed to push to matching branches. */
  pushActorIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The global relay id of the repository in which a new branch protection rule should be created in. */
  repositoryId: Scalars["ID"];
  /** Whether the most recent push must be approved by someone other than the person who pushed it */
  requireLastPushApproval?: InputMaybe<Scalars["Boolean"]>;
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: InputMaybe<Scalars["Int"]>;
  /** The list of required deployment environments */
  requiredDeploymentEnvironments?: InputMaybe<Array<Scalars["String"]>>;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: InputMaybe<Array<Scalars["String"]>>;
  /** The list of required status checks */
  requiredStatusChecks?: InputMaybe<Array<RequiredStatusCheckInput>>;
  /** Are approving reviews required to update matching branches. */
  requiresApprovingReviews?: InputMaybe<Scalars["Boolean"]>;
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews?: InputMaybe<Scalars["Boolean"]>;
  /** Are commits required to be signed. */
  requiresCommitSignatures?: InputMaybe<Scalars["Boolean"]>;
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution?: InputMaybe<Scalars["Boolean"]>;
  /** Are successful deployments required before merging. */
  requiresDeployments?: InputMaybe<Scalars["Boolean"]>;
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory?: InputMaybe<Scalars["Boolean"]>;
  /** Are status checks required to update matching branches. */
  requiresStatusChecks?: InputMaybe<Scalars["Boolean"]>;
  /** Are branches required to be up to date before merging. */
  requiresStrictStatusChecks?: InputMaybe<Scalars["Boolean"]>;
  /** Is pushing to matching branches restricted. */
  restrictsPushes?: InputMaybe<Scalars["Boolean"]>;
  /** Is dismissal of pull request reviews restricted. */
  restrictsReviewDismissals?: InputMaybe<Scalars["Boolean"]>;
  /** A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. */
  reviewDismissalActorIds?: InputMaybe<Array<Scalars["ID"]>>;
}

/** Autogenerated input type of CreateCheckRun */
export interface CreateCheckRunInput {
  /** Possible further actions the integrator can perform, which a user may trigger. */
  actions?: InputMaybe<Array<CheckRunAction>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The time that the check run finished. */
  completedAt?: InputMaybe<Scalars["DateTime"]>;
  /** The final conclusion of the check. */
  conclusion?: InputMaybe<CheckConclusionState>;
  /** The URL of the integrator's site that has the full details of the check. */
  detailsUrl?: InputMaybe<Scalars["URI"]>;
  /** A reference for the run on the integrator's system. */
  externalId?: InputMaybe<Scalars["String"]>;
  /** The SHA of the head commit. */
  headSha: Scalars["GitObjectID"];
  /** The name of the check. */
  name: Scalars["String"];
  /** Descriptive details about the run. */
  output?: InputMaybe<CheckRunOutput>;
  /** The node ID of the repository. */
  repositoryId: Scalars["ID"];
  /** The time that the check run began. */
  startedAt?: InputMaybe<Scalars["DateTime"]>;
  /** The current status. */
  status?: InputMaybe<RequestableCheckStatusState>;
}

/** Autogenerated input type of CreateCheckSuite */
export interface CreateCheckSuiteInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The SHA of the head commit. */
  headSha: Scalars["GitObjectID"];
  /** The Node ID of the repository. */
  repositoryId: Scalars["ID"];
}

/** Autogenerated input type of CreateCommitOnBranch */
export interface CreateCommitOnBranchInput {
  /** The Ref to be updated.  Must be a branch. */
  branch: CommittableBranch;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The git commit oid expected at the head of the branch prior to the commit */
  expectedHeadOid: Scalars["GitObjectID"];
  /** A description of changes to files in this commit. */
  fileChanges?: InputMaybe<FileChanges>;
  /** The commit message the be included with the commit. */
  message: CommitMessage;
}

/** Autogenerated input type of CreateDiscussion */
export interface CreateDiscussionInput {
  /** The body of the discussion. */
  body: Scalars["String"];
  /** The id of the discussion category to associate with this discussion. */
  categoryId: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The id of the repository on which to create the discussion. */
  repositoryId: Scalars["ID"];
  /** The title of the discussion. */
  title: Scalars["String"];
}

/** Autogenerated input type of CreateEnterpriseOrganization */
export interface CreateEnterpriseOrganizationInput {
  /** The logins for the administrators of the new organization. */
  adminLogins: Array<Scalars["String"]>;
  /** The email used for sending billing receipts. */
  billingEmail: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise owning the new organization. */
  enterpriseId: Scalars["ID"];
  /** The login of the new organization. */
  login: Scalars["String"];
  /** The profile name of the new organization. */
  profileName: Scalars["String"];
}

/** Autogenerated input type of CreateEnvironment */
export interface CreateEnvironmentInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of the environment. */
  name: Scalars["String"];
  /** The node ID of the repository. */
  repositoryId: Scalars["ID"];
}

/** Autogenerated input type of CreateIpAllowListEntry */
export interface CreateIpAllowListEntryInput {
  /** An IP address or range of addresses in CIDR notation. */
  allowListValue: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether the IP allow list entry is active when an IP allow list is enabled. */
  isActive: Scalars["Boolean"];
  /** An optional name for the IP allow list entry. */
  name?: InputMaybe<Scalars["String"]>;
  /** The ID of the owner for which to create the new IP allow list entry. */
  ownerId: Scalars["ID"];
}

/** Autogenerated input type of CreateIssue */
export interface CreateIssueInput {
  /** The Node ID for the user assignee for this issue. */
  assigneeIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The body for the issue description. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of an issue template in the repository, assigns labels and assignees from the template to the issue */
  issueTemplate?: InputMaybe<Scalars["String"]>;
  /** An array of Node IDs of labels for this issue. */
  labelIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The Node ID of the milestone for this issue. */
  milestoneId?: InputMaybe<Scalars["ID"]>;
  /** An array of Node IDs for projects associated with this issue. */
  projectIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The Node ID of the repository. */
  repositoryId: Scalars["ID"];
  /** The title for the issue. */
  title: Scalars["String"];
}

/** Autogenerated input type of CreateLinkedBranch */
export interface CreateLinkedBranchInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the issue to link to. */
  issueId: Scalars["ID"];
  /** The name of the new branch. Defaults to issue number and title. */
  name?: InputMaybe<Scalars["String"]>;
  /** The commit SHA to base the new branch on. */
  oid: Scalars["GitObjectID"];
  /** ID of the repository to create the branch in. Defaults to the issue repository. */
  repositoryId?: InputMaybe<Scalars["ID"]>;
}

/** Autogenerated input type of CreateMigrationSource */
export interface CreateMigrationSourceInput {
  /** The migration source access token. */
  accessToken?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The GitHub personal access token of the user importing to the target repository. */
  githubPat?: InputMaybe<Scalars["String"]>;
  /** The migration source name. */
  name: Scalars["String"];
  /** The ID of the organization that will own the migration source. */
  ownerId: Scalars["ID"];
  /** The migration source type. */
  type: MigrationSourceType;
  /** The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. */
  url?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of CreateProject */
export interface CreateProjectInput {
  /** The description of project. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of project. */
  name: Scalars["String"];
  /** The owner ID to create the project under. */
  ownerId: Scalars["ID"];
  /** A list of repository IDs to create as linked repositories for the project */
  repositoryIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The name of the GitHub-provided template. */
  template?: InputMaybe<ProjectTemplate>;
}

/** Autogenerated input type of CreateProjectV2Field */
export interface CreateProjectV2FieldInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The data type of the field. */
  dataType: ProjectV2CustomFieldType;
  /** The name of the field. */
  name: Scalars["String"];
  /** The ID of the Project to create the field in. */
  projectId: Scalars["ID"];
  /** Options for a single select field. At least one value is required if data_type is SINGLE_SELECT */
  singleSelectOptions?: InputMaybe<
    Array<ProjectV2SingleSelectFieldOptionInput>
  >;
}

/** Autogenerated input type of CreateProjectV2 */
export interface CreateProjectV2Input {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The owner ID to create the project under. */
  ownerId: Scalars["ID"];
  /** The repository to link the project to. */
  repositoryId?: InputMaybe<Scalars["ID"]>;
  /** The team to link the project to. The team will be granted read permissions. */
  teamId?: InputMaybe<Scalars["ID"]>;
  /** The title of the project. */
  title: Scalars["String"];
}

/** Autogenerated input type of CreatePullRequest */
export interface CreatePullRequestInput {
  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository. You cannot update the base branch on a pull request to point
   * to another repository.
   *
   */
  baseRefName: Scalars["String"];
  /** The contents of the pull request. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Indicates whether this pull request should be a draft. */
  draft?: InputMaybe<Scalars["Boolean"]>;
  /**
   * The name of the branch where your changes are implemented. For cross-repository pull requests
   * in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
   *
   */
  headRefName: Scalars["String"];
  /** The Node ID of the head repository. */
  headRepositoryId?: InputMaybe<Scalars["ID"]>;
  /** Indicates whether maintainers can modify the pull request. */
  maintainerCanModify?: InputMaybe<Scalars["Boolean"]>;
  /** The Node ID of the repository. */
  repositoryId: Scalars["ID"];
  /** The title of the pull request. */
  title: Scalars["String"];
}

/** Autogenerated input type of CreateRef */
export interface CreateRefInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`). */
  name: Scalars["String"];
  /** The GitObjectID that the new Ref shall target. Must point to a commit. */
  oid: Scalars["GitObjectID"];
  /** The Node ID of the Repository to create the Ref in. */
  repositoryId: Scalars["ID"];
}

/** Autogenerated input type of CreateRepository */
export interface CreateRepositoryInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** A short description of the new repository. */
  description?: InputMaybe<Scalars["String"]>;
  /** Indicates if the repository should have the issues feature enabled. */
  hasIssuesEnabled?: InputMaybe<Scalars["Boolean"]>;
  /** Indicates if the repository should have the wiki feature enabled. */
  hasWikiEnabled?: InputMaybe<Scalars["Boolean"]>;
  /** The URL for a web page about this repository. */
  homepageUrl?: InputMaybe<Scalars["URI"]>;
  /** The name of the new repository. */
  name: Scalars["String"];
  /** The ID of the owner for the new repository. */
  ownerId?: InputMaybe<Scalars["ID"]>;
  /** When an organization is specified as the owner, this ID identifies the team that should be granted access to the new repository. */
  teamId?: InputMaybe<Scalars["ID"]>;
  /** Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure. */
  template?: InputMaybe<Scalars["Boolean"]>;
  /** Indicates the repository's visibility level. */
  visibility: RepositoryVisibility;
}

/** Autogenerated input type of CreateRepositoryRuleset */
export interface CreateRepositoryRulesetInput {
  /** A list of actors that are allowed to bypass rules in this ruleset. */
  bypassActors?: InputMaybe<Array<RepositoryRulesetBypassActorInput>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The set of conditions for this ruleset */
  conditions: RepositoryRuleConditionsInput;
  /** The enforcement level for this ruleset */
  enforcement: RuleEnforcement;
  /** The name of the ruleset. */
  name: Scalars["String"];
  /** The list of rules for this ruleset */
  rules?: InputMaybe<Array<RepositoryRuleInput>>;
  /** The global relay id of the source in which a new ruleset should be created in. */
  sourceId: Scalars["ID"];
  /** The target of the ruleset. */
  target?: InputMaybe<RepositoryRulesetTarget>;
}

/** Autogenerated input type of CreateSavedNotificationThread */
export interface CreateSavedNotificationThreadInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The notification thread's id. */
  id: Scalars["ID"];
}

/** Autogenerated input type of CreateSponsorsListing */
export interface CreateSponsorsListingInput {
  /** The country or region where the sponsorable's bank account is located. Required if fiscalHostLogin is not specified, ignored when fiscalHostLogin is specified. */
  billingCountryOrRegionCode?: InputMaybe<SponsorsCountryOrRegionCode>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The email address we should use to contact you about the GitHub Sponsors profile being created. This will not be shared publicly. Must be a verified email address already on your GitHub account. Only relevant when the sponsorable is yourself. Defaults to your primary email address on file if omitted. */
  contactEmail?: InputMaybe<Scalars["String"]>;
  /** The username of the supported fiscal host's GitHub organization, if you want to receive sponsorship payouts through a fiscal host rather than directly to a bank account. For example, 'Open-Source-Collective' for Open Source Collective or 'numfocus' for numFOCUS. Case insensitive. See https://docs.github.com/sponsors/receiving-sponsorships-through-github-sponsors/using-a-fiscal-host-to-receive-github-sponsors-payouts for more information. */
  fiscalHostLogin?: InputMaybe<Scalars["String"]>;
  /** The URL for your profile page on the fiscal host's website, e.g., https://opencollective.com/babel or https://numfocus.org/project/bokeh. Required if fiscalHostLogin is specified. */
  fiscallyHostedProjectProfileUrl?: InputMaybe<Scalars["String"]>;
  /** Provide an introduction to serve as the main focus that appears on your GitHub Sponsors profile. It's a great opportunity to help potential sponsors learn more about you, your work, and why their sponsorship is important to you. GitHub-flavored Markdown is supported. */
  fullDescription?: InputMaybe<Scalars["String"]>;
  /** The country or region where the sponsorable resides. This is for tax purposes. Required if the sponsorable is yourself, ignored when sponsorableLogin specifies an organization. */
  residenceCountryOrRegionCode?: InputMaybe<SponsorsCountryOrRegionCode>;
  /** The username of the organization to create a GitHub Sponsors profile for, if desired. Defaults to creating a GitHub Sponsors profile for the authenticated user if omitted. */
  sponsorableLogin?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of CreateSponsorsTier */
export interface CreateSponsorsTierInput {
  /** The value of the new tier in US dollars. Valid values: 1-12000. */
  amount: Scalars["Int"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc. */
  description: Scalars["String"];
  /** Whether sponsorships using this tier should happen monthly/yearly or just once. */
  isRecurring?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to make the tier available immediately for sponsors to choose. Defaults to creating a draft tier that will not be publicly visible. */
  publish?: InputMaybe<Scalars["Boolean"]>;
  /** Optional ID of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization. */
  repositoryId?: InputMaybe<Scalars["ID"]>;
  /** Optional name of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization. Necessary if repositoryOwnerLogin is given. Will be ignored if repositoryId is given. */
  repositoryName?: InputMaybe<Scalars["String"]>;
  /** Optional login of the organization owner of the private repository that sponsors at this tier should gain read-only access to. Necessary if repositoryName is given. Will be ignored if repositoryId is given. */
  repositoryOwnerLogin?: InputMaybe<Scalars["String"]>;
  /** The ID of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableLogin is not given. */
  sponsorableId?: InputMaybe<Scalars["ID"]>;
  /** The username of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableId is not given. */
  sponsorableLogin?: InputMaybe<Scalars["String"]>;
  /** Optional message new sponsors at this tier will receive. */
  welcomeMessage?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of CreateSponsorship */
export interface CreateSponsorshipInput {
  /** The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000. */
  amount?: InputMaybe<Scalars["Int"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified. */
  isRecurring?: InputMaybe<Scalars["Boolean"]>;
  /** Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used. */
  privacyLevel?: InputMaybe<SponsorshipPrivacy>;
  /** Whether the sponsor should receive email updates from the sponsorable. */
  receiveEmails?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */
  sponsorId?: InputMaybe<Scalars["ID"]>;
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */
  sponsorLogin?: InputMaybe<Scalars["String"]>;
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: InputMaybe<Scalars["ID"]>;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: InputMaybe<Scalars["String"]>;
  /** The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified. */
  tierId?: InputMaybe<Scalars["ID"]>;
}

/** Autogenerated input type of CreateSponsorships */
export interface CreateSponsorshipsInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Specify whether others should be able to see that the sponsor is sponsoring the sponsorables. Public visibility still does not reveal the dollar value of the sponsorship. */
  privacyLevel?: InputMaybe<SponsorshipPrivacy>;
  /** Whether the sponsor should receive email updates from the sponsorables. */
  receiveEmails?: InputMaybe<Scalars["Boolean"]>;
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorships. */
  sponsorLogin: Scalars["String"];
  /** The list of maintainers to sponsor and for how much apiece. */
  sponsorships: Array<BulkSponsorship>;
}

/** Autogenerated input type of CreateTeamDiscussionComment */
export interface CreateTeamDiscussionCommentInput {
  /**
   * The content of the comment. This field is required.
   *
   * **Upcoming Change on 2024-07-01 UTC**
   * **Description:** `body` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
   *
   */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /**
   * The ID of the discussion to which the comment belongs. This field is required.
   *
   * **Upcoming Change on 2024-07-01 UTC**
   * **Description:** `discussionId` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
   *
   */
  discussionId?: InputMaybe<Scalars["ID"]>;
}

/** Autogenerated input type of CreateTeamDiscussion */
export interface CreateTeamDiscussionInput {
  /**
   * The content of the discussion. This field is required.
   *
   * **Upcoming Change on 2024-07-01 UTC**
   * **Description:** `body` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
   *
   */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /**
   * If true, restricts the visibility of this discussion to team members and organization admins. If false or not specified, allows any organization member to view this discussion.
   *
   * **Upcoming Change on 2024-07-01 UTC**
   * **Description:** `private` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
   *
   */
  private?: InputMaybe<Scalars["Boolean"]>;
  /**
   * The ID of the team to which the discussion belongs. This field is required.
   *
   * **Upcoming Change on 2024-07-01 UTC**
   * **Description:** `teamId` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
   *
   */
  teamId?: InputMaybe<Scalars["ID"]>;
  /**
   * The title of the discussion. This field is required.
   *
   * **Upcoming Change on 2024-07-01 UTC**
   * **Description:** `title` will be removed. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement.
   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.
   *
   */
  title?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of DeclineTopicSuggestion */
export interface DeclineTopicSuggestionInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of the suggested topic. */
  name: Scalars["String"];
  /** The reason why the suggested topic is declined. */
  reason: TopicSuggestionDeclineReason;
  /** The Node ID of the repository. */
  repositoryId: Scalars["ID"];
}

/** The possible base permissions for repositories. */
export const DefaultRepositoryPermissionField = {
  /** Can read, write, and administrate repos by default */
  ADMIN: "ADMIN",
  /** No access */
  NONE: "NONE",
  /** Can read repos by default */
  READ: "READ",
  /** Can read and write repos by default */
  WRITE: "WRITE",
} as const;

export type DefaultRepositoryPermissionField =
  (typeof DefaultRepositoryPermissionField)[keyof typeof DefaultRepositoryPermissionField];
/** Autogenerated input type of DeleteBranchProtectionRule */
export interface DeleteBranchProtectionRuleInput {
  /** The global relay id of the branch protection rule to be deleted. */
  branchProtectionRuleId: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of DeleteDeployment */
export interface DeleteDeploymentInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the deployment to be deleted. */
  id: Scalars["ID"];
}

/** Autogenerated input type of DeleteDiscussionComment */
export interface DeleteDiscussionCommentInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node id of the discussion comment to delete. */
  id: Scalars["ID"];
}

/** Autogenerated input type of DeleteDiscussion */
export interface DeleteDiscussionInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The id of the discussion to delete. */
  id: Scalars["ID"];
}

/** Autogenerated input type of DeleteEnvironment */
export interface DeleteEnvironmentInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the environment to be deleted. */
  id: Scalars["ID"];
}

/** Autogenerated input type of DeleteIpAllowListEntry */
export interface DeleteIpAllowListEntryInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the IP allow list entry to delete. */
  ipAllowListEntryId: Scalars["ID"];
}

/** Autogenerated input type of DeleteIssueComment */
export interface DeleteIssueCommentInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the comment to delete. */
  id: Scalars["ID"];
}

/** Autogenerated input type of DeleteIssue */
export interface DeleteIssueInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the issue to delete. */
  issueId: Scalars["ID"];
}

/** Autogenerated input type of DeleteLinkedBranch */
export interface DeleteLinkedBranchInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the linked branch */
  linkedBranchId: Scalars["ID"];
}

/** Autogenerated input type of DeleteProjectCard */
export interface DeleteProjectCardInput {
  /** The id of the card to delete. */
  cardId: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of DeleteProjectColumn */
export interface DeleteProjectColumnInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The id of the column to delete. */
  columnId: Scalars["ID"];
}

/** Autogenerated input type of DeleteProject */
export interface DeleteProjectInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Project ID to update. */
  projectId: Scalars["ID"];
}

/** Autogenerated input type of DeleteProjectV2Field */
export interface DeleteProjectV2FieldInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the field to delete. */
  fieldId: Scalars["ID"];
}

/** Autogenerated input type of DeleteProjectV2 */
export interface DeleteProjectV2Input {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the Project to delete. */
  projectId: Scalars["ID"];
}

/** Autogenerated input type of DeleteProjectV2Item */
export interface DeleteProjectV2ItemInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the item to be removed. */
  itemId: Scalars["ID"];
  /** The ID of the Project from which the item should be removed. */
  projectId: Scalars["ID"];
}

/** Autogenerated input type of DeleteProjectV2Workflow */
export interface DeleteProjectV2WorkflowInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the workflow to be removed. */
  workflowId: Scalars["ID"];
}

/** Autogenerated input type of DeletePullRequestReviewComment */
export interface DeletePullRequestReviewCommentInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the comment to delete. */
  id: Scalars["ID"];
}

/** Autogenerated input type of DeletePullRequestReview */
export interface DeletePullRequestReviewInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the pull request review to delete. */
  pullRequestReviewId: Scalars["ID"];
}

/** Autogenerated input type of DeleteRef */
export interface DeleteRefInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the Ref to be deleted. */
  refId: Scalars["ID"];
}

/** Autogenerated input type of DeleteRepositoryRuleset */
export interface DeleteRepositoryRulesetInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The global relay id of the repository ruleset to be deleted. */
  repositoryRulesetId: Scalars["ID"];
}

/** Autogenerated input type of DeleteSavedNotificationThread */
export interface DeleteSavedNotificationThreadInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The saved notification thread's id. */
  id: Scalars["ID"];
}

/** Autogenerated input type of DeleteTeamDiscussionComment */
export interface DeleteTeamDiscussionCommentInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the comment to delete. */
  id: Scalars["ID"];
}

/** Autogenerated input type of DeleteTeamDiscussion */
export interface DeleteTeamDiscussionInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The discussion ID to delete. */
  id: Scalars["ID"];
}

/** Autogenerated input type of DeleteVerifiableDomain */
export interface DeleteVerifiableDomainInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the verifiable domain to delete. */
  id: Scalars["ID"];
}

/** The possible ecosystems of a dependency graph package. */
export const DependencyGraphEcosystem = {
  /** GitHub Actions */
  ACTIONS: "ACTIONS",
  /** PHP packages hosted at packagist.org */
  COMPOSER: "COMPOSER",
  /** Go modules */
  GO: "GO",
  /** Java artifacts hosted at the Maven central repository */
  MAVEN: "MAVEN",
  /** JavaScript packages hosted at npmjs.com */
  NPM: "NPM",
  /** .NET packages hosted at the NuGet Gallery */
  NUGET: "NUGET",
  /** Python packages hosted at PyPI.org */
  PIP: "PIP",
  /** Dart packages hosted at pub.dev */
  PUB: "PUB",
  /** Ruby gems hosted at RubyGems.org */
  RUBYGEMS: "RUBYGEMS",
  /** Rust crates */
  RUST: "RUST",
  /** Swift packages */
  SWIFT: "SWIFT",
} as const;

export type DependencyGraphEcosystem =
  (typeof DependencyGraphEcosystem)[keyof typeof DependencyGraphEcosystem];
/** Ordering options for deployment connections */
export interface DeploymentOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order deployments by. */
  field: DeploymentOrderField;
}

/** Properties by which deployment connections can be ordered. */
export const DeploymentOrderField = {
  /** Order collection by creation time */
  CREATED_AT: "CREATED_AT",
} as const;

export type DeploymentOrderField =
  (typeof DeploymentOrderField)[keyof typeof DeploymentOrderField];
/** The possible protection rule types. */
export const DeploymentProtectionRuleType = {
  /** Required reviewers */
  REQUIRED_REVIEWERS: "REQUIRED_REVIEWERS",
  /** Wait timer */
  WAIT_TIMER: "WAIT_TIMER",
} as const;

export type DeploymentProtectionRuleType =
  (typeof DeploymentProtectionRuleType)[keyof typeof DeploymentProtectionRuleType];
/** The possible states for a deployment review. */
export const DeploymentReviewState = {
  /** The deployment was approved. */
  APPROVED: "APPROVED",
  /** The deployment was rejected. */
  REJECTED: "REJECTED",
} as const;

export type DeploymentReviewState =
  (typeof DeploymentReviewState)[keyof typeof DeploymentReviewState];
/** The possible states in which a deployment can be. */
export const DeploymentState = {
  /** The pending deployment was not updated after 30 minutes. */
  ABANDONED: "ABANDONED",
  /** The deployment is currently active. */
  ACTIVE: "ACTIVE",
  /** An inactive transient deployment. */
  DESTROYED: "DESTROYED",
  /** The deployment experienced an error. */
  ERROR: "ERROR",
  /** The deployment has failed. */
  FAILURE: "FAILURE",
  /** The deployment is inactive. */
  INACTIVE: "INACTIVE",
  /** The deployment is in progress. */
  IN_PROGRESS: "IN_PROGRESS",
  /** The deployment is pending. */
  PENDING: "PENDING",
  /** The deployment has queued */
  QUEUED: "QUEUED",
  /** The deployment was successful. */
  SUCCESS: "SUCCESS",
  /** The deployment is waiting. */
  WAITING: "WAITING",
} as const;

export type DeploymentState =
  (typeof DeploymentState)[keyof typeof DeploymentState];
/** The possible states for a deployment status. */
export const DeploymentStatusState = {
  /** The deployment experienced an error. */
  ERROR: "ERROR",
  /** The deployment has failed. */
  FAILURE: "FAILURE",
  /** The deployment is inactive. */
  INACTIVE: "INACTIVE",
  /** The deployment is in progress. */
  IN_PROGRESS: "IN_PROGRESS",
  /** The deployment is pending. */
  PENDING: "PENDING",
  /** The deployment is queued */
  QUEUED: "QUEUED",
  /** The deployment was successful. */
  SUCCESS: "SUCCESS",
  /** The deployment is waiting. */
  WAITING: "WAITING",
} as const;

export type DeploymentStatusState =
  (typeof DeploymentStatusState)[keyof typeof DeploymentStatusState];
/** Autogenerated input type of DequeuePullRequest */
export interface DequeuePullRequestInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the pull request to be dequeued. */
  id: Scalars["ID"];
}

/** The possible sides of a diff. */
export const DiffSide = {
  /** The left side of the diff. */
  LEFT: "LEFT",
  /** The right side of the diff. */
  RIGHT: "RIGHT",
} as const;

export type DiffSide = (typeof DiffSide)[keyof typeof DiffSide];
/** Autogenerated input type of DisablePullRequestAutoMerge */
export interface DisablePullRequestAutoMergeInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the pull request to disable auto merge on. */
  pullRequestId: Scalars["ID"];
}

/** The possible reasons for closing a discussion. */
export const DiscussionCloseReason = {
  /** The discussion is a duplicate of another */
  DUPLICATE: "DUPLICATE",
  /** The discussion is no longer relevant */
  OUTDATED: "OUTDATED",
  /** The discussion has been resolved */
  RESOLVED: "RESOLVED",
} as const;

export type DiscussionCloseReason =
  (typeof DiscussionCloseReason)[keyof typeof DiscussionCloseReason];
/** Ways in which lists of discussions can be ordered upon return. */
export interface DiscussionOrder {
  /** The direction in which to order discussions by the specified field. */
  direction: OrderDirection;
  /** The field by which to order discussions. */
  field: DiscussionOrderField;
}

/** Properties by which discussion connections can be ordered. */
export const DiscussionOrderField = {
  /** Order discussions by creation time. */
  CREATED_AT: "CREATED_AT",
  /** Order discussions by most recent modification time. */
  UPDATED_AT: "UPDATED_AT",
} as const;

export type DiscussionOrderField =
  (typeof DiscussionOrderField)[keyof typeof DiscussionOrderField];
/** Ordering options for discussion poll option connections. */
export interface DiscussionPollOptionOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order poll options by. */
  field: DiscussionPollOptionOrderField;
}

/** Properties by which discussion poll option connections can be ordered. */
export const DiscussionPollOptionOrderField = {
  /** Order poll options by the order that the poll author specified when creating the poll. */
  AUTHORED_ORDER: "AUTHORED_ORDER",
  /** Order poll options by the number of votes it has. */
  VOTE_COUNT: "VOTE_COUNT",
} as const;

export type DiscussionPollOptionOrderField =
  (typeof DiscussionPollOptionOrderField)[keyof typeof DiscussionPollOptionOrderField];
/** The possible states of a discussion. */
export const DiscussionState = {
  /** A discussion that has been closed */
  CLOSED: "CLOSED",
  /** A discussion that is open */
  OPEN: "OPEN",
} as const;

export type DiscussionState =
  (typeof DiscussionState)[keyof typeof DiscussionState];
/** The possible state reasons of a discussion. */
export const DiscussionStateReason = {
  /** The discussion is a duplicate of another */
  DUPLICATE: "DUPLICATE",
  /** The discussion is no longer relevant */
  OUTDATED: "OUTDATED",
  /** The discussion was reopened */
  REOPENED: "REOPENED",
  /** The discussion has been resolved */
  RESOLVED: "RESOLVED",
} as const;

export type DiscussionStateReason =
  (typeof DiscussionStateReason)[keyof typeof DiscussionStateReason];
/** Autogenerated input type of DismissPullRequestReview */
export interface DismissPullRequestReviewInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The contents of the pull request review dismissal message. */
  message: Scalars["String"];
  /** The Node ID of the pull request review to modify. */
  pullRequestReviewId: Scalars["ID"];
}

/** The possible reasons that a Dependabot alert was dismissed. */
export const DismissReason = {
  /** A fix has already been started */
  FIX_STARTED: "FIX_STARTED",
  /** This alert is inaccurate or incorrect */
  INACCURATE: "INACCURATE",
  /** Vulnerable code is not actually used */
  NOT_USED: "NOT_USED",
  /** No bandwidth to fix this */
  NO_BANDWIDTH: "NO_BANDWIDTH",
  /** Risk is tolerable to this project */
  TOLERABLE_RISK: "TOLERABLE_RISK",
} as const;

export type DismissReason = (typeof DismissReason)[keyof typeof DismissReason];
/** Autogenerated input type of DismissRepositoryVulnerabilityAlert */
export interface DismissRepositoryVulnerabilityAlertInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The reason the Dependabot alert is being dismissed. */
  dismissReason: DismissReason;
  /** The Dependabot alert ID to dismiss. */
  repositoryVulnerabilityAlertId: Scalars["ID"];
}

/** Specifies a review comment to be left with a Pull Request Review. */
export interface DraftPullRequestReviewComment {
  /** Body of the comment to leave. */
  body: Scalars["String"];
  /** Path to the file being commented on. */
  path: Scalars["String"];
  /** Position in the file to leave a comment on. */
  position: Scalars["Int"];
}

/** Specifies a review comment thread to be left with a Pull Request Review. */
export interface DraftPullRequestReviewThread {
  /** Body of the comment to leave. */
  body: Scalars["String"];
  /** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
  line: Scalars["Int"];
  /** Path to the file being commented on. */
  path: Scalars["String"];
  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
  side?: InputMaybe<DiffSide>;
  /** The first line of the range to which the comment refers. */
  startLine?: InputMaybe<Scalars["Int"]>;
  /** The side of the diff on which the start line resides. */
  startSide?: InputMaybe<DiffSide>;
}

/** Autogenerated input type of EnablePullRequestAutoMerge */
export interface EnablePullRequestAutoMergeInput {
  /** The email address to associate with this merge. */
  authorEmail?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Commit body to use for the commit when the PR is mergable; if omitted, a default message will be used. NOTE: when merging with a merge queue any input value for commit message is ignored. */
  commitBody?: InputMaybe<Scalars["String"]>;
  /** Commit headline to use for the commit when the PR is mergable; if omitted, a default message will be used. NOTE: when merging with a merge queue any input value for commit headline is ignored. */
  commitHeadline?: InputMaybe<Scalars["String"]>;
  /** The expected head OID of the pull request. */
  expectedHeadOid?: InputMaybe<Scalars["GitObjectID"]>;
  /** The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging with a merge queue any input value for merge method is ignored. */
  mergeMethod?: InputMaybe<PullRequestMergeMethod>;
  /** ID of the pull request to enable auto-merge on. */
  pullRequestId: Scalars["ID"];
}

/** Autogenerated input type of EnqueuePullRequest */
export interface EnqueuePullRequestInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The expected head OID of the pull request. */
  expectedHeadOid?: InputMaybe<Scalars["GitObjectID"]>;
  /** Add the pull request to the front of the queue. */
  jump?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the pull request to enqueue. */
  pullRequestId: Scalars["ID"];
}

/** Ordering options for enterprise administrator invitation connections */
export interface EnterpriseAdministratorInvitationOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order enterprise administrator invitations by. */
  field: EnterpriseAdministratorInvitationOrderField;
}

/** Properties by which enterprise administrator invitation connections can be ordered. */
export const EnterpriseAdministratorInvitationOrderField = {
  /** Order enterprise administrator member invitations by creation time */
  CREATED_AT: "CREATED_AT",
} as const;

export type EnterpriseAdministratorInvitationOrderField =
  (typeof EnterpriseAdministratorInvitationOrderField)[keyof typeof EnterpriseAdministratorInvitationOrderField];
/** The possible administrator roles in an enterprise account. */
export const EnterpriseAdministratorRole = {
  /** Represents a billing manager of the enterprise account. */
  BILLING_MANAGER: "BILLING_MANAGER",
  /** Represents an owner of the enterprise account. */
  OWNER: "OWNER",
} as const;

export type EnterpriseAdministratorRole =
  (typeof EnterpriseAdministratorRole)[keyof typeof EnterpriseAdministratorRole];
/** The possible values for the enterprise allow private repository forking policy value. */
export const EnterpriseAllowPrivateRepositoryForkingPolicyValue = {
  /** Members can fork a repository to an organization within this enterprise. */
  ENTERPRISE_ORGANIZATIONS: "ENTERPRISE_ORGANIZATIONS",
  /** Members can fork a repository to their enterprise-managed user account or an organization inside this enterprise. */
  ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS:
    "ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS",
  /** Members can fork a repository to their user account or an organization, either inside or outside of this enterprise. */
  EVERYWHERE: "EVERYWHERE",
  /** Members can fork a repository only within the same organization (intra-org). */
  SAME_ORGANIZATION: "SAME_ORGANIZATION",
  /** Members can fork a repository to their user account or within the same organization. */
  SAME_ORGANIZATION_USER_ACCOUNTS: "SAME_ORGANIZATION_USER_ACCOUNTS",
  /** Members can fork a repository to their user account. */
  USER_ACCOUNTS: "USER_ACCOUNTS",
} as const;

export type EnterpriseAllowPrivateRepositoryForkingPolicyValue =
  (typeof EnterpriseAllowPrivateRepositoryForkingPolicyValue)[keyof typeof EnterpriseAllowPrivateRepositoryForkingPolicyValue];
/** The possible values for the enterprise base repository permission setting. */
export const EnterpriseDefaultRepositoryPermissionSettingValue = {
  /** Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories. */
  ADMIN: "ADMIN",
  /** Organization members will only be able to clone and pull public repositories. */
  NONE: "NONE",
  /** Organizations in the enterprise choose base repository permissions for their members. */
  NO_POLICY: "NO_POLICY",
  /** Organization members will be able to clone and pull all organization repositories. */
  READ: "READ",
  /** Organization members will be able to clone, pull, and push all organization repositories. */
  WRITE: "WRITE",
} as const;

export type EnterpriseDefaultRepositoryPermissionSettingValue =
  (typeof EnterpriseDefaultRepositoryPermissionSettingValue)[keyof typeof EnterpriseDefaultRepositoryPermissionSettingValue];
/** The possible values for an enabled/disabled enterprise setting. */
export const EnterpriseEnabledDisabledSettingValue = {
  /** The setting is disabled for organizations in the enterprise. */
  DISABLED: "DISABLED",
  /** The setting is enabled for organizations in the enterprise. */
  ENABLED: "ENABLED",
  /** There is no policy set for organizations in the enterprise. */
  NO_POLICY: "NO_POLICY",
} as const;

export type EnterpriseEnabledDisabledSettingValue =
  (typeof EnterpriseEnabledDisabledSettingValue)[keyof typeof EnterpriseEnabledDisabledSettingValue];
/** The possible values for an enabled/no policy enterprise setting. */
export const EnterpriseEnabledSettingValue = {
  /** The setting is enabled for organizations in the enterprise. */
  ENABLED: "ENABLED",
  /** There is no policy set for organizations in the enterprise. */
  NO_POLICY: "NO_POLICY",
} as const;

export type EnterpriseEnabledSettingValue =
  (typeof EnterpriseEnabledSettingValue)[keyof typeof EnterpriseEnabledSettingValue];
/** Ordering options for enterprise member connections. */
export interface EnterpriseMemberOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order enterprise members by. */
  field: EnterpriseMemberOrderField;
}

/** Properties by which enterprise member connections can be ordered. */
export const EnterpriseMemberOrderField = {
  /** Order enterprise members by creation time */
  CREATED_AT: "CREATED_AT",
  /** Order enterprise members by login */
  LOGIN: "LOGIN",
} as const;

export type EnterpriseMemberOrderField =
  (typeof EnterpriseMemberOrderField)[keyof typeof EnterpriseMemberOrderField];
/** The possible values for the enterprise members can create repositories setting. */
export const EnterpriseMembersCanCreateRepositoriesSettingValue = {
  /** Members will be able to create public and private repositories. */
  ALL: "ALL",
  /** Members will not be able to create public or private repositories. */
  DISABLED: "DISABLED",
  /** Organization administrators choose whether to allow members to create repositories. */
  NO_POLICY: "NO_POLICY",
  /** Members will be able to create only private repositories. */
  PRIVATE: "PRIVATE",
  /** Members will be able to create only public repositories. */
  PUBLIC: "PUBLIC",
} as const;

export type EnterpriseMembersCanCreateRepositoriesSettingValue =
  (typeof EnterpriseMembersCanCreateRepositoriesSettingValue)[keyof typeof EnterpriseMembersCanCreateRepositoriesSettingValue];
/** The possible values for the members can make purchases setting. */
export const EnterpriseMembersCanMakePurchasesSettingValue = {
  /** The setting is disabled for organizations in the enterprise. */
  DISABLED: "DISABLED",
  /** The setting is enabled for organizations in the enterprise. */
  ENABLED: "ENABLED",
} as const;

export type EnterpriseMembersCanMakePurchasesSettingValue =
  (typeof EnterpriseMembersCanMakePurchasesSettingValue)[keyof typeof EnterpriseMembersCanMakePurchasesSettingValue];
/** The possible values we have for filtering Platform::Objects::User#enterprises. */
export const EnterpriseMembershipType = {
  /** Returns all enterprises in which the user is an admin. */
  ADMIN: "ADMIN",
  /** Returns all enterprises in which the user is a member, admin, or billing manager. */
  ALL: "ALL",
  /** Returns all enterprises in which the user is a billing manager. */
  BILLING_MANAGER: "BILLING_MANAGER",
  /** Returns all enterprises in which the user is a member of an org that is owned by the enterprise. */
  ORG_MEMBERSHIP: "ORG_MEMBERSHIP",
} as const;

export type EnterpriseMembershipType =
  (typeof EnterpriseMembershipType)[keyof typeof EnterpriseMembershipType];
/** Ordering options for enterprises. */
export interface EnterpriseOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order enterprises by. */
  field: EnterpriseOrderField;
}

/** Properties by which enterprise connections can be ordered. */
export const EnterpriseOrderField = {
  /** Order enterprises by name */
  NAME: "NAME",
} as const;

export type EnterpriseOrderField =
  (typeof EnterpriseOrderField)[keyof typeof EnterpriseOrderField];
/** Ordering options for Enterprise Server installation connections. */
export interface EnterpriseServerInstallationOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order Enterprise Server installations by. */
  field: EnterpriseServerInstallationOrderField;
}

/** Properties by which Enterprise Server installation connections can be ordered. */
export const EnterpriseServerInstallationOrderField = {
  /** Order Enterprise Server installations by creation time */
  CREATED_AT: "CREATED_AT",
  /** Order Enterprise Server installations by customer name */
  CUSTOMER_NAME: "CUSTOMER_NAME",
  /** Order Enterprise Server installations by host name */
  HOST_NAME: "HOST_NAME",
} as const;

export type EnterpriseServerInstallationOrderField =
  (typeof EnterpriseServerInstallationOrderField)[keyof typeof EnterpriseServerInstallationOrderField];
/** Ordering options for Enterprise Server user account email connections. */
export interface EnterpriseServerUserAccountEmailOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order emails by. */
  field: EnterpriseServerUserAccountEmailOrderField;
}

/** Properties by which Enterprise Server user account email connections can be ordered. */
export const EnterpriseServerUserAccountEmailOrderField = {
  /** Order emails by email */
  EMAIL: "EMAIL",
} as const;

export type EnterpriseServerUserAccountEmailOrderField =
  (typeof EnterpriseServerUserAccountEmailOrderField)[keyof typeof EnterpriseServerUserAccountEmailOrderField];
/** Ordering options for Enterprise Server user account connections. */
export interface EnterpriseServerUserAccountOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order user accounts by. */
  field: EnterpriseServerUserAccountOrderField;
}

/** Properties by which Enterprise Server user account connections can be ordered. */
export const EnterpriseServerUserAccountOrderField = {
  /** Order user accounts by login */
  LOGIN: "LOGIN",
  /** Order user accounts by creation time on the Enterprise Server installation */
  REMOTE_CREATED_AT: "REMOTE_CREATED_AT",
} as const;

export type EnterpriseServerUserAccountOrderField =
  (typeof EnterpriseServerUserAccountOrderField)[keyof typeof EnterpriseServerUserAccountOrderField];
/** Ordering options for Enterprise Server user accounts upload connections. */
export interface EnterpriseServerUserAccountsUploadOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order user accounts uploads by. */
  field: EnterpriseServerUserAccountsUploadOrderField;
}

/** Properties by which Enterprise Server user accounts upload connections can be ordered. */
export const EnterpriseServerUserAccountsUploadOrderField = {
  /** Order user accounts uploads by creation time */
  CREATED_AT: "CREATED_AT",
} as const;

export type EnterpriseServerUserAccountsUploadOrderField =
  (typeof EnterpriseServerUserAccountsUploadOrderField)[keyof typeof EnterpriseServerUserAccountsUploadOrderField];
/** Synchronization state of the Enterprise Server user accounts upload */
export const EnterpriseServerUserAccountsUploadSyncState = {
  /** The synchronization of the upload failed. */
  FAILURE: "FAILURE",
  /** The synchronization of the upload is pending. */
  PENDING: "PENDING",
  /** The synchronization of the upload succeeded. */
  SUCCESS: "SUCCESS",
} as const;

export type EnterpriseServerUserAccountsUploadSyncState =
  (typeof EnterpriseServerUserAccountsUploadSyncState)[keyof typeof EnterpriseServerUserAccountsUploadSyncState];
/** The possible roles for enterprise membership. */
export const EnterpriseUserAccountMembershipRole = {
  /** The user is a member of an organization in the enterprise. */
  MEMBER: "MEMBER",
  /** The user is an owner of an organization in the enterprise. */
  OWNER: "OWNER",
  /** The user is not an owner of the enterprise, and not a member or owner of any organizations in the enterprise; only for EMU-enabled enterprises. */
  UNAFFILIATED: "UNAFFILIATED",
} as const;

export type EnterpriseUserAccountMembershipRole =
  (typeof EnterpriseUserAccountMembershipRole)[keyof typeof EnterpriseUserAccountMembershipRole];
/** The possible GitHub Enterprise deployments where this user can exist. */
export const EnterpriseUserDeployment = {
  /** The user is part of a GitHub Enterprise Cloud deployment. */
  CLOUD: "CLOUD",
  /** The user is part of a GitHub Enterprise Server deployment. */
  SERVER: "SERVER",
} as const;

export type EnterpriseUserDeployment =
  (typeof EnterpriseUserDeployment)[keyof typeof EnterpriseUserDeployment];
/** Properties by which environments connections can be ordered */
export const EnvironmentOrderField = {
  /** Order environments by name. */
  NAME: "NAME",
} as const;

export type EnvironmentOrderField =
  (typeof EnvironmentOrderField)[keyof typeof EnvironmentOrderField];
/** Ordering options for environments */
export interface Environments {
  /** The direction in which to order environments by the specified field. */
  direction: OrderDirection;
  /** The field to order environments by. */
  field: EnvironmentOrderField;
}

/** A command to add a file at the given path with the given contents as part of a commit.  Any existing file at that that path will be replaced. */
export interface FileAddition {
  /** The base64 encoded contents of the file */
  contents: Scalars["Base64String"];
  /** The path in the repository where the file will be located */
  path: Scalars["String"];
}

/**
 * A description of a set of changes to a file tree to be made as part of
 * a git commit, modeled as zero or more file `additions` and zero or more
 * file `deletions`.
 *
 * Both fields are optional; omitting both will produce a commit with no
 * file changes.
 *
 * `deletions` and `additions` describe changes to files identified
 * by their path in the git tree using unix-style path separators, i.e.
 * `/`.  The root of a git tree is an empty string, so paths are not
 * slash-prefixed.
 *
 * `path` values must be unique across all `additions` and `deletions`
 * provided.  Any duplication will result in a validation error.
 *
 * ### Encoding
 *
 * File contents must be provided in full for each `FileAddition`.
 *
 * The `contents` of a `FileAddition` must be encoded using RFC 4648
 * compliant base64, i.e. correct padding is required and no characters
 * outside the standard alphabet may be used.  Invalid base64
 * encoding will be rejected with a validation error.
 *
 * The encoded contents may be binary.
 *
 * For text files, no assumptions are made about the character encoding of
 * the file contents (after base64 decoding).  No charset transcoding or
 * line-ending normalization will be performed; it is the client's
 * responsibility to manage the character encoding of files they provide.
 * However, for maximum compatibility we recommend using UTF-8 encoding
 * and ensuring that all files in a repository use a consistent
 * line-ending convention (`\n` or `\r\n`), and that all files end
 * with a newline.
 *
 * ### Modeling file changes
 *
 * Each of the the five types of conceptual changes that can be made in a
 * git commit can be described using the `FileChanges` type as follows:
 *
 * 1. New file addition: create file `hello world\n` at path `docs/README.txt`:
 *
 *        {
 *          "additions" [
 *            {
 *              "path": "docs/README.txt",
 *              "contents": base64encode("hello world\n")
 *            }
 *          ]
 *        }
 *
 * 2. Existing file modification: change existing `docs/README.txt` to have new
 *    content `new content here\n`:
 *
 *        {
 *          "additions" [
 *            {
 *              "path": "docs/README.txt",
 *              "contents": base64encode("new content here\n")
 *            }
 *          ]
 *        }
 *
 * 3. Existing file deletion: remove existing file `docs/README.txt`.
 *    Note that the path is required to exist -- specifying a
 *    path that does not exist on the given branch will abort the
 *    commit and return an error.
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt"
 *            }
 *          ]
 *        }
 *
 *
 * 4. File rename with no changes: rename `docs/README.txt` with
 *    previous content `hello world\n` to the same content at
 *    `newdocs/README.txt`:
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt",
 *            }
 *          ],
 *          "additions" [
 *            {
 *              "path": "newdocs/README.txt",
 *              "contents": base64encode("hello world\n")
 *            }
 *          ]
 *        }
 *
 *
 * 5. File rename with changes: rename `docs/README.txt` with
 *    previous content `hello world\n` to a file at path
 *    `newdocs/README.txt` with content `new contents\n`:
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt",
 *            }
 *          ],
 *          "additions" [
 *            {
 *              "path": "newdocs/README.txt",
 *              "contents": base64encode("new contents\n")
 *            }
 *          ]
 *        }
 *
 */
export interface FileChanges {
  /** File to add or change. */
  additions?: InputMaybe<Array<FileAddition>>;
  /** Files to delete. */
  deletions?: InputMaybe<Array<FileDeletion>>;
}

/** A command to delete the file at the given path as part of a commit. */
export interface FileDeletion {
  /** The path to delete */
  path: Scalars["String"];
}

/** The possible viewed states of a file . */
export const FileViewedState = {
  /** The file has new changes since last viewed. */
  DISMISSED: "DISMISSED",
  /** The file has not been marked as viewed. */
  UNVIEWED: "UNVIEWED",
  /** The file has been marked as viewed. */
  VIEWED: "VIEWED",
} as const;

export type FileViewedState =
  (typeof FileViewedState)[keyof typeof FileViewedState];
/** Autogenerated input type of FollowOrganization */
export interface FollowOrganizationInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the organization to follow. */
  organizationId: Scalars["ID"];
}

/** Autogenerated input type of FollowUser */
export interface FollowUserInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the user to follow. */
  userId: Scalars["ID"];
}

/** The possible funding platforms for repository funding links. */
export const FundingPlatform = {
  /** Community Bridge funding platform. */
  COMMUNITY_BRIDGE: "COMMUNITY_BRIDGE",
  /** Custom funding platform. */
  CUSTOM: "CUSTOM",
  /** GitHub funding platform. */
  GITHUB: "GITHUB",
  /** IssueHunt funding platform. */
  ISSUEHUNT: "ISSUEHUNT",
  /** Ko-fi funding platform. */
  KO_FI: "KO_FI",
  /** LFX Crowdfunding funding platform. */
  LFX_CROWDFUNDING: "LFX_CROWDFUNDING",
  /** Liberapay funding platform. */
  LIBERAPAY: "LIBERAPAY",
  /** Open Collective funding platform. */
  OPEN_COLLECTIVE: "OPEN_COLLECTIVE",
  /** Otechie funding platform. */
  OTECHIE: "OTECHIE",
  /** Patreon funding platform. */
  PATREON: "PATREON",
  /** Tidelift funding platform. */
  TIDELIFT: "TIDELIFT",
} as const;

export type FundingPlatform =
  (typeof FundingPlatform)[keyof typeof FundingPlatform];
/** Ordering options for gist connections */
export interface GistOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order repositories by. */
  field: GistOrderField;
}

/** Properties by which gist connections can be ordered. */
export const GistOrderField = {
  /** Order gists by creation time */
  CREATED_AT: "CREATED_AT",
  /** Order gists by push time */
  PUSHED_AT: "PUSHED_AT",
  /** Order gists by update time */
  UPDATED_AT: "UPDATED_AT",
} as const;

export type GistOrderField =
  (typeof GistOrderField)[keyof typeof GistOrderField];
/** The privacy of a Gist */
export const GistPrivacy = {
  /** Gists that are public and secret */
  ALL: "ALL",
  /** Public */
  PUBLIC: "PUBLIC",
  /** Secret */
  SECRET: "SECRET",
} as const;

export type GistPrivacy = (typeof GistPrivacy)[keyof typeof GistPrivacy];
/** The state of a Git signature. */
export const GitSignatureState = {
  /** The signing certificate or its chain could not be verified */
  BAD_CERT: "BAD_CERT",
  /** Invalid email used for signing */
  BAD_EMAIL: "BAD_EMAIL",
  /** Signing key expired */
  EXPIRED_KEY: "EXPIRED_KEY",
  /** Internal error - the GPG verification service misbehaved */
  GPGVERIFY_ERROR: "GPGVERIFY_ERROR",
  /** Internal error - the GPG verification service is unavailable at the moment */
  GPGVERIFY_UNAVAILABLE: "GPGVERIFY_UNAVAILABLE",
  /** Invalid signature */
  INVALID: "INVALID",
  /** Malformed signature */
  MALFORMED_SIG: "MALFORMED_SIG",
  /** The usage flags for the key that signed this don't allow signing */
  NOT_SIGNING_KEY: "NOT_SIGNING_KEY",
  /** Email used for signing not known to GitHub */
  NO_USER: "NO_USER",
  /** Valid signature, though certificate revocation check failed */
  OCSP_ERROR: "OCSP_ERROR",
  /** Valid signature, pending certificate revocation checking */
  OCSP_PENDING: "OCSP_PENDING",
  /** One or more certificates in chain has been revoked */
  OCSP_REVOKED: "OCSP_REVOKED",
  /** Key used for signing not known to GitHub */
  UNKNOWN_KEY: "UNKNOWN_KEY",
  /** Unknown signature type */
  UNKNOWN_SIG_TYPE: "UNKNOWN_SIG_TYPE",
  /** Unsigned */
  UNSIGNED: "UNSIGNED",
  /** Email used for signing unverified on GitHub */
  UNVERIFIED_EMAIL: "UNVERIFIED_EMAIL",
  /** Valid signature and verified by GitHub */
  VALID: "VALID",
} as const;

export type GitSignatureState =
  (typeof GitSignatureState)[keyof typeof GitSignatureState];
/** Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole */
export interface GrantEnterpriseOrganizationsMigratorRoleInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
  enterpriseId: Scalars["ID"];
  /** The login of the user to grant the migrator role */
  login: Scalars["String"];
}

/** Autogenerated input type of GrantMigratorRole */
export interface GrantMigratorRoleInput {
  /** The user login or Team slug to grant the migrator role. */
  actor: Scalars["String"];
  /** Specifies the type of the actor, can be either USER or TEAM. */
  actorType: ActorType;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the organization that the user/team belongs to. */
  organizationId: Scalars["ID"];
}

/** The possible states in which authentication can be configured with an identity provider. */
export const IdentityProviderConfigurationState = {
  /** Authentication with an identity provider is configured but not enforced. */
  CONFIGURED: "CONFIGURED",
  /** Authentication with an identity provider is configured and enforced. */
  ENFORCED: "ENFORCED",
  /** Authentication with an identity provider is not configured. */
  UNCONFIGURED: "UNCONFIGURED",
} as const;

export type IdentityProviderConfigurationState =
  (typeof IdentityProviderConfigurationState)[keyof typeof IdentityProviderConfigurationState];
/** Autogenerated input type of InviteEnterpriseAdmin */
export interface InviteEnterpriseAdminInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The email of the person to invite as an administrator. */
  email?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise to which you want to invite an administrator. */
  enterpriseId: Scalars["ID"];
  /** The login of a user to invite as an administrator. */
  invitee?: InputMaybe<Scalars["String"]>;
  /** The role of the administrator. */
  role?: InputMaybe<EnterpriseAdministratorRole>;
}

/** The possible values for the IP allow list enabled setting. */
export const IpAllowListEnabledSettingValue = {
  /** The setting is disabled for the owner. */
  DISABLED: "DISABLED",
  /** The setting is enabled for the owner. */
  ENABLED: "ENABLED",
} as const;

export type IpAllowListEnabledSettingValue =
  (typeof IpAllowListEnabledSettingValue)[keyof typeof IpAllowListEnabledSettingValue];
/** Ordering options for IP allow list entry connections. */
export interface IpAllowListEntryOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order IP allow list entries by. */
  field: IpAllowListEntryOrderField;
}

/** Properties by which IP allow list entry connections can be ordered. */
export const IpAllowListEntryOrderField = {
  /** Order IP allow list entries by the allow list value. */
  ALLOW_LIST_VALUE: "ALLOW_LIST_VALUE",
  /** Order IP allow list entries by creation time. */
  CREATED_AT: "CREATED_AT",
} as const;

export type IpAllowListEntryOrderField =
  (typeof IpAllowListEntryOrderField)[keyof typeof IpAllowListEntryOrderField];
/** The possible values for the IP allow list configuration for installed GitHub Apps setting. */
export const IpAllowListForInstalledAppsEnabledSettingValue = {
  /** The setting is disabled for the owner. */
  DISABLED: "DISABLED",
  /** The setting is enabled for the owner. */
  ENABLED: "ENABLED",
} as const;

export type IpAllowListForInstalledAppsEnabledSettingValue =
  (typeof IpAllowListForInstalledAppsEnabledSettingValue)[keyof typeof IpAllowListForInstalledAppsEnabledSettingValue];
/** The possible state reasons of a closed issue. */
export const IssueClosedStateReason = {
  /** An issue that has been closed as completed */
  COMPLETED: "COMPLETED",
  /** An issue that has been closed as not planned */
  NOT_PLANNED: "NOT_PLANNED",
} as const;

export type IssueClosedStateReason =
  (typeof IssueClosedStateReason)[keyof typeof IssueClosedStateReason];
/** Ways in which lists of issue comments can be ordered upon return. */
export interface IssueCommentOrder {
  /** The direction in which to order issue comments by the specified field. */
  direction: OrderDirection;
  /** The field in which to order issue comments by. */
  field: IssueCommentOrderField;
}

/** Properties by which issue comment connections can be ordered. */
export const IssueCommentOrderField = {
  /** Order issue comments by update time */
  UPDATED_AT: "UPDATED_AT",
} as const;

export type IssueCommentOrderField =
  (typeof IssueCommentOrderField)[keyof typeof IssueCommentOrderField];
/** Ways in which to filter lists of issues. */
export interface IssueFilters {
  /** List issues assigned to given name. Pass in `null` for issues with no assigned user, and `*` for issues assigned to any user. */
  assignee?: InputMaybe<Scalars["String"]>;
  /** List issues created by given name. */
  createdBy?: InputMaybe<Scalars["String"]>;
  /** List issues where the list of label names exist on the issue. */
  labels?: InputMaybe<Array<Scalars["String"]>>;
  /** List issues where the given name is mentioned in the issue. */
  mentioned?: InputMaybe<Scalars["String"]>;
  /** List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its database ID. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
  milestone?: InputMaybe<Scalars["String"]>;
  /** List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its number field. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
  milestoneNumber?: InputMaybe<Scalars["String"]>;
  /** List issues that have been updated at or after the given date. */
  since?: InputMaybe<Scalars["DateTime"]>;
  /** List issues filtered by the list of states given. */
  states?: InputMaybe<Array<IssueState>>;
  /** List issues subscribed to by viewer. */
  viewerSubscribed?: InputMaybe<Scalars["Boolean"]>;
}

/** Ways in which lists of issues can be ordered upon return. */
export interface IssueOrder {
  /** The direction in which to order issues by the specified field. */
  direction: OrderDirection;
  /** The field in which to order issues by. */
  field: IssueOrderField;
}

/** Properties by which issue connections can be ordered. */
export const IssueOrderField = {
  /** Order issues by comment count */
  COMMENTS: "COMMENTS",
  /** Order issues by creation time */
  CREATED_AT: "CREATED_AT",
  /** Order issues by update time */
  UPDATED_AT: "UPDATED_AT",
} as const;

export type IssueOrderField =
  (typeof IssueOrderField)[keyof typeof IssueOrderField];
/** The possible states of an issue. */
export const IssueState = {
  /** An issue that has been closed */
  CLOSED: "CLOSED",
  /** An issue that is still open */
  OPEN: "OPEN",
} as const;

export type IssueState = (typeof IssueState)[keyof typeof IssueState];
/** The possible state reasons of an issue. */
export const IssueStateReason = {
  /** An issue that has been closed as completed */
  COMPLETED: "COMPLETED",
  /** An issue that has been closed as not planned */
  NOT_PLANNED: "NOT_PLANNED",
  /** An issue that has been reopened */
  REOPENED: "REOPENED",
} as const;

export type IssueStateReason =
  (typeof IssueStateReason)[keyof typeof IssueStateReason];
/** The possible item types found in a timeline. */
export const IssueTimelineItemsItemType = {
  /** Represents a 'added_to_project' event on a given issue or pull request. */
  ADDED_TO_PROJECT_EVENT: "ADDED_TO_PROJECT_EVENT",
  /** Represents an 'assigned' event on any assignable object. */
  ASSIGNED_EVENT: "ASSIGNED_EVENT",
  /** Represents a 'closed' event on any `Closable`. */
  CLOSED_EVENT: "CLOSED_EVENT",
  /** Represents a 'comment_deleted' event on a given issue or pull request. */
  COMMENT_DELETED_EVENT: "COMMENT_DELETED_EVENT",
  /** Represents a 'connected' event on a given issue or pull request. */
  CONNECTED_EVENT: "CONNECTED_EVENT",
  /** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
  CONVERTED_NOTE_TO_ISSUE_EVENT: "CONVERTED_NOTE_TO_ISSUE_EVENT",
  /** Represents a 'converted_to_discussion' event on a given issue. */
  CONVERTED_TO_DISCUSSION_EVENT: "CONVERTED_TO_DISCUSSION_EVENT",
  /** Represents a mention made by one issue or pull request to another. */
  CROSS_REFERENCED_EVENT: "CROSS_REFERENCED_EVENT",
  /** Represents a 'demilestoned' event on a given issue or pull request. */
  DEMILESTONED_EVENT: "DEMILESTONED_EVENT",
  /** Represents a 'disconnected' event on a given issue or pull request. */
  DISCONNECTED_EVENT: "DISCONNECTED_EVENT",
  /** Represents a comment on an Issue. */
  ISSUE_COMMENT: "ISSUE_COMMENT",
  /** Represents a 'labeled' event on a given issue or pull request. */
  LABELED_EVENT: "LABELED_EVENT",
  /** Represents a 'locked' event on a given issue or pull request. */
  LOCKED_EVENT: "LOCKED_EVENT",
  /** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
  MARKED_AS_DUPLICATE_EVENT: "MARKED_AS_DUPLICATE_EVENT",
  /** Represents a 'mentioned' event on a given issue or pull request. */
  MENTIONED_EVENT: "MENTIONED_EVENT",
  /** Represents a 'milestoned' event on a given issue or pull request. */
  MILESTONED_EVENT: "MILESTONED_EVENT",
  /** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
  MOVED_COLUMNS_IN_PROJECT_EVENT: "MOVED_COLUMNS_IN_PROJECT_EVENT",
  /** Represents a 'pinned' event on a given issue or pull request. */
  PINNED_EVENT: "PINNED_EVENT",
  /** Represents a 'referenced' event on a given `ReferencedSubject`. */
  REFERENCED_EVENT: "REFERENCED_EVENT",
  /** Represents a 'removed_from_project' event on a given issue or pull request. */
  REMOVED_FROM_PROJECT_EVENT: "REMOVED_FROM_PROJECT_EVENT",
  /** Represents a 'renamed' event on a given issue or pull request */
  RENAMED_TITLE_EVENT: "RENAMED_TITLE_EVENT",
  /** Represents a 'reopened' event on any `Closable`. */
  REOPENED_EVENT: "REOPENED_EVENT",
  /** Represents a 'subscribed' event on a given `Subscribable`. */
  SUBSCRIBED_EVENT: "SUBSCRIBED_EVENT",
  /** Represents a 'transferred' event on a given issue or pull request. */
  TRANSFERRED_EVENT: "TRANSFERRED_EVENT",
  /** Represents an 'unassigned' event on any assignable object. */
  UNASSIGNED_EVENT: "UNASSIGNED_EVENT",
  /** Represents an 'unlabeled' event on a given issue or pull request. */
  UNLABELED_EVENT: "UNLABELED_EVENT",
  /** Represents an 'unlocked' event on a given issue or pull request. */
  UNLOCKED_EVENT: "UNLOCKED_EVENT",
  /** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
  UNMARKED_AS_DUPLICATE_EVENT: "UNMARKED_AS_DUPLICATE_EVENT",
  /** Represents an 'unpinned' event on a given issue or pull request. */
  UNPINNED_EVENT: "UNPINNED_EVENT",
  /** Represents an 'unsubscribed' event on a given `Subscribable`. */
  UNSUBSCRIBED_EVENT: "UNSUBSCRIBED_EVENT",
  /** Represents a 'user_blocked' event on a given user. */
  USER_BLOCKED_EVENT: "USER_BLOCKED_EVENT",
} as const;

export type IssueTimelineItemsItemType =
  (typeof IssueTimelineItemsItemType)[keyof typeof IssueTimelineItemsItemType];
/** Ways in which lists of labels can be ordered upon return. */
export interface LabelOrder {
  /** The direction in which to order labels by the specified field. */
  direction: OrderDirection;
  /** The field in which to order labels by. */
  field: LabelOrderField;
}

/** Properties by which label connections can be ordered. */
export const LabelOrderField = {
  /** Order labels by creation time */
  CREATED_AT: "CREATED_AT",
  /** Order labels by name  */
  NAME: "NAME",
} as const;

export type LabelOrderField =
  (typeof LabelOrderField)[keyof typeof LabelOrderField];
/** Ordering options for language connections. */
export interface LanguageOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order languages by. */
  field: LanguageOrderField;
}

/** Properties by which language connections can be ordered. */
export const LanguageOrderField = {
  /** Order languages by the size of all files containing the language */
  SIZE: "SIZE",
} as const;

export type LanguageOrderField =
  (typeof LanguageOrderField)[keyof typeof LanguageOrderField];
/** Autogenerated input type of LinkProjectV2ToRepository */
export interface LinkProjectV2ToRepositoryInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the project to link to the repository. */
  projectId: Scalars["ID"];
  /** The ID of the repository to link to the project. */
  repositoryId: Scalars["ID"];
}

/** Autogenerated input type of LinkProjectV2ToTeam */
export interface LinkProjectV2ToTeamInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the project to link to the team. */
  projectId: Scalars["ID"];
  /** The ID of the team to link to the project. */
  teamId: Scalars["ID"];
}

/** Autogenerated input type of LinkRepositoryToProject */
export interface LinkRepositoryToProjectInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the Project to link to a Repository */
  projectId: Scalars["ID"];
  /** The ID of the Repository to link to a Project. */
  repositoryId: Scalars["ID"];
}

/** Autogenerated input type of LockLockable */
export interface LockLockableInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** A reason for why the item will be locked. */
  lockReason?: InputMaybe<LockReason>;
  /** ID of the item to be locked. */
  lockableId: Scalars["ID"];
}

/** The possible reasons that an issue or pull request was locked. */
export const LockReason = {
  /** The issue or pull request was locked because the conversation was off-topic. */
  OFF_TOPIC: "OFF_TOPIC",
  /** The issue or pull request was locked because the conversation was resolved. */
  RESOLVED: "RESOLVED",
  /** The issue or pull request was locked because the conversation was spam. */
  SPAM: "SPAM",
  /** The issue or pull request was locked because the conversation was too heated. */
  TOO_HEATED: "TOO_HEATED",
} as const;

export type LockReason = (typeof LockReason)[keyof typeof LockReason];
/** Ordering options for mannequins. */
export interface MannequinOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order mannequins by. */
  field: MannequinOrderField;
}

/** Properties by which mannequins can be ordered. */
export const MannequinOrderField = {
  /** Order mannequins why when they were created. */
  CREATED_AT: "CREATED_AT",
  /** Order mannequins alphabetically by their source login. */
  LOGIN: "LOGIN",
} as const;

export type MannequinOrderField =
  (typeof MannequinOrderField)[keyof typeof MannequinOrderField];
/** Autogenerated input type of MarkDiscussionCommentAsAnswer */
export interface MarkDiscussionCommentAsAnswerInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the discussion comment to mark as an answer. */
  id: Scalars["ID"];
}

/** Autogenerated input type of MarkFileAsViewed */
export interface MarkFileAsViewedInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The path of the file to mark as viewed */
  path: Scalars["String"];
  /** The Node ID of the pull request. */
  pullRequestId: Scalars["ID"];
}

/** Autogenerated input type of MarkNotificationAsDone */
export interface MarkNotificationAsDoneInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The NotificationThread id. */
  id: Scalars["ID"];
}

/** Autogenerated input type of MarkNotificationAsRead */
export interface MarkNotificationAsReadInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The NotificationThread id. */
  id: Scalars["ID"];
}

/** Autogenerated input type of MarkNotificationAsUndone */
export interface MarkNotificationAsUndoneInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The NotificationThread id. */
  id: Scalars["ID"];
}

/** Autogenerated input type of MarkNotificationAsUnread */
export interface MarkNotificationAsUnreadInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The NotificationThread id. */
  id: Scalars["ID"];
}

/** Autogenerated input type of MarkNotificationSubjectAsRead */
export interface MarkNotificationSubjectAsReadInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The id of the notification subject to mark as read. */
  subjectId: Scalars["ID"];
}

/** Autogenerated input type of MarkNotificationsAsDone */
export interface MarkNotificationsAsDoneInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The NotificationThread IDs that will be marked as done. */
  ids: Array<Scalars["ID"]>;
}

/** Autogenerated input type of MarkNotificationsAsRead */
export interface MarkNotificationsAsReadInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The NotificationThread IDs that will be marked as read. */
  ids: Array<Scalars["ID"]>;
}

/** Autogenerated input type of MarkNotificationsAsUndone */
export interface MarkNotificationsAsUndoneInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The NotificationThread IDs to be marked as undone. */
  ids: Array<Scalars["ID"]>;
}

/** Autogenerated input type of MarkNotificationsAsUnread */
export interface MarkNotificationsAsUnreadInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The NotificationThread IDs that will be marked as unread. */
  ids: Array<Scalars["ID"]>;
}

/** Autogenerated input type of MarkProjectV2AsTemplate */
export interface MarkProjectV2AsTemplateInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the Project to mark as a template. */
  projectId: Scalars["ID"];
}

/** Autogenerated input type of MarkPullRequestReadyForReview */
export interface MarkPullRequestReadyForReviewInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the pull request to be marked as ready for review. */
  pullRequestId: Scalars["ID"];
}

/** Autogenerated input type of MergeBranch */
export interface MergeBranchInput {
  /** The email address to associate with this commit. */
  authorEmail?: InputMaybe<Scalars["String"]>;
  /** The name of the base branch that the provided head will be merged into. */
  base: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Message to use for the merge commit. If omitted, a default will be used. */
  commitMessage?: InputMaybe<Scalars["String"]>;
  /** The head to merge into the base branch. This can be a branch name or a commit GitObjectID. */
  head: Scalars["String"];
  /** The Node ID of the Repository containing the base branch that will be modified. */
  repositoryId: Scalars["ID"];
}

/** The possible default commit messages for merges. */
export const MergeCommitMessage = {
  /** Default to a blank commit message. */
  BLANK: "BLANK",
  /** Default to the pull request's body. */
  PR_BODY: "PR_BODY",
  /** Default to the pull request's title. */
  PR_TITLE: "PR_TITLE",
} as const;

export type MergeCommitMessage =
  (typeof MergeCommitMessage)[keyof typeof MergeCommitMessage];
/** The possible default commit titles for merges. */
export const MergeCommitTitle = {
  /** Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name). */
  MERGE_MESSAGE: "MERGE_MESSAGE",
  /** Default to the pull request's title. */
  PR_TITLE: "PR_TITLE",
} as const;

export type MergeCommitTitle =
  (typeof MergeCommitTitle)[keyof typeof MergeCommitTitle];
/** Autogenerated input type of MergePullRequest */
export interface MergePullRequestInput {
  /** The email address to associate with this merge. */
  authorEmail?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Commit body to use for the merge commit; if omitted, a default message will be used */
  commitBody?: InputMaybe<Scalars["String"]>;
  /** Commit headline to use for the merge commit; if omitted, a default message will be used. */
  commitHeadline?: InputMaybe<Scalars["String"]>;
  /** OID that the pull request head ref must match to allow merge; if omitted, no check is performed. */
  expectedHeadOid?: InputMaybe<Scalars["GitObjectID"]>;
  /** The merge method to use. If omitted, defaults to 'MERGE' */
  mergeMethod?: InputMaybe<PullRequestMergeMethod>;
  /** ID of the pull request to be merged. */
  pullRequestId: Scalars["ID"];
}

/** The possible states for a merge queue entry. */
export const MergeQueueEntryState = {
  /** The entry is currently waiting for checks to pass. */
  AWAITING_CHECKS: "AWAITING_CHECKS",
  /** The entry is currently locked. */
  LOCKED: "LOCKED",
  /** The entry is currently mergeable. */
  MERGEABLE: "MERGEABLE",
  /** The entry is currently queued. */
  QUEUED: "QUEUED",
  /** The entry is currently unmergeable. */
  UNMERGEABLE: "UNMERGEABLE",
} as const;

export type MergeQueueEntryState =
  (typeof MergeQueueEntryState)[keyof typeof MergeQueueEntryState];
/** The possible merging strategies for a merge queue. */
export const MergeQueueMergingStrategy = {
  /** Entries only allowed to merge if they are passing. */
  ALLGREEN: "ALLGREEN",
  /** Failing Entires are allowed to merge if they are with a passing entry. */
  HEADGREEN: "HEADGREEN",
} as const;

export type MergeQueueMergingStrategy =
  (typeof MergeQueueMergingStrategy)[keyof typeof MergeQueueMergingStrategy];
/** Whether or not a PullRequest can be merged. */
export const MergeableState = {
  /** The pull request cannot be merged due to merge conflicts. */
  CONFLICTING: "CONFLICTING",
  /** The pull request can be merged. */
  MERGEABLE: "MERGEABLE",
  /** The mergeability of the pull request is still being calculated. */
  UNKNOWN: "UNKNOWN",
} as const;

export type MergeableState =
  (typeof MergeableState)[keyof typeof MergeableState];
/** Represents the different GitHub Enterprise Importer (GEI) migration sources. */
export const MigrationSourceType = {
  /** An Azure DevOps migration source. */
  AZURE_DEVOPS: "AZURE_DEVOPS",
  /** A Bitbucket Server migration source. */
  BITBUCKET_SERVER: "BITBUCKET_SERVER",
  /** A GitHub Migration API source. */
  GITHUB_ARCHIVE: "GITHUB_ARCHIVE",
} as const;

export type MigrationSourceType =
  (typeof MigrationSourceType)[keyof typeof MigrationSourceType];
/** The GitHub Enterprise Importer (GEI) migration state. */
export const MigrationState = {
  /** The migration has failed. */
  FAILED: "FAILED",
  /** The migration has invalid credentials. */
  FAILED_VALIDATION: "FAILED_VALIDATION",
  /** The migration is in progress. */
  IN_PROGRESS: "IN_PROGRESS",
  /** The migration has not started. */
  NOT_STARTED: "NOT_STARTED",
  /** The migration needs to have its credentials validated. */
  PENDING_VALIDATION: "PENDING_VALIDATION",
  /** The migration has been queued. */
  QUEUED: "QUEUED",
  /** The migration has succeeded. */
  SUCCEEDED: "SUCCEEDED",
} as const;

export type MigrationState =
  (typeof MigrationState)[keyof typeof MigrationState];
/** Ordering options for milestone connections. */
export interface MilestoneOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order milestones by. */
  field: MilestoneOrderField;
}

/** Properties by which milestone connections can be ordered. */
export const MilestoneOrderField = {
  /** Order milestones by when they were created. */
  CREATED_AT: "CREATED_AT",
  /** Order milestones by when they are due. */
  DUE_DATE: "DUE_DATE",
  /** Order milestones by their number. */
  NUMBER: "NUMBER",
  /** Order milestones by when they were last updated. */
  UPDATED_AT: "UPDATED_AT",
} as const;

export type MilestoneOrderField =
  (typeof MilestoneOrderField)[keyof typeof MilestoneOrderField];
/** The possible states of a milestone. */
export const MilestoneState = {
  /** A milestone that has been closed. */
  CLOSED: "CLOSED",
  /** A milestone that is still open. */
  OPEN: "OPEN",
} as const;

export type MilestoneState =
  (typeof MilestoneState)[keyof typeof MilestoneState];
/** Autogenerated input type of MinimizeComment */
export interface MinimizeCommentInput {
  /** The classification of comment */
  classifier: ReportedContentClassifiers;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the subject to modify. */
  subjectId: Scalars["ID"];
}

/** Autogenerated input type of MoveProjectCard */
export interface MoveProjectCardInput {
  /** Place the new card after the card with this id. Pass null to place it at the top. */
  afterCardId?: InputMaybe<Scalars["ID"]>;
  /** The id of the card to move. */
  cardId: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The id of the column to move it into. */
  columnId: Scalars["ID"];
}

/** Autogenerated input type of MoveProjectColumn */
export interface MoveProjectColumnInput {
  /** Place the new column after the column with this id. Pass null to place it at the front. */
  afterColumnId?: InputMaybe<Scalars["ID"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The id of the column to move. */
  columnId: Scalars["ID"];
}

/** The reason you received a notification about a subject. */
export const NotificationReason = {
  /** You were requested for review for deployment. */
  APPROVAL_REQUESTED: "APPROVAL_REQUESTED",
  /** You were assigned to the Issue/PR. */
  ASSIGN: "ASSIGN",
  /** You created the thread. */
  AUTHOR: "AUTHOR",
  /** You are subscribed to continuous integration activity. */
  CI_ACTIVITY: "CI_ACTIVITY",
  /** You commented on the thread. */
  COMMENT: "COMMENT",
  /** You accepted an invitation to contribute to the repository. */
  INVITATION: "INVITATION",
  /** You subscribed to the thread (via an Issue or Pull Request). */
  MANUAL: "MANUAL",
  /** New requests from members. */
  MEMBER_FEATURE_REQUESTED: "MEMBER_FEATURE_REQUESTED",
  /** You were specifically @mentioned in the content. */
  MENTION: "MENTION",
  /** A pull request you're subscribed to was marked ready for review. */
  READY_FOR_REVIEW: "READY_FOR_REVIEW",
  /** You were requested for review. */
  REVIEW_REQUESTED: "REVIEW_REQUESTED",
  /** You saved this notification */
  SAVED: "SAVED",
  /** You were given credit for contributing to a Security Advisory. */
  SECURITY_ADVISORY_CREDIT: "SECURITY_ADVISORY_CREDIT",
  /** You have access to the notification subject's Dependabot alerts. */
  SECURITY_ALERT: "SECURITY_ALERT",
  /** You changed the thread state (for example, closing an Issue or merging a Pull Request). */
  STATE_CHANGE: "STATE_CHANGE",
  /** You are watching the subject of the notification. */
  SUBSCRIBED: "SUBSCRIBED",
  /** You were on a team that was mentioned. */
  TEAM_MENTION: "TEAM_MENTION",
} as const;

export type NotificationReason =
  (typeof NotificationReason)[keyof typeof NotificationReason];
/** The possible values for the notification restriction setting. */
export const NotificationRestrictionSettingValue = {
  /** The setting is disabled for the owner. */
  DISABLED: "DISABLED",
  /** The setting is enabled for the owner. */
  ENABLED: "ENABLED",
} as const;

export type NotificationRestrictionSettingValue =
  (typeof NotificationRestrictionSettingValue)[keyof typeof NotificationRestrictionSettingValue];
/** The possible states of a notification. */
export const NotificationStatus = {
  /** A notification is archived */
  ARCHIVED: "ARCHIVED",
  /** A notification is done */
  DONE: "DONE",
  /** A notification is read */
  READ: "READ",
  /** A notification is unread */
  UNREAD: "UNREAD",
} as const;

export type NotificationStatus =
  (typeof NotificationStatus)[keyof typeof NotificationStatus];
/** Ways in which to filter lists of notification threads. */
export interface NotificationThreadFilters {
  /** Only return notification threads where the list is in the given list */
  listIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** Only return notification threads where the reason is in the list */
  reasons?: InputMaybe<Array<NotificationReason>>;
  /** Only return saved notifications. All other filters will be ignored. */
  savedOnly?: InputMaybe<Scalars["Boolean"]>;
  /** Only return starred notifications. All other filters will be ignored. */
  starredOnly?: InputMaybe<Scalars["Boolean"]>;
  /** Only return notifications where the status is in the list. */
  statuses?: InputMaybe<Array<NotificationStatus>>;
  /** Only return matching thread types */
  threadTypes?: InputMaybe<Array<Scalars["String"]>>;
}

/** The possible subscription states of a notification thread. */
export const NotificationThreadSubscriptionState = {
  /** The thread's list is ignored. */
  LIST_IGNORED: "LIST_IGNORED",
  /** The thread's list is subscribed to. */
  LIST_SUBSCRIBED: "LIST_SUBSCRIBED",
  /** The thread is subscribed to. */
  THREAD_SUBSCRIBED: "THREAD_SUBSCRIBED",
  /** The thread's type is subscribed to. */
  THREAD_TYPE_SUBSCRIBED: "THREAD_TYPE_SUBSCRIBED",
  /** The thread is not subscribed to. */
  UNSUBSCRIBED: "UNSUBSCRIBED",
} as const;

export type NotificationThreadSubscriptionState =
  (typeof NotificationThreadSubscriptionState)[keyof typeof NotificationThreadSubscriptionState];
/** The OIDC identity provider type */
export const OIDCProviderType = {
  /** Azure Active Directory */
  AAD: "AAD",
} as const;

export type OIDCProviderType =
  (typeof OIDCProviderType)[keyof typeof OIDCProviderType];
/** The state of an OAuth application when it was created. */
export const OauthApplicationCreateAuditEntryState = {
  /** The OAuth application was active and allowed to have OAuth Accesses. */
  ACTIVE: "ACTIVE",
  /** The OAuth application was in the process of being deleted. */
  PENDING_DELETION: "PENDING_DELETION",
  /** The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns. */
  SUSPENDED: "SUSPENDED",
} as const;

export type OauthApplicationCreateAuditEntryState =
  (typeof OauthApplicationCreateAuditEntryState)[keyof typeof OauthApplicationCreateAuditEntryState];
/** The corresponding operation type for the action */
export const OperationType = {
  /** An existing resource was accessed */
  ACCESS: "ACCESS",
  /** A resource performed an authentication event */
  AUTHENTICATION: "AUTHENTICATION",
  /** A new resource was created */
  CREATE: "CREATE",
  /** An existing resource was modified */
  MODIFY: "MODIFY",
  /** An existing resource was removed */
  REMOVE: "REMOVE",
  /** An existing resource was restored */
  RESTORE: "RESTORE",
  /** An existing resource was transferred between multiple resources */
  TRANSFER: "TRANSFER",
} as const;

export type OperationType = (typeof OperationType)[keyof typeof OperationType];
/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export const OrderDirection = {
  /** Specifies an ascending order for a given `orderBy` argument. */
  ASC: "ASC",
  /** Specifies a descending order for a given `orderBy` argument. */
  DESC: "DESC",
} as const;

export type OrderDirection =
  (typeof OrderDirection)[keyof typeof OrderDirection];
/** The permissions available to members on an Organization. */
export const OrgAddMemberAuditEntryPermission = {
  /** Can read, clone, push, and add collaborators to repositories. */
  ADMIN: "ADMIN",
  /** Can read and clone repositories. */
  READ: "READ",
} as const;

export type OrgAddMemberAuditEntryPermission =
  (typeof OrgAddMemberAuditEntryPermission)[keyof typeof OrgAddMemberAuditEntryPermission];
/** The billing plans available for organizations. */
export const OrgCreateAuditEntryBillingPlan = {
  /** Team Plan */
  BUSINESS: "BUSINESS",
  /** Enterprise Cloud Plan */
  BUSINESS_PLUS: "BUSINESS_PLUS",
  /** Free Plan */
  FREE: "FREE",
  /** Tiered Per Seat Plan */
  TIERED_PER_SEAT: "TIERED_PER_SEAT",
  /** Legacy Unlimited Plan */
  UNLIMITED: "UNLIMITED",
} as const;

export type OrgCreateAuditEntryBillingPlan =
  (typeof OrgCreateAuditEntryBillingPlan)[keyof typeof OrgCreateAuditEntryBillingPlan];
/** Ordering options for an organization's enterprise owner connections. */
export interface OrgEnterpriseOwnerOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order enterprise owners by. */
  field: OrgEnterpriseOwnerOrderField;
}

/** Properties by which enterprise owners can be ordered. */
export const OrgEnterpriseOwnerOrderField = {
  /** Order enterprise owners by login. */
  LOGIN: "LOGIN",
} as const;

export type OrgEnterpriseOwnerOrderField =
  (typeof OrgEnterpriseOwnerOrderField)[keyof typeof OrgEnterpriseOwnerOrderField];
/** The reason a billing manager was removed from an Organization. */
export const OrgRemoveBillingManagerAuditEntryReason = {
  /** SAML external identity missing */
  SAML_EXTERNAL_IDENTITY_MISSING: "SAML_EXTERNAL_IDENTITY_MISSING",
  /** SAML SSO enforcement requires an external identity */
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY:
    "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY",
  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE:
    "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE",
} as const;

export type OrgRemoveBillingManagerAuditEntryReason =
  (typeof OrgRemoveBillingManagerAuditEntryReason)[keyof typeof OrgRemoveBillingManagerAuditEntryReason];
/** The type of membership a user has with an Organization. */
export const OrgRemoveMemberAuditEntryMembershipType = {
  /** Organization administrators have full access and can change several settings, including the names of repositories that belong to the Organization and Owners team membership. In addition, organization admins can delete the organization and all of its repositories. */
  ADMIN: "ADMIN",
  /** A billing manager is a user who manages the billing settings for the Organization, such as updating payment information. */
  BILLING_MANAGER: "BILLING_MANAGER",
  /** A direct member is a user that is a member of the Organization. */
  DIRECT_MEMBER: "DIRECT_MEMBER",
  /** An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization. */
  OUTSIDE_COLLABORATOR: "OUTSIDE_COLLABORATOR",
  /** A suspended member. */
  SUSPENDED: "SUSPENDED",
  /** An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the Organization. */
  UNAFFILIATED: "UNAFFILIATED",
} as const;

export type OrgRemoveMemberAuditEntryMembershipType =
  (typeof OrgRemoveMemberAuditEntryMembershipType)[keyof typeof OrgRemoveMemberAuditEntryMembershipType];
/** The reason a member was removed from an Organization. */
export const OrgRemoveMemberAuditEntryReason = {
  /** SAML external identity missing */
  SAML_EXTERNAL_IDENTITY_MISSING: "SAML_EXTERNAL_IDENTITY_MISSING",
  /** SAML SSO enforcement requires an external identity */
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY:
    "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY",
  /** User was removed from organization during account recovery */
  TWO_FACTOR_ACCOUNT_RECOVERY: "TWO_FACTOR_ACCOUNT_RECOVERY",
  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE:
    "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE",
  /** User account has been deleted */
  USER_ACCOUNT_DELETED: "USER_ACCOUNT_DELETED",
} as const;

export type OrgRemoveMemberAuditEntryReason =
  (typeof OrgRemoveMemberAuditEntryReason)[keyof typeof OrgRemoveMemberAuditEntryReason];
/** The type of membership a user has with an Organization. */
export const OrgRemoveOutsideCollaboratorAuditEntryMembershipType = {
  /** A billing manager is a user who manages the billing settings for the Organization, such as updating payment information. */
  BILLING_MANAGER: "BILLING_MANAGER",
  /** An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization. */
  OUTSIDE_COLLABORATOR: "OUTSIDE_COLLABORATOR",
  /** An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the organization. */
  UNAFFILIATED: "UNAFFILIATED",
} as const;

export type OrgRemoveOutsideCollaboratorAuditEntryMembershipType =
  (typeof OrgRemoveOutsideCollaboratorAuditEntryMembershipType)[keyof typeof OrgRemoveOutsideCollaboratorAuditEntryMembershipType];
/** The reason an outside collaborator was removed from an Organization. */
export const OrgRemoveOutsideCollaboratorAuditEntryReason = {
  /** SAML external identity missing */
  SAML_EXTERNAL_IDENTITY_MISSING: "SAML_EXTERNAL_IDENTITY_MISSING",
  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE:
    "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE",
} as const;

export type OrgRemoveOutsideCollaboratorAuditEntryReason =
  (typeof OrgRemoveOutsideCollaboratorAuditEntryReason)[keyof typeof OrgRemoveOutsideCollaboratorAuditEntryReason];
/** The default permission a repository can have in an Organization. */
export const OrgUpdateDefaultRepositoryPermissionAuditEntryPermission = {
  /** Can read, clone, push, and add collaborators to repositories. */
  ADMIN: "ADMIN",
  /** No default permission value. */
  NONE: "NONE",
  /** Can read and clone repositories. */
  READ: "READ",
  /** Can read, clone and push to repositories. */
  WRITE: "WRITE",
} as const;

export type OrgUpdateDefaultRepositoryPermissionAuditEntryPermission =
  (typeof OrgUpdateDefaultRepositoryPermissionAuditEntryPermission)[keyof typeof OrgUpdateDefaultRepositoryPermissionAuditEntryPermission];
/** The permissions available to members on an Organization. */
export const OrgUpdateMemberAuditEntryPermission = {
  /** Can read, clone, push, and add collaborators to repositories. */
  ADMIN: "ADMIN",
  /** Can read and clone repositories. */
  READ: "READ",
} as const;

export type OrgUpdateMemberAuditEntryPermission =
  (typeof OrgUpdateMemberAuditEntryPermission)[keyof typeof OrgUpdateMemberAuditEntryPermission];
/** The permissions available for repository creation on an Organization. */
export const OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility = {
  /** All organization members are restricted from creating any repositories. */
  ALL: "ALL",
  /** All organization members are restricted from creating internal repositories. */
  INTERNAL: "INTERNAL",
  /** All organization members are allowed to create any repositories. */
  NONE: "NONE",
  /** All organization members are restricted from creating private repositories. */
  PRIVATE: "PRIVATE",
  /** All organization members are restricted from creating private or internal repositories. */
  PRIVATE_INTERNAL: "PRIVATE_INTERNAL",
  /** All organization members are restricted from creating public repositories. */
  PUBLIC: "PUBLIC",
  /** All organization members are restricted from creating public or internal repositories. */
  PUBLIC_INTERNAL: "PUBLIC_INTERNAL",
  /** All organization members are restricted from creating public or private repositories. */
  PUBLIC_PRIVATE: "PUBLIC_PRIVATE",
} as const;

export type OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility =
  (typeof OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility)[keyof typeof OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility];
/** The possible organization invitation roles. */
export const OrganizationInvitationRole = {
  /** The user is invited to be an admin of the organization. */
  ADMIN: "ADMIN",
  /** The user is invited to be a billing manager of the organization. */
  BILLING_MANAGER: "BILLING_MANAGER",
  /** The user is invited to be a direct member of the organization. */
  DIRECT_MEMBER: "DIRECT_MEMBER",
  /** The user's previous role will be reinstated. */
  REINSTATE: "REINSTATE",
} as const;

export type OrganizationInvitationRole =
  (typeof OrganizationInvitationRole)[keyof typeof OrganizationInvitationRole];
/** The possible organization invitation sources. */
export const OrganizationInvitationSource = {
  /** The invitation was created from the web interface or from API */
  MEMBER: "MEMBER",
  /** The invitation was created from SCIM */
  SCIM: "SCIM",
  /** The invitation was sent before this feature was added */
  UNKNOWN: "UNKNOWN",
} as const;

export type OrganizationInvitationSource =
  (typeof OrganizationInvitationSource)[keyof typeof OrganizationInvitationSource];
/** The possible organization invitation types. */
export const OrganizationInvitationType = {
  /** The invitation was to an email address. */
  EMAIL: "EMAIL",
  /** The invitation was to an existing user. */
  USER: "USER",
} as const;

export type OrganizationInvitationType =
  (typeof OrganizationInvitationType)[keyof typeof OrganizationInvitationType];
/** The possible roles within an organization for its members. */
export const OrganizationMemberRole = {
  /** The user is an administrator of the organization. */
  ADMIN: "ADMIN",
  /** The user is a member of the organization. */
  MEMBER: "MEMBER",
} as const;

export type OrganizationMemberRole =
  (typeof OrganizationMemberRole)[keyof typeof OrganizationMemberRole];
/** The possible values for the members can create repositories setting on an organization. */
export const OrganizationMembersCanCreateRepositoriesSettingValue = {
  /** Members will be able to create public and private repositories. */
  ALL: "ALL",
  /** Members will not be able to create public or private repositories. */
  DISABLED: "DISABLED",
  /** Members will be able to create only internal repositories. */
  INTERNAL: "INTERNAL",
  /** Members will be able to create only private repositories. */
  PRIVATE: "PRIVATE",
} as const;

export type OrganizationMembersCanCreateRepositoriesSettingValue =
  (typeof OrganizationMembersCanCreateRepositoriesSettingValue)[keyof typeof OrganizationMembersCanCreateRepositoriesSettingValue];
/** The Octoshift Organization migration state. */
export const OrganizationMigrationState = {
  /** The Octoshift migration has failed. */
  FAILED: "FAILED",
  /** The Octoshift migration has invalid credentials. */
  FAILED_VALIDATION: "FAILED_VALIDATION",
  /** The Octoshift migration is in progress. */
  IN_PROGRESS: "IN_PROGRESS",
  /** The Octoshift migration has not started. */
  NOT_STARTED: "NOT_STARTED",
  /** The Octoshift migration needs to have its credentials validated. */
  PENDING_VALIDATION: "PENDING_VALIDATION",
  /** The Octoshift migration is performing post repository migrations. */
  POST_REPO_MIGRATION: "POST_REPO_MIGRATION",
  /** The Octoshift migration is performing pre repository migrations. */
  PRE_REPO_MIGRATION: "PRE_REPO_MIGRATION",
  /** The Octoshift migration has been queued. */
  QUEUED: "QUEUED",
  /** The Octoshift org migration is performing repository migrations. */
  REPO_MIGRATION: "REPO_MIGRATION",
  /** The Octoshift migration has succeeded. */
  SUCCEEDED: "SUCCEEDED",
} as const;

export type OrganizationMigrationState =
  (typeof OrganizationMigrationState)[keyof typeof OrganizationMigrationState];
/** Ordering options for organization connections. */
export interface OrganizationOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order organizations by. */
  field: OrganizationOrderField;
}

/** Properties by which organization connections can be ordered. */
export const OrganizationOrderField = {
  /** Order organizations by creation time */
  CREATED_AT: "CREATED_AT",
  /** Order organizations by login */
  LOGIN: "LOGIN",
} as const;

export type OrganizationOrderField =
  (typeof OrganizationOrderField)[keyof typeof OrganizationOrderField];
/** Ways in which lists of package files can be ordered upon return. */
export interface PackageFileOrder {
  /** The direction in which to order package files by the specified field. */
  direction?: InputMaybe<OrderDirection>;
  /** The field in which to order package files by. */
  field?: InputMaybe<PackageFileOrderField>;
}

/** Properties by which package file connections can be ordered. */
export const PackageFileOrderField = {
  /** Order package files by creation time */
  CREATED_AT: "CREATED_AT",
} as const;

export type PackageFileOrderField =
  (typeof PackageFileOrderField)[keyof typeof PackageFileOrderField];
/** Ways in which lists of packages can be ordered upon return. */
export interface PackageOrder {
  /** The direction in which to order packages by the specified field. */
  direction?: InputMaybe<OrderDirection>;
  /** The field in which to order packages by. */
  field?: InputMaybe<PackageOrderField>;
}

/** Properties by which package connections can be ordered. */
export const PackageOrderField = {
  /** Order packages by creation time */
  CREATED_AT: "CREATED_AT",
} as const;

export type PackageOrderField =
  (typeof PackageOrderField)[keyof typeof PackageOrderField];
/** The possible types of a package. */
export const PackageType = {
  /** A debian package. */
  DEBIAN: "DEBIAN",
  /** A docker image. */
  DOCKER: "DOCKER",
  /** A maven package. */
  MAVEN: "MAVEN",
  /** An npm package. */
  NPM: "NPM",
  /** A nuget package. */
  NUGET: "NUGET",
  /** A python package. */
  PYPI: "PYPI",
  /** A rubygems package. */
  RUBYGEMS: "RUBYGEMS",
} as const;

export type PackageType = (typeof PackageType)[keyof typeof PackageType];
/** Ways in which lists of package versions can be ordered upon return. */
export interface PackageVersionOrder {
  /** The direction in which to order package versions by the specified field. */
  direction?: InputMaybe<OrderDirection>;
  /** The field in which to order package versions by. */
  field?: InputMaybe<PackageVersionOrderField>;
}

/** Properties by which package version connections can be ordered. */
export const PackageVersionOrderField = {
  /** Order package versions by creation time */
  CREATED_AT: "CREATED_AT",
} as const;

export type PackageVersionOrderField =
  (typeof PackageVersionOrderField)[keyof typeof PackageVersionOrderField];
/** The possible types of patch statuses. */
export const PatchStatus = {
  /** The file was added. Git status 'A'. */
  ADDED: "ADDED",
  /** The file's type was changed. Git status 'T'. */
  CHANGED: "CHANGED",
  /** The file was copied. Git status 'C'. */
  COPIED: "COPIED",
  /** The file was deleted. Git status 'D'. */
  DELETED: "DELETED",
  /** The file's contents were changed. Git status 'M'. */
  MODIFIED: "MODIFIED",
  /** The file was renamed. Git status 'R'. */
  RENAMED: "RENAMED",
} as const;

export type PatchStatus = (typeof PatchStatus)[keyof typeof PatchStatus];
/** Autogenerated input type of PinIssue */
export interface PinIssueInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the issue to be pinned */
  issueId: Scalars["ID"];
}

/** Represents items that can be pinned to a profile page or dashboard. */
export const PinnableItemType = {
  /** A gist. */
  GIST: "GIST",
  /** An issue. */
  ISSUE: "ISSUE",
  /** An organization. */
  ORGANIZATION: "ORGANIZATION",
  /** A project. */
  PROJECT: "PROJECT",
  /** A pull request. */
  PULL_REQUEST: "PULL_REQUEST",
  /** A repository. */
  REPOSITORY: "REPOSITORY",
  /** A team. */
  TEAM: "TEAM",
  /** A user. */
  USER: "USER",
} as const;

export type PinnableItemType =
  (typeof PinnableItemType)[keyof typeof PinnableItemType];
/** Preconfigured gradients that may be used to style discussions pinned within a repository. */
export const PinnedDiscussionGradient = {
  /** A gradient of blue to mint */
  BLUE_MINT: "BLUE_MINT",
  /** A gradient of blue to purple */
  BLUE_PURPLE: "BLUE_PURPLE",
  /** A gradient of pink to blue */
  PINK_BLUE: "PINK_BLUE",
  /** A gradient of purple to coral */
  PURPLE_CORAL: "PURPLE_CORAL",
  /** A gradient of red to orange */
  RED_ORANGE: "RED_ORANGE",
} as const;

export type PinnedDiscussionGradient =
  (typeof PinnedDiscussionGradient)[keyof typeof PinnedDiscussionGradient];
/** Preconfigured background patterns that may be used to style discussions pinned within a repository. */
export const PinnedDiscussionPattern = {
  /** An upward-facing chevron pattern */
  CHEVRON_UP: "CHEVRON_UP",
  /** A hollow dot pattern */
  DOT: "DOT",
  /** A solid dot pattern */
  DOT_FILL: "DOT_FILL",
  /** A heart pattern */
  HEART_FILL: "HEART_FILL",
  /** A plus sign pattern */
  PLUS: "PLUS",
  /** A lightning bolt pattern */
  ZAP: "ZAP",
} as const;

export type PinnedDiscussionPattern =
  (typeof PinnedDiscussionPattern)[keyof typeof PinnedDiscussionPattern];
/** The possible archived states of a project card. */
export const ProjectCardArchivedState = {
  /** A project card that is archived */
  ARCHIVED: "ARCHIVED",
  /** A project card that is not archived */
  NOT_ARCHIVED: "NOT_ARCHIVED",
} as const;

export type ProjectCardArchivedState =
  (typeof ProjectCardArchivedState)[keyof typeof ProjectCardArchivedState];
/** Various content states of a ProjectCard */
export const ProjectCardState = {
  /** The card has content only. */
  CONTENT_ONLY: "CONTENT_ONLY",
  /** The card has a note only. */
  NOTE_ONLY: "NOTE_ONLY",
  /** The card is redacted. */
  REDACTED: "REDACTED",
} as const;

export type ProjectCardState =
  (typeof ProjectCardState)[keyof typeof ProjectCardState];
/** The semantic purpose of the column - todo, in progress, or done. */
export const ProjectColumnPurpose = {
  /** The column contains cards which are complete */
  DONE: "DONE",
  /** The column contains cards which are currently being worked on */
  IN_PROGRESS: "IN_PROGRESS",
  /** The column contains cards still to be worked on */
  TODO: "TODO",
} as const;

export type ProjectColumnPurpose =
  (typeof ProjectColumnPurpose)[keyof typeof ProjectColumnPurpose];
/** Ways in which lists of projects can be ordered upon return. */
export interface ProjectOrder {
  /** The direction in which to order projects by the specified field. */
  direction: OrderDirection;
  /** The field in which to order projects by. */
  field: ProjectOrderField;
}

/** Properties by which project connections can be ordered. */
export const ProjectOrderField = {
  /** Order projects by creation time */
  CREATED_AT: "CREATED_AT",
  /** Order projects by name */
  NAME: "NAME",
  /** Order projects by update time */
  UPDATED_AT: "UPDATED_AT",
} as const;

export type ProjectOrderField =
  (typeof ProjectOrderField)[keyof typeof ProjectOrderField];
/** State of the project; either 'open' or 'closed' */
export const ProjectState = {
  /** The project is closed. */
  CLOSED: "CLOSED",
  /** The project is open. */
  OPEN: "OPEN",
} as const;

export type ProjectState = (typeof ProjectState)[keyof typeof ProjectState];
/** GitHub-provided templates for Projects */
export const ProjectTemplate = {
  /** Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns. */
  AUTOMATED_KANBAN_V2: "AUTOMATED_KANBAN_V2",
  /** Create a board with triggers to automatically move cards across columns with review automation. */
  AUTOMATED_REVIEWS_KANBAN: "AUTOMATED_REVIEWS_KANBAN",
  /** Create a board with columns for To do, In progress and Done. */
  BASIC_KANBAN: "BASIC_KANBAN",
  /** Create a board to triage and prioritize bugs with To do, priority, and Done columns. */
  BUG_TRIAGE: "BUG_TRIAGE",
} as const;

export type ProjectTemplate =
  (typeof ProjectTemplate)[keyof typeof ProjectTemplate];
/** A collaborator to update on a project. Only one of the userId or teamId should be provided. */
export interface ProjectV2Collaborator {
  /** The role to grant the collaborator */
  role: ProjectV2Roles;
  /** The ID of the team as a collaborator. */
  teamId?: InputMaybe<Scalars["ID"]>;
  /** The ID of the user as a collaborator. */
  userId?: InputMaybe<Scalars["ID"]>;
}

/** The type of a project field. */
export const ProjectV2CustomFieldType = {
  /** Date */
  DATE: "DATE",
  /** Number */
  NUMBER: "NUMBER",
  /** Single Select */
  SINGLE_SELECT: "SINGLE_SELECT",
  /** Text */
  TEXT: "TEXT",
} as const;

export type ProjectV2CustomFieldType =
  (typeof ProjectV2CustomFieldType)[keyof typeof ProjectV2CustomFieldType];
/** Ordering options for project v2 field connections */
export interface ProjectV2FieldOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order the project v2 fields by. */
  field: ProjectV2FieldOrderField;
}

/** Properties by which project v2 field connections can be ordered. */
export const ProjectV2FieldOrderField = {
  /** Order project v2 fields by creation time */
  CREATED_AT: "CREATED_AT",
  /** Order project v2 fields by name */
  NAME: "NAME",
  /** Order project v2 fields by position */
  POSITION: "POSITION",
} as const;

export type ProjectV2FieldOrderField =
  (typeof ProjectV2FieldOrderField)[keyof typeof ProjectV2FieldOrderField];
/** The type of a project field. */
export const ProjectV2FieldType = {
  /** Assignees */
  ASSIGNEES: "ASSIGNEES",
  /** Date */
  DATE: "DATE",
  /** Iteration */
  ITERATION: "ITERATION",
  /** Labels */
  LABELS: "LABELS",
  /** Linked Pull Requests */
  LINKED_PULL_REQUESTS: "LINKED_PULL_REQUESTS",
  /** Milestone */
  MILESTONE: "MILESTONE",
  /** Number */
  NUMBER: "NUMBER",
  /** Repository */
  REPOSITORY: "REPOSITORY",
  /** Reviewers */
  REVIEWERS: "REVIEWERS",
  /** Single Select */
  SINGLE_SELECT: "SINGLE_SELECT",
  /** Text */
  TEXT: "TEXT",
  /** Title */
  TITLE: "TITLE",
  /** Tracked by */
  TRACKED_BY: "TRACKED_BY",
  /** Tracks */
  TRACKS: "TRACKS",
} as const;

export type ProjectV2FieldType =
  (typeof ProjectV2FieldType)[keyof typeof ProjectV2FieldType];
/** The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time. */
export interface ProjectV2FieldValue {
  /** The ISO 8601 date to set on the field. */
  date?: InputMaybe<Scalars["Date"]>;
  /** The id of the iteration to set on the field. */
  iterationId?: InputMaybe<Scalars["String"]>;
  /** The number to set on the field. */
  number?: InputMaybe<Scalars["Float"]>;
  /** The id of the single select option to set on the field. */
  singleSelectOptionId?: InputMaybe<Scalars["String"]>;
  /** The text to set on the field. */
  text?: InputMaybe<Scalars["String"]>;
}

/** Ways in which to filter lists of projects. */
export interface ProjectV2Filters {
  /** List project v2 filtered by the state given. */
  state?: InputMaybe<ProjectV2State>;
}

/** Ordering options for project v2 item field value connections */
export interface ProjectV2ItemFieldValueOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order the project v2 item field values by. */
  field: ProjectV2ItemFieldValueOrderField;
}

/** Properties by which project v2 item field value connections can be ordered. */
export const ProjectV2ItemFieldValueOrderField = {
  /** Order project v2 item field values by the their position in the project */
  POSITION: "POSITION",
} as const;

export type ProjectV2ItemFieldValueOrderField =
  (typeof ProjectV2ItemFieldValueOrderField)[keyof typeof ProjectV2ItemFieldValueOrderField];
/** Ordering options for project v2 item connections */
export interface ProjectV2ItemOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order the project v2 items by. */
  field: ProjectV2ItemOrderField;
}

/** Properties by which project v2 item connections can be ordered. */
export const ProjectV2ItemOrderField = {
  /** Order project v2 items by the their position in the project */
  POSITION: "POSITION",
} as const;

export type ProjectV2ItemOrderField =
  (typeof ProjectV2ItemOrderField)[keyof typeof ProjectV2ItemOrderField];
/** The type of a project item. */
export const ProjectV2ItemType = {
  /** Draft Issue */
  DRAFT_ISSUE: "DRAFT_ISSUE",
  /** Issue */
  ISSUE: "ISSUE",
  /** Pull Request */
  PULL_REQUEST: "PULL_REQUEST",
  /** Redacted Item */
  REDACTED: "REDACTED",
} as const;

export type ProjectV2ItemType =
  (typeof ProjectV2ItemType)[keyof typeof ProjectV2ItemType];
/** Ways in which lists of projects can be ordered upon return. */
export interface ProjectV2Order {
  /** The direction in which to order projects by the specified field. */
  direction: OrderDirection;
  /** The field in which to order projects by. */
  field: ProjectV2OrderField;
}

/** Properties by which projects can be ordered. */
export const ProjectV2OrderField = {
  /** The project's date and time of creation */
  CREATED_AT: "CREATED_AT",
  /** The project's number */
  NUMBER: "NUMBER",
  /** The project's title */
  TITLE: "TITLE",
  /** The project's date and time of update */
  UPDATED_AT: "UPDATED_AT",
} as const;

export type ProjectV2OrderField =
  (typeof ProjectV2OrderField)[keyof typeof ProjectV2OrderField];
/** The possible roles of a collaborator on a project. */
export const ProjectV2Roles = {
  /** The collaborator can view, edit, and maange the settings of the project */
  ADMIN: "ADMIN",
  /** The collaborator has no direct access to the project */
  NONE: "NONE",
  /** The collaborator can view the project */
  READER: "READER",
  /** The collaborator can view and edit the project */
  WRITER: "WRITER",
} as const;

export type ProjectV2Roles =
  (typeof ProjectV2Roles)[keyof typeof ProjectV2Roles];
/** The display color of a single-select field option. */
export const ProjectV2SingleSelectFieldOptionColor = {
  /** BLUE */
  BLUE: "BLUE",
  /** GRAY */
  GRAY: "GRAY",
  /** GREEN */
  GREEN: "GREEN",
  /** ORANGE */
  ORANGE: "ORANGE",
  /** PINK */
  PINK: "PINK",
  /** PURPLE */
  PURPLE: "PURPLE",
  /** RED */
  RED: "RED",
  /** YELLOW */
  YELLOW: "YELLOW",
} as const;

export type ProjectV2SingleSelectFieldOptionColor =
  (typeof ProjectV2SingleSelectFieldOptionColor)[keyof typeof ProjectV2SingleSelectFieldOptionColor];
/** Represents a single select field option */
export interface ProjectV2SingleSelectFieldOptionInput {
  /** The display color of the option */
  color: ProjectV2SingleSelectFieldOptionColor;
  /** The description text of the option */
  description: Scalars["String"];
  /** The name of the option */
  name: Scalars["String"];
}

/** The possible states of a project v2. */
export const ProjectV2State = {
  /** A project v2 that has been closed */
  CLOSED: "CLOSED",
  /** A project v2 that is still open */
  OPEN: "OPEN",
} as const;

export type ProjectV2State =
  (typeof ProjectV2State)[keyof typeof ProjectV2State];
/** The layout of a project v2 view. */
export const ProjectV2ViewLayout = {
  /** Board layout */
  BOARD_LAYOUT: "BOARD_LAYOUT",
  /** Roadmap layout */
  ROADMAP_LAYOUT: "ROADMAP_LAYOUT",
  /** Table layout */
  TABLE_LAYOUT: "TABLE_LAYOUT",
} as const;

export type ProjectV2ViewLayout =
  (typeof ProjectV2ViewLayout)[keyof typeof ProjectV2ViewLayout];
/** Ordering options for project v2 view connections */
export interface ProjectV2ViewOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order the project v2 views by. */
  field: ProjectV2ViewOrderField;
}

/** Properties by which project v2 view connections can be ordered. */
export const ProjectV2ViewOrderField = {
  /** Order project v2 views by creation time */
  CREATED_AT: "CREATED_AT",
  /** Order project v2 views by name */
  NAME: "NAME",
  /** Order project v2 views by position */
  POSITION: "POSITION",
} as const;

export type ProjectV2ViewOrderField =
  (typeof ProjectV2ViewOrderField)[keyof typeof ProjectV2ViewOrderField];
/** Ordering options for project v2 workflows connections */
export interface ProjectV2WorkflowOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order the project v2 workflows by. */
  field: ProjectV2WorkflowsOrderField;
}

/** Properties by which project workflows can be ordered. */
export const ProjectV2WorkflowsOrderField = {
  /** The workflows' date and time of creation */
  CREATED_AT: "CREATED_AT",
  /** The workflows' name */
  NAME: "NAME",
  /** The workflows' number */
  NUMBER: "NUMBER",
  /** The workflows' date and time of update */
  UPDATED_AT: "UPDATED_AT",
} as const;

export type ProjectV2WorkflowsOrderField =
  (typeof ProjectV2WorkflowsOrderField)[keyof typeof ProjectV2WorkflowsOrderField];
/** Autogenerated input type of PublishSponsorsTier */
export interface PublishSponsorsTierInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the draft tier to publish. */
  tierId: Scalars["ID"];
}

/** The possible methods for updating a pull request's head branch with the base branch. */
export const PullRequestBranchUpdateMethod = {
  /** Update branch via merge */
  MERGE: "MERGE",
  /** Update branch via rebase */
  REBASE: "REBASE",
} as const;

export type PullRequestBranchUpdateMethod =
  (typeof PullRequestBranchUpdateMethod)[keyof typeof PullRequestBranchUpdateMethod];
/** Represents available types of methods to use when merging a pull request. */
export const PullRequestMergeMethod = {
  /** Add all commits from the head branch to the base branch with a merge commit. */
  MERGE: "MERGE",
  /** Add all commits from the head branch onto the base branch individually. */
  REBASE: "REBASE",
  /** Combine all commits from the head branch into a single commit in the base branch. */
  SQUASH: "SQUASH",
} as const;

export type PullRequestMergeMethod =
  (typeof PullRequestMergeMethod)[keyof typeof PullRequestMergeMethod];
/** Ways in which lists of issues can be ordered upon return. */
export interface PullRequestOrder {
  /** The direction in which to order pull requests by the specified field. */
  direction: OrderDirection;
  /** The field in which to order pull requests by. */
  field: PullRequestOrderField;
}

/** Properties by which pull_requests connections can be ordered. */
export const PullRequestOrderField = {
  /** Order pull_requests by creation time */
  CREATED_AT: "CREATED_AT",
  /** Order pull_requests by update time */
  UPDATED_AT: "UPDATED_AT",
} as const;

export type PullRequestOrderField =
  (typeof PullRequestOrderField)[keyof typeof PullRequestOrderField];
/** Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. */
export interface PullRequestParametersInput {
  /** New, reviewable commits pushed will dismiss previous pull request review approvals. */
  dismissStaleReviewsOnPush: Scalars["Boolean"];
  /** Require an approving review in pull requests that modify files that have a designated code owner. */
  requireCodeOwnerReview: Scalars["Boolean"];
  /** Whether the most recent reviewable push must be approved by someone other than the person who pushed it. */
  requireLastPushApproval: Scalars["Boolean"];
  /** The number of approving reviews that are required before a pull request can be merged. */
  requiredApprovingReviewCount: Scalars["Int"];
  /** All conversations on code must be resolved before a pull request can be merged. */
  requiredReviewThreadResolution: Scalars["Boolean"];
}

/** The possible states of a pull request review comment. */
export const PullRequestReviewCommentState = {
  /** A comment that is part of a pending review */
  PENDING: "PENDING",
  /** A comment that is part of a submitted review */
  SUBMITTED: "SUBMITTED",
} as const;

export type PullRequestReviewCommentState =
  (typeof PullRequestReviewCommentState)[keyof typeof PullRequestReviewCommentState];
/** The review status of a pull request. */
export const PullRequestReviewDecision = {
  /** The pull request has received an approving review. */
  APPROVED: "APPROVED",
  /** Changes have been requested on the pull request. */
  CHANGES_REQUESTED: "CHANGES_REQUESTED",
  /** A review is required before the pull request can be merged. */
  REVIEW_REQUIRED: "REVIEW_REQUIRED",
} as const;

export type PullRequestReviewDecision =
  (typeof PullRequestReviewDecision)[keyof typeof PullRequestReviewDecision];
/** The possible events to perform on a pull request review. */
export const PullRequestReviewEvent = {
  /** Submit feedback and approve merging these changes. */
  APPROVE: "APPROVE",
  /** Submit general feedback without explicit approval. */
  COMMENT: "COMMENT",
  /** Dismiss review so it now longer effects merging. */
  DISMISS: "DISMISS",
  /** Submit feedback that must be addressed before merging. */
  REQUEST_CHANGES: "REQUEST_CHANGES",
} as const;

export type PullRequestReviewEvent =
  (typeof PullRequestReviewEvent)[keyof typeof PullRequestReviewEvent];
/** The possible states of a pull request review. */
export const PullRequestReviewState = {
  /** A review allowing the pull request to merge. */
  APPROVED: "APPROVED",
  /** A review blocking the pull request from merging. */
  CHANGES_REQUESTED: "CHANGES_REQUESTED",
  /** An informational review. */
  COMMENTED: "COMMENTED",
  /** A review that has been dismissed. */
  DISMISSED: "DISMISSED",
  /** A review that has not yet been submitted. */
  PENDING: "PENDING",
} as const;

export type PullRequestReviewState =
  (typeof PullRequestReviewState)[keyof typeof PullRequestReviewState];
/** The possible subject types of a pull request review comment. */
export const PullRequestReviewThreadSubjectType = {
  /** A comment that has been made against the file of a pull request */
  FILE: "FILE",
  /** A comment that has been made against the line of a pull request */
  LINE: "LINE",
} as const;

export type PullRequestReviewThreadSubjectType =
  (typeof PullRequestReviewThreadSubjectType)[keyof typeof PullRequestReviewThreadSubjectType];
/** The possible states of a pull request. */
export const PullRequestState = {
  /** A pull request that has been closed without being merged. */
  CLOSED: "CLOSED",
  /** A pull request that has been closed by being merged. */
  MERGED: "MERGED",
  /** A pull request that is still open. */
  OPEN: "OPEN",
} as const;

export type PullRequestState =
  (typeof PullRequestState)[keyof typeof PullRequestState];
/** The possible item types found in a timeline. */
export const PullRequestTimelineItemsItemType = {
  /** Represents an 'added_to_merge_queue' event on a given pull request. */
  ADDED_TO_MERGE_QUEUE_EVENT: "ADDED_TO_MERGE_QUEUE_EVENT",
  /** Represents a 'added_to_project' event on a given issue or pull request. */
  ADDED_TO_PROJECT_EVENT: "ADDED_TO_PROJECT_EVENT",
  /** Represents an 'assigned' event on any assignable object. */
  ASSIGNED_EVENT: "ASSIGNED_EVENT",
  /** Represents a 'automatic_base_change_failed' event on a given pull request. */
  AUTOMATIC_BASE_CHANGE_FAILED_EVENT: "AUTOMATIC_BASE_CHANGE_FAILED_EVENT",
  /** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
  AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT:
    "AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT",
  /** Represents a 'auto_merge_disabled' event on a given pull request. */
  AUTO_MERGE_DISABLED_EVENT: "AUTO_MERGE_DISABLED_EVENT",
  /** Represents a 'auto_merge_enabled' event on a given pull request. */
  AUTO_MERGE_ENABLED_EVENT: "AUTO_MERGE_ENABLED_EVENT",
  /** Represents a 'auto_rebase_enabled' event on a given pull request. */
  AUTO_REBASE_ENABLED_EVENT: "AUTO_REBASE_ENABLED_EVENT",
  /** Represents a 'auto_squash_enabled' event on a given pull request. */
  AUTO_SQUASH_ENABLED_EVENT: "AUTO_SQUASH_ENABLED_EVENT",
  /** Represents a 'base_ref_changed' event on a given issue or pull request. */
  BASE_REF_CHANGED_EVENT: "BASE_REF_CHANGED_EVENT",
  /** Represents a 'base_ref_deleted' event on a given pull request. */
  BASE_REF_DELETED_EVENT: "BASE_REF_DELETED_EVENT",
  /** Represents a 'base_ref_force_pushed' event on a given pull request. */
  BASE_REF_FORCE_PUSHED_EVENT: "BASE_REF_FORCE_PUSHED_EVENT",
  /** Represents a 'closed' event on any `Closable`. */
  CLOSED_EVENT: "CLOSED_EVENT",
  /** Represents a 'comment_deleted' event on a given issue or pull request. */
  COMMENT_DELETED_EVENT: "COMMENT_DELETED_EVENT",
  /** Represents a 'connected' event on a given issue or pull request. */
  CONNECTED_EVENT: "CONNECTED_EVENT",
  /** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
  CONVERTED_NOTE_TO_ISSUE_EVENT: "CONVERTED_NOTE_TO_ISSUE_EVENT",
  /** Represents a 'converted_to_discussion' event on a given issue. */
  CONVERTED_TO_DISCUSSION_EVENT: "CONVERTED_TO_DISCUSSION_EVENT",
  /** Represents a 'convert_to_draft' event on a given pull request. */
  CONVERT_TO_DRAFT_EVENT: "CONVERT_TO_DRAFT_EVENT",
  /** Represents a mention made by one issue or pull request to another. */
  CROSS_REFERENCED_EVENT: "CROSS_REFERENCED_EVENT",
  /** Represents a 'demilestoned' event on a given issue or pull request. */
  DEMILESTONED_EVENT: "DEMILESTONED_EVENT",
  /** Represents a 'deployed' event on a given pull request. */
  DEPLOYED_EVENT: "DEPLOYED_EVENT",
  /** Represents a 'deployment_environment_changed' event on a given pull request. */
  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT: "DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT",
  /** Represents a 'disconnected' event on a given issue or pull request. */
  DISCONNECTED_EVENT: "DISCONNECTED_EVENT",
  /** Represents a 'head_ref_deleted' event on a given pull request. */
  HEAD_REF_DELETED_EVENT: "HEAD_REF_DELETED_EVENT",
  /** Represents a 'head_ref_force_pushed' event on a given pull request. */
  HEAD_REF_FORCE_PUSHED_EVENT: "HEAD_REF_FORCE_PUSHED_EVENT",
  /** Represents a 'head_ref_restored' event on a given pull request. */
  HEAD_REF_RESTORED_EVENT: "HEAD_REF_RESTORED_EVENT",
  /** Represents a comment on an Issue. */
  ISSUE_COMMENT: "ISSUE_COMMENT",
  /** Represents a 'labeled' event on a given issue or pull request. */
  LABELED_EVENT: "LABELED_EVENT",
  /** Represents a 'locked' event on a given issue or pull request. */
  LOCKED_EVENT: "LOCKED_EVENT",
  /** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
  MARKED_AS_DUPLICATE_EVENT: "MARKED_AS_DUPLICATE_EVENT",
  /** Represents a 'mentioned' event on a given issue or pull request. */
  MENTIONED_EVENT: "MENTIONED_EVENT",
  /** Represents a 'merged' event on a given pull request. */
  MERGED_EVENT: "MERGED_EVENT",
  /** Represents a 'milestoned' event on a given issue or pull request. */
  MILESTONED_EVENT: "MILESTONED_EVENT",
  /** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
  MOVED_COLUMNS_IN_PROJECT_EVENT: "MOVED_COLUMNS_IN_PROJECT_EVENT",
  /** Represents a 'pinned' event on a given issue or pull request. */
  PINNED_EVENT: "PINNED_EVENT",
  /** Represents a Git commit part of a pull request. */
  PULL_REQUEST_COMMIT: "PULL_REQUEST_COMMIT",
  /** Represents a commit comment thread part of a pull request. */
  PULL_REQUEST_COMMIT_COMMENT_THREAD: "PULL_REQUEST_COMMIT_COMMENT_THREAD",
  /** A review object for a given pull request. */
  PULL_REQUEST_REVIEW: "PULL_REQUEST_REVIEW",
  /** A threaded list of comments for a given pull request. */
  PULL_REQUEST_REVIEW_THREAD: "PULL_REQUEST_REVIEW_THREAD",
  /** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
  PULL_REQUEST_REVISION_MARKER: "PULL_REQUEST_REVISION_MARKER",
  /** Represents a 'ready_for_review' event on a given pull request. */
  READY_FOR_REVIEW_EVENT: "READY_FOR_REVIEW_EVENT",
  /** Represents a 'referenced' event on a given `ReferencedSubject`. */
  REFERENCED_EVENT: "REFERENCED_EVENT",
  /** Represents a 'removed_from_merge_queue' event on a given pull request. */
  REMOVED_FROM_MERGE_QUEUE_EVENT: "REMOVED_FROM_MERGE_QUEUE_EVENT",
  /** Represents a 'removed_from_project' event on a given issue or pull request. */
  REMOVED_FROM_PROJECT_EVENT: "REMOVED_FROM_PROJECT_EVENT",
  /** Represents a 'renamed' event on a given issue or pull request */
  RENAMED_TITLE_EVENT: "RENAMED_TITLE_EVENT",
  /** Represents a 'reopened' event on any `Closable`. */
  REOPENED_EVENT: "REOPENED_EVENT",
  /** Represents a 'review_dismissed' event on a given issue or pull request. */
  REVIEW_DISMISSED_EVENT: "REVIEW_DISMISSED_EVENT",
  /** Represents an 'review_requested' event on a given pull request. */
  REVIEW_REQUESTED_EVENT: "REVIEW_REQUESTED_EVENT",
  /** Represents an 'review_request_removed' event on a given pull request. */
  REVIEW_REQUEST_REMOVED_EVENT: "REVIEW_REQUEST_REMOVED_EVENT",
  /** Represents a 'subscribed' event on a given `Subscribable`. */
  SUBSCRIBED_EVENT: "SUBSCRIBED_EVENT",
  /** Represents a 'transferred' event on a given issue or pull request. */
  TRANSFERRED_EVENT: "TRANSFERRED_EVENT",
  /** Represents an 'unassigned' event on any assignable object. */
  UNASSIGNED_EVENT: "UNASSIGNED_EVENT",
  /** Represents an 'unlabeled' event on a given issue or pull request. */
  UNLABELED_EVENT: "UNLABELED_EVENT",
  /** Represents an 'unlocked' event on a given issue or pull request. */
  UNLOCKED_EVENT: "UNLOCKED_EVENT",
  /** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
  UNMARKED_AS_DUPLICATE_EVENT: "UNMARKED_AS_DUPLICATE_EVENT",
  /** Represents an 'unpinned' event on a given issue or pull request. */
  UNPINNED_EVENT: "UNPINNED_EVENT",
  /** Represents an 'unsubscribed' event on a given `Subscribable`. */
  UNSUBSCRIBED_EVENT: "UNSUBSCRIBED_EVENT",
  /** Represents a 'user_blocked' event on a given user. */
  USER_BLOCKED_EVENT: "USER_BLOCKED_EVENT",
} as const;

export type PullRequestTimelineItemsItemType =
  (typeof PullRequestTimelineItemsItemType)[keyof typeof PullRequestTimelineItemsItemType];
/** The possible target states when updating a pull request. */
export const PullRequestUpdateState = {
  /** A pull request that has been closed without being merged. */
  CLOSED: "CLOSED",
  /** A pull request that is still open. */
  OPEN: "OPEN",
} as const;

export type PullRequestUpdateState =
  (typeof PullRequestUpdateState)[keyof typeof PullRequestUpdateState];
/** Emojis that can be attached to Issues, Pull Requests and Comments. */
export const ReactionContent = {
  /** Represents the `:confused:` emoji. */
  CONFUSED: "CONFUSED",
  /** Represents the `:eyes:` emoji. */
  EYES: "EYES",
  /** Represents the `:heart:` emoji. */
  HEART: "HEART",
  /** Represents the `:hooray:` emoji. */
  HOORAY: "HOORAY",
  /** Represents the `:laugh:` emoji. */
  LAUGH: "LAUGH",
  /** Represents the `:rocket:` emoji. */
  ROCKET: "ROCKET",
  /** Represents the `:-1:` emoji. */
  THUMBS_DOWN: "THUMBS_DOWN",
  /** Represents the `:+1:` emoji. */
  THUMBS_UP: "THUMBS_UP",
} as const;

export type ReactionContent =
  (typeof ReactionContent)[keyof typeof ReactionContent];
/** Ways in which lists of reactions can be ordered upon return. */
export interface ReactionOrder {
  /** The direction in which to order reactions by the specified field. */
  direction: OrderDirection;
  /** The field in which to order reactions by. */
  field: ReactionOrderField;
}

/** A list of fields that reactions can be ordered by. */
export const ReactionOrderField = {
  /** Allows ordering a list of reactions by when they were created. */
  CREATED_AT: "CREATED_AT",
} as const;

export type ReactionOrderField =
  (typeof ReactionOrderField)[keyof typeof ReactionOrderField];
/** Parameters to be used for the ref_name condition */
export interface RefNameConditionTargetInput {
  /** Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match. */
  exclude: Array<Scalars["String"]>;
  /** Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches. */
  include: Array<Scalars["String"]>;
}

/** Ways in which lists of git refs can be ordered upon return. */
export interface RefOrder {
  /** The direction in which to order refs by the specified field. */
  direction: OrderDirection;
  /** The field in which to order refs by. */
  field: RefOrderField;
}

/** Properties by which ref connections can be ordered. */
export const RefOrderField = {
  /** Order refs by their alphanumeric name */
  ALPHABETICAL: "ALPHABETICAL",
  /** Order refs by underlying commit date if the ref prefix is refs/tags/ */
  TAG_COMMIT_DATE: "TAG_COMMIT_DATE",
} as const;

export type RefOrderField = (typeof RefOrderField)[keyof typeof RefOrderField];
/** Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
export interface RegenerateEnterpriseIdentityProviderRecoveryCodesInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set an identity provider. */
  enterpriseId: Scalars["ID"];
}

/** Autogenerated input type of RegenerateVerifiableDomainToken */
export interface RegenerateVerifiableDomainTokenInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the verifiable domain to regenerate the verification token of. */
  id: Scalars["ID"];
}

/** Autogenerated input type of RejectDeployments */
export interface RejectDeploymentsInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Optional comment for rejecting deployments */
  comment?: InputMaybe<Scalars["String"]>;
  /** The ids of environments to reject deployments */
  environmentIds: Array<Scalars["ID"]>;
  /** The node ID of the workflow run containing the pending deployments. */
  workflowRunId: Scalars["ID"];
}

/** Ways in which lists of releases can be ordered upon return. */
export interface ReleaseOrder {
  /** The direction in which to order releases by the specified field. */
  direction: OrderDirection;
  /** The field in which to order releases by. */
  field: ReleaseOrderField;
}

/** Properties by which release connections can be ordered. */
export const ReleaseOrderField = {
  /** Order releases by creation time */
  CREATED_AT: "CREATED_AT",
  /** Order releases alphabetically by name */
  NAME: "NAME",
} as const;

export type ReleaseOrderField =
  (typeof ReleaseOrderField)[keyof typeof ReleaseOrderField];
/** Autogenerated input type of RemoveAssigneesFromAssignable */
export interface RemoveAssigneesFromAssignableInput {
  /** The id of the assignable object to remove assignees from. */
  assignableId: Scalars["ID"];
  /** The id of users to remove as assignees. */
  assigneeIds: Array<Scalars["ID"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of RemoveEnterpriseAdmin */
export interface RemoveEnterpriseAdminInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Enterprise ID from which to remove the administrator. */
  enterpriseId: Scalars["ID"];
  /** The login of the user to remove as an administrator. */
  login: Scalars["String"];
}

/** Autogenerated input type of RemoveEnterpriseIdentityProvider */
export interface RemoveEnterpriseIdentityProviderInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise from which to remove the identity provider. */
  enterpriseId: Scalars["ID"];
}

/** Autogenerated input type of RemoveEnterpriseMember */
export interface RemoveEnterpriseMemberInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise from which the user should be removed. */
  enterpriseId: Scalars["ID"];
  /** The ID of the user to remove from the enterprise. */
  userId: Scalars["ID"];
}

/** Autogenerated input type of RemoveEnterpriseOrganization */
export interface RemoveEnterpriseOrganizationInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise from which the organization should be removed. */
  enterpriseId: Scalars["ID"];
  /** The ID of the organization to remove from the enterprise. */
  organizationId: Scalars["ID"];
}

/** Autogenerated input type of RemoveEnterpriseSupportEntitlement */
export interface RemoveEnterpriseSupportEntitlementInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the Enterprise which the admin belongs to. */
  enterpriseId: Scalars["ID"];
  /** The login of a member who will lose the support entitlement. */
  login: Scalars["String"];
}

/** Autogenerated input type of RemoveLabelsFromLabelable */
export interface RemoveLabelsFromLabelableInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ids of labels to remove. */
  labelIds: Array<Scalars["ID"]>;
  /** The id of the Labelable to remove labels from. */
  labelableId: Scalars["ID"];
}

/** Autogenerated input type of RemoveOutsideCollaborator */
export interface RemoveOutsideCollaboratorInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the organization to remove the outside collaborator from. */
  organizationId: Scalars["ID"];
  /** The ID of the outside collaborator to remove. */
  userId: Scalars["ID"];
}

/** Autogenerated input type of RemoveReaction */
export interface RemoveReactionInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of the emoji reaction to remove. */
  content: ReactionContent;
  /** The Node ID of the subject to modify. */
  subjectId: Scalars["ID"];
}

/** Autogenerated input type of RemoveStar */
export interface RemoveStarInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Starrable ID to unstar. */
  starrableId: Scalars["ID"];
}

/** Autogenerated input type of RemoveUpvote */
export interface RemoveUpvoteInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the discussion or comment to remove upvote. */
  subjectId: Scalars["ID"];
}

/** Autogenerated input type of ReopenDiscussion */
export interface ReopenDiscussionInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the discussion to be reopened. */
  discussionId: Scalars["ID"];
}

/** Autogenerated input type of ReopenIssue */
export interface ReopenIssueInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the issue to be opened. */
  issueId: Scalars["ID"];
}

/** Autogenerated input type of ReopenPullRequest */
export interface ReopenPullRequestInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the pull request to be reopened. */
  pullRequestId: Scalars["ID"];
}

/** The privacy of a repository */
export const RepoAccessAuditEntryVisibility = {
  /** The repository is visible only to users in the same business. */
  INTERNAL: "INTERNAL",
  /** The repository is visible only to those with explicit access. */
  PRIVATE: "PRIVATE",
  /** The repository is visible to everyone. */
  PUBLIC: "PUBLIC",
} as const;

export type RepoAccessAuditEntryVisibility =
  (typeof RepoAccessAuditEntryVisibility)[keyof typeof RepoAccessAuditEntryVisibility];
/** The privacy of a repository */
export const RepoAddMemberAuditEntryVisibility = {
  /** The repository is visible only to users in the same business. */
  INTERNAL: "INTERNAL",
  /** The repository is visible only to those with explicit access. */
  PRIVATE: "PRIVATE",
  /** The repository is visible to everyone. */
  PUBLIC: "PUBLIC",
} as const;

export type RepoAddMemberAuditEntryVisibility =
  (typeof RepoAddMemberAuditEntryVisibility)[keyof typeof RepoAddMemberAuditEntryVisibility];
/** The privacy of a repository */
export const RepoArchivedAuditEntryVisibility = {
  /** The repository is visible only to users in the same business. */
  INTERNAL: "INTERNAL",
  /** The repository is visible only to those with explicit access. */
  PRIVATE: "PRIVATE",
  /** The repository is visible to everyone. */
  PUBLIC: "PUBLIC",
} as const;

export type RepoArchivedAuditEntryVisibility =
  (typeof RepoArchivedAuditEntryVisibility)[keyof typeof RepoArchivedAuditEntryVisibility];
/** The merge options available for pull requests to this repository. */
export const RepoChangeMergeSettingAuditEntryMergeType = {
  /** The pull request is added to the base branch in a merge commit. */
  MERGE: "MERGE",
  /** Commits from the pull request are added onto the base branch individually without a merge commit. */
  REBASE: "REBASE",
  /** The pull request's commits are squashed into a single commit before they are merged to the base branch. */
  SQUASH: "SQUASH",
} as const;

export type RepoChangeMergeSettingAuditEntryMergeType =
  (typeof RepoChangeMergeSettingAuditEntryMergeType)[keyof typeof RepoChangeMergeSettingAuditEntryMergeType];
/** The privacy of a repository */
export const RepoCreateAuditEntryVisibility = {
  /** The repository is visible only to users in the same business. */
  INTERNAL: "INTERNAL",
  /** The repository is visible only to those with explicit access. */
  PRIVATE: "PRIVATE",
  /** The repository is visible to everyone. */
  PUBLIC: "PUBLIC",
} as const;

export type RepoCreateAuditEntryVisibility =
  (typeof RepoCreateAuditEntryVisibility)[keyof typeof RepoCreateAuditEntryVisibility];
/** The privacy of a repository */
export const RepoDestroyAuditEntryVisibility = {
  /** The repository is visible only to users in the same business. */
  INTERNAL: "INTERNAL",
  /** The repository is visible only to those with explicit access. */
  PRIVATE: "PRIVATE",
  /** The repository is visible to everyone. */
  PUBLIC: "PUBLIC",
} as const;

export type RepoDestroyAuditEntryVisibility =
  (typeof RepoDestroyAuditEntryVisibility)[keyof typeof RepoDestroyAuditEntryVisibility];
/** The privacy of a repository */
export const RepoRemoveMemberAuditEntryVisibility = {
  /** The repository is visible only to users in the same business. */
  INTERNAL: "INTERNAL",
  /** The repository is visible only to those with explicit access. */
  PRIVATE: "PRIVATE",
  /** The repository is visible to everyone. */
  PUBLIC: "PUBLIC",
} as const;

export type RepoRemoveMemberAuditEntryVisibility =
  (typeof RepoRemoveMemberAuditEntryVisibility)[keyof typeof RepoRemoveMemberAuditEntryVisibility];
/** The reasons a piece of content can be reported or minimized. */
export const ReportedContentClassifiers = {
  /** An abusive or harassing piece of content */
  ABUSE: "ABUSE",
  /** A duplicated piece of content */
  DUPLICATE: "DUPLICATE",
  /** An irrelevant piece of content */
  OFF_TOPIC: "OFF_TOPIC",
  /** An outdated piece of content */
  OUTDATED: "OUTDATED",
  /** The content has been resolved */
  RESOLVED: "RESOLVED",
  /** A spammy piece of content */
  SPAM: "SPAM",
} as const;

export type ReportedContentClassifiers =
  (typeof ReportedContentClassifiers)[keyof typeof ReportedContentClassifiers];
/** The affiliation of a user to a repository */
export const RepositoryAffiliation = {
  /** Repositories that the user has been added to as a collaborator. */
  COLLABORATOR: "COLLABORATOR",
  /** Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. */
  ORGANIZATION_MEMBER: "ORGANIZATION_MEMBER",
  /** Repositories that are owned by the authenticated user. */
  OWNER: "OWNER",
} as const;

export type RepositoryAffiliation =
  (typeof RepositoryAffiliation)[keyof typeof RepositoryAffiliation];
/** The reason a repository is listed as 'contributed'. */
export const RepositoryContributionType = {
  /** Created a commit */
  COMMIT: "COMMIT",
  /** Created an issue */
  ISSUE: "ISSUE",
  /** Created a pull request */
  PULL_REQUEST: "PULL_REQUEST",
  /** Reviewed a pull request */
  PULL_REQUEST_REVIEW: "PULL_REQUEST_REVIEW",
  /** Created the repository */
  REPOSITORY: "REPOSITORY",
} as const;

export type RepositoryContributionType =
  (typeof RepositoryContributionType)[keyof typeof RepositoryContributionType];
/** Parameters to be used for the repository_id condition */
export interface RepositoryIdConditionTargetInput {
  /** One of these repo IDs must match the repo. */
  repositoryIds: Array<Scalars["ID"]>;
}

/** A repository interaction limit. */
export const RepositoryInteractionLimit = {
  /** Users that are not collaborators will not be able to interact with the repository. */
  COLLABORATORS_ONLY: "COLLABORATORS_ONLY",
  /** Users that have not previously committed to a repository’s default branch will be unable to interact with the repository. */
  CONTRIBUTORS_ONLY: "CONTRIBUTORS_ONLY",
  /** Users that have recently created their account will be unable to interact with the repository. */
  EXISTING_USERS: "EXISTING_USERS",
  /** No interaction limits are enabled. */
  NO_LIMIT: "NO_LIMIT",
} as const;

export type RepositoryInteractionLimit =
  (typeof RepositoryInteractionLimit)[keyof typeof RepositoryInteractionLimit];
/** The length for a repository interaction limit to be enabled for. */
export const RepositoryInteractionLimitExpiry = {
  /** The interaction limit will expire after 1 day. */
  ONE_DAY: "ONE_DAY",
  /** The interaction limit will expire after 1 month. */
  ONE_MONTH: "ONE_MONTH",
  /** The interaction limit will expire after 1 week. */
  ONE_WEEK: "ONE_WEEK",
  /** The interaction limit will expire after 6 months. */
  SIX_MONTHS: "SIX_MONTHS",
  /** The interaction limit will expire after 3 days. */
  THREE_DAYS: "THREE_DAYS",
} as const;

export type RepositoryInteractionLimitExpiry =
  (typeof RepositoryInteractionLimitExpiry)[keyof typeof RepositoryInteractionLimitExpiry];
/** Indicates where an interaction limit is configured. */
export const RepositoryInteractionLimitOrigin = {
  /** A limit that is configured at the organization level. */
  ORGANIZATION: "ORGANIZATION",
  /** A limit that is configured at the repository level. */
  REPOSITORY: "REPOSITORY",
  /** A limit that is configured at the user-wide level. */
  USER: "USER",
} as const;

export type RepositoryInteractionLimitOrigin =
  (typeof RepositoryInteractionLimitOrigin)[keyof typeof RepositoryInteractionLimitOrigin];
/** Ordering options for repository invitation connections. */
export interface RepositoryInvitationOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order repository invitations by. */
  field: RepositoryInvitationOrderField;
}

/** Properties by which repository invitation connections can be ordered. */
export const RepositoryInvitationOrderField = {
  /** Order repository invitations by creation time */
  CREATED_AT: "CREATED_AT",
} as const;

export type RepositoryInvitationOrderField =
  (typeof RepositoryInvitationOrderField)[keyof typeof RepositoryInvitationOrderField];
/** The possible reasons a given repository could be in a locked state. */
export const RepositoryLockReason = {
  /** The repository is locked due to a billing related reason. */
  BILLING: "BILLING",
  /** The repository is locked due to a migration. */
  MIGRATING: "MIGRATING",
  /** The repository is locked due to a move. */
  MOVING: "MOVING",
  /** The repository is locked due to a rename. */
  RENAME: "RENAME",
  /** The repository is locked due to a trade controls related reason. */
  TRADE_RESTRICTION: "TRADE_RESTRICTION",
  /** The repository is locked due to an ownership transfer. */
  TRANSFERRING_OWNERSHIP: "TRANSFERRING_OWNERSHIP",
} as const;

export type RepositoryLockReason =
  (typeof RepositoryLockReason)[keyof typeof RepositoryLockReason];
/** Ordering options for repository migrations. */
export interface RepositoryMigrationOrder {
  /** The ordering direction. */
  direction: RepositoryMigrationOrderDirection;
  /** The field to order repository migrations by. */
  field: RepositoryMigrationOrderField;
}

/** Possible directions in which to order a list of repository migrations when provided an `orderBy` argument. */
export const RepositoryMigrationOrderDirection = {
  /** Specifies an ascending order for a given `orderBy` argument. */
  ASC: "ASC",
  /** Specifies a descending order for a given `orderBy` argument. */
  DESC: "DESC",
} as const;

export type RepositoryMigrationOrderDirection =
  (typeof RepositoryMigrationOrderDirection)[keyof typeof RepositoryMigrationOrderDirection];
/** Properties by which repository migrations can be ordered. */
export const RepositoryMigrationOrderField = {
  /** Order mannequins why when they were created. */
  CREATED_AT: "CREATED_AT",
} as const;

export type RepositoryMigrationOrderField =
  (typeof RepositoryMigrationOrderField)[keyof typeof RepositoryMigrationOrderField];
/** Parameters to be used for the repository_name condition */
export interface RepositoryNameConditionTargetInput {
  /** Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match. */
  exclude: Array<Scalars["String"]>;
  /** Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories. */
  include: Array<Scalars["String"]>;
  /** Target changes that match these patterns will be prevented except by those with bypass permissions. */
  protected?: InputMaybe<Scalars["Boolean"]>;
}

/** Ordering options for repository connections */
export interface RepositoryOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order repositories by. */
  field: RepositoryOrderField;
}

/** Properties by which repository connections can be ordered. */
export const RepositoryOrderField = {
  /** Order repositories by creation time */
  CREATED_AT: "CREATED_AT",
  /** Order repositories by name */
  NAME: "NAME",
  /** Order repositories by push time */
  PUSHED_AT: "PUSHED_AT",
  /** Order repositories by number of stargazers */
  STARGAZERS: "STARGAZERS",
  /** Order repositories by update time */
  UPDATED_AT: "UPDATED_AT",
} as const;

export type RepositoryOrderField =
  (typeof RepositoryOrderField)[keyof typeof RepositoryOrderField];
/** The access level to a repository */
export const RepositoryPermission = {
  /** Can read, clone, and push to this repository. Can also manage issues, pull requests, and repository settings, including adding collaborators */
  ADMIN: "ADMIN",
  /** Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings */
  MAINTAIN: "MAINTAIN",
  /** Can read and clone this repository. Can also open and comment on issues and pull requests */
  READ: "READ",
  /** Can read and clone this repository. Can also manage issues and pull requests */
  TRIAGE: "TRIAGE",
  /** Can read, clone, and push to this repository. Can also manage issues and pull requests */
  WRITE: "WRITE",
} as const;

export type RepositoryPermission =
  (typeof RepositoryPermission)[keyof typeof RepositoryPermission];
/** The privacy of a repository */
export const RepositoryPrivacy = {
  /** Private */
  PRIVATE: "PRIVATE",
  /** Public */
  PUBLIC: "PUBLIC",
} as const;

export type RepositoryPrivacy =
  (typeof RepositoryPrivacy)[keyof typeof RepositoryPrivacy];
/** Specifies the conditions required for a ruleset to evaluate */
export interface RepositoryRuleConditionsInput {
  /** Configuration for the ref_name condition */
  refName?: InputMaybe<RefNameConditionTargetInput>;
  /** Configuration for the repository_id condition */
  repositoryId?: InputMaybe<RepositoryIdConditionTargetInput>;
  /** Configuration for the repository_name condition */
  repositoryName?: InputMaybe<RepositoryNameConditionTargetInput>;
}

/** Specifies the attributes for a new or updated rule. */
export interface RepositoryRuleInput {
  /** Optional ID of this rule when updating */
  id?: InputMaybe<Scalars["ID"]>;
  /** The parameters for the rule. */
  parameters?: InputMaybe<RuleParametersInput>;
  /** The type of rule to create. */
  type: RepositoryRuleType;
}

/** The rule types supported in rulesets */
export const RepositoryRuleType = {
  /** Authorization */
  AUTHORIZATION: "AUTHORIZATION",
  /** Branch name pattern */
  BRANCH_NAME_PATTERN: "BRANCH_NAME_PATTERN",
  /** Committer email pattern */
  COMMITTER_EMAIL_PATTERN: "COMMITTER_EMAIL_PATTERN",
  /** Commit author email pattern */
  COMMIT_AUTHOR_EMAIL_PATTERN: "COMMIT_AUTHOR_EMAIL_PATTERN",
  /** Commit message pattern */
  COMMIT_MESSAGE_PATTERN: "COMMIT_MESSAGE_PATTERN",
  /** Only allow users with bypass permission to create matching refs. */
  CREATION: "CREATION",
  /** Only allow users with bypass permissions to delete matching refs. */
  DELETION: "DELETION",
  /** Branch is read-only. Users cannot push to the branch. */
  LOCK_BRANCH: "LOCK_BRANCH",
  /** Max ref updates */
  MAX_REF_UPDATES: "MAX_REF_UPDATES",
  /** Merges must be performed via a merge queue. */
  MERGE_QUEUE: "MERGE_QUEUE",
  /** Merge queue locked ref */
  MERGE_QUEUE_LOCKED_REF: "MERGE_QUEUE_LOCKED_REF",
  /** Prevent users with push access from force pushing to refs. */
  NON_FAST_FORWARD: "NON_FAST_FORWARD",
  /** Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. */
  PULL_REQUEST: "PULL_REQUEST",
  /** Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule. */
  REQUIRED_DEPLOYMENTS: "REQUIRED_DEPLOYMENTS",
  /** Prevent merge commits from being pushed to matching refs. */
  REQUIRED_LINEAR_HISTORY: "REQUIRED_LINEAR_HISTORY",
  /** When enabled, all conversations on code must be resolved before a pull request can be merged into a branch that matches this rule. */
  REQUIRED_REVIEW_THREAD_RESOLUTION: "REQUIRED_REVIEW_THREAD_RESOLUTION",
  /** Commits pushed to matching refs must have verified signatures. */
  REQUIRED_SIGNATURES: "REQUIRED_SIGNATURES",
  /** Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass. */
  REQUIRED_STATUS_CHECKS: "REQUIRED_STATUS_CHECKS",
  /** Require all commits be made to a non-target branch and submitted via a pull request and required workflow checks to pass before they can be merged. */
  REQUIRED_WORKFLOW_STATUS_CHECKS: "REQUIRED_WORKFLOW_STATUS_CHECKS",
  /** Commits pushed to matching refs must have verified signatures. */
  RULESET_REQUIRED_SIGNATURES: "RULESET_REQUIRED_SIGNATURES",
  /** Secret scanning */
  SECRET_SCANNING: "SECRET_SCANNING",
  /** Tag */
  TAG: "TAG",
  /** Tag name pattern */
  TAG_NAME_PATTERN: "TAG_NAME_PATTERN",
  /** Only allow users with bypass permission to update matching refs. */
  UPDATE: "UPDATE",
  /** Require all changes made to a targeted branch to pass the specified workflows before they can be merged. */
  WORKFLOWS: "WORKFLOWS",
  /** Workflow files cannot be modified. */
  WORKFLOW_UPDATES: "WORKFLOW_UPDATES",
} as const;

export type RepositoryRuleType =
  (typeof RepositoryRuleType)[keyof typeof RepositoryRuleType];
/** The bypass mode for a specific actor on a ruleset. */
export const RepositoryRulesetBypassActorBypassMode = {
  /** The actor can always bypass rules */
  ALWAYS: "ALWAYS",
  /** The actor can only bypass rules via a pull request */
  PULL_REQUEST: "PULL_REQUEST",
} as const;

export type RepositoryRulesetBypassActorBypassMode =
  (typeof RepositoryRulesetBypassActorBypassMode)[keyof typeof RepositoryRulesetBypassActorBypassMode];
/** Specifies the attributes for a new or updated ruleset bypass actor. Only one of `actor_id`, `repository_role_database_id`, or `organization_admin` should be specified. */
export interface RepositoryRulesetBypassActorInput {
  /** For Team and Integration bypasses, the Team or Integration ID */
  actorId?: InputMaybe<Scalars["ID"]>;
  /** The bypass mode for this actor. */
  bypassMode: RepositoryRulesetBypassActorBypassMode;
  /** For org admin bupasses, true */
  organizationAdmin?: InputMaybe<Scalars["Boolean"]>;
  /** For role bypasses, the role database ID */
  repositoryRoleDatabaseId?: InputMaybe<Scalars["Int"]>;
}

/** The targets supported for rulesets */
export const RepositoryRulesetTarget = {
  /** Branch */
  BRANCH: "BRANCH",
  /** Tag */
  TAG: "TAG",
} as const;

export type RepositoryRulesetTarget =
  (typeof RepositoryRulesetTarget)[keyof typeof RepositoryRulesetTarget];
/** The repository's visibility level. */
export const RepositoryVisibility = {
  /** The repository is visible only to users in the same business. */
  INTERNAL: "INTERNAL",
  /** The repository is visible only to those with explicit access. */
  PRIVATE: "PRIVATE",
  /** The repository is visible to everyone. */
  PUBLIC: "PUBLIC",
} as const;

export type RepositoryVisibility =
  (typeof RepositoryVisibility)[keyof typeof RepositoryVisibility];
/** The possible scopes of an alert's dependency. */
export const RepositoryVulnerabilityAlertDependencyScope = {
  /** A dependency that is only used in development */
  DEVELOPMENT: "DEVELOPMENT",
  /** A dependency that is leveraged during application runtime */
  RUNTIME: "RUNTIME",
} as const;

export type RepositoryVulnerabilityAlertDependencyScope =
  (typeof RepositoryVulnerabilityAlertDependencyScope)[keyof typeof RepositoryVulnerabilityAlertDependencyScope];
/** The possible states of an alert */
export const RepositoryVulnerabilityAlertState = {
  /** An alert that has been automatically closed by Dependabot. */
  AUTO_DISMISSED: "AUTO_DISMISSED",
  /** An alert that has been manually closed by a user. */
  DISMISSED: "DISMISSED",
  /** An alert that has been resolved by a code change. */
  FIXED: "FIXED",
  /** An alert that is still open. */
  OPEN: "OPEN",
} as const;

export type RepositoryVulnerabilityAlertState =
  (typeof RepositoryVulnerabilityAlertState)[keyof typeof RepositoryVulnerabilityAlertState];
/** Autogenerated input type of RequestReviews */
export interface RequestReviewsInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the pull request to modify. */
  pullRequestId: Scalars["ID"];
  /** The Node IDs of the team to request. */
  teamIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** Add users to the set rather than replace. */
  union?: InputMaybe<Scalars["Boolean"]>;
  /** The Node IDs of the user to request. */
  userIds?: InputMaybe<Array<Scalars["ID"]>>;
}

/** The possible states that can be requested when creating a check run. */
export const RequestableCheckStatusState = {
  /** The check suite or run has been completed. */
  COMPLETED: "COMPLETED",
  /** The check suite or run is in progress. */
  IN_PROGRESS: "IN_PROGRESS",
  /** The check suite or run is in pending state. */
  PENDING: "PENDING",
  /** The check suite or run has been queued. */
  QUEUED: "QUEUED",
  /** The check suite or run is in waiting state. */
  WAITING: "WAITING",
} as const;

export type RequestableCheckStatusState =
  (typeof RequestableCheckStatusState)[keyof typeof RequestableCheckStatusState];
/** Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule. */
export interface RequiredDeploymentsParametersInput {
  /** The environments that must be successfully deployed to before branches can be merged. */
  requiredDeploymentEnvironments: Array<Scalars["String"]>;
}

/** Specifies the attributes for a new or updated required status check. */
export interface RequiredStatusCheckInput {
  /** The ID of the App that must set the status in order for it to be accepted. Omit this value to use whichever app has recently been setting this status, or use "any" to allow any app to set the status. */
  appId?: InputMaybe<Scalars["ID"]>;
  /** Status check context that must pass for commits to be accepted to the matching branch. */
  context: Scalars["String"];
}

/** Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass. */
export interface RequiredStatusChecksParametersInput {
  /** Status checks that are required. */
  requiredStatusChecks: Array<StatusCheckConfigurationInput>;
  /** Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. */
  strictRequiredStatusChecksPolicy: Scalars["Boolean"];
}

/** Autogenerated input type of RerequestCheckSuite */
export interface RerequestCheckSuiteInput {
  /** The Node ID of the check suite. */
  checkSuiteId: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the repository. */
  repositoryId: Scalars["ID"];
}

/** Autogenerated input type of ResolveReviewThread */
export interface ResolveReviewThreadInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the thread to resolve */
  threadId: Scalars["ID"];
}

/** Autogenerated input type of RetireSponsorsTier */
export interface RetireSponsorsTierInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the published tier to retire. */
  tierId: Scalars["ID"];
}

/** Autogenerated input type of RevertPullRequest */
export interface RevertPullRequestInput {
  /** The description of the revert pull request. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Indicates whether the revert pull request should be a draft. */
  draft?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the pull request to revert. */
  pullRequestId: Scalars["ID"];
  /** The title of the revert pull request. */
  title?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole */
export interface RevokeEnterpriseOrganizationsMigratorRoleInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
  enterpriseId: Scalars["ID"];
  /** The login of the user to revoke the migrator role */
  login: Scalars["String"];
}

/** Autogenerated input type of RevokeMigratorRole */
export interface RevokeMigratorRoleInput {
  /** The user login or Team slug to revoke the migrator role from. */
  actor: Scalars["String"];
  /** Specifies the type of the actor, can be either USER or TEAM. */
  actorType: ActorType;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the organization that the user/team belongs to. */
  organizationId: Scalars["ID"];
}

/** Possible roles a user may have in relation to an organization. */
export const RoleInOrganization = {
  /** A user who is a direct member of the organization. */
  DIRECT_MEMBER: "DIRECT_MEMBER",
  /** A user with full administrative access to the organization. */
  OWNER: "OWNER",
  /** A user who is unaffiliated with the organization. */
  UNAFFILIATED: "UNAFFILIATED",
} as const;

export type RoleInOrganization =
  (typeof RoleInOrganization)[keyof typeof RoleInOrganization];
/** The level of enforcement for a rule or ruleset. */
export const RuleEnforcement = {
  /** Rules will be enforced */
  ACTIVE: "ACTIVE",
  /** Do not evaluate or enforce rules */
  DISABLED: "DISABLED",
  /** Allow admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise). */
  EVALUATE: "EVALUATE",
} as const;

export type RuleEnforcement =
  (typeof RuleEnforcement)[keyof typeof RuleEnforcement];
/** Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified. */
export interface RuleParametersInput {
  /** Parameters used for the `branch_name_pattern` rule type */
  branchNamePattern?: InputMaybe<BranchNamePatternParametersInput>;
  /** Parameters used for the `commit_author_email_pattern` rule type */
  commitAuthorEmailPattern?: InputMaybe<CommitAuthorEmailPatternParametersInput>;
  /** Parameters used for the `commit_message_pattern` rule type */
  commitMessagePattern?: InputMaybe<CommitMessagePatternParametersInput>;
  /** Parameters used for the `committer_email_pattern` rule type */
  committerEmailPattern?: InputMaybe<CommitterEmailPatternParametersInput>;
  /** Parameters used for the `pull_request` rule type */
  pullRequest?: InputMaybe<PullRequestParametersInput>;
  /** Parameters used for the `required_deployments` rule type */
  requiredDeployments?: InputMaybe<RequiredDeploymentsParametersInput>;
  /** Parameters used for the `required_status_checks` rule type */
  requiredStatusChecks?: InputMaybe<RequiredStatusChecksParametersInput>;
  /** Parameters used for the `tag_name_pattern` rule type */
  tagNamePattern?: InputMaybe<TagNamePatternParametersInput>;
  /** Parameters used for the `update` rule type */
  update?: InputMaybe<UpdateParametersInput>;
  /** Parameters used for the `workflows` rule type */
  workflows?: InputMaybe<WorkflowsParametersInput>;
}

/** The possible digest algorithms used to sign SAML requests for an identity provider. */
export const SamlDigestAlgorithm = {
  /** SHA1 */
  SHA1: "SHA1",
  /** SHA256 */
  SHA256: "SHA256",
  /** SHA384 */
  SHA384: "SHA384",
  /** SHA512 */
  SHA512: "SHA512",
} as const;

export type SamlDigestAlgorithm =
  (typeof SamlDigestAlgorithm)[keyof typeof SamlDigestAlgorithm];
/** The possible signature algorithms used to sign SAML requests for a Identity Provider. */
export const SamlSignatureAlgorithm = {
  /** RSA-SHA1 */
  RSA_SHA1: "RSA_SHA1",
  /** RSA-SHA256 */
  RSA_SHA256: "RSA_SHA256",
  /** RSA-SHA384 */
  RSA_SHA384: "RSA_SHA384",
  /** RSA-SHA512 */
  RSA_SHA512: "RSA_SHA512",
} as const;

export type SamlSignatureAlgorithm =
  (typeof SamlSignatureAlgorithm)[keyof typeof SamlSignatureAlgorithm];
/** Ordering options for saved reply connections. */
export interface SavedReplyOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order saved replies by. */
  field: SavedReplyOrderField;
}

/** Properties by which saved reply connections can be ordered. */
export const SavedReplyOrderField = {
  /** Order saved reply by when they were updated. */
  UPDATED_AT: "UPDATED_AT",
} as const;

export type SavedReplyOrderField =
  (typeof SavedReplyOrderField)[keyof typeof SavedReplyOrderField];
/** Represents the individual results of a search. */
export const SearchType = {
  /** Returns matching discussions in repositories. */
  DISCUSSION: "DISCUSSION",
  /** Returns results matching issues in repositories. */
  ISSUE: "ISSUE",
  /** Returns results matching repositories. */
  REPOSITORY: "REPOSITORY",
  /** Returns results matching users and organizations on GitHub. */
  USER: "USER",
} as const;

export type SearchType = (typeof SearchType)[keyof typeof SearchType];
/** Classification of the advisory. */
export const SecurityAdvisoryClassification = {
  /** Classification of general advisories. */
  GENERAL: "GENERAL",
  /** Classification of malware advisories. */
  MALWARE: "MALWARE",
} as const;

export type SecurityAdvisoryClassification =
  (typeof SecurityAdvisoryClassification)[keyof typeof SecurityAdvisoryClassification];
/** The possible ecosystems of a security vulnerability's package. */
export const SecurityAdvisoryEcosystem = {
  /** GitHub Actions */
  ACTIONS: "ACTIONS",
  /** PHP packages hosted at packagist.org */
  COMPOSER: "COMPOSER",
  /** Erlang/Elixir packages hosted at hex.pm */
  ERLANG: "ERLANG",
  /** Go modules */
  GO: "GO",
  /** Java artifacts hosted at the Maven central repository */
  MAVEN: "MAVEN",
  /** JavaScript packages hosted at npmjs.com */
  NPM: "NPM",
  /** .NET packages hosted at the NuGet Gallery */
  NUGET: "NUGET",
  /** Python packages hosted at PyPI.org */
  PIP: "PIP",
  /** Dart packages hosted at pub.dev */
  PUB: "PUB",
  /** Ruby gems hosted at RubyGems.org */
  RUBYGEMS: "RUBYGEMS",
  /** Rust crates */
  RUST: "RUST",
  /** Swift packages */
  SWIFT: "SWIFT",
} as const;

export type SecurityAdvisoryEcosystem =
  (typeof SecurityAdvisoryEcosystem)[keyof typeof SecurityAdvisoryEcosystem];
/** An advisory identifier to filter results on. */
export interface SecurityAdvisoryIdentifierFilter {
  /** The identifier type. */
  type: SecurityAdvisoryIdentifierType;
  /** The identifier string. Supports exact or partial matching. */
  value: Scalars["String"];
}

/** Identifier formats available for advisories. */
export const SecurityAdvisoryIdentifierType = {
  /** Common Vulnerabilities and Exposures Identifier. */
  CVE: "CVE",
  /** GitHub Security Advisory ID. */
  GHSA: "GHSA",
} as const;

export type SecurityAdvisoryIdentifierType =
  (typeof SecurityAdvisoryIdentifierType)[keyof typeof SecurityAdvisoryIdentifierType];
/** Ordering options for security advisory connections */
export interface SecurityAdvisoryOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order security advisories by. */
  field: SecurityAdvisoryOrderField;
}

/** Properties by which security advisory connections can be ordered. */
export const SecurityAdvisoryOrderField = {
  /** Order advisories by publication time */
  PUBLISHED_AT: "PUBLISHED_AT",
  /** Order advisories by update time */
  UPDATED_AT: "UPDATED_AT",
} as const;

export type SecurityAdvisoryOrderField =
  (typeof SecurityAdvisoryOrderField)[keyof typeof SecurityAdvisoryOrderField];
/** Severity of the vulnerability. */
export const SecurityAdvisorySeverity = {
  /** Critical. */
  CRITICAL: "CRITICAL",
  /** High. */
  HIGH: "HIGH",
  /** Low. */
  LOW: "LOW",
  /** Moderate. */
  MODERATE: "MODERATE",
} as const;

export type SecurityAdvisorySeverity =
  (typeof SecurityAdvisorySeverity)[keyof typeof SecurityAdvisorySeverity];
/** Ordering options for security vulnerability connections */
export interface SecurityVulnerabilityOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order security vulnerabilities by. */
  field: SecurityVulnerabilityOrderField;
}

/** Properties by which security vulnerability connections can be ordered. */
export const SecurityVulnerabilityOrderField = {
  /** Order vulnerability by update time */
  UPDATED_AT: "UPDATED_AT",
} as const;

export type SecurityVulnerabilityOrderField =
  (typeof SecurityVulnerabilityOrderField)[keyof typeof SecurityVulnerabilityOrderField];
/** Autogenerated input type of SetEnterpriseIdentityProvider */
export interface SetEnterpriseIdentityProviderInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The digest algorithm used to sign SAML requests for the identity provider. */
  digestMethod: SamlDigestAlgorithm;
  /** The ID of the enterprise on which to set an identity provider. */
  enterpriseId: Scalars["ID"];
  /** The x509 certificate used by the identity provider to sign assertions and responses. */
  idpCertificate: Scalars["String"];
  /** The Issuer Entity ID for the SAML identity provider */
  issuer?: InputMaybe<Scalars["String"]>;
  /** The signature algorithm used to sign SAML requests for the identity provider. */
  signatureMethod: SamlSignatureAlgorithm;
  /** The URL endpoint for the identity provider's SAML SSO. */
  ssoUrl: Scalars["URI"];
}

/** Autogenerated input type of SetOrganizationInteractionLimit */
export interface SetOrganizationInteractionLimitInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** When this limit should expire. */
  expiry?: InputMaybe<RepositoryInteractionLimitExpiry>;
  /** The limit to set. */
  limit: RepositoryInteractionLimit;
  /** The ID of the organization to set a limit for. */
  organizationId: Scalars["ID"];
}

/** Autogenerated input type of SetRepositoryInteractionLimit */
export interface SetRepositoryInteractionLimitInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** When this limit should expire. */
  expiry?: InputMaybe<RepositoryInteractionLimitExpiry>;
  /** The limit to set. */
  limit: RepositoryInteractionLimit;
  /** The ID of the repository to set a limit for. */
  repositoryId: Scalars["ID"];
}

/** Autogenerated input type of SetUserInteractionLimit */
export interface SetUserInteractionLimitInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** When this limit should expire. */
  expiry?: InputMaybe<RepositoryInteractionLimitExpiry>;
  /** The limit to set. */
  limit: RepositoryInteractionLimit;
  /** The ID of the user to set a limit for. */
  userId: Scalars["ID"];
}

/** Software or company that hosts social media accounts. */
export const SocialAccountProvider = {
  /** Social media and networking website. */
  FACEBOOK: "FACEBOOK",
  /** Catch-all for social media providers that do not yet have specific handling. */
  GENERIC: "GENERIC",
  /** Fork of Mastodon with a greater focus on local posting. */
  HOMETOWN: "HOMETOWN",
  /** Social media website with a focus on photo and video sharing. */
  INSTAGRAM: "INSTAGRAM",
  /** Professional networking website. */
  LINKEDIN: "LINKEDIN",
  /** Open-source federated microblogging service. */
  MASTODON: "MASTODON",
  /** JavaScript package registry. */
  NPM: "NPM",
  /** Social news aggregation and discussion website. */
  REDDIT: "REDDIT",
  /** Live-streaming service. */
  TWITCH: "TWITCH",
  /** Microblogging website. */
  TWITTER: "TWITTER",
  /** Online video platform. */
  YOUTUBE: "YOUTUBE",
} as const;

export type SocialAccountProvider =
  (typeof SocialAccountProvider)[keyof typeof SocialAccountProvider];
/** Ordering options for connections to get sponsor entities for GitHub Sponsors. */
export interface SponsorOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order sponsor entities by. */
  field: SponsorOrderField;
}

/** Properties by which sponsor connections can be ordered. */
export const SponsorOrderField = {
  /** Order sponsorable entities by login (username). */
  LOGIN: "LOGIN",
  /** Order sponsors by their relevance to the viewer. */
  RELEVANCE: "RELEVANCE",
} as const;

export type SponsorOrderField =
  (typeof SponsorOrderField)[keyof typeof SponsorOrderField];
/** Ordering options for connections to get sponsorable entities for GitHub Sponsors. */
export interface SponsorableOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order sponsorable entities by. */
  field: SponsorableOrderField;
}

/** Properties by which sponsorable connections can be ordered. */
export const SponsorableOrderField = {
  /** Order sponsorable entities by login (username). */
  LOGIN: "LOGIN",
} as const;

export type SponsorableOrderField =
  (typeof SponsorableOrderField)[keyof typeof SponsorableOrderField];
/** The possible actions that GitHub Sponsors activities can represent. */
export const SponsorsActivityAction = {
  /** The activity was cancelling a sponsorship. */
  CANCELLED_SPONSORSHIP: "CANCELLED_SPONSORSHIP",
  /** The activity was starting a sponsorship. */
  NEW_SPONSORSHIP: "NEW_SPONSORSHIP",
  /** The activity was scheduling a downgrade or cancellation. */
  PENDING_CHANGE: "PENDING_CHANGE",
  /** The activity was funds being refunded to the sponsor or GitHub. */
  REFUND: "REFUND",
  /** The activity was disabling matching for a previously matched sponsorship. */
  SPONSOR_MATCH_DISABLED: "SPONSOR_MATCH_DISABLED",
  /** The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change. */
  TIER_CHANGE: "TIER_CHANGE",
} as const;

export type SponsorsActivityAction =
  (typeof SponsorsActivityAction)[keyof typeof SponsorsActivityAction];
/** Ordering options for GitHub Sponsors activity connections. */
export interface SponsorsActivityOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order activity by. */
  field: SponsorsActivityOrderField;
}

/** Properties by which GitHub Sponsors activity connections can be ordered. */
export const SponsorsActivityOrderField = {
  /** Order activities by when they happened. */
  TIMESTAMP: "TIMESTAMP",
} as const;

export type SponsorsActivityOrderField =
  (typeof SponsorsActivityOrderField)[keyof typeof SponsorsActivityOrderField];
/** The possible time periods for which Sponsors activities can be requested. */
export const SponsorsActivityPeriod = {
  /** Don't restrict the activity to any date range, include all activity. */
  ALL: "ALL",
  /** The previous calendar day. */
  DAY: "DAY",
  /** The previous thirty days. */
  MONTH: "MONTH",
  /** The previous seven days. */
  WEEK: "WEEK",
} as const;

export type SponsorsActivityPeriod =
  (typeof SponsorsActivityPeriod)[keyof typeof SponsorsActivityPeriod];
/** Represents countries or regions for billing and residence for a GitHub Sponsors profile. */
export const SponsorsCountryOrRegionCode = {
  /** Andorra */
  AD: "AD",
  /** United Arab Emirates */
  AE: "AE",
  /** Afghanistan */
  AF: "AF",
  /** Antigua and Barbuda */
  AG: "AG",
  /** Anguilla */
  AI: "AI",
  /** Albania */
  AL: "AL",
  /** Armenia */
  AM: "AM",
  /** Angola */
  AO: "AO",
  /** Antarctica */
  AQ: "AQ",
  /** Argentina */
  AR: "AR",
  /** American Samoa */
  AS: "AS",
  /** Austria */
  AT: "AT",
  /** Australia */
  AU: "AU",
  /** Aruba */
  AW: "AW",
  /** Åland */
  AX: "AX",
  /** Azerbaijan */
  AZ: "AZ",
  /** Bosnia and Herzegovina */
  BA: "BA",
  /** Barbados */
  BB: "BB",
  /** Bangladesh */
  BD: "BD",
  /** Belgium */
  BE: "BE",
  /** Burkina Faso */
  BF: "BF",
  /** Bulgaria */
  BG: "BG",
  /** Bahrain */
  BH: "BH",
  /** Burundi */
  BI: "BI",
  /** Benin */
  BJ: "BJ",
  /** Saint Barthélemy */
  BL: "BL",
  /** Bermuda */
  BM: "BM",
  /** Brunei Darussalam */
  BN: "BN",
  /** Bolivia */
  BO: "BO",
  /** Bonaire, Sint Eustatius and Saba */
  BQ: "BQ",
  /** Brazil */
  BR: "BR",
  /** Bahamas */
  BS: "BS",
  /** Bhutan */
  BT: "BT",
  /** Bouvet Island */
  BV: "BV",
  /** Botswana */
  BW: "BW",
  /** Belarus */
  BY: "BY",
  /** Belize */
  BZ: "BZ",
  /** Canada */
  CA: "CA",
  /** Cocos (Keeling) Islands */
  CC: "CC",
  /** Congo (Kinshasa) */
  CD: "CD",
  /** Central African Republic */
  CF: "CF",
  /** Congo (Brazzaville) */
  CG: "CG",
  /** Switzerland */
  CH: "CH",
  /** Côte d'Ivoire */
  CI: "CI",
  /** Cook Islands */
  CK: "CK",
  /** Chile */
  CL: "CL",
  /** Cameroon */
  CM: "CM",
  /** China */
  CN: "CN",
  /** Colombia */
  CO: "CO",
  /** Costa Rica */
  CR: "CR",
  /** Cape Verde */
  CV: "CV",
  /** Curaçao */
  CW: "CW",
  /** Christmas Island */
  CX: "CX",
  /** Cyprus */
  CY: "CY",
  /** Czech Republic */
  CZ: "CZ",
  /** Germany */
  DE: "DE",
  /** Djibouti */
  DJ: "DJ",
  /** Denmark */
  DK: "DK",
  /** Dominica */
  DM: "DM",
  /** Dominican Republic */
  DO: "DO",
  /** Algeria */
  DZ: "DZ",
  /** Ecuador */
  EC: "EC",
  /** Estonia */
  EE: "EE",
  /** Egypt */
  EG: "EG",
  /** Western Sahara */
  EH: "EH",
  /** Eritrea */
  ER: "ER",
  /** Spain */
  ES: "ES",
  /** Ethiopia */
  ET: "ET",
  /** Finland */
  FI: "FI",
  /** Fiji */
  FJ: "FJ",
  /** Falkland Islands */
  FK: "FK",
  /** Micronesia */
  FM: "FM",
  /** Faroe Islands */
  FO: "FO",
  /** France */
  FR: "FR",
  /** Gabon */
  GA: "GA",
  /** United Kingdom */
  GB: "GB",
  /** Grenada */
  GD: "GD",
  /** Georgia */
  GE: "GE",
  /** French Guiana */
  GF: "GF",
  /** Guernsey */
  GG: "GG",
  /** Ghana */
  GH: "GH",
  /** Gibraltar */
  GI: "GI",
  /** Greenland */
  GL: "GL",
  /** Gambia */
  GM: "GM",
  /** Guinea */
  GN: "GN",
  /** Guadeloupe */
  GP: "GP",
  /** Equatorial Guinea */
  GQ: "GQ",
  /** Greece */
  GR: "GR",
  /** South Georgia and South Sandwich Islands */
  GS: "GS",
  /** Guatemala */
  GT: "GT",
  /** Guam */
  GU: "GU",
  /** Guinea-Bissau */
  GW: "GW",
  /** Guyana */
  GY: "GY",
  /** Hong Kong */
  HK: "HK",
  /** Heard and McDonald Islands */
  HM: "HM",
  /** Honduras */
  HN: "HN",
  /** Croatia */
  HR: "HR",
  /** Haiti */
  HT: "HT",
  /** Hungary */
  HU: "HU",
  /** Indonesia */
  ID: "ID",
  /** Ireland */
  IE: "IE",
  /** Israel */
  IL: "IL",
  /** Isle of Man */
  IM: "IM",
  /** India */
  IN: "IN",
  /** British Indian Ocean Territory */
  IO: "IO",
  /** Iraq */
  IQ: "IQ",
  /** Iran */
  IR: "IR",
  /** Iceland */
  IS: "IS",
  /** Italy */
  IT: "IT",
  /** Jersey */
  JE: "JE",
  /** Jamaica */
  JM: "JM",
  /** Jordan */
  JO: "JO",
  /** Japan */
  JP: "JP",
  /** Kenya */
  KE: "KE",
  /** Kyrgyzstan */
  KG: "KG",
  /** Cambodia */
  KH: "KH",
  /** Kiribati */
  KI: "KI",
  /** Comoros */
  KM: "KM",
  /** Saint Kitts and Nevis */
  KN: "KN",
  /** Korea, South */
  KR: "KR",
  /** Kuwait */
  KW: "KW",
  /** Cayman Islands */
  KY: "KY",
  /** Kazakhstan */
  KZ: "KZ",
  /** Laos */
  LA: "LA",
  /** Lebanon */
  LB: "LB",
  /** Saint Lucia */
  LC: "LC",
  /** Liechtenstein */
  LI: "LI",
  /** Sri Lanka */
  LK: "LK",
  /** Liberia */
  LR: "LR",
  /** Lesotho */
  LS: "LS",
  /** Lithuania */
  LT: "LT",
  /** Luxembourg */
  LU: "LU",
  /** Latvia */
  LV: "LV",
  /** Libya */
  LY: "LY",
  /** Morocco */
  MA: "MA",
  /** Monaco */
  MC: "MC",
  /** Moldova */
  MD: "MD",
  /** Montenegro */
  ME: "ME",
  /** Saint Martin (French part) */
  MF: "MF",
  /** Madagascar */
  MG: "MG",
  /** Marshall Islands */
  MH: "MH",
  /** Macedonia */
  MK: "MK",
  /** Mali */
  ML: "ML",
  /** Myanmar */
  MM: "MM",
  /** Mongolia */
  MN: "MN",
  /** Macau */
  MO: "MO",
  /** Northern Mariana Islands */
  MP: "MP",
  /** Martinique */
  MQ: "MQ",
  /** Mauritania */
  MR: "MR",
  /** Montserrat */
  MS: "MS",
  /** Malta */
  MT: "MT",
  /** Mauritius */
  MU: "MU",
  /** Maldives */
  MV: "MV",
  /** Malawi */
  MW: "MW",
  /** Mexico */
  MX: "MX",
  /** Malaysia */
  MY: "MY",
  /** Mozambique */
  MZ: "MZ",
  /** Namibia */
  NA: "NA",
  /** New Caledonia */
  NC: "NC",
  /** Niger */
  NE: "NE",
  /** Norfolk Island */
  NF: "NF",
  /** Nigeria */
  NG: "NG",
  /** Nicaragua */
  NI: "NI",
  /** Netherlands */
  NL: "NL",
  /** Norway */
  NO: "NO",
  /** Nepal */
  NP: "NP",
  /** Nauru */
  NR: "NR",
  /** Niue */
  NU: "NU",
  /** New Zealand */
  NZ: "NZ",
  /** Oman */
  OM: "OM",
  /** Panama */
  PA: "PA",
  /** Peru */
  PE: "PE",
  /** French Polynesia */
  PF: "PF",
  /** Papua New Guinea */
  PG: "PG",
  /** Philippines */
  PH: "PH",
  /** Pakistan */
  PK: "PK",
  /** Poland */
  PL: "PL",
  /** Saint Pierre and Miquelon */
  PM: "PM",
  /** Pitcairn */
  PN: "PN",
  /** Puerto Rico */
  PR: "PR",
  /** Palestine */
  PS: "PS",
  /** Portugal */
  PT: "PT",
  /** Palau */
  PW: "PW",
  /** Paraguay */
  PY: "PY",
  /** Qatar */
  QA: "QA",
  /** Reunion */
  RE: "RE",
  /** Romania */
  RO: "RO",
  /** Serbia */
  RS: "RS",
  /** Russian Federation */
  RU: "RU",
  /** Rwanda */
  RW: "RW",
  /** Saudi Arabia */
  SA: "SA",
  /** Solomon Islands */
  SB: "SB",
  /** Seychelles */
  SC: "SC",
  /** Sudan */
  SD: "SD",
  /** Sweden */
  SE: "SE",
  /** Singapore */
  SG: "SG",
  /** Saint Helena */
  SH: "SH",
  /** Slovenia */
  SI: "SI",
  /** Svalbard and Jan Mayen Islands */
  SJ: "SJ",
  /** Slovakia */
  SK: "SK",
  /** Sierra Leone */
  SL: "SL",
  /** San Marino */
  SM: "SM",
  /** Senegal */
  SN: "SN",
  /** Somalia */
  SO: "SO",
  /** Suriname */
  SR: "SR",
  /** South Sudan */
  SS: "SS",
  /** Sao Tome and Principe */
  ST: "ST",
  /** El Salvador */
  SV: "SV",
  /** Sint Maarten (Dutch part) */
  SX: "SX",
  /** Swaziland */
  SZ: "SZ",
  /** Turks and Caicos Islands */
  TC: "TC",
  /** Chad */
  TD: "TD",
  /** French Southern Lands */
  TF: "TF",
  /** Togo */
  TG: "TG",
  /** Thailand */
  TH: "TH",
  /** Tajikistan */
  TJ: "TJ",
  /** Tokelau */
  TK: "TK",
  /** Timor-Leste */
  TL: "TL",
  /** Turkmenistan */
  TM: "TM",
  /** Tunisia */
  TN: "TN",
  /** Tonga */
  TO: "TO",
  /** Türkiye */
  TR: "TR",
  /** Trinidad and Tobago */
  TT: "TT",
  /** Tuvalu */
  TV: "TV",
  /** Taiwan */
  TW: "TW",
  /** Tanzania */
  TZ: "TZ",
  /** Ukraine */
  UA: "UA",
  /** Uganda */
  UG: "UG",
  /** United States Minor Outlying Islands */
  UM: "UM",
  /** United States of America */
  US: "US",
  /** Uruguay */
  UY: "UY",
  /** Uzbekistan */
  UZ: "UZ",
  /** Vatican City */
  VA: "VA",
  /** Saint Vincent and the Grenadines */
  VC: "VC",
  /** Venezuela */
  VE: "VE",
  /** Virgin Islands, British */
  VG: "VG",
  /** Virgin Islands, U.S. */
  VI: "VI",
  /** Vietnam */
  VN: "VN",
  /** Vanuatu */
  VU: "VU",
  /** Wallis and Futuna Islands */
  WF: "WF",
  /** Samoa */
  WS: "WS",
  /** Yemen */
  YE: "YE",
  /** Mayotte */
  YT: "YT",
  /** South Africa */
  ZA: "ZA",
  /** Zambia */
  ZM: "ZM",
  /** Zimbabwe */
  ZW: "ZW",
} as const;

export type SponsorsCountryOrRegionCode =
  (typeof SponsorsCountryOrRegionCode)[keyof typeof SponsorsCountryOrRegionCode];
/** The different kinds of goals a GitHub Sponsors member can have. */
export const SponsorsGoalKind = {
  /** The goal is about getting a certain amount in USD from sponsorships each month. */
  MONTHLY_SPONSORSHIP_AMOUNT: "MONTHLY_SPONSORSHIP_AMOUNT",
  /** The goal is about reaching a certain number of sponsors. */
  TOTAL_SPONSORS_COUNT: "TOTAL_SPONSORS_COUNT",
} as const;

export type SponsorsGoalKind =
  (typeof SponsorsGoalKind)[keyof typeof SponsorsGoalKind];
/** The different kinds of records that can be featured on a GitHub Sponsors profile page. */
export const SponsorsListingFeaturedItemFeatureableType = {
  /** A repository owned by the user or organization with the GitHub Sponsors profile. */
  REPOSITORY: "REPOSITORY",
  /** A user who belongs to the organization with the GitHub Sponsors profile. */
  USER: "USER",
} as const;

export type SponsorsListingFeaturedItemFeatureableType =
  (typeof SponsorsListingFeaturedItemFeatureableType)[keyof typeof SponsorsListingFeaturedItemFeatureableType];
/** Ordering options for Sponsors tiers connections. */
export interface SponsorsTierOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order tiers by. */
  field: SponsorsTierOrderField;
}

/** Properties by which Sponsors tiers connections can be ordered. */
export const SponsorsTierOrderField = {
  /** Order tiers by creation time. */
  CREATED_AT: "CREATED_AT",
  /** Order tiers by their monthly price in cents */
  MONTHLY_PRICE_IN_CENTS: "MONTHLY_PRICE_IN_CENTS",
} as const;

export type SponsorsTierOrderField =
  (typeof SponsorsTierOrderField)[keyof typeof SponsorsTierOrderField];
/** Ordering options for sponsorship newsletter connections. */
export interface SponsorshipNewsletterOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order sponsorship newsletters by. */
  field: SponsorshipNewsletterOrderField;
}

/** Properties by which sponsorship update connections can be ordered. */
export const SponsorshipNewsletterOrderField = {
  /** Order sponsorship newsletters by when they were created. */
  CREATED_AT: "CREATED_AT",
} as const;

export type SponsorshipNewsletterOrderField =
  (typeof SponsorshipNewsletterOrderField)[keyof typeof SponsorshipNewsletterOrderField];
/** Ordering options for sponsorship connections. */
export interface SponsorshipOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order sponsorship by. */
  field: SponsorshipOrderField;
}

/** Properties by which sponsorship connections can be ordered. */
export const SponsorshipOrderField = {
  /** Order sponsorship by creation time. */
  CREATED_AT: "CREATED_AT",
} as const;

export type SponsorshipOrderField =
  (typeof SponsorshipOrderField)[keyof typeof SponsorshipOrderField];
/** How payment was made for funding a GitHub Sponsors sponsorship. */
export const SponsorshipPaymentSource = {
  /** Payment was made through GitHub. */
  GITHUB: "GITHUB",
  /** Payment was made through Patreon. */
  PATREON: "PATREON",
} as const;

export type SponsorshipPaymentSource =
  (typeof SponsorshipPaymentSource)[keyof typeof SponsorshipPaymentSource];
/** The privacy of a sponsorship */
export const SponsorshipPrivacy = {
  /** Private */
  PRIVATE: "PRIVATE",
  /** Public */
  PUBLIC: "PUBLIC",
} as const;

export type SponsorshipPrivacy =
  (typeof SponsorshipPrivacy)[keyof typeof SponsorshipPrivacy];
/** The possible default commit messages for squash merges. */
export const SquashMergeCommitMessage = {
  /** Default to a blank commit message. */
  BLANK: "BLANK",
  /** Default to the branch's commit messages. */
  COMMIT_MESSAGES: "COMMIT_MESSAGES",
  /** Default to the pull request's body. */
  PR_BODY: "PR_BODY",
} as const;

export type SquashMergeCommitMessage =
  (typeof SquashMergeCommitMessage)[keyof typeof SquashMergeCommitMessage];
/** The possible default commit titles for squash merges. */
export const SquashMergeCommitTitle = {
  /** Default to the commit's title (if only one commit) or the pull request's title (when more than one commit). */
  COMMIT_OR_PR_TITLE: "COMMIT_OR_PR_TITLE",
  /** Default to the pull request's title. */
  PR_TITLE: "PR_TITLE",
} as const;

export type SquashMergeCommitTitle =
  (typeof SquashMergeCommitTitle)[keyof typeof SquashMergeCommitTitle];
/** Ways in which star connections can be ordered. */
export interface StarOrder {
  /** The direction in which to order nodes. */
  direction: OrderDirection;
  /** The field in which to order nodes by. */
  field: StarOrderField;
}

/** Properties by which star connections can be ordered. */
export const StarOrderField = {
  /** Allows ordering a list of stars by when they were created. */
  STARRED_AT: "STARRED_AT",
} as const;

export type StarOrderField =
  (typeof StarOrderField)[keyof typeof StarOrderField];
/** Autogenerated input type of StartOrganizationMigration */
export interface StartOrganizationMigrationInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The migration source access token. */
  sourceAccessToken: Scalars["String"];
  /** The URL of the organization to migrate. */
  sourceOrgUrl: Scalars["URI"];
  /** The ID of the enterprise the target organization belongs to. */
  targetEnterpriseId: Scalars["ID"];
  /** The name of the target organization. */
  targetOrgName: Scalars["String"];
}

/** Autogenerated input type of StartRepositoryMigration */
export interface StartRepositoryMigrationInput {
  /** The migration source access token. */
  accessToken?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether to continue the migration on error. Defaults to `true`. */
  continueOnError?: InputMaybe<Scalars["Boolean"]>;
  /** The signed URL to access the user-uploaded git archive. */
  gitArchiveUrl?: InputMaybe<Scalars["String"]>;
  /** The GitHub personal access token of the user importing to the target repository. */
  githubPat?: InputMaybe<Scalars["String"]>;
  /** Whether to lock the source repository. */
  lockSource?: InputMaybe<Scalars["Boolean"]>;
  /** The signed URL to access the user-uploaded metadata archive. */
  metadataArchiveUrl?: InputMaybe<Scalars["String"]>;
  /** The ID of the organization that will own the imported repository. */
  ownerId: Scalars["ID"];
  /** The name of the imported repository. */
  repositoryName: Scalars["String"];
  /** Whether to skip migrating releases for the repository. */
  skipReleases?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the migration source. */
  sourceId: Scalars["ID"];
  /** The URL of the source repository. */
  sourceRepositoryUrl?: InputMaybe<Scalars["URI"]>;
  /** The visibility of the imported repository. */
  targetRepoVisibility?: InputMaybe<Scalars["String"]>;
}

/** Required status check */
export interface StatusCheckConfigurationInput {
  /** The status check context name that must be present on the commit. */
  context: Scalars["String"];
  /** The optional integration ID that this status check must originate from. */
  integrationId?: InputMaybe<Scalars["Int"]>;
}

/** The possible commit status states. */
export const StatusState = {
  /** Status is errored. */
  ERROR: "ERROR",
  /** Status is expected. */
  EXPECTED: "EXPECTED",
  /** Status is failing. */
  FAILURE: "FAILURE",
  /** Status is pending. */
  PENDING: "PENDING",
  /** Status is successful. */
  SUCCESS: "SUCCESS",
} as const;

export type StatusState = (typeof StatusState)[keyof typeof StatusState];
/** Autogenerated input type of SubmitPullRequestReview */
export interface SubmitPullRequestReviewInput {
  /** The text field to set on the Pull Request Review. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The event to send to the Pull Request Review. */
  event: PullRequestReviewEvent;
  /** The Pull Request ID to submit any pending reviews. */
  pullRequestId?: InputMaybe<Scalars["ID"]>;
  /** The Pull Request Review ID to submit. */
  pullRequestReviewId?: InputMaybe<Scalars["ID"]>;
}

/** The possible states of a subscription. */
export const SubscriptionState = {
  /** The User is never notified. */
  IGNORED: "IGNORED",
  /** The User is notified of all conversations. */
  SUBSCRIBED: "SUBSCRIBED",
  /** The User is only notified when participating or @mentioned. */
  UNSUBSCRIBED: "UNSUBSCRIBED",
} as const;

export type SubscriptionState =
  (typeof SubscriptionState)[keyof typeof SubscriptionState];
/** Parameters to be used for the tag_name_pattern rule */
export interface TagNamePatternParametersInput {
  /** How this rule will appear to users. */
  name?: InputMaybe<Scalars["String"]>;
  /** If true, the rule will fail if the pattern matches. */
  negate?: InputMaybe<Scalars["Boolean"]>;
  /** The operator to use for matching. */
  operator: Scalars["String"];
  /** The pattern to match with. */
  pattern: Scalars["String"];
}

/** Ways in which team discussion comment connections can be ordered. */
export interface TeamDiscussionCommentOrder {
  /** The direction in which to order nodes. */
  direction: OrderDirection;
  /** The field by which to order nodes. */
  field: TeamDiscussionCommentOrderField;
}

/** Properties by which team discussion comment connections can be ordered. */
export const TeamDiscussionCommentOrderField = {
  /** Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering). */
  NUMBER: "NUMBER",
} as const;

export type TeamDiscussionCommentOrderField =
  (typeof TeamDiscussionCommentOrderField)[keyof typeof TeamDiscussionCommentOrderField];
/** Ways in which team discussion connections can be ordered. */
export interface TeamDiscussionOrder {
  /** The direction in which to order nodes. */
  direction: OrderDirection;
  /** The field by which to order nodes. */
  field: TeamDiscussionOrderField;
}

/** Properties by which team discussion connections can be ordered. */
export const TeamDiscussionOrderField = {
  /** Allows chronological ordering of team discussions. */
  CREATED_AT: "CREATED_AT",
} as const;

export type TeamDiscussionOrderField =
  (typeof TeamDiscussionOrderField)[keyof typeof TeamDiscussionOrderField];
/** Ordering options for team member connections */
export interface TeamMemberOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order team members by. */
  field: TeamMemberOrderField;
}

/** Properties by which team member connections can be ordered. */
export const TeamMemberOrderField = {
  /** Order team members by creation time */
  CREATED_AT: "CREATED_AT",
  /** Order team members by login */
  LOGIN: "LOGIN",
} as const;

export type TeamMemberOrderField =
  (typeof TeamMemberOrderField)[keyof typeof TeamMemberOrderField];
/** The possible team member roles; either 'maintainer' or 'member'. */
export const TeamMemberRole = {
  /** A team maintainer has permission to add and remove team members. */
  MAINTAINER: "MAINTAINER",
  /** A team member has no administrative permissions on the team. */
  MEMBER: "MEMBER",
} as const;

export type TeamMemberRole =
  (typeof TeamMemberRole)[keyof typeof TeamMemberRole];
/** Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL. */
export const TeamMembershipType = {
  /** Includes immediate and child team members for the team. */
  ALL: "ALL",
  /** Includes only child team members for the team. */
  CHILD_TEAM: "CHILD_TEAM",
  /** Includes only immediate members of the team. */
  IMMEDIATE: "IMMEDIATE",
} as const;

export type TeamMembershipType =
  (typeof TeamMembershipType)[keyof typeof TeamMembershipType];
/** The possible team notification values. */
export const TeamNotificationSetting = {
  /** No one will receive notifications. */
  NOTIFICATIONS_DISABLED: "NOTIFICATIONS_DISABLED",
  /** Everyone will receive notifications when the team is @mentioned. */
  NOTIFICATIONS_ENABLED: "NOTIFICATIONS_ENABLED",
} as const;

export type TeamNotificationSetting =
  (typeof TeamNotificationSetting)[keyof typeof TeamNotificationSetting];
/** Ways in which team connections can be ordered. */
export interface TeamOrder {
  /** The direction in which to order nodes. */
  direction: OrderDirection;
  /** The field in which to order nodes by. */
  field: TeamOrderField;
}

/** Properties by which team connections can be ordered. */
export const TeamOrderField = {
  /** Allows ordering a list of teams by name. */
  NAME: "NAME",
} as const;

export type TeamOrderField =
  (typeof TeamOrderField)[keyof typeof TeamOrderField];
/** The possible team privacy values. */
export const TeamPrivacy = {
  /** A secret team can only be seen by its members. */
  SECRET: "SECRET",
  /** A visible team can be seen and @mentioned by every member of the organization. */
  VISIBLE: "VISIBLE",
} as const;

export type TeamPrivacy = (typeof TeamPrivacy)[keyof typeof TeamPrivacy];
/** Ordering options for team repository connections */
export interface TeamRepositoryOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order repositories by. */
  field: TeamRepositoryOrderField;
}

/** Properties by which team repository connections can be ordered. */
export const TeamRepositoryOrderField = {
  /** Order repositories by creation time */
  CREATED_AT: "CREATED_AT",
  /** Order repositories by name */
  NAME: "NAME",
  /** Order repositories by permission */
  PERMISSION: "PERMISSION",
  /** Order repositories by push time */
  PUSHED_AT: "PUSHED_AT",
  /** Order repositories by number of stargazers */
  STARGAZERS: "STARGAZERS",
  /** Order repositories by update time */
  UPDATED_AT: "UPDATED_AT",
} as const;

export type TeamRepositoryOrderField =
  (typeof TeamRepositoryOrderField)[keyof typeof TeamRepositoryOrderField];
/** The role of a user on a team. */
export const TeamRole = {
  /** User has admin rights on the team. */
  ADMIN: "ADMIN",
  /** User is a member of the team. */
  MEMBER: "MEMBER",
} as const;

export type TeamRole = (typeof TeamRole)[keyof typeof TeamRole];
/** The possible states of a thread subscription form action */
export const ThreadSubscriptionFormAction = {
  /** The User cannot subscribe or unsubscribe to the thread */
  NONE: "NONE",
  /** The User can subscribe to the thread */
  SUBSCRIBE: "SUBSCRIBE",
  /** The User can unsubscribe to the thread */
  UNSUBSCRIBE: "UNSUBSCRIBE",
} as const;

export type ThreadSubscriptionFormAction =
  (typeof ThreadSubscriptionFormAction)[keyof typeof ThreadSubscriptionFormAction];
/** The possible states of a subscription. */
export const ThreadSubscriptionState = {
  /** The subscription status is currently disabled. */
  DISABLED: "DISABLED",
  /** The User is never notified because they are ignoring the list */
  IGNORING_LIST: "IGNORING_LIST",
  /** The User is never notified because they are ignoring the thread */
  IGNORING_THREAD: "IGNORING_THREAD",
  /** The User is not recieving notifications from this thread */
  NONE: "NONE",
  /** The User is notified becuase they are watching the list */
  SUBSCRIBED_TO_LIST: "SUBSCRIBED_TO_LIST",
  /** The User is notified because they are subscribed to the thread */
  SUBSCRIBED_TO_THREAD: "SUBSCRIBED_TO_THREAD",
  /** The User is notified because they chose custom settings for this thread. */
  SUBSCRIBED_TO_THREAD_EVENTS: "SUBSCRIBED_TO_THREAD_EVENTS",
  /** The User is notified because they chose custom settings for this thread. */
  SUBSCRIBED_TO_THREAD_TYPE: "SUBSCRIBED_TO_THREAD_TYPE",
  /** The subscription status is currently unavailable. */
  UNAVAILABLE: "UNAVAILABLE",
} as const;

export type ThreadSubscriptionState =
  (typeof ThreadSubscriptionState)[keyof typeof ThreadSubscriptionState];
/** Reason that the suggested topic is declined. */
export const TopicSuggestionDeclineReason = {
  /** The suggested topic is not relevant to the repository. */
  NOT_RELEVANT: "NOT_RELEVANT",
  /** The viewer does not like the suggested topic. */
  PERSONAL_PREFERENCE: "PERSONAL_PREFERENCE",
  /** The suggested topic is too general for the repository. */
  TOO_GENERAL: "TOO_GENERAL",
  /** The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1). */
  TOO_SPECIFIC: "TOO_SPECIFIC",
} as const;

export type TopicSuggestionDeclineReason =
  (typeof TopicSuggestionDeclineReason)[keyof typeof TopicSuggestionDeclineReason];
/** The possible states of a tracked issue. */
export const TrackedIssueStates = {
  /** The tracked issue is closed */
  CLOSED: "CLOSED",
  /** The tracked issue is open */
  OPEN: "OPEN",
} as const;

export type TrackedIssueStates =
  (typeof TrackedIssueStates)[keyof typeof TrackedIssueStates];
/** Autogenerated input type of TransferEnterpriseOrganization */
export interface TransferEnterpriseOrganizationInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise where the organization should be transferred. */
  destinationEnterpriseId: Scalars["ID"];
  /** The ID of the organization to transfer. */
  organizationId: Scalars["ID"];
}

/** Autogenerated input type of TransferIssue */
export interface TransferIssueInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether to create labels if they don't exist in the target repository (matched by name) */
  createLabelsIfMissing?: InputMaybe<Scalars["Boolean"]>;
  /** The Node ID of the issue to be transferred */
  issueId: Scalars["ID"];
  /** The Node ID of the repository the issue should be transferred to */
  repositoryId: Scalars["ID"];
}

/** Autogenerated input type of UnarchiveProjectV2Item */
export interface UnarchiveProjectV2ItemInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the ProjectV2Item to unarchive. */
  itemId: Scalars["ID"];
  /** The ID of the Project to archive the item from. */
  projectId: Scalars["ID"];
}

/** Autogenerated input type of UnarchiveRepository */
export interface UnarchiveRepositoryInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the repository to unarchive. */
  repositoryId: Scalars["ID"];
}

/** Autogenerated input type of UnfollowOrganization */
export interface UnfollowOrganizationInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the organization to unfollow. */
  organizationId: Scalars["ID"];
}

/** Autogenerated input type of UnfollowUser */
export interface UnfollowUserInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the user to unfollow. */
  userId: Scalars["ID"];
}

/** Autogenerated input type of UnlinkProjectV2FromRepository */
export interface UnlinkProjectV2FromRepositoryInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the project to unlink from the repository. */
  projectId: Scalars["ID"];
  /** The ID of the repository to unlink from the project. */
  repositoryId: Scalars["ID"];
}

/** Autogenerated input type of UnlinkProjectV2FromTeam */
export interface UnlinkProjectV2FromTeamInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the project to unlink from the team. */
  projectId: Scalars["ID"];
  /** The ID of the team to unlink from the project. */
  teamId: Scalars["ID"];
}

/** Autogenerated input type of UnlinkRepositoryFromProject */
export interface UnlinkRepositoryFromProjectInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the Project linked to the Repository. */
  projectId: Scalars["ID"];
  /** The ID of the Repository linked to the Project. */
  repositoryId: Scalars["ID"];
}

/** Autogenerated input type of UnlockLockable */
export interface UnlockLockableInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the item to be unlocked. */
  lockableId: Scalars["ID"];
}

/** Autogenerated input type of UnmarkDiscussionCommentAsAnswer */
export interface UnmarkDiscussionCommentAsAnswerInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the discussion comment to unmark as an answer. */
  id: Scalars["ID"];
}

/** Autogenerated input type of UnmarkFileAsViewed */
export interface UnmarkFileAsViewedInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The path of the file to mark as unviewed */
  path: Scalars["String"];
  /** The Node ID of the pull request. */
  pullRequestId: Scalars["ID"];
}

/** Autogenerated input type of UnmarkIssueAsDuplicate */
export interface UnmarkIssueAsDuplicateInput {
  /** ID of the issue or pull request currently considered canonical/authoritative/original. */
  canonicalId: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** ID of the issue or pull request currently marked as a duplicate. */
  duplicateId: Scalars["ID"];
}

/** Autogenerated input type of UnmarkProjectV2AsTemplate */
export interface UnmarkProjectV2AsTemplateInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the Project to unmark as a template. */
  projectId: Scalars["ID"];
}

/** Autogenerated input type of UnminimizeComment */
export interface UnminimizeCommentInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the subject to modify. */
  subjectId: Scalars["ID"];
}

/** Autogenerated input type of UnpinIssue */
export interface UnpinIssueInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the issue to be unpinned */
  issueId: Scalars["ID"];
}

/** Autogenerated input type of UnresolveReviewThread */
export interface UnresolveReviewThreadInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the thread to unresolve */
  threadId: Scalars["ID"];
}

/** Autogenerated input type of UpdateBranchProtectionRule */
export interface UpdateBranchProtectionRuleInput {
  /** Can this branch be deleted. */
  allowsDeletions?: InputMaybe<Scalars["Boolean"]>;
  /** Are force pushes allowed on this branch. */
  allowsForcePushes?: InputMaybe<Scalars["Boolean"]>;
  /** Is branch creation a protected operation. */
  blocksCreations?: InputMaybe<Scalars["Boolean"]>;
  /** The global relay id of the branch protection rule to be updated. */
  branchProtectionRuleId: Scalars["ID"];
  /** A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. */
  bypassForcePushActorIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. */
  bypassPullRequestActorIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  dismissesStaleReviews?: InputMaybe<Scalars["Boolean"]>;
  /** Can admins overwrite branch protection. */
  isAdminEnforced?: InputMaybe<Scalars["Boolean"]>;
  /** Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. */
  lockAllowsFetchAndMerge?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */
  lockBranch?: InputMaybe<Scalars["Boolean"]>;
  /** The glob-like pattern used to determine matching branches. */
  pattern?: InputMaybe<Scalars["String"]>;
  /** A list of User, Team, or App IDs allowed to push to matching branches. */
  pushActorIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** Whether the most recent push must be approved by someone other than the person who pushed it */
  requireLastPushApproval?: InputMaybe<Scalars["Boolean"]>;
  /** Number of approving reviews required to update matching branches. */
  requiredApprovingReviewCount?: InputMaybe<Scalars["Int"]>;
  /** The list of required deployment environments */
  requiredDeploymentEnvironments?: InputMaybe<Array<Scalars["String"]>>;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  requiredStatusCheckContexts?: InputMaybe<Array<Scalars["String"]>>;
  /** The list of required status checks */
  requiredStatusChecks?: InputMaybe<Array<RequiredStatusCheckInput>>;
  /** Are approving reviews required to update matching branches. */
  requiresApprovingReviews?: InputMaybe<Scalars["Boolean"]>;
  /** Are reviews from code owners required to update matching branches. */
  requiresCodeOwnerReviews?: InputMaybe<Scalars["Boolean"]>;
  /** Are commits required to be signed. */
  requiresCommitSignatures?: InputMaybe<Scalars["Boolean"]>;
  /** Are conversations required to be resolved before merging. */
  requiresConversationResolution?: InputMaybe<Scalars["Boolean"]>;
  /** Are successful deployments required before merging. */
  requiresDeployments?: InputMaybe<Scalars["Boolean"]>;
  /** Are merge commits prohibited from being pushed to this branch. */
  requiresLinearHistory?: InputMaybe<Scalars["Boolean"]>;
  /** Are status checks required to update matching branches. */
  requiresStatusChecks?: InputMaybe<Scalars["Boolean"]>;
  /** Are branches required to be up to date before merging. */
  requiresStrictStatusChecks?: InputMaybe<Scalars["Boolean"]>;
  /** Is pushing to matching branches restricted. */
  restrictsPushes?: InputMaybe<Scalars["Boolean"]>;
  /** Is dismissal of pull request reviews restricted. */
  restrictsReviewDismissals?: InputMaybe<Scalars["Boolean"]>;
  /** A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. */
  reviewDismissalActorIds?: InputMaybe<Array<Scalars["ID"]>>;
}

/** Autogenerated input type of UpdateCheckRun */
export interface UpdateCheckRunInput {
  /** Possible further actions the integrator can perform, which a user may trigger. */
  actions?: InputMaybe<Array<CheckRunAction>>;
  /** The node of the check. */
  checkRunId: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The time that the check run finished. */
  completedAt?: InputMaybe<Scalars["DateTime"]>;
  /** The final conclusion of the check. */
  conclusion?: InputMaybe<CheckConclusionState>;
  /** The URL of the integrator's site that has the full details of the check. */
  detailsUrl?: InputMaybe<Scalars["URI"]>;
  /** A reference for the run on the integrator's system. */
  externalId?: InputMaybe<Scalars["String"]>;
  /** The name of the check. */
  name?: InputMaybe<Scalars["String"]>;
  /** Descriptive details about the run. */
  output?: InputMaybe<CheckRunOutput>;
  /** The node ID of the repository. */
  repositoryId: Scalars["ID"];
  /** The time that the check run began. */
  startedAt?: InputMaybe<Scalars["DateTime"]>;
  /** The current status. */
  status?: InputMaybe<RequestableCheckStatusState>;
}

/** Autogenerated input type of UpdateCheckSuitePreferences */
export interface UpdateCheckSuitePreferencesInput {
  /** The check suite preferences to modify. */
  autoTriggerPreferences: Array<CheckSuiteAutoTriggerPreference>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the repository. */
  repositoryId: Scalars["ID"];
}

/** Autogenerated input type of UpdateDiscussionComment */
export interface UpdateDiscussionCommentInput {
  /** The new contents of the comment body. */
  body: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the discussion comment to update. */
  commentId: Scalars["ID"];
}

/** Autogenerated input type of UpdateDiscussion */
export interface UpdateDiscussionInput {
  /** The new contents of the discussion body. */
  body?: InputMaybe<Scalars["String"]>;
  /** The Node ID of a discussion category within the same repository to change this discussion to. */
  categoryId?: InputMaybe<Scalars["ID"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the discussion to update. */
  discussionId: Scalars["ID"];
  /** The new discussion title. */
  title?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of UpdateEnterpriseAdministratorRole */
export interface UpdateEnterpriseAdministratorRoleInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the Enterprise which the admin belongs to. */
  enterpriseId: Scalars["ID"];
  /** The login of a administrator whose role is being changed. */
  login: Scalars["String"];
  /** The new role for the Enterprise administrator. */
  role: EnterpriseAdministratorRole;
}

/** Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
export interface UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the allow private repository forking setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the allow private repository forking policy on the enterprise. */
  policyValue?: InputMaybe<EnterpriseAllowPrivateRepositoryForkingPolicyValue>;
  /** The value for the allow private repository forking setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

/** Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
export interface UpdateEnterpriseDefaultRepositoryPermissionSettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the base repository permission setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the base repository permission setting on the enterprise. */
  settingValue: EnterpriseDefaultRepositoryPermissionSettingValue;
}

/** Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
export interface UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the members can change repository visibility setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the members can change repository visibility setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

/** Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
export interface UpdateEnterpriseMembersCanCreateRepositoriesSettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the members can create repositories setting. */
  enterpriseId: Scalars["ID"];
  /** Allow members to create internal repositories. Defaults to current value. */
  membersCanCreateInternalRepositories?: InputMaybe<Scalars["Boolean"]>;
  /** Allow members to create private repositories. Defaults to current value. */
  membersCanCreatePrivateRepositories?: InputMaybe<Scalars["Boolean"]>;
  /** Allow members to create public repositories. Defaults to current value. */
  membersCanCreatePublicRepositories?: InputMaybe<Scalars["Boolean"]>;
  /** When false, allow member organizations to set their own repository creation member privileges. */
  membersCanCreateRepositoriesPolicyEnabled?: InputMaybe<Scalars["Boolean"]>;
  /** Value for the members can create repositories setting on the enterprise. This or the granular public/private/internal allowed fields (but not both) must be provided. */
  settingValue?: InputMaybe<EnterpriseMembersCanCreateRepositoriesSettingValue>;
}

/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
export interface UpdateEnterpriseMembersCanDeleteIssuesSettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the members can delete issues setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the members can delete issues setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
export interface UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the members can delete repositories setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the members can delete repositories setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

/** Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
export interface UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the members can invite collaborators setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the members can invite collaborators setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

/** Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting */
export interface UpdateEnterpriseMembersCanMakePurchasesSettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the members can make purchases setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the members can make purchases setting on the enterprise. */
  settingValue: EnterpriseMembersCanMakePurchasesSettingValue;
}

/** Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
export interface UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the members can update protected branches setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the members can update protected branches setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

/** Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
export interface UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the members can view dependency insights setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the members can view dependency insights setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

/** Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting */
export interface UpdateEnterpriseOrganizationProjectsSettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the organization projects setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the organization projects setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

/** Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole */
export interface UpdateEnterpriseOwnerOrganizationRoleInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the Enterprise which the owner belongs to. */
  enterpriseId: Scalars["ID"];
  /** The ID of the organization for membership change. */
  organizationId: Scalars["ID"];
  /** The role to assume in the organization. */
  organizationRole: RoleInOrganization;
}

/** Autogenerated input type of UpdateEnterpriseProfile */
export interface UpdateEnterpriseProfileInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The description of the enterprise. */
  description?: InputMaybe<Scalars["String"]>;
  /** The Enterprise ID to update. */
  enterpriseId: Scalars["ID"];
  /** The location of the enterprise. */
  location?: InputMaybe<Scalars["String"]>;
  /** The name of the enterprise. */
  name?: InputMaybe<Scalars["String"]>;
  /** The URL of the enterprise's website. */
  websiteUrl?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting */
export interface UpdateEnterpriseRepositoryProjectsSettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the repository projects setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the repository projects setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

/** Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting */
export interface UpdateEnterpriseTeamDiscussionsSettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the team discussions setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the team discussions setting on the enterprise. */
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

/** Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
export interface UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the enterprise on which to set the two factor authentication required setting. */
  enterpriseId: Scalars["ID"];
  /** The value for the two factor authentication required setting on the enterprise. */
  settingValue: EnterpriseEnabledSettingValue;
}

/** Autogenerated input type of UpdateEnvironment */
export interface UpdateEnvironmentInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The node ID of the environment. */
  environmentId: Scalars["ID"];
  /** Whether deployments to this environment can be approved by the user who created the deployment. */
  preventSelfReview?: InputMaybe<Scalars["Boolean"]>;
  /** The ids of users or teams that can approve deployments to this environment */
  reviewers?: InputMaybe<Array<Scalars["ID"]>>;
  /** The wait timer in minutes. */
  waitTimer?: InputMaybe<Scalars["Int"]>;
}

/** Autogenerated input type of UpdateIpAllowListEnabledSetting */
export interface UpdateIpAllowListEnabledSettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the owner on which to set the IP allow list enabled setting. */
  ownerId: Scalars["ID"];
  /** The value for the IP allow list enabled setting. */
  settingValue: IpAllowListEnabledSettingValue;
}

/** Autogenerated input type of UpdateIpAllowListEntry */
export interface UpdateIpAllowListEntryInput {
  /** An IP address or range of addresses in CIDR notation. */
  allowListValue: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the IP allow list entry to update. */
  ipAllowListEntryId: Scalars["ID"];
  /** Whether the IP allow list entry is active when an IP allow list is enabled. */
  isActive: Scalars["Boolean"];
  /** An optional name for the IP allow list entry. */
  name?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting */
export interface UpdateIpAllowListForInstalledAppsEnabledSettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the owner. */
  ownerId: Scalars["ID"];
  /** The value for the IP allow list configuration for installed GitHub Apps setting. */
  settingValue: IpAllowListForInstalledAppsEnabledSettingValue;
}

/** Autogenerated input type of UpdateIssueComment */
export interface UpdateIssueCommentInput {
  /** The updated text of the comment. */
  body: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the IssueComment to modify. */
  id: Scalars["ID"];
}

/** Autogenerated input type of UpdateIssue */
export interface UpdateIssueInput {
  /** An array of Node IDs of users for this issue. */
  assigneeIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The body for the issue description. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the Issue to modify. */
  id: Scalars["ID"];
  /** An array of Node IDs of labels for this issue. */
  labelIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The Node ID of the milestone for this issue. */
  milestoneId?: InputMaybe<Scalars["ID"]>;
  /** An array of Node IDs for projects associated with this issue. */
  projectIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The desired issue state. */
  state?: InputMaybe<IssueState>;
  /** The title for the issue. */
  title?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of UpdateNotificationRestrictionSetting */
export interface UpdateNotificationRestrictionSettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the owner on which to set the restrict notifications setting. */
  ownerId: Scalars["ID"];
  /** The value for the restrict notifications setting. */
  settingValue: NotificationRestrictionSettingValue;
}

/** Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
export interface UpdateOrganizationAllowPrivateRepositoryForkingSettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Enable forking of private repositories in the organization? */
  forkingEnabled: Scalars["Boolean"];
  /** The ID of the organization on which to set the allow private repository forking setting. */
  organizationId: Scalars["ID"];
}

/** Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting */
export interface UpdateOrganizationWebCommitSignoffSettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the organization on which to set the web commit signoff setting. */
  organizationId: Scalars["ID"];
  /** Enable signoff on web-based commits for repositories in the organization? */
  webCommitSignoffRequired: Scalars["Boolean"];
}

/** Only allow users with bypass permission to update matching refs. */
export interface UpdateParametersInput {
  /** Branch can pull changes from its upstream repository */
  updateAllowsFetchAndMerge: Scalars["Boolean"];
}

/** Autogenerated input type of UpdateProjectCard */
export interface UpdateProjectCardInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether or not the ProjectCard should be archived */
  isArchived?: InputMaybe<Scalars["Boolean"]>;
  /** The note of ProjectCard. */
  note?: InputMaybe<Scalars["String"]>;
  /** The ProjectCard ID to update. */
  projectCardId: Scalars["ID"];
}

/** Autogenerated input type of UpdateProjectColumn */
export interface UpdateProjectColumnInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of project column. */
  name: Scalars["String"];
  /** The ProjectColumn ID to update. */
  projectColumnId: Scalars["ID"];
}

/** Autogenerated input type of UpdateProject */
export interface UpdateProjectInput {
  /** The description of project. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The name of project. */
  name?: InputMaybe<Scalars["String"]>;
  /** The Project ID to update. */
  projectId: Scalars["ID"];
  /** Whether the project is public or not. */
  public?: InputMaybe<Scalars["Boolean"]>;
  /** Whether the project is open or closed. */
  state?: InputMaybe<ProjectState>;
}

/** Autogenerated input type of UpdateProjectV2Collaborators */
export interface UpdateProjectV2CollaboratorsInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The collaborators to update. */
  collaborators: Array<ProjectV2Collaborator>;
  /** The ID of the project to update the collaborators for. */
  projectId: Scalars["ID"];
}

/** Autogenerated input type of UpdateProjectV2DraftIssue */
export interface UpdateProjectV2DraftIssueInput {
  /** The IDs of the assignees of the draft issue. */
  assigneeIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The body of the draft issue. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the draft issue to update. */
  draftIssueId: Scalars["ID"];
  /** The title of the draft issue. */
  title?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of UpdateProjectV2 */
export interface UpdateProjectV2Input {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Set the project to closed or open. */
  closed?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the Project to update. */
  projectId: Scalars["ID"];
  /** Set the project to public or private. */
  public?: InputMaybe<Scalars["Boolean"]>;
  /** Set the readme description of the project. */
  readme?: InputMaybe<Scalars["String"]>;
  /** Set the short description of the project. */
  shortDescription?: InputMaybe<Scalars["String"]>;
  /** Set the title of the project. */
  title?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of UpdateProjectV2ItemFieldValue */
export interface UpdateProjectV2ItemFieldValueInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the field to be updated. */
  fieldId: Scalars["ID"];
  /** The ID of the item to be updated. */
  itemId: Scalars["ID"];
  /** The ID of the Project. */
  projectId: Scalars["ID"];
  /** The value which will be set on the field. */
  value: ProjectV2FieldValue;
}

/** Autogenerated input type of UpdateProjectV2ItemPosition */
export interface UpdateProjectV2ItemPositionInput {
  /** The ID of the item to position this item after. If omitted or set to null the item will be moved to top. */
  afterId?: InputMaybe<Scalars["ID"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the item to be moved. */
  itemId: Scalars["ID"];
  /** The ID of the Project. */
  projectId: Scalars["ID"];
}

/** Autogenerated input type of UpdatePullRequestBranch */
export interface UpdatePullRequestBranchInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The head ref oid for the upstream branch. */
  expectedHeadOid?: InputMaybe<Scalars["GitObjectID"]>;
  /** The Node ID of the pull request. */
  pullRequestId: Scalars["ID"];
  /** The update branch method to use. If omitted, defaults to 'MERGE' */
  updateMethod?: InputMaybe<PullRequestBranchUpdateMethod>;
}

/** Autogenerated input type of UpdatePullRequest */
export interface UpdatePullRequestInput {
  /** An array of Node IDs of users for this pull request. */
  assigneeIds?: InputMaybe<Array<Scalars["ID"]>>;
  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository.
   *
   */
  baseRefName?: InputMaybe<Scalars["String"]>;
  /** The contents of the pull request. */
  body?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** An array of Node IDs of labels for this pull request. */
  labelIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** Indicates whether maintainers can modify the pull request. */
  maintainerCanModify?: InputMaybe<Scalars["Boolean"]>;
  /** The Node ID of the milestone for this pull request. */
  milestoneId?: InputMaybe<Scalars["ID"]>;
  /** An array of Node IDs for projects associated with this pull request. */
  projectIds?: InputMaybe<Array<Scalars["ID"]>>;
  /** The Node ID of the pull request. */
  pullRequestId: Scalars["ID"];
  /** The target state of the pull request. */
  state?: InputMaybe<PullRequestUpdateState>;
  /** The title of the pull request. */
  title?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of UpdatePullRequestReviewComment */
export interface UpdatePullRequestReviewCommentInput {
  /** The text of the comment. */
  body: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the comment to modify. */
  pullRequestReviewCommentId: Scalars["ID"];
}

/** Autogenerated input type of UpdatePullRequestReview */
export interface UpdatePullRequestReviewInput {
  /** The contents of the pull request review body. */
  body: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the pull request review to modify. */
  pullRequestReviewId: Scalars["ID"];
}

/** Autogenerated input type of UpdateRef */
export interface UpdateRefInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Permit updates of branch Refs that are not fast-forwards? */
  force?: InputMaybe<Scalars["Boolean"]>;
  /** The GitObjectID that the Ref shall be updated to target. */
  oid: Scalars["GitObjectID"];
  /** The Node ID of the Ref to be updated. */
  refId: Scalars["ID"];
}

/** Autogenerated input type of UpdateRepository */
export interface UpdateRepositoryInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** A new description for the repository. Pass an empty string to erase the existing description. */
  description?: InputMaybe<Scalars["String"]>;
  /** Indicates if the repository should have the discussions feature enabled. */
  hasDiscussionsEnabled?: InputMaybe<Scalars["Boolean"]>;
  /** Indicates if the repository should have the issues feature enabled. */
  hasIssuesEnabled?: InputMaybe<Scalars["Boolean"]>;
  /** Indicates if the repository should have the project boards feature enabled. */
  hasProjectsEnabled?: InputMaybe<Scalars["Boolean"]>;
  /** Indicates if the repository should have the wiki feature enabled. */
  hasWikiEnabled?: InputMaybe<Scalars["Boolean"]>;
  /** The URL for a web page about this repository. Pass an empty string to erase the existing URL. */
  homepageUrl?: InputMaybe<Scalars["URI"]>;
  /** The new name of the repository. */
  name?: InputMaybe<Scalars["String"]>;
  /** The ID of the repository to update. */
  repositoryId: Scalars["ID"];
  /** Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure. */
  template?: InputMaybe<Scalars["Boolean"]>;
}

/** Autogenerated input type of UpdateRepositoryRuleset */
export interface UpdateRepositoryRulesetInput {
  /** A list of actors that are allowed to bypass rules in this ruleset. */
  bypassActors?: InputMaybe<Array<RepositoryRulesetBypassActorInput>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The list of conditions for this ruleset */
  conditions?: InputMaybe<RepositoryRuleConditionsInput>;
  /** The enforcement level for this ruleset */
  enforcement?: InputMaybe<RuleEnforcement>;
  /** The name of the ruleset. */
  name?: InputMaybe<Scalars["String"]>;
  /** The global relay id of the repository ruleset to be updated. */
  repositoryRulesetId: Scalars["ID"];
  /** The list of rules for this ruleset */
  rules?: InputMaybe<Array<RepositoryRuleInput>>;
  /** The target of the ruleset. */
  target?: InputMaybe<RepositoryRulesetTarget>;
}

/** Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting */
export interface UpdateRepositoryWebCommitSignoffSettingInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the repository to update. */
  repositoryId: Scalars["ID"];
  /** Indicates if the repository should require signoff on web-based commits. */
  webCommitSignoffRequired: Scalars["Boolean"];
}

/** Autogenerated input type of UpdateSponsorshipPreferences */
export interface UpdateSponsorshipPreferencesInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used. */
  privacyLevel?: InputMaybe<SponsorshipPrivacy>;
  /** Whether the sponsor should receive email updates from the sponsorable. */
  receiveEmails?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */
  sponsorId?: InputMaybe<Scalars["ID"]>;
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */
  sponsorLogin?: InputMaybe<Scalars["String"]>;
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  sponsorableId?: InputMaybe<Scalars["ID"]>;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  sponsorableLogin?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of UpdateSubscription */
export interface UpdateSubscriptionInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The new state of the subscription. */
  state: SubscriptionState;
  /** The Node ID of the subscribable object to modify. */
  subscribableId: Scalars["ID"];
}

/** Autogenerated input type of UpdateTeamDiscussionComment */
export interface UpdateTeamDiscussionCommentInput {
  /** The updated text of the comment. */
  body: Scalars["String"];
  /** The current version of the body content. */
  bodyVersion?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the comment to modify. */
  id: Scalars["ID"];
}

/** Autogenerated input type of UpdateTeamDiscussion */
export interface UpdateTeamDiscussionInput {
  /** The updated text of the discussion. */
  body?: InputMaybe<Scalars["String"]>;
  /** The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */
  bodyVersion?: InputMaybe<Scalars["String"]>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the discussion to modify. */
  id: Scalars["ID"];
  /** If provided, sets the pinned state of the updated discussion. */
  pinned?: InputMaybe<Scalars["Boolean"]>;
  /** The updated title of the discussion. */
  title?: InputMaybe<Scalars["String"]>;
}

/** Autogenerated input type of UpdateTeamsRepository */
export interface UpdateTeamsRepositoryInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Permission that should be granted to the teams. */
  permission: RepositoryPermission;
  /** Repository ID being granted access to. */
  repositoryId: Scalars["ID"];
  /** A list of teams being granted access. Limit: 10 */
  teamIds: Array<Scalars["ID"]>;
}

/** Autogenerated input type of UpdateTopics */
export interface UpdateTopicsInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The Node ID of the repository. */
  repositoryId: Scalars["ID"];
  /** An array of topic names. */
  topicNames: Array<Scalars["String"]>;
}

/** The possible durations that a user can be blocked for. */
export const UserBlockDuration = {
  /** The user was blocked for 1 day */
  ONE_DAY: "ONE_DAY",
  /** The user was blocked for 30 days */
  ONE_MONTH: "ONE_MONTH",
  /** The user was blocked for 7 days */
  ONE_WEEK: "ONE_WEEK",
  /** The user was blocked permanently */
  PERMANENT: "PERMANENT",
  /** The user was blocked for 3 days */
  THREE_DAYS: "THREE_DAYS",
} as const;

export type UserBlockDuration =
  (typeof UserBlockDuration)[keyof typeof UserBlockDuration];
/** Ordering options for user status connections. */
export interface UserStatusOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order user statuses by. */
  field: UserStatusOrderField;
}

/** Properties by which user status connections can be ordered. */
export const UserStatusOrderField = {
  /** Order user statuses by when they were updated. */
  UPDATED_AT: "UPDATED_AT",
} as const;

export type UserStatusOrderField =
  (typeof UserStatusOrderField)[keyof typeof UserStatusOrderField];
/** Ordering options for verifiable domain connections. */
export interface VerifiableDomainOrder {
  /** The ordering direction. */
  direction: OrderDirection;
  /** The field to order verifiable domains by. */
  field: VerifiableDomainOrderField;
}

/** Properties by which verifiable domain connections can be ordered. */
export const VerifiableDomainOrderField = {
  /** Order verifiable domains by their creation date. */
  CREATED_AT: "CREATED_AT",
  /** Order verifiable domains by the domain name. */
  DOMAIN: "DOMAIN",
} as const;

export type VerifiableDomainOrderField =
  (typeof VerifiableDomainOrderField)[keyof typeof VerifiableDomainOrderField];
/** Autogenerated input type of VerifyVerifiableDomain */
export interface VerifyVerifiableDomainInput {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the verifiable domain to verify. */
  id: Scalars["ID"];
}

/** A workflow that must run for this rule to pass */
export interface WorkflowFileReferenceInput {
  /** The path to the workflow file */
  path: Scalars["String"];
  /** The ref (branch or tag) of the workflow file to use */
  ref?: InputMaybe<Scalars["String"]>;
  /** The ID of the repository where the workflow is defined */
  repositoryId: Scalars["Int"];
  /** The commit SHA of the workflow file to use */
  sha?: InputMaybe<Scalars["String"]>;
}

/** Ways in which lists of workflow runs can be ordered upon return. */
export interface WorkflowRunOrder {
  /** The direction in which to order workflow runs by the specified field. */
  direction: OrderDirection;
  /** The field by which to order workflows. */
  field: WorkflowRunOrderField;
}

/** Properties by which workflow run connections can be ordered. */
export const WorkflowRunOrderField = {
  /** Order workflow runs by most recently created */
  CREATED_AT: "CREATED_AT",
} as const;

export type WorkflowRunOrderField =
  (typeof WorkflowRunOrderField)[keyof typeof WorkflowRunOrderField];
/** The possible states for a workflow. */
export const WorkflowState = {
  /** The workflow is active. */
  ACTIVE: "ACTIVE",
  /** The workflow was deleted from the git repository. */
  DELETED: "DELETED",
  /** The workflow was disabled by default on a fork. */
  DISABLED_FORK: "DISABLED_FORK",
  /** The workflow was disabled for inactivity in the repository. */
  DISABLED_INACTIVITY: "DISABLED_INACTIVITY",
  /** The workflow was disabled manually. */
  DISABLED_MANUALLY: "DISABLED_MANUALLY",
} as const;

export type WorkflowState = (typeof WorkflowState)[keyof typeof WorkflowState];
/** Require all changes made to a targeted branch to pass the specified workflows before they can be merged. */
export interface WorkflowsParametersInput {
  /** Workflows that must pass for this rule to pass. */
  workflows: Array<WorkflowFileReferenceInput>;
}

export const scalarsEnumsHash: import("gqty").ScalarsEnumsHash = {
  ActorType: true,
  AuditLogOrderField: true,
  Base64String: true,
  BigInt: true,
  Boolean: true,
  CheckAnnotationLevel: true,
  CheckConclusionState: true,
  CheckRunState: true,
  CheckRunType: true,
  CheckStatusState: true,
  CollaboratorAffiliation: true,
  CommentAuthorAssociation: true,
  CommentCannotUpdateReason: true,
  CommitContributionOrderField: true,
  ComparisonStatus: true,
  ContributionLevel: true,
  Date: true,
  DateTime: true,
  DefaultRepositoryPermissionField: true,
  DependencyGraphEcosystem: true,
  DeploymentOrderField: true,
  DeploymentProtectionRuleType: true,
  DeploymentReviewState: true,
  DeploymentState: true,
  DeploymentStatusState: true,
  DiffSide: true,
  DiscussionCloseReason: true,
  DiscussionOrderField: true,
  DiscussionPollOptionOrderField: true,
  DiscussionState: true,
  DiscussionStateReason: true,
  DismissReason: true,
  EnterpriseAdministratorInvitationOrderField: true,
  EnterpriseAdministratorRole: true,
  EnterpriseAllowPrivateRepositoryForkingPolicyValue: true,
  EnterpriseDefaultRepositoryPermissionSettingValue: true,
  EnterpriseEnabledDisabledSettingValue: true,
  EnterpriseEnabledSettingValue: true,
  EnterpriseMemberOrderField: true,
  EnterpriseMembersCanCreateRepositoriesSettingValue: true,
  EnterpriseMembersCanMakePurchasesSettingValue: true,
  EnterpriseMembershipType: true,
  EnterpriseOrderField: true,
  EnterpriseServerInstallationOrderField: true,
  EnterpriseServerUserAccountEmailOrderField: true,
  EnterpriseServerUserAccountOrderField: true,
  EnterpriseServerUserAccountsUploadOrderField: true,
  EnterpriseServerUserAccountsUploadSyncState: true,
  EnterpriseUserAccountMembershipRole: true,
  EnterpriseUserDeployment: true,
  EnvironmentOrderField: true,
  FileViewedState: true,
  Float: true,
  FundingPlatform: true,
  GistOrderField: true,
  GistPrivacy: true,
  GitObjectID: true,
  GitSSHRemote: true,
  GitSignatureState: true,
  GitTimestamp: true,
  HTML: true,
  ID: true,
  IdentityProviderConfigurationState: true,
  Int: true,
  IpAllowListEnabledSettingValue: true,
  IpAllowListEntryOrderField: true,
  IpAllowListForInstalledAppsEnabledSettingValue: true,
  IssueClosedStateReason: true,
  IssueCommentOrderField: true,
  IssueOrderField: true,
  IssueState: true,
  IssueStateReason: true,
  IssueTimelineItemsItemType: true,
  LabelOrderField: true,
  LanguageOrderField: true,
  LockReason: true,
  MannequinOrderField: true,
  MergeCommitMessage: true,
  MergeCommitTitle: true,
  MergeQueueEntryState: true,
  MergeQueueMergingStrategy: true,
  MergeableState: true,
  MigrationSourceType: true,
  MigrationState: true,
  MilestoneOrderField: true,
  MilestoneState: true,
  NotificationReason: true,
  NotificationRestrictionSettingValue: true,
  NotificationStatus: true,
  NotificationThreadSubscriptionState: true,
  OIDCProviderType: true,
  OauthApplicationCreateAuditEntryState: true,
  OperationType: true,
  OrderDirection: true,
  OrgAddMemberAuditEntryPermission: true,
  OrgCreateAuditEntryBillingPlan: true,
  OrgEnterpriseOwnerOrderField: true,
  OrgRemoveBillingManagerAuditEntryReason: true,
  OrgRemoveMemberAuditEntryMembershipType: true,
  OrgRemoveMemberAuditEntryReason: true,
  OrgRemoveOutsideCollaboratorAuditEntryMembershipType: true,
  OrgRemoveOutsideCollaboratorAuditEntryReason: true,
  OrgUpdateDefaultRepositoryPermissionAuditEntryPermission: true,
  OrgUpdateMemberAuditEntryPermission: true,
  OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility: true,
  OrganizationInvitationRole: true,
  OrganizationInvitationSource: true,
  OrganizationInvitationType: true,
  OrganizationMemberRole: true,
  OrganizationMembersCanCreateRepositoriesSettingValue: true,
  OrganizationMigrationState: true,
  OrganizationOrderField: true,
  PackageFileOrderField: true,
  PackageOrderField: true,
  PackageType: true,
  PackageVersionOrderField: true,
  PatchStatus: true,
  PinnableItemType: true,
  PinnedDiscussionGradient: true,
  PinnedDiscussionPattern: true,
  PreciseDateTime: true,
  ProjectCardArchivedState: true,
  ProjectCardState: true,
  ProjectColumnPurpose: true,
  ProjectOrderField: true,
  ProjectState: true,
  ProjectTemplate: true,
  ProjectV2CustomFieldType: true,
  ProjectV2FieldOrderField: true,
  ProjectV2FieldType: true,
  ProjectV2ItemFieldValueOrderField: true,
  ProjectV2ItemOrderField: true,
  ProjectV2ItemType: true,
  ProjectV2OrderField: true,
  ProjectV2Roles: true,
  ProjectV2SingleSelectFieldOptionColor: true,
  ProjectV2State: true,
  ProjectV2ViewLayout: true,
  ProjectV2ViewOrderField: true,
  ProjectV2WorkflowsOrderField: true,
  PullRequestBranchUpdateMethod: true,
  PullRequestMergeMethod: true,
  PullRequestOrderField: true,
  PullRequestReviewCommentState: true,
  PullRequestReviewDecision: true,
  PullRequestReviewEvent: true,
  PullRequestReviewState: true,
  PullRequestReviewThreadSubjectType: true,
  PullRequestState: true,
  PullRequestTimelineItemsItemType: true,
  PullRequestUpdateState: true,
  ReactionContent: true,
  ReactionOrderField: true,
  RefOrderField: true,
  ReleaseOrderField: true,
  RepoAccessAuditEntryVisibility: true,
  RepoAddMemberAuditEntryVisibility: true,
  RepoArchivedAuditEntryVisibility: true,
  RepoChangeMergeSettingAuditEntryMergeType: true,
  RepoCreateAuditEntryVisibility: true,
  RepoDestroyAuditEntryVisibility: true,
  RepoRemoveMemberAuditEntryVisibility: true,
  ReportedContentClassifiers: true,
  RepositoryAffiliation: true,
  RepositoryContributionType: true,
  RepositoryInteractionLimit: true,
  RepositoryInteractionLimitExpiry: true,
  RepositoryInteractionLimitOrigin: true,
  RepositoryInvitationOrderField: true,
  RepositoryLockReason: true,
  RepositoryMigrationOrderDirection: true,
  RepositoryMigrationOrderField: true,
  RepositoryOrderField: true,
  RepositoryPermission: true,
  RepositoryPrivacy: true,
  RepositoryRuleType: true,
  RepositoryRulesetBypassActorBypassMode: true,
  RepositoryRulesetTarget: true,
  RepositoryVisibility: true,
  RepositoryVulnerabilityAlertDependencyScope: true,
  RepositoryVulnerabilityAlertState: true,
  RequestableCheckStatusState: true,
  RoleInOrganization: true,
  RuleEnforcement: true,
  SamlDigestAlgorithm: true,
  SamlSignatureAlgorithm: true,
  SavedReplyOrderField: true,
  SearchType: true,
  SecurityAdvisoryClassification: true,
  SecurityAdvisoryEcosystem: true,
  SecurityAdvisoryIdentifierType: true,
  SecurityAdvisoryOrderField: true,
  SecurityAdvisorySeverity: true,
  SecurityVulnerabilityOrderField: true,
  SocialAccountProvider: true,
  SponsorOrderField: true,
  SponsorableOrderField: true,
  SponsorsActivityAction: true,
  SponsorsActivityOrderField: true,
  SponsorsActivityPeriod: true,
  SponsorsCountryOrRegionCode: true,
  SponsorsGoalKind: true,
  SponsorsListingFeaturedItemFeatureableType: true,
  SponsorsTierOrderField: true,
  SponsorshipNewsletterOrderField: true,
  SponsorshipOrderField: true,
  SponsorshipPaymentSource: true,
  SponsorshipPrivacy: true,
  SquashMergeCommitMessage: true,
  SquashMergeCommitTitle: true,
  StarOrderField: true,
  StatusState: true,
  String: true,
  SubscriptionState: true,
  TeamDiscussionCommentOrderField: true,
  TeamDiscussionOrderField: true,
  TeamMemberOrderField: true,
  TeamMemberRole: true,
  TeamMembershipType: true,
  TeamNotificationSetting: true,
  TeamOrderField: true,
  TeamPrivacy: true,
  TeamRepositoryOrderField: true,
  TeamRole: true,
  ThreadSubscriptionFormAction: true,
  ThreadSubscriptionState: true,
  TopicSuggestionDeclineReason: true,
  TrackedIssueStates: true,
  URI: true,
  UserBlockDuration: true,
  UserStatusOrderField: true,
  VerifiableDomainOrderField: true,
  WorkflowRunOrderField: true,
  WorkflowState: true,
  X509Certificate: true,
};
export const generatedSchema = {
  AbortQueuedMigrationsInput: {
    clientMutationId: { __type: "String" },
    ownerId: { __type: "ID!" },
  },
  AbortQueuedMigrationsPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    success: { __type: "Boolean" },
  },
  AbortRepositoryMigrationInput: {
    clientMutationId: { __type: "String" },
    migrationId: { __type: "ID!" },
  },
  AbortRepositoryMigrationPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    success: { __type: "Boolean" },
  },
  AcceptEnterpriseAdministratorInvitationInput: {
    clientMutationId: { __type: "String" },
    invitationId: { __type: "ID!" },
  },
  AcceptEnterpriseAdministratorInvitationPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    invitation: { __type: "EnterpriseAdministratorInvitation" },
    message: { __type: "String" },
  },
  AcceptTopicSuggestionInput: {
    clientMutationId: { __type: "String" },
    name: { __type: "String!" },
    repositoryId: { __type: "ID!" },
  },
  AcceptTopicSuggestionPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    topic: { __type: "Topic" },
  },
  Actor: {
    __typename: { __type: "String!" },
    avatarUrl: { __type: "URI!", __args: { size: "Int" } },
    login: { __type: "String!" },
    resourcePath: { __type: "URI!" },
    url: { __type: "URI!" },
    $on: { __type: "$Actor!" },
  },
  ActorLocation: {
    __typename: { __type: "String!" },
    city: { __type: "String" },
    country: { __type: "String" },
    countryCode: { __type: "String" },
    region: { __type: "String" },
    regionCode: { __type: "String" },
  },
  AddAssigneesToAssignableInput: {
    assignableId: { __type: "ID!" },
    assigneeIds: { __type: "[ID!]!" },
    clientMutationId: { __type: "String" },
  },
  AddAssigneesToAssignablePayload: {
    __typename: { __type: "String!" },
    assignable: { __type: "Assignable" },
    clientMutationId: { __type: "String" },
  },
  AddCommentInput: {
    body: { __type: "String!" },
    clientMutationId: { __type: "String" },
    subjectId: { __type: "ID!" },
  },
  AddCommentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    commentEdge: { __type: "IssueCommentEdge" },
    subject: { __type: "Node" },
    timelineEdge: { __type: "IssueTimelineItemEdge" },
  },
  AddDiscussionCommentInput: {
    body: { __type: "String!" },
    clientMutationId: { __type: "String" },
    discussionId: { __type: "ID!" },
    replyToId: { __type: "ID" },
  },
  AddDiscussionCommentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    comment: { __type: "DiscussionComment" },
  },
  AddDiscussionPollVoteInput: {
    clientMutationId: { __type: "String" },
    pollOptionId: { __type: "ID!" },
  },
  AddDiscussionPollVotePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pollOption: { __type: "DiscussionPollOption" },
  },
  AddEnterpriseOrganizationMemberInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    organizationId: { __type: "ID!" },
    role: { __type: "OrganizationMemberRole" },
    userIds: { __type: "[ID!]!" },
  },
  AddEnterpriseOrganizationMemberPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    users: { __type: "[User!]" },
  },
  AddEnterpriseSupportEntitlementInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    login: { __type: "String!" },
  },
  AddEnterpriseSupportEntitlementPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    message: { __type: "String" },
  },
  AddLabelsToLabelableInput: {
    clientMutationId: { __type: "String" },
    labelIds: { __type: "[ID!]!" },
    labelableId: { __type: "ID!" },
  },
  AddLabelsToLabelablePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    labelable: { __type: "Labelable" },
  },
  AddProjectCardInput: {
    clientMutationId: { __type: "String" },
    contentId: { __type: "ID" },
    note: { __type: "String" },
    projectColumnId: { __type: "ID!" },
  },
  AddProjectCardPayload: {
    __typename: { __type: "String!" },
    cardEdge: { __type: "ProjectCardEdge" },
    clientMutationId: { __type: "String" },
    projectColumn: { __type: "ProjectColumn" },
  },
  AddProjectColumnInput: {
    clientMutationId: { __type: "String" },
    name: { __type: "String!" },
    projectId: { __type: "ID!" },
  },
  AddProjectColumnPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    columnEdge: { __type: "ProjectColumnEdge" },
    project: { __type: "Project" },
  },
  AddProjectV2DraftIssueInput: {
    assigneeIds: { __type: "[ID!]" },
    body: { __type: "String" },
    clientMutationId: { __type: "String" },
    projectId: { __type: "ID!" },
    title: { __type: "String!" },
  },
  AddProjectV2DraftIssuePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    projectItem: { __type: "ProjectV2Item" },
  },
  AddProjectV2ItemByIdInput: {
    clientMutationId: { __type: "String" },
    contentId: { __type: "ID!" },
    projectId: { __type: "ID!" },
  },
  AddProjectV2ItemByIdPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    item: { __type: "ProjectV2Item" },
  },
  AddPullRequestReviewCommentInput: {
    body: { __type: "String" },
    clientMutationId: { __type: "String" },
    commitOID: { __type: "GitObjectID" },
    inReplyTo: { __type: "ID" },
    path: { __type: "String" },
    position: { __type: "Int" },
    pullRequestId: { __type: "ID" },
    pullRequestReviewId: { __type: "ID" },
  },
  AddPullRequestReviewCommentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    comment: { __type: "PullRequestReviewComment" },
    commentEdge: { __type: "PullRequestReviewCommentEdge" },
  },
  AddPullRequestReviewInput: {
    body: { __type: "String" },
    clientMutationId: { __type: "String" },
    comments: { __type: "[DraftPullRequestReviewComment]" },
    commitOID: { __type: "GitObjectID" },
    event: { __type: "PullRequestReviewEvent" },
    pullRequestId: { __type: "ID!" },
    threads: { __type: "[DraftPullRequestReviewThread]" },
  },
  AddPullRequestReviewPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pullRequestReview: { __type: "PullRequestReview" },
    reviewEdge: { __type: "PullRequestReviewEdge" },
  },
  AddPullRequestReviewThreadInput: {
    body: { __type: "String!" },
    clientMutationId: { __type: "String" },
    line: { __type: "Int" },
    path: { __type: "String!" },
    pullRequestId: { __type: "ID" },
    pullRequestReviewId: { __type: "ID" },
    side: { __type: "DiffSide" },
    startLine: { __type: "Int" },
    startSide: { __type: "DiffSide" },
    subjectType: { __type: "PullRequestReviewThreadSubjectType" },
  },
  AddPullRequestReviewThreadPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    thread: { __type: "PullRequestReviewThread" },
  },
  AddPullRequestReviewThreadReplyInput: {
    body: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pullRequestReviewId: { __type: "ID" },
    pullRequestReviewThreadId: { __type: "ID!" },
  },
  AddPullRequestReviewThreadReplyPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    comment: { __type: "PullRequestReviewComment" },
  },
  AddReactionInput: {
    clientMutationId: { __type: "String" },
    content: { __type: "ReactionContent!" },
    subjectId: { __type: "ID!" },
  },
  AddReactionPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    reaction: { __type: "Reaction" },
    reactionGroups: { __type: "[ReactionGroup!]" },
    subject: { __type: "Reactable" },
  },
  AddStarInput: {
    clientMutationId: { __type: "String" },
    starrableId: { __type: "ID!" },
  },
  AddStarPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    starrable: { __type: "Starrable" },
  },
  AddUpvoteInput: {
    clientMutationId: { __type: "String" },
    subjectId: { __type: "ID!" },
  },
  AddUpvotePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    subject: { __type: "Votable" },
  },
  AddVerifiableDomainInput: {
    clientMutationId: { __type: "String" },
    domain: { __type: "URI!" },
    ownerId: { __type: "ID!" },
  },
  AddVerifiableDomainPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    domain: { __type: "VerifiableDomain" },
  },
  AddedToMergeQueueEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    enqueuer: { __type: "User" },
    id: { __type: "ID!" },
    mergeQueue: { __type: "MergeQueue" },
    pullRequest: { __type: "PullRequest" },
  },
  AddedToProjectEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
  },
  AnnouncementBanner: {
    __typename: { __type: "String!" },
    announcement: { __type: "String" },
    announcementExpiresAt: { __type: "DateTime" },
    announcementUserDismissible: { __type: "Boolean" },
    $on: { __type: "$AnnouncementBanner!" },
  },
  App: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    description: { __type: "String" },
    id: { __type: "ID!" },
    ipAllowListEntries: {
      __type: "IpAllowListEntryConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "IpAllowListEntryOrder",
      },
    },
    logoBackgroundColor: { __type: "String!" },
    logoUrl: { __type: "URI!", __args: { size: "Int" } },
    name: { __type: "String!" },
    slug: { __type: "String!" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
  },
  ApproveDeploymentsInput: {
    clientMutationId: { __type: "String" },
    comment: { __type: "String" },
    environmentIds: { __type: "[ID!]!" },
    workflowRunId: { __type: "ID!" },
  },
  ApproveDeploymentsPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deployments: { __type: "[Deployment!]" },
  },
  ApproveVerifiableDomainInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  ApproveVerifiableDomainPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    domain: { __type: "VerifiableDomain" },
  },
  ArchiveProjectV2ItemInput: {
    clientMutationId: { __type: "String" },
    itemId: { __type: "ID!" },
    projectId: { __type: "ID!" },
  },
  ArchiveProjectV2ItemPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    item: { __type: "ProjectV2Item" },
  },
  ArchiveRepositoryInput: {
    clientMutationId: { __type: "String" },
    repositoryId: { __type: "ID!" },
  },
  ArchiveRepositoryPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    repository: { __type: "Repository" },
  },
  Assignable: {
    __typename: { __type: "String!" },
    assignees: {
      __type: "UserConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    $on: { __type: "$Assignable!" },
  },
  AssignedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    assignable: { __type: "Assignable!" },
    assignee: { __type: "Assignee" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    user: { __type: "User" },
  },
  Assignee: {
    __typename: { __type: "String!" },
    $on: { __type: "$Assignee!" },
  },
  AuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    operationType: { __type: "OperationType" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
    $on: { __type: "$AuditEntry!" },
  },
  AuditEntryActor: {
    __typename: { __type: "String!" },
    $on: { __type: "$AuditEntryActor!" },
  },
  AuditLogOrder: {
    direction: { __type: "OrderDirection" },
    field: { __type: "AuditLogOrderField" },
  },
  AutoMergeDisabledEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    disabler: { __type: "User" },
    id: { __type: "ID!" },
    pullRequest: { __type: "PullRequest" },
    reason: { __type: "String" },
    reasonCode: { __type: "String" },
  },
  AutoMergeEnabledEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    enabler: { __type: "User" },
    id: { __type: "ID!" },
    pullRequest: { __type: "PullRequest" },
  },
  AutoMergeRequest: {
    __typename: { __type: "String!" },
    authorEmail: { __type: "String" },
    commitBody: { __type: "String" },
    commitHeadline: { __type: "String" },
    enabledAt: { __type: "DateTime" },
    enabledBy: { __type: "Actor" },
    mergeMethod: { __type: "PullRequestMergeMethod!" },
    pullRequest: { __type: "PullRequest!" },
  },
  AutoRebaseEnabledEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    enabler: { __type: "User" },
    id: { __type: "ID!" },
    pullRequest: { __type: "PullRequest" },
  },
  AutoSquashEnabledEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    enabler: { __type: "User" },
    id: { __type: "ID!" },
    pullRequest: { __type: "PullRequest" },
  },
  AutomaticBaseChangeFailedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    newBase: { __type: "String!" },
    oldBase: { __type: "String!" },
    pullRequest: { __type: "PullRequest!" },
  },
  AutomaticBaseChangeSucceededEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    newBase: { __type: "String!" },
    oldBase: { __type: "String!" },
    pullRequest: { __type: "PullRequest!" },
  },
  BaseRefChangedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    currentRefName: { __type: "String!" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
    previousRefName: { __type: "String!" },
    pullRequest: { __type: "PullRequest!" },
  },
  BaseRefDeletedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    baseRefName: { __type: "String" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    pullRequest: { __type: "PullRequest" },
  },
  BaseRefForcePushedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    afterCommit: { __type: "Commit" },
    beforeCommit: { __type: "Commit" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    pullRequest: { __type: "PullRequest!" },
    ref: { __type: "Ref" },
  },
  Blame: {
    __typename: { __type: "String!" },
    ranges: { __type: "[BlameRange!]!" },
  },
  BlameRange: {
    __typename: { __type: "String!" },
    age: { __type: "Int!" },
    commit: { __type: "Commit!" },
    endingLine: { __type: "Int!" },
    startingLine: { __type: "Int!" },
  },
  Blob: {
    __typename: { __type: "String!" },
    abbreviatedOid: { __type: "String!" },
    byteSize: { __type: "Int!" },
    commitResourcePath: { __type: "URI!" },
    commitUrl: { __type: "URI!" },
    id: { __type: "ID!" },
    isBinary: { __type: "Boolean" },
    isTruncated: { __type: "Boolean!" },
    oid: { __type: "GitObjectID!" },
    repository: { __type: "Repository!" },
    text: { __type: "String" },
  },
  Bot: {
    __typename: { __type: "String!" },
    avatarUrl: { __type: "URI!", __args: { size: "Int" } },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
    login: { __type: "String!" },
    resourcePath: { __type: "URI!" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
  },
  BranchActorAllowanceActor: {
    __typename: { __type: "String!" },
    $on: { __type: "$BranchActorAllowanceActor!" },
  },
  BranchNamePatternParameters: {
    __typename: { __type: "String!" },
    name: { __type: "String" },
    negate: { __type: "Boolean!" },
    operator: { __type: "String!" },
    pattern: { __type: "String!" },
  },
  BranchNamePatternParametersInput: {
    name: { __type: "String" },
    negate: { __type: "Boolean" },
    operator: { __type: "String!" },
    pattern: { __type: "String!" },
  },
  BranchProtectionRule: {
    __typename: { __type: "String!" },
    allowsDeletions: { __type: "Boolean!" },
    allowsForcePushes: { __type: "Boolean!" },
    blocksCreations: { __type: "Boolean!" },
    branchProtectionRuleConflicts: {
      __type: "BranchProtectionRuleConflictConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    bypassForcePushAllowances: {
      __type: "BypassForcePushAllowanceConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    bypassPullRequestAllowances: {
      __type: "BypassPullRequestAllowanceConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    creator: { __type: "Actor" },
    databaseId: { __type: "Int" },
    dismissesStaleReviews: { __type: "Boolean!" },
    id: { __type: "ID!" },
    isAdminEnforced: { __type: "Boolean!" },
    lockAllowsFetchAndMerge: { __type: "Boolean!" },
    lockBranch: { __type: "Boolean!" },
    matchingRefs: {
      __type: "RefConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        query: "String",
      },
    },
    pattern: { __type: "String!" },
    pushAllowances: {
      __type: "PushAllowanceConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    repository: { __type: "Repository" },
    requireLastPushApproval: { __type: "Boolean!" },
    requiredApprovingReviewCount: { __type: "Int" },
    requiredDeploymentEnvironments: { __type: "[String]" },
    requiredStatusCheckContexts: { __type: "[String]" },
    requiredStatusChecks: { __type: "[RequiredStatusCheckDescription!]" },
    requiresApprovingReviews: { __type: "Boolean!" },
    requiresCodeOwnerReviews: { __type: "Boolean!" },
    requiresCommitSignatures: { __type: "Boolean!" },
    requiresConversationResolution: { __type: "Boolean!" },
    requiresDeployments: { __type: "Boolean!" },
    requiresLinearHistory: { __type: "Boolean!" },
    requiresStatusChecks: { __type: "Boolean!" },
    requiresStrictStatusChecks: { __type: "Boolean!" },
    restrictsPushes: { __type: "Boolean!" },
    restrictsReviewDismissals: { __type: "Boolean!" },
    reviewDismissalAllowances: {
      __type: "ReviewDismissalAllowanceConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
  },
  BranchProtectionRuleConflict: {
    __typename: { __type: "String!" },
    branchProtectionRule: { __type: "BranchProtectionRule" },
    conflictingBranchProtectionRule: { __type: "BranchProtectionRule" },
    ref: { __type: "Ref" },
  },
  BranchProtectionRuleConflictConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[BranchProtectionRuleConflictEdge]" },
    nodes: { __type: "[BranchProtectionRuleConflict]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  BranchProtectionRuleConflictEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "BranchProtectionRuleConflict" },
  },
  BranchProtectionRuleConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[BranchProtectionRuleEdge]" },
    nodes: { __type: "[BranchProtectionRule]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  BranchProtectionRuleEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "BranchProtectionRule" },
  },
  BulkSponsorship: {
    amount: { __type: "Int!" },
    sponsorableId: { __type: "ID" },
    sponsorableLogin: { __type: "String" },
  },
  BypassActor: {
    __typename: { __type: "String!" },
    $on: { __type: "$BypassActor!" },
  },
  BypassForcePushAllowance: {
    __typename: { __type: "String!" },
    actor: { __type: "BranchActorAllowanceActor" },
    branchProtectionRule: { __type: "BranchProtectionRule" },
    id: { __type: "ID!" },
  },
  BypassForcePushAllowanceConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[BypassForcePushAllowanceEdge]" },
    nodes: { __type: "[BypassForcePushAllowance]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  BypassForcePushAllowanceEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "BypassForcePushAllowance" },
  },
  BypassPullRequestAllowance: {
    __typename: { __type: "String!" },
    actor: { __type: "BranchActorAllowanceActor" },
    branchProtectionRule: { __type: "BranchProtectionRule" },
    id: { __type: "ID!" },
  },
  BypassPullRequestAllowanceConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[BypassPullRequestAllowanceEdge]" },
    nodes: { __type: "[BypassPullRequestAllowance]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  BypassPullRequestAllowanceEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "BypassPullRequestAllowance" },
  },
  CVSS: {
    __typename: { __type: "String!" },
    score: { __type: "Float!" },
    vectorString: { __type: "String" },
  },
  CWE: {
    __typename: { __type: "String!" },
    cweId: { __type: "String!" },
    description: { __type: "String!" },
    id: { __type: "ID!" },
    name: { __type: "String!" },
  },
  CWEConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[CWEEdge]" },
    nodes: { __type: "[CWE]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  CWEEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "CWE" },
  },
  CancelEnterpriseAdminInvitationInput: {
    clientMutationId: { __type: "String" },
    invitationId: { __type: "ID!" },
  },
  CancelEnterpriseAdminInvitationPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    invitation: { __type: "EnterpriseAdministratorInvitation" },
    message: { __type: "String" },
  },
  CancelSponsorshipInput: {
    clientMutationId: { __type: "String" },
    sponsorId: { __type: "ID" },
    sponsorLogin: { __type: "String" },
    sponsorableId: { __type: "ID" },
    sponsorableLogin: { __type: "String" },
  },
  CancelSponsorshipPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    sponsorsTier: { __type: "SponsorsTier" },
  },
  ChangeUserStatusInput: {
    clientMutationId: { __type: "String" },
    emoji: { __type: "String" },
    expiresAt: { __type: "DateTime" },
    limitedAvailability: { __type: "Boolean" },
    message: { __type: "String" },
    organizationId: { __type: "ID" },
  },
  ChangeUserStatusPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    status: { __type: "UserStatus" },
  },
  CheckAnnotation: {
    __typename: { __type: "String!" },
    annotationLevel: { __type: "CheckAnnotationLevel" },
    blobUrl: { __type: "URI!" },
    databaseId: { __type: "Int" },
    location: { __type: "CheckAnnotationSpan!" },
    message: { __type: "String!" },
    path: { __type: "String!" },
    rawDetails: { __type: "String" },
    title: { __type: "String" },
  },
  CheckAnnotationConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[CheckAnnotationEdge]" },
    nodes: { __type: "[CheckAnnotation]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  CheckAnnotationData: {
    annotationLevel: { __type: "CheckAnnotationLevel!" },
    location: { __type: "CheckAnnotationRange!" },
    message: { __type: "String!" },
    path: { __type: "String!" },
    rawDetails: { __type: "String" },
    title: { __type: "String" },
  },
  CheckAnnotationEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "CheckAnnotation" },
  },
  CheckAnnotationPosition: {
    __typename: { __type: "String!" },
    column: { __type: "Int" },
    line: { __type: "Int!" },
  },
  CheckAnnotationRange: {
    endColumn: { __type: "Int" },
    endLine: { __type: "Int!" },
    startColumn: { __type: "Int" },
    startLine: { __type: "Int!" },
  },
  CheckAnnotationSpan: {
    __typename: { __type: "String!" },
    end: { __type: "CheckAnnotationPosition!" },
    start: { __type: "CheckAnnotationPosition!" },
  },
  CheckRun: {
    __typename: { __type: "String!" },
    annotations: {
      __type: "CheckAnnotationConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    checkSuite: { __type: "CheckSuite!" },
    completedAt: { __type: "DateTime" },
    conclusion: { __type: "CheckConclusionState" },
    databaseId: { __type: "Int" },
    deployment: { __type: "Deployment" },
    detailsUrl: { __type: "URI" },
    externalId: { __type: "String" },
    id: { __type: "ID!" },
    isRequired: {
      __type: "Boolean!",
      __args: { pullRequestId: "ID", pullRequestNumber: "Int" },
    },
    name: { __type: "String!" },
    pendingDeploymentRequest: { __type: "DeploymentRequest" },
    permalink: { __type: "URI!" },
    repository: { __type: "Repository!" },
    resourcePath: { __type: "URI!" },
    startedAt: { __type: "DateTime" },
    status: { __type: "CheckStatusState!" },
    steps: {
      __type: "CheckStepConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        number: "Int",
      },
    },
    summary: { __type: "String" },
    text: { __type: "String" },
    title: { __type: "String" },
    url: { __type: "URI!" },
  },
  CheckRunAction: {
    description: { __type: "String!" },
    identifier: { __type: "String!" },
    label: { __type: "String!" },
  },
  CheckRunConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[CheckRunEdge]" },
    nodes: { __type: "[CheckRun]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  CheckRunEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "CheckRun" },
  },
  CheckRunFilter: {
    appId: { __type: "Int" },
    checkName: { __type: "String" },
    checkType: { __type: "CheckRunType" },
    conclusions: { __type: "[CheckConclusionState!]" },
    status: { __type: "CheckStatusState" },
    statuses: { __type: "[CheckStatusState!]" },
  },
  CheckRunOutput: {
    annotations: { __type: "[CheckAnnotationData!]" },
    images: { __type: "[CheckRunOutputImage!]" },
    summary: { __type: "String!" },
    text: { __type: "String" },
    title: { __type: "String!" },
  },
  CheckRunOutputImage: {
    alt: { __type: "String!" },
    caption: { __type: "String" },
    imageUrl: { __type: "URI!" },
  },
  CheckRunStateCount: {
    __typename: { __type: "String!" },
    count: { __type: "Int!" },
    state: { __type: "CheckRunState!" },
  },
  CheckStep: {
    __typename: { __type: "String!" },
    completedAt: { __type: "DateTime" },
    conclusion: { __type: "CheckConclusionState" },
    externalId: { __type: "String" },
    name: { __type: "String!" },
    number: { __type: "Int!" },
    secondsToCompletion: { __type: "Int" },
    startedAt: { __type: "DateTime" },
    status: { __type: "CheckStatusState!" },
  },
  CheckStepConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[CheckStepEdge]" },
    nodes: { __type: "[CheckStep]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  CheckStepEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "CheckStep" },
  },
  CheckSuite: {
    __typename: { __type: "String!" },
    app: { __type: "App" },
    branch: { __type: "Ref" },
    checkRuns: {
      __type: "CheckRunConnection",
      __args: {
        after: "String",
        before: "String",
        filterBy: "CheckRunFilter",
        first: "Int",
        last: "Int",
      },
    },
    commit: { __type: "Commit!" },
    conclusion: { __type: "CheckConclusionState" },
    createdAt: { __type: "DateTime!" },
    creator: { __type: "User" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
    matchingPullRequests: {
      __type: "PullRequestConnection",
      __args: {
        after: "String",
        baseRefName: "String",
        before: "String",
        first: "Int",
        headRefName: "String",
        labels: "[String!]",
        last: "Int",
        orderBy: "IssueOrder",
        states: "[PullRequestState!]",
      },
    },
    push: { __type: "Push" },
    repository: { __type: "Repository!" },
    resourcePath: { __type: "URI!" },
    status: { __type: "CheckStatusState!" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    workflowRun: { __type: "WorkflowRun" },
  },
  CheckSuiteAutoTriggerPreference: {
    appId: { __type: "ID!" },
    setting: { __type: "Boolean!" },
  },
  CheckSuiteConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[CheckSuiteEdge]" },
    nodes: { __type: "[CheckSuite]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  CheckSuiteEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "CheckSuite" },
  },
  CheckSuiteFilter: {
    appId: { __type: "Int" },
    checkName: { __type: "String" },
  },
  Claimable: {
    __typename: { __type: "String!" },
    $on: { __type: "$Claimable!" },
  },
  ClearLabelsFromLabelableInput: {
    clientMutationId: { __type: "String" },
    labelableId: { __type: "ID!" },
  },
  ClearLabelsFromLabelablePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    labelable: { __type: "Labelable" },
  },
  ClearProjectV2ItemFieldValueInput: {
    clientMutationId: { __type: "String" },
    fieldId: { __type: "ID!" },
    itemId: { __type: "ID!" },
    projectId: { __type: "ID!" },
  },
  ClearProjectV2ItemFieldValuePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    projectV2Item: { __type: "ProjectV2Item" },
  },
  CloneProjectInput: {
    body: { __type: "String" },
    clientMutationId: { __type: "String" },
    includeWorkflows: { __type: "Boolean!" },
    name: { __type: "String!" },
    public: { __type: "Boolean" },
    sourceId: { __type: "ID!" },
    targetOwnerId: { __type: "ID!" },
  },
  CloneProjectPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    jobStatusId: { __type: "String" },
    project: { __type: "Project" },
  },
  CloneTemplateRepositoryInput: {
    clientMutationId: { __type: "String" },
    description: { __type: "String" },
    includeAllBranches: { __type: "Boolean" },
    name: { __type: "String!" },
    ownerId: { __type: "ID!" },
    repositoryId: { __type: "ID!" },
    visibility: { __type: "RepositoryVisibility!" },
  },
  CloneTemplateRepositoryPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    repository: { __type: "Repository" },
  },
  Closable: {
    __typename: { __type: "String!" },
    closed: { __type: "Boolean!" },
    closedAt: { __type: "DateTime" },
    viewerCanClose: { __type: "Boolean!" },
    viewerCanReopen: { __type: "Boolean!" },
    $on: { __type: "$Closable!" },
  },
  CloseDiscussionInput: {
    clientMutationId: { __type: "String" },
    discussionId: { __type: "ID!" },
    reason: { __type: "DiscussionCloseReason" },
  },
  CloseDiscussionPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    discussion: { __type: "Discussion" },
  },
  CloseIssueInput: {
    clientMutationId: { __type: "String" },
    issueId: { __type: "ID!" },
    stateReason: { __type: "IssueClosedStateReason" },
  },
  CloseIssuePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    issue: { __type: "Issue" },
  },
  ClosePullRequestInput: {
    clientMutationId: { __type: "String" },
    pullRequestId: { __type: "ID!" },
  },
  ClosePullRequestPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pullRequest: { __type: "PullRequest" },
  },
  ClosedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    closable: { __type: "Closable!" },
    closer: { __type: "Closer" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    resourcePath: { __type: "URI!" },
    stateReason: { __type: "IssueStateReason" },
    url: { __type: "URI!" },
  },
  Closer: { __typename: { __type: "String!" }, $on: { __type: "$Closer!" } },
  CodeOfConduct: {
    __typename: { __type: "String!" },
    body: { __type: "String" },
    id: { __type: "ID!" },
    key: { __type: "String!" },
    name: { __type: "String!" },
    resourcePath: { __type: "URI" },
    url: { __type: "URI" },
  },
  Comment: {
    __typename: { __type: "String!" },
    author: { __type: "Actor" },
    authorAssociation: { __type: "CommentAuthorAssociation!" },
    body: { __type: "String!" },
    bodyHTML: { __type: "HTML!" },
    bodyText: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    createdViaEmail: { __type: "Boolean!" },
    editor: { __type: "Actor" },
    id: { __type: "ID!" },
    includesCreatedEdit: { __type: "Boolean!" },
    lastEditedAt: { __type: "DateTime" },
    publishedAt: { __type: "DateTime" },
    updatedAt: { __type: "DateTime!" },
    userContentEdits: {
      __type: "UserContentEditConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    viewerDidAuthor: { __type: "Boolean!" },
    $on: { __type: "$Comment!" },
  },
  CommentDeletedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    deletedCommentAuthor: { __type: "Actor" },
    id: { __type: "ID!" },
  },
  Commit: {
    __typename: { __type: "String!" },
    abbreviatedOid: { __type: "String!" },
    additions: { __type: "Int!" },
    associatedPullRequests: {
      __type: "PullRequestConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "PullRequestOrder",
      },
    },
    author: { __type: "GitActor" },
    authoredByCommitter: { __type: "Boolean!" },
    authoredDate: { __type: "DateTime!" },
    authors: {
      __type: "GitActorConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    blame: { __type: "Blame!", __args: { path: "String!" } },
    changedFiles: { __type: "Int!" },
    changedFilesIfAvailable: { __type: "Int" },
    checkSuites: {
      __type: "CheckSuiteConnection",
      __args: {
        after: "String",
        before: "String",
        filterBy: "CheckSuiteFilter",
        first: "Int",
        last: "Int",
      },
    },
    comments: {
      __type: "CommitCommentConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    commitResourcePath: { __type: "URI!" },
    commitUrl: { __type: "URI!" },
    committedDate: { __type: "DateTime!" },
    committedViaWeb: { __type: "Boolean!" },
    committer: { __type: "GitActor" },
    deletions: { __type: "Int!" },
    deployments: {
      __type: "DeploymentConnection",
      __args: {
        after: "String",
        before: "String",
        environments: "[String!]",
        first: "Int",
        last: "Int",
        orderBy: "DeploymentOrder",
      },
    },
    file: { __type: "TreeEntry", __args: { path: "String!" } },
    history: {
      __type: "CommitHistoryConnection!",
      __args: {
        after: "String",
        author: "CommitAuthor",
        before: "String",
        first: "Int",
        last: "Int",
        path: "String",
        since: "GitTimestamp",
        until: "GitTimestamp",
      },
    },
    id: { __type: "ID!" },
    message: { __type: "String!" },
    messageBody: { __type: "String!" },
    messageBodyHTML: { __type: "HTML!" },
    messageHeadline: { __type: "String!" },
    messageHeadlineHTML: { __type: "HTML!" },
    oid: { __type: "GitObjectID!" },
    onBehalfOf: { __type: "Organization" },
    parents: {
      __type: "CommitConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    pushedDate: { __type: "DateTime" },
    repository: { __type: "Repository!" },
    resourcePath: { __type: "URI!" },
    signature: { __type: "GitSignature" },
    status: { __type: "Status" },
    statusCheckRollup: { __type: "StatusCheckRollup" },
    submodules: {
      __type: "SubmoduleConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    tarballUrl: { __type: "URI!" },
    tree: { __type: "Tree!" },
    treeResourcePath: { __type: "URI!" },
    treeUrl: { __type: "URI!" },
    url: { __type: "URI!" },
    viewerCanSubscribe: { __type: "Boolean!" },
    viewerSubscription: { __type: "SubscriptionState" },
    zipballUrl: { __type: "URI!" },
  },
  CommitAuthor: { emails: { __type: "[String!]" }, id: { __type: "ID" } },
  CommitAuthorEmailPatternParameters: {
    __typename: { __type: "String!" },
    name: { __type: "String" },
    negate: { __type: "Boolean!" },
    operator: { __type: "String!" },
    pattern: { __type: "String!" },
  },
  CommitAuthorEmailPatternParametersInput: {
    name: { __type: "String" },
    negate: { __type: "Boolean" },
    operator: { __type: "String!" },
    pattern: { __type: "String!" },
  },
  CommitComment: {
    __typename: { __type: "String!" },
    author: { __type: "Actor" },
    authorAssociation: { __type: "CommentAuthorAssociation!" },
    body: { __type: "String!" },
    bodyHTML: { __type: "HTML!" },
    bodyText: { __type: "String!" },
    commit: { __type: "Commit" },
    createdAt: { __type: "DateTime!" },
    createdViaEmail: { __type: "Boolean!" },
    databaseId: { __type: "Int" },
    editor: { __type: "Actor" },
    id: { __type: "ID!" },
    includesCreatedEdit: { __type: "Boolean!" },
    isMinimized: { __type: "Boolean!" },
    lastEditedAt: { __type: "DateTime" },
    minimizedReason: { __type: "String" },
    path: { __type: "String" },
    position: { __type: "Int" },
    publishedAt: { __type: "DateTime" },
    reactionGroups: { __type: "[ReactionGroup!]" },
    reactions: {
      __type: "ReactionConnection!",
      __args: {
        after: "String",
        before: "String",
        content: "ReactionContent",
        first: "Int",
        last: "Int",
        orderBy: "ReactionOrder",
      },
    },
    repository: { __type: "Repository!" },
    resourcePath: { __type: "URI!" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    userContentEdits: {
      __type: "UserContentEditConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    viewerCanDelete: { __type: "Boolean!" },
    viewerCanMinimize: { __type: "Boolean!" },
    viewerCanReact: { __type: "Boolean!" },
    viewerCanUpdate: { __type: "Boolean!" },
    viewerCannotUpdateReasons: { __type: "[CommentCannotUpdateReason!]!" },
    viewerDidAuthor: { __type: "Boolean!" },
  },
  CommitCommentConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[CommitCommentEdge]" },
    nodes: { __type: "[CommitComment]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  CommitCommentEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "CommitComment" },
  },
  CommitCommentThread: {
    __typename: { __type: "String!" },
    comments: {
      __type: "CommitCommentConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    commit: { __type: "Commit" },
    id: { __type: "ID!" },
    path: { __type: "String" },
    position: { __type: "Int" },
    repository: { __type: "Repository!" },
  },
  CommitConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[CommitEdge]" },
    nodes: { __type: "[Commit]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  CommitContributionOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "CommitContributionOrderField!" },
  },
  CommitContributionsByRepository: {
    __typename: { __type: "String!" },
    contributions: {
      __type: "CreatedCommitContributionConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "CommitContributionOrder",
      },
    },
    repository: { __type: "Repository!" },
    resourcePath: { __type: "URI!" },
    url: { __type: "URI!" },
  },
  CommitEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Commit" },
  },
  CommitHistoryConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[CommitEdge]" },
    nodes: { __type: "[Commit]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  CommitMessage: {
    body: { __type: "String" },
    headline: { __type: "String!" },
  },
  CommitMessagePatternParameters: {
    __typename: { __type: "String!" },
    name: { __type: "String" },
    negate: { __type: "Boolean!" },
    operator: { __type: "String!" },
    pattern: { __type: "String!" },
  },
  CommitMessagePatternParametersInput: {
    name: { __type: "String" },
    negate: { __type: "Boolean" },
    operator: { __type: "String!" },
    pattern: { __type: "String!" },
  },
  CommittableBranch: {
    branchName: { __type: "String" },
    id: { __type: "ID" },
    repositoryNameWithOwner: { __type: "String" },
  },
  CommitterEmailPatternParameters: {
    __typename: { __type: "String!" },
    name: { __type: "String" },
    negate: { __type: "Boolean!" },
    operator: { __type: "String!" },
    pattern: { __type: "String!" },
  },
  CommitterEmailPatternParametersInput: {
    name: { __type: "String" },
    negate: { __type: "Boolean" },
    operator: { __type: "String!" },
    pattern: { __type: "String!" },
  },
  Comparison: {
    __typename: { __type: "String!" },
    aheadBy: { __type: "Int!" },
    baseTarget: { __type: "GitObject!" },
    behindBy: { __type: "Int!" },
    commits: {
      __type: "ComparisonCommitConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    headTarget: { __type: "GitObject!" },
    id: { __type: "ID!" },
    status: { __type: "ComparisonStatus!" },
  },
  ComparisonCommitConnection: {
    __typename: { __type: "String!" },
    authorCount: { __type: "Int!" },
    edges: { __type: "[CommitEdge]" },
    nodes: { __type: "[Commit]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ConnectedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    isCrossRepository: { __type: "Boolean!" },
    source: { __type: "ReferencedSubject!" },
    subject: { __type: "ReferencedSubject!" },
  },
  ContributingGuidelines: {
    __typename: { __type: "String!" },
    body: { __type: "String" },
    resourcePath: { __type: "URI" },
    url: { __type: "URI" },
  },
  Contribution: {
    __typename: { __type: "String!" },
    isRestricted: { __type: "Boolean!" },
    occurredAt: { __type: "DateTime!" },
    resourcePath: { __type: "URI!" },
    url: { __type: "URI!" },
    user: { __type: "User!" },
    $on: { __type: "$Contribution!" },
  },
  ContributionCalendar: {
    __typename: { __type: "String!" },
    colors: { __type: "[String!]!" },
    isHalloween: { __type: "Boolean!" },
    months: { __type: "[ContributionCalendarMonth!]!" },
    totalContributions: { __type: "Int!" },
    weeks: { __type: "[ContributionCalendarWeek!]!" },
  },
  ContributionCalendarDay: {
    __typename: { __type: "String!" },
    color: { __type: "String!" },
    contributionCount: { __type: "Int!" },
    contributionLevel: { __type: "ContributionLevel!" },
    date: { __type: "Date!" },
    weekday: { __type: "Int!" },
  },
  ContributionCalendarMonth: {
    __typename: { __type: "String!" },
    firstDay: { __type: "Date!" },
    name: { __type: "String!" },
    totalWeeks: { __type: "Int!" },
    year: { __type: "Int!" },
  },
  ContributionCalendarWeek: {
    __typename: { __type: "String!" },
    contributionDays: { __type: "[ContributionCalendarDay!]!" },
    firstDay: { __type: "Date!" },
  },
  ContributionOrder: { direction: { __type: "OrderDirection!" } },
  ContributionsCollection: {
    __typename: { __type: "String!" },
    commitContributionsByRepository: {
      __type: "[CommitContributionsByRepository!]!",
      __args: { maxRepositories: "Int" },
    },
    contributionCalendar: { __type: "ContributionCalendar!" },
    contributionYears: { __type: "[Int!]!" },
    doesEndInCurrentMonth: { __type: "Boolean!" },
    earliestRestrictedContributionDate: { __type: "Date" },
    endedAt: { __type: "DateTime!" },
    firstIssueContribution: { __type: "CreatedIssueOrRestrictedContribution" },
    firstPullRequestContribution: {
      __type: "CreatedPullRequestOrRestrictedContribution",
    },
    firstRepositoryContribution: {
      __type: "CreatedRepositoryOrRestrictedContribution",
    },
    hasActivityInThePast: { __type: "Boolean!" },
    hasAnyContributions: { __type: "Boolean!" },
    hasAnyRestrictedContributions: { __type: "Boolean!" },
    isSingleDay: { __type: "Boolean!" },
    issueContributions: {
      __type: "CreatedIssueContributionConnection!",
      __args: {
        after: "String",
        before: "String",
        excludeFirst: "Boolean",
        excludePopular: "Boolean",
        first: "Int",
        last: "Int",
        orderBy: "ContributionOrder",
      },
    },
    issueContributionsByRepository: {
      __type: "[IssueContributionsByRepository!]!",
      __args: {
        excludeFirst: "Boolean",
        excludePopular: "Boolean",
        maxRepositories: "Int",
      },
    },
    joinedGitHubContribution: { __type: "JoinedGitHubContribution" },
    latestRestrictedContributionDate: { __type: "Date" },
    mostRecentCollectionWithActivity: { __type: "ContributionsCollection" },
    mostRecentCollectionWithoutActivity: { __type: "ContributionsCollection" },
    popularIssueContribution: { __type: "CreatedIssueContribution" },
    popularPullRequestContribution: {
      __type: "CreatedPullRequestContribution",
    },
    pullRequestContributions: {
      __type: "CreatedPullRequestContributionConnection!",
      __args: {
        after: "String",
        before: "String",
        excludeFirst: "Boolean",
        excludePopular: "Boolean",
        first: "Int",
        last: "Int",
        orderBy: "ContributionOrder",
      },
    },
    pullRequestContributionsByRepository: {
      __type: "[PullRequestContributionsByRepository!]!",
      __args: {
        excludeFirst: "Boolean",
        excludePopular: "Boolean",
        maxRepositories: "Int",
      },
    },
    pullRequestReviewContributions: {
      __type: "CreatedPullRequestReviewContributionConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ContributionOrder",
      },
    },
    pullRequestReviewContributionsByRepository: {
      __type: "[PullRequestReviewContributionsByRepository!]!",
      __args: { maxRepositories: "Int" },
    },
    repositoryContributions: {
      __type: "CreatedRepositoryContributionConnection!",
      __args: {
        after: "String",
        before: "String",
        excludeFirst: "Boolean",
        first: "Int",
        last: "Int",
        orderBy: "ContributionOrder",
      },
    },
    restrictedContributionsCount: { __type: "Int!" },
    startedAt: { __type: "DateTime!" },
    totalCommitContributions: { __type: "Int!" },
    totalIssueContributions: {
      __type: "Int!",
      __args: { excludeFirst: "Boolean", excludePopular: "Boolean" },
    },
    totalPullRequestContributions: {
      __type: "Int!",
      __args: { excludeFirst: "Boolean", excludePopular: "Boolean" },
    },
    totalPullRequestReviewContributions: { __type: "Int!" },
    totalRepositoriesWithContributedCommits: { __type: "Int!" },
    totalRepositoriesWithContributedIssues: {
      __type: "Int!",
      __args: { excludeFirst: "Boolean", excludePopular: "Boolean" },
    },
    totalRepositoriesWithContributedPullRequestReviews: { __type: "Int!" },
    totalRepositoriesWithContributedPullRequests: {
      __type: "Int!",
      __args: { excludeFirst: "Boolean", excludePopular: "Boolean" },
    },
    totalRepositoryContributions: {
      __type: "Int!",
      __args: { excludeFirst: "Boolean" },
    },
    user: { __type: "User!" },
  },
  ConvertProjectCardNoteToIssueInput: {
    body: { __type: "String" },
    clientMutationId: { __type: "String" },
    projectCardId: { __type: "ID!" },
    repositoryId: { __type: "ID!" },
    title: { __type: "String" },
  },
  ConvertProjectCardNoteToIssuePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    projectCard: { __type: "ProjectCard" },
  },
  ConvertPullRequestToDraftInput: {
    clientMutationId: { __type: "String" },
    pullRequestId: { __type: "ID!" },
  },
  ConvertPullRequestToDraftPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pullRequest: { __type: "PullRequest" },
  },
  ConvertToDraftEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    pullRequest: { __type: "PullRequest!" },
    resourcePath: { __type: "URI!" },
    url: { __type: "URI!" },
  },
  ConvertedNoteToIssueEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
  },
  ConvertedToDiscussionEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    discussion: { __type: "Discussion" },
    id: { __type: "ID!" },
  },
  CopyProjectV2Input: {
    clientMutationId: { __type: "String" },
    includeDraftIssues: { __type: "Boolean" },
    ownerId: { __type: "ID!" },
    projectId: { __type: "ID!" },
    title: { __type: "String!" },
  },
  CopyProjectV2Payload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    projectV2: { __type: "ProjectV2" },
  },
  CreateAttributionInvitationInput: {
    clientMutationId: { __type: "String" },
    ownerId: { __type: "ID!" },
    sourceId: { __type: "ID!" },
    targetId: { __type: "ID!" },
  },
  CreateAttributionInvitationPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    owner: { __type: "Organization" },
    source: { __type: "Claimable" },
    target: { __type: "Claimable" },
  },
  CreateBranchProtectionRuleInput: {
    allowsDeletions: { __type: "Boolean" },
    allowsForcePushes: { __type: "Boolean" },
    blocksCreations: { __type: "Boolean" },
    bypassForcePushActorIds: { __type: "[ID!]" },
    bypassPullRequestActorIds: { __type: "[ID!]" },
    clientMutationId: { __type: "String" },
    dismissesStaleReviews: { __type: "Boolean" },
    isAdminEnforced: { __type: "Boolean" },
    lockAllowsFetchAndMerge: { __type: "Boolean" },
    lockBranch: { __type: "Boolean" },
    pattern: { __type: "String!" },
    pushActorIds: { __type: "[ID!]" },
    repositoryId: { __type: "ID!" },
    requireLastPushApproval: { __type: "Boolean" },
    requiredApprovingReviewCount: { __type: "Int" },
    requiredDeploymentEnvironments: { __type: "[String!]" },
    requiredStatusCheckContexts: { __type: "[String!]" },
    requiredStatusChecks: { __type: "[RequiredStatusCheckInput!]" },
    requiresApprovingReviews: { __type: "Boolean" },
    requiresCodeOwnerReviews: { __type: "Boolean" },
    requiresCommitSignatures: { __type: "Boolean" },
    requiresConversationResolution: { __type: "Boolean" },
    requiresDeployments: { __type: "Boolean" },
    requiresLinearHistory: { __type: "Boolean" },
    requiresStatusChecks: { __type: "Boolean" },
    requiresStrictStatusChecks: { __type: "Boolean" },
    restrictsPushes: { __type: "Boolean" },
    restrictsReviewDismissals: { __type: "Boolean" },
    reviewDismissalActorIds: { __type: "[ID!]" },
  },
  CreateBranchProtectionRulePayload: {
    __typename: { __type: "String!" },
    branchProtectionRule: { __type: "BranchProtectionRule" },
    clientMutationId: { __type: "String" },
  },
  CreateCheckRunInput: {
    actions: { __type: "[CheckRunAction!]" },
    clientMutationId: { __type: "String" },
    completedAt: { __type: "DateTime" },
    conclusion: { __type: "CheckConclusionState" },
    detailsUrl: { __type: "URI" },
    externalId: { __type: "String" },
    headSha: { __type: "GitObjectID!" },
    name: { __type: "String!" },
    output: { __type: "CheckRunOutput" },
    repositoryId: { __type: "ID!" },
    startedAt: { __type: "DateTime" },
    status: { __type: "RequestableCheckStatusState" },
  },
  CreateCheckRunPayload: {
    __typename: { __type: "String!" },
    checkRun: { __type: "CheckRun" },
    clientMutationId: { __type: "String" },
  },
  CreateCheckSuiteInput: {
    clientMutationId: { __type: "String" },
    headSha: { __type: "GitObjectID!" },
    repositoryId: { __type: "ID!" },
  },
  CreateCheckSuitePayload: {
    __typename: { __type: "String!" },
    checkSuite: { __type: "CheckSuite" },
    clientMutationId: { __type: "String" },
  },
  CreateCommitOnBranchInput: {
    branch: { __type: "CommittableBranch!" },
    clientMutationId: { __type: "String" },
    expectedHeadOid: { __type: "GitObjectID!" },
    fileChanges: { __type: "FileChanges" },
    message: { __type: "CommitMessage!" },
  },
  CreateCommitOnBranchPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    commit: { __type: "Commit" },
    ref: { __type: "Ref" },
  },
  CreateDiscussionInput: {
    body: { __type: "String!" },
    categoryId: { __type: "ID!" },
    clientMutationId: { __type: "String" },
    repositoryId: { __type: "ID!" },
    title: { __type: "String!" },
  },
  CreateDiscussionPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    discussion: { __type: "Discussion" },
  },
  CreateEnterpriseOrganizationInput: {
    adminLogins: { __type: "[String!]!" },
    billingEmail: { __type: "String!" },
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    login: { __type: "String!" },
    profileName: { __type: "String!" },
  },
  CreateEnterpriseOrganizationPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    enterprise: { __type: "Enterprise" },
    organization: { __type: "Organization" },
  },
  CreateEnvironmentInput: {
    clientMutationId: { __type: "String" },
    name: { __type: "String!" },
    repositoryId: { __type: "ID!" },
  },
  CreateEnvironmentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    environment: { __type: "Environment" },
  },
  CreateIpAllowListEntryInput: {
    allowListValue: { __type: "String!" },
    clientMutationId: { __type: "String" },
    isActive: { __type: "Boolean!" },
    name: { __type: "String" },
    ownerId: { __type: "ID!" },
  },
  CreateIpAllowListEntryPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    ipAllowListEntry: { __type: "IpAllowListEntry" },
  },
  CreateIssueInput: {
    assigneeIds: { __type: "[ID!]" },
    body: { __type: "String" },
    clientMutationId: { __type: "String" },
    issueTemplate: { __type: "String" },
    labelIds: { __type: "[ID!]" },
    milestoneId: { __type: "ID" },
    projectIds: { __type: "[ID!]" },
    repositoryId: { __type: "ID!" },
    title: { __type: "String!" },
  },
  CreateIssuePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    issue: { __type: "Issue" },
  },
  CreateLinkedBranchInput: {
    clientMutationId: { __type: "String" },
    issueId: { __type: "ID!" },
    name: { __type: "String" },
    oid: { __type: "GitObjectID!" },
    repositoryId: { __type: "ID" },
  },
  CreateLinkedBranchPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    issue: { __type: "Issue" },
    linkedBranch: { __type: "LinkedBranch" },
  },
  CreateMigrationSourceInput: {
    accessToken: { __type: "String" },
    clientMutationId: { __type: "String" },
    githubPat: { __type: "String" },
    name: { __type: "String!" },
    ownerId: { __type: "ID!" },
    type: { __type: "MigrationSourceType!" },
    url: { __type: "String" },
  },
  CreateMigrationSourcePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    migrationSource: { __type: "MigrationSource" },
  },
  CreateProjectInput: {
    body: { __type: "String" },
    clientMutationId: { __type: "String" },
    name: { __type: "String!" },
    ownerId: { __type: "ID!" },
    repositoryIds: { __type: "[ID!]" },
    template: { __type: "ProjectTemplate" },
  },
  CreateProjectPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    project: { __type: "Project" },
  },
  CreateProjectV2FieldInput: {
    clientMutationId: { __type: "String" },
    dataType: { __type: "ProjectV2CustomFieldType!" },
    name: { __type: "String!" },
    projectId: { __type: "ID!" },
    singleSelectOptions: { __type: "[ProjectV2SingleSelectFieldOptionInput!]" },
  },
  CreateProjectV2FieldPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    projectV2Field: { __type: "ProjectV2FieldConfiguration" },
  },
  CreateProjectV2Input: {
    clientMutationId: { __type: "String" },
    ownerId: { __type: "ID!" },
    repositoryId: { __type: "ID" },
    teamId: { __type: "ID" },
    title: { __type: "String!" },
  },
  CreateProjectV2Payload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    projectV2: { __type: "ProjectV2" },
  },
  CreatePullRequestInput: {
    baseRefName: { __type: "String!" },
    body: { __type: "String" },
    clientMutationId: { __type: "String" },
    draft: { __type: "Boolean" },
    headRefName: { __type: "String!" },
    headRepositoryId: { __type: "ID" },
    maintainerCanModify: { __type: "Boolean" },
    repositoryId: { __type: "ID!" },
    title: { __type: "String!" },
  },
  CreatePullRequestPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pullRequest: { __type: "PullRequest" },
  },
  CreateRefInput: {
    clientMutationId: { __type: "String" },
    name: { __type: "String!" },
    oid: { __type: "GitObjectID!" },
    repositoryId: { __type: "ID!" },
  },
  CreateRefPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    ref: { __type: "Ref" },
  },
  CreateRepositoryInput: {
    clientMutationId: { __type: "String" },
    description: { __type: "String" },
    hasIssuesEnabled: { __type: "Boolean" },
    hasWikiEnabled: { __type: "Boolean" },
    homepageUrl: { __type: "URI" },
    name: { __type: "String!" },
    ownerId: { __type: "ID" },
    teamId: { __type: "ID" },
    template: { __type: "Boolean" },
    visibility: { __type: "RepositoryVisibility!" },
  },
  CreateRepositoryPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    repository: { __type: "Repository" },
  },
  CreateRepositoryRulesetInput: {
    bypassActors: { __type: "[RepositoryRulesetBypassActorInput!]" },
    clientMutationId: { __type: "String" },
    conditions: { __type: "RepositoryRuleConditionsInput!" },
    enforcement: { __type: "RuleEnforcement!" },
    name: { __type: "String!" },
    rules: { __type: "[RepositoryRuleInput!]" },
    sourceId: { __type: "ID!" },
    target: { __type: "RepositoryRulesetTarget" },
  },
  CreateRepositoryRulesetPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    ruleset: { __type: "RepositoryRuleset" },
  },
  CreateSavedNotificationThreadInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  CreateSavedNotificationThreadPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    success: { __type: "Boolean" },
    viewer: { __type: "User" },
  },
  CreateSponsorsListingInput: {
    billingCountryOrRegionCode: { __type: "SponsorsCountryOrRegionCode" },
    clientMutationId: { __type: "String" },
    contactEmail: { __type: "String" },
    fiscalHostLogin: { __type: "String" },
    fiscallyHostedProjectProfileUrl: { __type: "String" },
    fullDescription: { __type: "String" },
    residenceCountryOrRegionCode: { __type: "SponsorsCountryOrRegionCode" },
    sponsorableLogin: { __type: "String" },
  },
  CreateSponsorsListingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    sponsorsListing: { __type: "SponsorsListing" },
  },
  CreateSponsorsTierInput: {
    amount: { __type: "Int!" },
    clientMutationId: { __type: "String" },
    description: { __type: "String!" },
    isRecurring: { __type: "Boolean" },
    publish: { __type: "Boolean" },
    repositoryId: { __type: "ID" },
    repositoryName: { __type: "String" },
    repositoryOwnerLogin: { __type: "String" },
    sponsorableId: { __type: "ID" },
    sponsorableLogin: { __type: "String" },
    welcomeMessage: { __type: "String" },
  },
  CreateSponsorsTierPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    sponsorsTier: { __type: "SponsorsTier" },
  },
  CreateSponsorshipInput: {
    amount: { __type: "Int" },
    clientMutationId: { __type: "String" },
    isRecurring: { __type: "Boolean" },
    privacyLevel: { __type: "SponsorshipPrivacy" },
    receiveEmails: { __type: "Boolean" },
    sponsorId: { __type: "ID" },
    sponsorLogin: { __type: "String" },
    sponsorableId: { __type: "ID" },
    sponsorableLogin: { __type: "String" },
    tierId: { __type: "ID" },
  },
  CreateSponsorshipPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    sponsorship: { __type: "Sponsorship" },
  },
  CreateSponsorshipsInput: {
    clientMutationId: { __type: "String" },
    privacyLevel: { __type: "SponsorshipPrivacy" },
    receiveEmails: { __type: "Boolean" },
    sponsorLogin: { __type: "String!" },
    sponsorships: { __type: "[BulkSponsorship!]!" },
  },
  CreateSponsorshipsPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    sponsorables: { __type: "[Sponsorable!]" },
  },
  CreateTeamDiscussionCommentInput: {
    body: { __type: "String" },
    clientMutationId: { __type: "String" },
    discussionId: { __type: "ID" },
  },
  CreateTeamDiscussionCommentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    teamDiscussionComment: { __type: "TeamDiscussionComment" },
  },
  CreateTeamDiscussionInput: {
    body: { __type: "String" },
    clientMutationId: { __type: "String" },
    private: { __type: "Boolean" },
    teamId: { __type: "ID" },
    title: { __type: "String" },
  },
  CreateTeamDiscussionPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    teamDiscussion: { __type: "TeamDiscussion" },
  },
  CreatedCommitContribution: {
    __typename: { __type: "String!" },
    commitCount: { __type: "Int!" },
    isRestricted: { __type: "Boolean!" },
    occurredAt: { __type: "DateTime!" },
    repository: { __type: "Repository!" },
    resourcePath: { __type: "URI!" },
    url: { __type: "URI!" },
    user: { __type: "User!" },
  },
  CreatedCommitContributionConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[CreatedCommitContributionEdge]" },
    nodes: { __type: "[CreatedCommitContribution]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  CreatedCommitContributionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "CreatedCommitContribution" },
  },
  CreatedIssueContribution: {
    __typename: { __type: "String!" },
    isRestricted: { __type: "Boolean!" },
    issue: { __type: "Issue!" },
    occurredAt: { __type: "DateTime!" },
    resourcePath: { __type: "URI!" },
    url: { __type: "URI!" },
    user: { __type: "User!" },
  },
  CreatedIssueContributionConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[CreatedIssueContributionEdge]" },
    nodes: { __type: "[CreatedIssueContribution]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  CreatedIssueContributionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "CreatedIssueContribution" },
  },
  CreatedIssueOrRestrictedContribution: {
    __typename: { __type: "String!" },
    $on: { __type: "$CreatedIssueOrRestrictedContribution!" },
  },
  CreatedPullRequestContribution: {
    __typename: { __type: "String!" },
    isRestricted: { __type: "Boolean!" },
    occurredAt: { __type: "DateTime!" },
    pullRequest: { __type: "PullRequest!" },
    resourcePath: { __type: "URI!" },
    url: { __type: "URI!" },
    user: { __type: "User!" },
  },
  CreatedPullRequestContributionConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[CreatedPullRequestContributionEdge]" },
    nodes: { __type: "[CreatedPullRequestContribution]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  CreatedPullRequestContributionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "CreatedPullRequestContribution" },
  },
  CreatedPullRequestOrRestrictedContribution: {
    __typename: { __type: "String!" },
    $on: { __type: "$CreatedPullRequestOrRestrictedContribution!" },
  },
  CreatedPullRequestReviewContribution: {
    __typename: { __type: "String!" },
    isRestricted: { __type: "Boolean!" },
    occurredAt: { __type: "DateTime!" },
    pullRequest: { __type: "PullRequest!" },
    pullRequestReview: { __type: "PullRequestReview!" },
    repository: { __type: "Repository!" },
    resourcePath: { __type: "URI!" },
    url: { __type: "URI!" },
    user: { __type: "User!" },
  },
  CreatedPullRequestReviewContributionConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[CreatedPullRequestReviewContributionEdge]" },
    nodes: { __type: "[CreatedPullRequestReviewContribution]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  CreatedPullRequestReviewContributionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "CreatedPullRequestReviewContribution" },
  },
  CreatedRepositoryContribution: {
    __typename: { __type: "String!" },
    isRestricted: { __type: "Boolean!" },
    occurredAt: { __type: "DateTime!" },
    repository: { __type: "Repository!" },
    resourcePath: { __type: "URI!" },
    url: { __type: "URI!" },
    user: { __type: "User!" },
  },
  CreatedRepositoryContributionConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[CreatedRepositoryContributionEdge]" },
    nodes: { __type: "[CreatedRepositoryContribution]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  CreatedRepositoryContributionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "CreatedRepositoryContribution" },
  },
  CreatedRepositoryOrRestrictedContribution: {
    __typename: { __type: "String!" },
    $on: { __type: "$CreatedRepositoryOrRestrictedContribution!" },
  },
  CrossReferencedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    isCrossRepository: { __type: "Boolean!" },
    referencedAt: { __type: "DateTime!" },
    resourcePath: { __type: "URI!" },
    source: { __type: "ReferencedSubject!" },
    target: { __type: "ReferencedSubject!" },
    url: { __type: "URI!" },
    willCloseTarget: { __type: "Boolean!" },
  },
  DeclineTopicSuggestionInput: {
    clientMutationId: { __type: "String" },
    name: { __type: "String!" },
    reason: { __type: "TopicSuggestionDeclineReason!" },
    repositoryId: { __type: "ID!" },
  },
  DeclineTopicSuggestionPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    topic: { __type: "Topic" },
  },
  Deletable: {
    __typename: { __type: "String!" },
    viewerCanDelete: { __type: "Boolean!" },
    $on: { __type: "$Deletable!" },
  },
  DeleteBranchProtectionRuleInput: {
    branchProtectionRuleId: { __type: "ID!" },
    clientMutationId: { __type: "String" },
  },
  DeleteBranchProtectionRulePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
  },
  DeleteDeploymentInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  DeleteDeploymentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
  },
  DeleteDiscussionCommentInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  DeleteDiscussionCommentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    comment: { __type: "DiscussionComment" },
  },
  DeleteDiscussionInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  DeleteDiscussionPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    discussion: { __type: "Discussion" },
  },
  DeleteEnvironmentInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  DeleteEnvironmentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
  },
  DeleteIpAllowListEntryInput: {
    clientMutationId: { __type: "String" },
    ipAllowListEntryId: { __type: "ID!" },
  },
  DeleteIpAllowListEntryPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    ipAllowListEntry: { __type: "IpAllowListEntry" },
  },
  DeleteIssueCommentInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  DeleteIssueCommentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
  },
  DeleteIssueInput: {
    clientMutationId: { __type: "String" },
    issueId: { __type: "ID!" },
  },
  DeleteIssuePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    repository: { __type: "Repository" },
  },
  DeleteLinkedBranchInput: {
    clientMutationId: { __type: "String" },
    linkedBranchId: { __type: "ID!" },
  },
  DeleteLinkedBranchPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    issue: { __type: "Issue" },
  },
  DeleteProjectCardInput: {
    cardId: { __type: "ID!" },
    clientMutationId: { __type: "String" },
  },
  DeleteProjectCardPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    column: { __type: "ProjectColumn" },
    deletedCardId: { __type: "ID" },
  },
  DeleteProjectColumnInput: {
    clientMutationId: { __type: "String" },
    columnId: { __type: "ID!" },
  },
  DeleteProjectColumnPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedColumnId: { __type: "ID" },
    project: { __type: "Project" },
  },
  DeleteProjectInput: {
    clientMutationId: { __type: "String" },
    projectId: { __type: "ID!" },
  },
  DeleteProjectPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    owner: { __type: "ProjectOwner" },
  },
  DeleteProjectV2FieldInput: {
    clientMutationId: { __type: "String" },
    fieldId: { __type: "ID!" },
  },
  DeleteProjectV2FieldPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    projectV2Field: { __type: "ProjectV2FieldConfiguration" },
  },
  DeleteProjectV2Input: {
    clientMutationId: { __type: "String" },
    projectId: { __type: "ID!" },
  },
  DeleteProjectV2ItemInput: {
    clientMutationId: { __type: "String" },
    itemId: { __type: "ID!" },
    projectId: { __type: "ID!" },
  },
  DeleteProjectV2ItemPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedItemId: { __type: "ID" },
  },
  DeleteProjectV2Payload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    projectV2: { __type: "ProjectV2" },
  },
  DeleteProjectV2WorkflowInput: {
    clientMutationId: { __type: "String" },
    workflowId: { __type: "ID!" },
  },
  DeleteProjectV2WorkflowPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedWorkflowId: { __type: "ID" },
    projectV2: { __type: "ProjectV2" },
  },
  DeletePullRequestReviewCommentInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  DeletePullRequestReviewCommentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pullRequestReview: { __type: "PullRequestReview" },
    pullRequestReviewComment: { __type: "PullRequestReviewComment" },
  },
  DeletePullRequestReviewInput: {
    clientMutationId: { __type: "String" },
    pullRequestReviewId: { __type: "ID!" },
  },
  DeletePullRequestReviewPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pullRequestReview: { __type: "PullRequestReview" },
  },
  DeleteRefInput: {
    clientMutationId: { __type: "String" },
    refId: { __type: "ID!" },
  },
  DeleteRefPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
  },
  DeleteRepositoryRulesetInput: {
    clientMutationId: { __type: "String" },
    repositoryRulesetId: { __type: "ID!" },
  },
  DeleteRepositoryRulesetPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
  },
  DeleteSavedNotificationThreadInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  DeleteSavedNotificationThreadPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    success: { __type: "Boolean" },
    viewer: { __type: "User" },
  },
  DeleteTeamDiscussionCommentInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  DeleteTeamDiscussionCommentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
  },
  DeleteTeamDiscussionInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  DeleteTeamDiscussionPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
  },
  DeleteVerifiableDomainInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  DeleteVerifiableDomainPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    owner: { __type: "VerifiableDomainOwner" },
  },
  DemilestonedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    milestoneTitle: { __type: "String!" },
    subject: { __type: "MilestoneItem!" },
  },
  DependabotUpdate: {
    __typename: { __type: "String!" },
    error: { __type: "DependabotUpdateError" },
    pullRequest: { __type: "PullRequest" },
    repository: { __type: "Repository!" },
  },
  DependabotUpdateError: {
    __typename: { __type: "String!" },
    body: { __type: "String!" },
    errorType: { __type: "String!" },
    title: { __type: "String!" },
  },
  DeployKey: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    key: { __type: "String!" },
    readOnly: { __type: "Boolean!" },
    title: { __type: "String!" },
    verified: { __type: "Boolean!" },
  },
  DeployKeyConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[DeployKeyEdge]" },
    nodes: { __type: "[DeployKey]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  DeployKeyEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "DeployKey" },
  },
  DeployedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    deployment: { __type: "Deployment!" },
    id: { __type: "ID!" },
    pullRequest: { __type: "PullRequest!" },
    ref: { __type: "Ref" },
  },
  Deployment: {
    __typename: { __type: "String!" },
    commit: { __type: "Commit" },
    commitOid: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    creator: { __type: "Actor!" },
    databaseId: { __type: "Int" },
    description: { __type: "String" },
    environment: { __type: "String" },
    id: { __type: "ID!" },
    latestEnvironment: { __type: "String" },
    latestStatus: { __type: "DeploymentStatus" },
    originalEnvironment: { __type: "String" },
    payload: { __type: "String" },
    ref: { __type: "Ref" },
    repository: { __type: "Repository!" },
    state: { __type: "DeploymentState" },
    statuses: {
      __type: "DeploymentStatusConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    task: { __type: "String" },
    updatedAt: { __type: "DateTime!" },
  },
  DeploymentConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[DeploymentEdge]" },
    nodes: { __type: "[Deployment]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  DeploymentEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Deployment" },
  },
  DeploymentEnvironmentChangedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    deploymentStatus: { __type: "DeploymentStatus!" },
    id: { __type: "ID!" },
    pullRequest: { __type: "PullRequest!" },
  },
  DeploymentOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "DeploymentOrderField!" },
  },
  DeploymentProtectionRule: {
    __typename: { __type: "String!" },
    databaseId: { __type: "Int" },
    preventSelfReview: { __type: "Boolean" },
    reviewers: {
      __type: "DeploymentReviewerConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    timeout: { __type: "Int!" },
    type: { __type: "DeploymentProtectionRuleType!" },
  },
  DeploymentProtectionRuleConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[DeploymentProtectionRuleEdge]" },
    nodes: { __type: "[DeploymentProtectionRule]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  DeploymentProtectionRuleEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "DeploymentProtectionRule" },
  },
  DeploymentRequest: {
    __typename: { __type: "String!" },
    currentUserCanApprove: { __type: "Boolean!" },
    environment: { __type: "Environment!" },
    reviewers: {
      __type: "DeploymentReviewerConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    waitTimer: { __type: "Int!" },
    waitTimerStartedAt: { __type: "DateTime" },
  },
  DeploymentRequestConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[DeploymentRequestEdge]" },
    nodes: { __type: "[DeploymentRequest]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  DeploymentRequestEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "DeploymentRequest" },
  },
  DeploymentReview: {
    __typename: { __type: "String!" },
    comment: { __type: "String!" },
    databaseId: { __type: "Int" },
    environments: {
      __type: "EnvironmentConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    id: { __type: "ID!" },
    state: { __type: "DeploymentReviewState!" },
    user: { __type: "User!" },
  },
  DeploymentReviewConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[DeploymentReviewEdge]" },
    nodes: { __type: "[DeploymentReview]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  DeploymentReviewEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "DeploymentReview" },
  },
  DeploymentReviewer: {
    __typename: { __type: "String!" },
    $on: { __type: "$DeploymentReviewer!" },
  },
  DeploymentReviewerConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[DeploymentReviewerEdge]" },
    nodes: { __type: "[DeploymentReviewer]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  DeploymentReviewerEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "DeploymentReviewer" },
  },
  DeploymentStatus: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    creator: { __type: "Actor!" },
    deployment: { __type: "Deployment!" },
    description: { __type: "String" },
    environmentUrl: { __type: "URI" },
    id: { __type: "ID!" },
    logUrl: { __type: "URI" },
    state: { __type: "DeploymentStatusState!" },
    updatedAt: { __type: "DateTime!" },
  },
  DeploymentStatusConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[DeploymentStatusEdge]" },
    nodes: { __type: "[DeploymentStatus]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  DeploymentStatusEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "DeploymentStatus" },
  },
  DequeuePullRequestInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  DequeuePullRequestPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    mergeQueueEntry: { __type: "MergeQueueEntry" },
  },
  DisablePullRequestAutoMergeInput: {
    clientMutationId: { __type: "String" },
    pullRequestId: { __type: "ID!" },
  },
  DisablePullRequestAutoMergePayload: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    clientMutationId: { __type: "String" },
    pullRequest: { __type: "PullRequest" },
  },
  DisconnectedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    isCrossRepository: { __type: "Boolean!" },
    source: { __type: "ReferencedSubject!" },
    subject: { __type: "ReferencedSubject!" },
  },
  Discussion: {
    __typename: { __type: "String!" },
    activeLockReason: { __type: "LockReason" },
    answer: { __type: "DiscussionComment" },
    answerChosenAt: { __type: "DateTime" },
    answerChosenBy: { __type: "Actor" },
    author: { __type: "Actor" },
    authorAssociation: { __type: "CommentAuthorAssociation!" },
    body: { __type: "String!" },
    bodyHTML: { __type: "HTML!" },
    bodyText: { __type: "String!" },
    category: { __type: "DiscussionCategory!" },
    closed: { __type: "Boolean!" },
    closedAt: { __type: "DateTime" },
    comments: {
      __type: "DiscussionCommentConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    createdAt: { __type: "DateTime!" },
    createdViaEmail: { __type: "Boolean!" },
    databaseId: { __type: "Int" },
    editor: { __type: "Actor" },
    id: { __type: "ID!" },
    includesCreatedEdit: { __type: "Boolean!" },
    isAnswered: { __type: "Boolean" },
    labels: {
      __type: "LabelConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "LabelOrder",
      },
    },
    lastEditedAt: { __type: "DateTime" },
    locked: { __type: "Boolean!" },
    number: { __type: "Int!" },
    poll: { __type: "DiscussionPoll" },
    publishedAt: { __type: "DateTime" },
    reactionGroups: { __type: "[ReactionGroup!]" },
    reactions: {
      __type: "ReactionConnection!",
      __args: {
        after: "String",
        before: "String",
        content: "ReactionContent",
        first: "Int",
        last: "Int",
        orderBy: "ReactionOrder",
      },
    },
    repository: { __type: "Repository!" },
    resourcePath: { __type: "URI!" },
    stateReason: { __type: "DiscussionStateReason" },
    title: { __type: "String!" },
    updatedAt: { __type: "DateTime!" },
    upvoteCount: { __type: "Int!" },
    url: { __type: "URI!" },
    userContentEdits: {
      __type: "UserContentEditConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    viewerCanClose: { __type: "Boolean!" },
    viewerCanDelete: { __type: "Boolean!" },
    viewerCanReact: { __type: "Boolean!" },
    viewerCanReopen: { __type: "Boolean!" },
    viewerCanSubscribe: { __type: "Boolean!" },
    viewerCanUpdate: { __type: "Boolean!" },
    viewerCanUpvote: { __type: "Boolean!" },
    viewerDidAuthor: { __type: "Boolean!" },
    viewerHasUpvoted: { __type: "Boolean!" },
    viewerSubscription: { __type: "SubscriptionState" },
  },
  DiscussionCategory: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    description: { __type: "String" },
    emoji: { __type: "String!" },
    emojiHTML: { __type: "HTML!" },
    id: { __type: "ID!" },
    isAnswerable: { __type: "Boolean!" },
    name: { __type: "String!" },
    repository: { __type: "Repository!" },
    slug: { __type: "String!" },
    updatedAt: { __type: "DateTime!" },
  },
  DiscussionCategoryConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[DiscussionCategoryEdge]" },
    nodes: { __type: "[DiscussionCategory]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  DiscussionCategoryEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "DiscussionCategory" },
  },
  DiscussionComment: {
    __typename: { __type: "String!" },
    author: { __type: "Actor" },
    authorAssociation: { __type: "CommentAuthorAssociation!" },
    body: { __type: "String!" },
    bodyHTML: { __type: "HTML!" },
    bodyText: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    createdViaEmail: { __type: "Boolean!" },
    databaseId: { __type: "Int" },
    deletedAt: { __type: "DateTime" },
    discussion: { __type: "Discussion" },
    editor: { __type: "Actor" },
    id: { __type: "ID!" },
    includesCreatedEdit: { __type: "Boolean!" },
    isAnswer: { __type: "Boolean!" },
    isMinimized: { __type: "Boolean!" },
    lastEditedAt: { __type: "DateTime" },
    minimizedReason: { __type: "String" },
    publishedAt: { __type: "DateTime" },
    reactionGroups: { __type: "[ReactionGroup!]" },
    reactions: {
      __type: "ReactionConnection!",
      __args: {
        after: "String",
        before: "String",
        content: "ReactionContent",
        first: "Int",
        last: "Int",
        orderBy: "ReactionOrder",
      },
    },
    replies: {
      __type: "DiscussionCommentConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    replyTo: { __type: "DiscussionComment" },
    resourcePath: { __type: "URI!" },
    updatedAt: { __type: "DateTime!" },
    upvoteCount: { __type: "Int!" },
    url: { __type: "URI!" },
    userContentEdits: {
      __type: "UserContentEditConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    viewerCanDelete: { __type: "Boolean!" },
    viewerCanMarkAsAnswer: { __type: "Boolean!" },
    viewerCanMinimize: { __type: "Boolean!" },
    viewerCanReact: { __type: "Boolean!" },
    viewerCanUnmarkAsAnswer: { __type: "Boolean!" },
    viewerCanUpdate: { __type: "Boolean!" },
    viewerCanUpvote: { __type: "Boolean!" },
    viewerCannotUpdateReasons: { __type: "[CommentCannotUpdateReason!]!" },
    viewerDidAuthor: { __type: "Boolean!" },
    viewerHasUpvoted: { __type: "Boolean!" },
  },
  DiscussionCommentConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[DiscussionCommentEdge]" },
    nodes: { __type: "[DiscussionComment]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  DiscussionCommentEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "DiscussionComment" },
  },
  DiscussionConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[DiscussionEdge]" },
    nodes: { __type: "[Discussion]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  DiscussionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Discussion" },
  },
  DiscussionOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "DiscussionOrderField!" },
  },
  DiscussionPoll: {
    __typename: { __type: "String!" },
    discussion: { __type: "Discussion" },
    id: { __type: "ID!" },
    options: {
      __type: "DiscussionPollOptionConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "DiscussionPollOptionOrder",
      },
    },
    question: { __type: "String!" },
    totalVoteCount: { __type: "Int!" },
    viewerCanVote: { __type: "Boolean!" },
    viewerHasVoted: { __type: "Boolean!" },
  },
  DiscussionPollOption: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    option: { __type: "String!" },
    poll: { __type: "DiscussionPoll" },
    totalVoteCount: { __type: "Int!" },
    viewerHasVoted: { __type: "Boolean!" },
  },
  DiscussionPollOptionConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[DiscussionPollOptionEdge]" },
    nodes: { __type: "[DiscussionPollOption]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  DiscussionPollOptionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "DiscussionPollOption" },
  },
  DiscussionPollOptionOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "DiscussionPollOptionOrderField!" },
  },
  DismissPullRequestReviewInput: {
    clientMutationId: { __type: "String" },
    message: { __type: "String!" },
    pullRequestReviewId: { __type: "ID!" },
  },
  DismissPullRequestReviewPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pullRequestReview: { __type: "PullRequestReview" },
  },
  DismissRepositoryVulnerabilityAlertInput: {
    clientMutationId: { __type: "String" },
    dismissReason: { __type: "DismissReason!" },
    repositoryVulnerabilityAlertId: { __type: "ID!" },
  },
  DismissRepositoryVulnerabilityAlertPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    repositoryVulnerabilityAlert: { __type: "RepositoryVulnerabilityAlert" },
  },
  DraftIssue: {
    __typename: { __type: "String!" },
    assignees: {
      __type: "UserConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    body: { __type: "String!" },
    bodyHTML: { __type: "HTML!" },
    bodyText: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    creator: { __type: "Actor" },
    id: { __type: "ID!" },
    projectV2Items: {
      __type: "ProjectV2ItemConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    projectsV2: {
      __type: "ProjectV2Connection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    title: { __type: "String!" },
    updatedAt: { __type: "DateTime!" },
  },
  DraftPullRequestReviewComment: {
    body: { __type: "String!" },
    path: { __type: "String!" },
    position: { __type: "Int!" },
  },
  DraftPullRequestReviewThread: {
    body: { __type: "String!" },
    line: { __type: "Int!" },
    path: { __type: "String!" },
    side: { __type: "DiffSide" },
    startLine: { __type: "Int" },
    startSide: { __type: "DiffSide" },
  },
  EnablePullRequestAutoMergeInput: {
    authorEmail: { __type: "String" },
    clientMutationId: { __type: "String" },
    commitBody: { __type: "String" },
    commitHeadline: { __type: "String" },
    expectedHeadOid: { __type: "GitObjectID" },
    mergeMethod: { __type: "PullRequestMergeMethod" },
    pullRequestId: { __type: "ID!" },
  },
  EnablePullRequestAutoMergePayload: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    clientMutationId: { __type: "String" },
    pullRequest: { __type: "PullRequest" },
  },
  EnqueuePullRequestInput: {
    clientMutationId: { __type: "String" },
    expectedHeadOid: { __type: "GitObjectID" },
    jump: { __type: "Boolean" },
    pullRequestId: { __type: "ID!" },
  },
  EnqueuePullRequestPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    mergeQueueEntry: { __type: "MergeQueueEntry" },
  },
  Enterprise: {
    __typename: { __type: "String!" },
    announcement: { __type: "String" },
    announcementExpiresAt: { __type: "DateTime" },
    announcementUserDismissible: { __type: "Boolean" },
    avatarUrl: { __type: "URI!", __args: { size: "Int" } },
    billingInfo: { __type: "EnterpriseBillingInfo" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    description: { __type: "String" },
    descriptionHTML: { __type: "HTML!" },
    id: { __type: "ID!" },
    location: { __type: "String" },
    members: {
      __type: "EnterpriseMemberConnection!",
      __args: {
        after: "String",
        before: "String",
        deployment: "EnterpriseUserDeployment",
        first: "Int",
        hasTwoFactorEnabled: "Boolean",
        last: "Int",
        orderBy: "EnterpriseMemberOrder",
        organizationLogins: "[String!]",
        query: "String",
        role: "EnterpriseUserAccountMembershipRole",
      },
    },
    name: { __type: "String!" },
    organizations: {
      __type: "OrganizationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "OrganizationOrder",
        query: "String",
        viewerOrganizationRole: "RoleInOrganization",
      },
    },
    ownerInfo: { __type: "EnterpriseOwnerInfo" },
    resourcePath: { __type: "URI!" },
    slug: { __type: "String!" },
    url: { __type: "URI!" },
    viewerIsAdmin: { __type: "Boolean!" },
    websiteUrl: { __type: "URI" },
  },
  EnterpriseAdministratorConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[EnterpriseAdministratorEdge]" },
    nodes: { __type: "[User]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  EnterpriseAdministratorEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "User" },
    role: { __type: "EnterpriseAdministratorRole!" },
  },
  EnterpriseAdministratorInvitation: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    email: { __type: "String" },
    enterprise: { __type: "Enterprise!" },
    id: { __type: "ID!" },
    invitee: { __type: "User" },
    inviter: { __type: "User" },
    role: { __type: "EnterpriseAdministratorRole!" },
  },
  EnterpriseAdministratorInvitationConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[EnterpriseAdministratorInvitationEdge]" },
    nodes: { __type: "[EnterpriseAdministratorInvitation]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  EnterpriseAdministratorInvitationEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "EnterpriseAdministratorInvitation" },
  },
  EnterpriseAdministratorInvitationOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "EnterpriseAdministratorInvitationOrderField!" },
  },
  EnterpriseAuditEntryData: {
    __typename: { __type: "String!" },
    enterpriseResourcePath: { __type: "URI" },
    enterpriseSlug: { __type: "String" },
    enterpriseUrl: { __type: "URI" },
    $on: { __type: "$EnterpriseAuditEntryData!" },
  },
  EnterpriseBillingInfo: {
    __typename: { __type: "String!" },
    allLicensableUsersCount: { __type: "Int!" },
    assetPacks: { __type: "Int!" },
    bandwidthQuota: { __type: "Float!" },
    bandwidthUsage: { __type: "Float!" },
    bandwidthUsagePercentage: { __type: "Int!" },
    storageQuota: { __type: "Float!" },
    storageUsage: { __type: "Float!" },
    storageUsagePercentage: { __type: "Int!" },
    totalAvailableLicenses: { __type: "Int!" },
    totalLicenses: { __type: "Int!" },
  },
  EnterpriseConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[EnterpriseEdge]" },
    nodes: { __type: "[Enterprise]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  EnterpriseEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Enterprise" },
  },
  EnterpriseFailedInvitationConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[EnterpriseFailedInvitationEdge]" },
    nodes: { __type: "[OrganizationInvitation]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
    totalUniqueUserCount: { __type: "Int!" },
  },
  EnterpriseFailedInvitationEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "OrganizationInvitation" },
  },
  EnterpriseIdentityProvider: {
    __typename: { __type: "String!" },
    digestMethod: { __type: "SamlDigestAlgorithm" },
    enterprise: { __type: "Enterprise" },
    externalIdentities: {
      __type: "ExternalIdentityConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        login: "String",
        membersOnly: "Boolean",
        userName: "String",
      },
    },
    id: { __type: "ID!" },
    idpCertificate: { __type: "X509Certificate" },
    issuer: { __type: "String" },
    recoveryCodes: { __type: "[String!]" },
    signatureMethod: { __type: "SamlSignatureAlgorithm" },
    ssoUrl: { __type: "URI" },
  },
  EnterpriseMember: {
    __typename: { __type: "String!" },
    $on: { __type: "$EnterpriseMember!" },
  },
  EnterpriseMemberConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[EnterpriseMemberEdge]" },
    nodes: { __type: "[EnterpriseMember]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  EnterpriseMemberEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "EnterpriseMember" },
  },
  EnterpriseMemberOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "EnterpriseMemberOrderField!" },
  },
  EnterpriseOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "EnterpriseOrderField!" },
  },
  EnterpriseOrganizationMembershipConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[EnterpriseOrganizationMembershipEdge]" },
    nodes: { __type: "[Organization]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  EnterpriseOrganizationMembershipEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Organization" },
    role: { __type: "EnterpriseUserAccountMembershipRole!" },
  },
  EnterpriseOutsideCollaboratorConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[EnterpriseOutsideCollaboratorEdge]" },
    nodes: { __type: "[User]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  EnterpriseOutsideCollaboratorEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "User" },
    repositories: {
      __type: "EnterpriseRepositoryInfoConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "RepositoryOrder",
      },
    },
  },
  EnterpriseOwnerInfo: {
    __typename: { __type: "String!" },
    admins: {
      __type: "EnterpriseAdministratorConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        hasTwoFactorEnabled: "Boolean",
        last: "Int",
        orderBy: "EnterpriseMemberOrder",
        organizationLogins: "[String!]",
        query: "String",
        role: "EnterpriseAdministratorRole",
      },
    },
    affiliatedUsersWithTwoFactorDisabled: {
      __type: "UserConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    affiliatedUsersWithTwoFactorDisabledExist: { __type: "Boolean!" },
    allowPrivateRepositoryForkingSetting: {
      __type: "EnterpriseEnabledDisabledSettingValue!",
    },
    allowPrivateRepositoryForkingSettingOrganizations: {
      __type: "OrganizationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "OrganizationOrder",
        value: "Boolean!",
      },
    },
    allowPrivateRepositoryForkingSettingPolicyValue: {
      __type: "EnterpriseAllowPrivateRepositoryForkingPolicyValue",
    },
    defaultRepositoryPermissionSetting: {
      __type: "EnterpriseDefaultRepositoryPermissionSettingValue!",
    },
    defaultRepositoryPermissionSettingOrganizations: {
      __type: "OrganizationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "OrganizationOrder",
        value: "DefaultRepositoryPermissionField!",
      },
    },
    domains: {
      __type: "VerifiableDomainConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        isApproved: "Boolean",
        isVerified: "Boolean",
        last: "Int",
        orderBy: "VerifiableDomainOrder",
      },
    },
    enterpriseServerInstallations: {
      __type: "EnterpriseServerInstallationConnection!",
      __args: {
        after: "String",
        before: "String",
        connectedOnly: "Boolean",
        first: "Int",
        last: "Int",
        orderBy: "EnterpriseServerInstallationOrder",
      },
    },
    failedInvitations: {
      __type: "EnterpriseFailedInvitationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        query: "String",
      },
    },
    ipAllowListEnabledSetting: { __type: "IpAllowListEnabledSettingValue!" },
    ipAllowListEntries: {
      __type: "IpAllowListEntryConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "IpAllowListEntryOrder",
      },
    },
    ipAllowListForInstalledAppsEnabledSetting: {
      __type: "IpAllowListForInstalledAppsEnabledSettingValue!",
    },
    isUpdatingDefaultRepositoryPermission: { __type: "Boolean!" },
    isUpdatingTwoFactorRequirement: { __type: "Boolean!" },
    membersCanChangeRepositoryVisibilitySetting: {
      __type: "EnterpriseEnabledDisabledSettingValue!",
    },
    membersCanChangeRepositoryVisibilitySettingOrganizations: {
      __type: "OrganizationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "OrganizationOrder",
        value: "Boolean!",
      },
    },
    membersCanCreateInternalRepositoriesSetting: { __type: "Boolean" },
    membersCanCreatePrivateRepositoriesSetting: { __type: "Boolean" },
    membersCanCreatePublicRepositoriesSetting: { __type: "Boolean" },
    membersCanCreateRepositoriesSetting: {
      __type: "EnterpriseMembersCanCreateRepositoriesSettingValue",
    },
    membersCanCreateRepositoriesSettingOrganizations: {
      __type: "OrganizationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "OrganizationOrder",
        value: "OrganizationMembersCanCreateRepositoriesSettingValue!",
      },
    },
    membersCanDeleteIssuesSetting: {
      __type: "EnterpriseEnabledDisabledSettingValue!",
    },
    membersCanDeleteIssuesSettingOrganizations: {
      __type: "OrganizationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "OrganizationOrder",
        value: "Boolean!",
      },
    },
    membersCanDeleteRepositoriesSetting: {
      __type: "EnterpriseEnabledDisabledSettingValue!",
    },
    membersCanDeleteRepositoriesSettingOrganizations: {
      __type: "OrganizationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "OrganizationOrder",
        value: "Boolean!",
      },
    },
    membersCanInviteCollaboratorsSetting: {
      __type: "EnterpriseEnabledDisabledSettingValue!",
    },
    membersCanInviteCollaboratorsSettingOrganizations: {
      __type: "OrganizationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "OrganizationOrder",
        value: "Boolean!",
      },
    },
    membersCanMakePurchasesSetting: {
      __type: "EnterpriseMembersCanMakePurchasesSettingValue!",
    },
    membersCanUpdateProtectedBranchesSetting: {
      __type: "EnterpriseEnabledDisabledSettingValue!",
    },
    membersCanUpdateProtectedBranchesSettingOrganizations: {
      __type: "OrganizationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "OrganizationOrder",
        value: "Boolean!",
      },
    },
    membersCanViewDependencyInsightsSetting: {
      __type: "EnterpriseEnabledDisabledSettingValue!",
    },
    membersCanViewDependencyInsightsSettingOrganizations: {
      __type: "OrganizationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "OrganizationOrder",
        value: "Boolean!",
      },
    },
    notificationDeliveryRestrictionEnabledSetting: {
      __type: "NotificationRestrictionSettingValue!",
    },
    oidcProvider: { __type: "OIDCProvider" },
    organizationProjectsSetting: {
      __type: "EnterpriseEnabledDisabledSettingValue!",
    },
    organizationProjectsSettingOrganizations: {
      __type: "OrganizationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "OrganizationOrder",
        value: "Boolean!",
      },
    },
    outsideCollaborators: {
      __type: "EnterpriseOutsideCollaboratorConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        hasTwoFactorEnabled: "Boolean",
        last: "Int",
        login: "String",
        orderBy: "EnterpriseMemberOrder",
        organizationLogins: "[String!]",
        query: "String",
        visibility: "RepositoryVisibility",
      },
    },
    pendingAdminInvitations: {
      __type: "EnterpriseAdministratorInvitationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "EnterpriseAdministratorInvitationOrder",
        query: "String",
        role: "EnterpriseAdministratorRole",
      },
    },
    pendingCollaboratorInvitations: {
      __type: "RepositoryInvitationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "RepositoryInvitationOrder",
        query: "String",
      },
    },
    pendingMemberInvitations: {
      __type: "EnterprisePendingMemberInvitationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        invitationSource: "OrganizationInvitationSource",
        last: "Int",
        organizationLogins: "[String!]",
        query: "String",
      },
    },
    repositoryProjectsSetting: {
      __type: "EnterpriseEnabledDisabledSettingValue!",
    },
    repositoryProjectsSettingOrganizations: {
      __type: "OrganizationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "OrganizationOrder",
        value: "Boolean!",
      },
    },
    samlIdentityProvider: { __type: "EnterpriseIdentityProvider" },
    samlIdentityProviderSettingOrganizations: {
      __type: "OrganizationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "OrganizationOrder",
        value: "IdentityProviderConfigurationState!",
      },
    },
    supportEntitlements: {
      __type: "EnterpriseMemberConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "EnterpriseMemberOrder",
      },
    },
    teamDiscussionsSetting: {
      __type: "EnterpriseEnabledDisabledSettingValue!",
    },
    teamDiscussionsSettingOrganizations: {
      __type: "OrganizationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "OrganizationOrder",
        value: "Boolean!",
      },
    },
    twoFactorRequiredSetting: { __type: "EnterpriseEnabledSettingValue!" },
    twoFactorRequiredSettingOrganizations: {
      __type: "OrganizationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "OrganizationOrder",
        value: "Boolean!",
      },
    },
  },
  EnterprisePendingMemberInvitationConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[EnterprisePendingMemberInvitationEdge]" },
    nodes: { __type: "[OrganizationInvitation]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
    totalUniqueUserCount: { __type: "Int!" },
  },
  EnterprisePendingMemberInvitationEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "OrganizationInvitation" },
  },
  EnterpriseRepositoryInfo: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    isPrivate: { __type: "Boolean!" },
    name: { __type: "String!" },
    nameWithOwner: { __type: "String!" },
  },
  EnterpriseRepositoryInfoConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[EnterpriseRepositoryInfoEdge]" },
    nodes: { __type: "[EnterpriseRepositoryInfo]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  EnterpriseRepositoryInfoEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "EnterpriseRepositoryInfo" },
  },
  EnterpriseServerInstallation: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    customerName: { __type: "String!" },
    hostName: { __type: "String!" },
    id: { __type: "ID!" },
    isConnected: { __type: "Boolean!" },
    updatedAt: { __type: "DateTime!" },
    userAccounts: {
      __type: "EnterpriseServerUserAccountConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "EnterpriseServerUserAccountOrder",
      },
    },
    userAccountsUploads: {
      __type: "EnterpriseServerUserAccountsUploadConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "EnterpriseServerUserAccountsUploadOrder",
      },
    },
  },
  EnterpriseServerInstallationConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[EnterpriseServerInstallationEdge]" },
    nodes: { __type: "[EnterpriseServerInstallation]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  EnterpriseServerInstallationEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "EnterpriseServerInstallation" },
  },
  EnterpriseServerInstallationMembershipConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[EnterpriseServerInstallationMembershipEdge]" },
    nodes: { __type: "[EnterpriseServerInstallation]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  EnterpriseServerInstallationMembershipEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "EnterpriseServerInstallation" },
    role: { __type: "EnterpriseUserAccountMembershipRole!" },
  },
  EnterpriseServerInstallationOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "EnterpriseServerInstallationOrderField!" },
  },
  EnterpriseServerUserAccount: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    emails: {
      __type: "EnterpriseServerUserAccountEmailConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "EnterpriseServerUserAccountEmailOrder",
      },
    },
    enterpriseServerInstallation: { __type: "EnterpriseServerInstallation!" },
    id: { __type: "ID!" },
    isSiteAdmin: { __type: "Boolean!" },
    login: { __type: "String!" },
    profileName: { __type: "String" },
    remoteCreatedAt: { __type: "DateTime!" },
    remoteUserId: { __type: "Int!" },
    updatedAt: { __type: "DateTime!" },
  },
  EnterpriseServerUserAccountConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[EnterpriseServerUserAccountEdge]" },
    nodes: { __type: "[EnterpriseServerUserAccount]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  EnterpriseServerUserAccountEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "EnterpriseServerUserAccount" },
  },
  EnterpriseServerUserAccountEmail: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    email: { __type: "String!" },
    id: { __type: "ID!" },
    isPrimary: { __type: "Boolean!" },
    updatedAt: { __type: "DateTime!" },
    userAccount: { __type: "EnterpriseServerUserAccount!" },
  },
  EnterpriseServerUserAccountEmailConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[EnterpriseServerUserAccountEmailEdge]" },
    nodes: { __type: "[EnterpriseServerUserAccountEmail]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  EnterpriseServerUserAccountEmailEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "EnterpriseServerUserAccountEmail" },
  },
  EnterpriseServerUserAccountEmailOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "EnterpriseServerUserAccountEmailOrderField!" },
  },
  EnterpriseServerUserAccountOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "EnterpriseServerUserAccountOrderField!" },
  },
  EnterpriseServerUserAccountsUpload: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    enterprise: { __type: "Enterprise!" },
    enterpriseServerInstallation: { __type: "EnterpriseServerInstallation!" },
    id: { __type: "ID!" },
    name: { __type: "String!" },
    syncState: { __type: "EnterpriseServerUserAccountsUploadSyncState!" },
    updatedAt: { __type: "DateTime!" },
  },
  EnterpriseServerUserAccountsUploadConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[EnterpriseServerUserAccountsUploadEdge]" },
    nodes: { __type: "[EnterpriseServerUserAccountsUpload]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  EnterpriseServerUserAccountsUploadEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "EnterpriseServerUserAccountsUpload" },
  },
  EnterpriseServerUserAccountsUploadOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "EnterpriseServerUserAccountsUploadOrderField!" },
  },
  EnterpriseUserAccount: {
    __typename: { __type: "String!" },
    avatarUrl: { __type: "URI!", __args: { size: "Int" } },
    createdAt: { __type: "DateTime!" },
    enterprise: { __type: "Enterprise!" },
    enterpriseInstallations: {
      __type: "EnterpriseServerInstallationMembershipConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "EnterpriseServerInstallationOrder",
        query: "String",
        role: "EnterpriseUserAccountMembershipRole",
      },
    },
    id: { __type: "ID!" },
    login: { __type: "String!" },
    name: { __type: "String" },
    organizations: {
      __type: "EnterpriseOrganizationMembershipConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "OrganizationOrder",
        query: "String",
        role: "EnterpriseUserAccountMembershipRole",
      },
    },
    resourcePath: { __type: "URI!" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    user: { __type: "User" },
  },
  Environment: {
    __typename: { __type: "String!" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
    name: { __type: "String!" },
    protectionRules: {
      __type: "DeploymentProtectionRuleConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
  },
  EnvironmentConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[EnvironmentEdge]" },
    nodes: { __type: "[Environment]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  EnvironmentEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Environment" },
  },
  Environments: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "EnvironmentOrderField!" },
  },
  ExternalIdentity: {
    __typename: { __type: "String!" },
    guid: { __type: "String!" },
    id: { __type: "ID!" },
    organizationInvitation: { __type: "OrganizationInvitation" },
    samlIdentity: { __type: "ExternalIdentitySamlAttributes" },
    scimIdentity: { __type: "ExternalIdentityScimAttributes" },
    user: { __type: "User" },
  },
  ExternalIdentityAttribute: {
    __typename: { __type: "String!" },
    metadata: { __type: "String" },
    name: { __type: "String!" },
    value: { __type: "String!" },
  },
  ExternalIdentityConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ExternalIdentityEdge]" },
    nodes: { __type: "[ExternalIdentity]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ExternalIdentityEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "ExternalIdentity" },
  },
  ExternalIdentitySamlAttributes: {
    __typename: { __type: "String!" },
    attributes: { __type: "[ExternalIdentityAttribute!]!" },
    emails: { __type: "[UserEmailMetadata!]" },
    familyName: { __type: "String" },
    givenName: { __type: "String" },
    groups: { __type: "[String!]" },
    nameId: { __type: "String" },
    username: { __type: "String" },
  },
  ExternalIdentityScimAttributes: {
    __typename: { __type: "String!" },
    emails: { __type: "[UserEmailMetadata!]" },
    familyName: { __type: "String" },
    givenName: { __type: "String" },
    groups: { __type: "[String!]" },
    username: { __type: "String" },
  },
  FileAddition: {
    contents: { __type: "Base64String!" },
    path: { __type: "String!" },
  },
  FileChanges: {
    additions: { __type: "[FileAddition!]" },
    deletions: { __type: "[FileDeletion!]" },
  },
  FileDeletion: { path: { __type: "String!" } },
  FollowOrganizationInput: {
    clientMutationId: { __type: "String" },
    organizationId: { __type: "ID!" },
  },
  FollowOrganizationPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    organization: { __type: "Organization" },
  },
  FollowUserInput: {
    clientMutationId: { __type: "String" },
    userId: { __type: "ID!" },
  },
  FollowUserPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    user: { __type: "User" },
  },
  FollowerConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserEdge]" },
    nodes: { __type: "[User]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  FollowingConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserEdge]" },
    nodes: { __type: "[User]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  FundingLink: {
    __typename: { __type: "String!" },
    platform: { __type: "FundingPlatform!" },
    url: { __type: "URI!" },
  },
  GenericHovercardContext: {
    __typename: { __type: "String!" },
    message: { __type: "String!" },
    octicon: { __type: "String!" },
  },
  Gist: {
    __typename: { __type: "String!" },
    comments: {
      __type: "GistCommentConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    createdAt: { __type: "DateTime!" },
    description: { __type: "String" },
    files: {
      __type: "[GistFile]",
      __args: { limit: "Int", oid: "GitObjectID" },
    },
    forks: {
      __type: "GistConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "GistOrder",
      },
    },
    id: { __type: "ID!" },
    isFork: { __type: "Boolean!" },
    isPublic: { __type: "Boolean!" },
    name: { __type: "String!" },
    owner: { __type: "RepositoryOwner" },
    pushedAt: { __type: "DateTime" },
    resourcePath: { __type: "URI!" },
    stargazerCount: { __type: "Int!" },
    stargazers: {
      __type: "StargazerConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "StarOrder",
      },
    },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    viewerHasStarred: { __type: "Boolean!" },
  },
  GistComment: {
    __typename: { __type: "String!" },
    author: { __type: "Actor" },
    authorAssociation: { __type: "CommentAuthorAssociation!" },
    body: { __type: "String!" },
    bodyHTML: { __type: "HTML!" },
    bodyText: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    createdViaEmail: { __type: "Boolean!" },
    databaseId: { __type: "Int" },
    editor: { __type: "Actor" },
    gist: { __type: "Gist!" },
    id: { __type: "ID!" },
    includesCreatedEdit: { __type: "Boolean!" },
    isMinimized: { __type: "Boolean!" },
    lastEditedAt: { __type: "DateTime" },
    minimizedReason: { __type: "String" },
    publishedAt: { __type: "DateTime" },
    updatedAt: { __type: "DateTime!" },
    userContentEdits: {
      __type: "UserContentEditConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    viewerCanDelete: { __type: "Boolean!" },
    viewerCanMinimize: { __type: "Boolean!" },
    viewerCanUpdate: { __type: "Boolean!" },
    viewerCannotUpdateReasons: { __type: "[CommentCannotUpdateReason!]!" },
    viewerDidAuthor: { __type: "Boolean!" },
  },
  GistCommentConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[GistCommentEdge]" },
    nodes: { __type: "[GistComment]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  GistCommentEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "GistComment" },
  },
  GistConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[GistEdge]" },
    nodes: { __type: "[Gist]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  GistEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Gist" },
  },
  GistFile: {
    __typename: { __type: "String!" },
    encodedName: { __type: "String" },
    encoding: { __type: "String" },
    extension: { __type: "String" },
    isImage: { __type: "Boolean!" },
    isTruncated: { __type: "Boolean!" },
    language: { __type: "Language" },
    name: { __type: "String" },
    size: { __type: "Int" },
    text: { __type: "String", __args: { truncate: "Int" } },
  },
  GistOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "GistOrderField!" },
  },
  GitActor: {
    __typename: { __type: "String!" },
    avatarUrl: { __type: "URI!", __args: { size: "Int" } },
    date: { __type: "GitTimestamp" },
    email: { __type: "String" },
    name: { __type: "String" },
    user: { __type: "User" },
  },
  GitActorConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[GitActorEdge]" },
    nodes: { __type: "[GitActor]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  GitActorEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "GitActor" },
  },
  GitHubMetadata: {
    __typename: { __type: "String!" },
    gitHubServicesSha: { __type: "GitObjectID!" },
    gitIpAddresses: { __type: "[String!]" },
    githubEnterpriseImporterIpAddresses: { __type: "[String!]" },
    hookIpAddresses: { __type: "[String!]" },
    importerIpAddresses: { __type: "[String!]" },
    isPasswordAuthenticationVerifiable: { __type: "Boolean!" },
    pagesIpAddresses: { __type: "[String!]" },
  },
  GitObject: {
    __typename: { __type: "String!" },
    abbreviatedOid: { __type: "String!" },
    commitResourcePath: { __type: "URI!" },
    commitUrl: { __type: "URI!" },
    id: { __type: "ID!" },
    oid: { __type: "GitObjectID!" },
    repository: { __type: "Repository!" },
    $on: { __type: "$GitObject!" },
  },
  GitSignature: {
    __typename: { __type: "String!" },
    email: { __type: "String!" },
    isValid: { __type: "Boolean!" },
    payload: { __type: "String!" },
    signature: { __type: "String!" },
    signer: { __type: "User" },
    state: { __type: "GitSignatureState!" },
    wasSignedByGitHub: { __type: "Boolean!" },
    $on: { __type: "$GitSignature!" },
  },
  GpgSignature: {
    __typename: { __type: "String!" },
    email: { __type: "String!" },
    isValid: { __type: "Boolean!" },
    keyId: { __type: "String" },
    payload: { __type: "String!" },
    signature: { __type: "String!" },
    signer: { __type: "User" },
    state: { __type: "GitSignatureState!" },
    wasSignedByGitHub: { __type: "Boolean!" },
  },
  GrantEnterpriseOrganizationsMigratorRoleInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    login: { __type: "String!" },
  },
  GrantEnterpriseOrganizationsMigratorRolePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    organizations: {
      __type: "OrganizationConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
  },
  GrantMigratorRoleInput: {
    actor: { __type: "String!" },
    actorType: { __type: "ActorType!" },
    clientMutationId: { __type: "String" },
    organizationId: { __type: "ID!" },
  },
  GrantMigratorRolePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    success: { __type: "Boolean" },
  },
  HeadRefDeletedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    headRef: { __type: "Ref" },
    headRefName: { __type: "String!" },
    id: { __type: "ID!" },
    pullRequest: { __type: "PullRequest!" },
  },
  HeadRefForcePushedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    afterCommit: { __type: "Commit" },
    beforeCommit: { __type: "Commit" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    pullRequest: { __type: "PullRequest!" },
    ref: { __type: "Ref" },
  },
  HeadRefRestoredEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    pullRequest: { __type: "PullRequest!" },
  },
  Hovercard: {
    __typename: { __type: "String!" },
    contexts: { __type: "[HovercardContext!]!" },
  },
  HovercardContext: {
    __typename: { __type: "String!" },
    message: { __type: "String!" },
    octicon: { __type: "String!" },
    $on: { __type: "$HovercardContext!" },
  },
  InviteEnterpriseAdminInput: {
    clientMutationId: { __type: "String" },
    email: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    invitee: { __type: "String" },
    role: { __type: "EnterpriseAdministratorRole" },
  },
  InviteEnterpriseAdminPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    invitation: { __type: "EnterpriseAdministratorInvitation" },
  },
  IpAllowListEntry: {
    __typename: { __type: "String!" },
    allowListValue: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    isActive: { __type: "Boolean!" },
    name: { __type: "String" },
    owner: { __type: "IpAllowListOwner!" },
    updatedAt: { __type: "DateTime!" },
  },
  IpAllowListEntryConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[IpAllowListEntryEdge]" },
    nodes: { __type: "[IpAllowListEntry]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  IpAllowListEntryEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "IpAllowListEntry" },
  },
  IpAllowListEntryOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "IpAllowListEntryOrderField!" },
  },
  IpAllowListOwner: {
    __typename: { __type: "String!" },
    $on: { __type: "$IpAllowListOwner!" },
  },
  Issue: {
    __typename: { __type: "String!" },
    activeLockReason: { __type: "LockReason" },
    assignees: {
      __type: "UserConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    author: { __type: "Actor" },
    authorAssociation: { __type: "CommentAuthorAssociation!" },
    body: { __type: "String!" },
    bodyHTML: { __type: "HTML!" },
    bodyResourcePath: { __type: "URI!" },
    bodyText: { __type: "String!" },
    bodyUrl: { __type: "URI!" },
    closed: { __type: "Boolean!" },
    closedAt: { __type: "DateTime" },
    comments: {
      __type: "IssueCommentConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "IssueCommentOrder",
      },
    },
    createdAt: { __type: "DateTime!" },
    createdViaEmail: { __type: "Boolean!" },
    databaseId: { __type: "Int" },
    editor: { __type: "Actor" },
    fullDatabaseId: { __type: "BigInt" },
    hovercard: {
      __type: "Hovercard!",
      __args: { includeNotificationContexts: "Boolean" },
    },
    id: { __type: "ID!" },
    includesCreatedEdit: { __type: "Boolean!" },
    isPinned: { __type: "Boolean" },
    isReadByViewer: { __type: "Boolean" },
    labels: {
      __type: "LabelConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "LabelOrder",
      },
    },
    lastEditedAt: { __type: "DateTime" },
    linkedBranches: {
      __type: "LinkedBranchConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    locked: { __type: "Boolean!" },
    milestone: { __type: "Milestone" },
    number: { __type: "Int!" },
    participants: {
      __type: "UserConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    projectCards: {
      __type: "ProjectCardConnection!",
      __args: {
        after: "String",
        archivedStates: "[ProjectCardArchivedState]",
        before: "String",
        first: "Int",
        last: "Int",
      },
    },
    projectItems: {
      __type: "ProjectV2ItemConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        includeArchived: "Boolean",
        last: "Int",
      },
    },
    projectV2: { __type: "ProjectV2", __args: { number: "Int!" } },
    projectsV2: {
      __type: "ProjectV2Connection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectV2Order",
        query: "String",
      },
    },
    publishedAt: { __type: "DateTime" },
    reactionGroups: { __type: "[ReactionGroup!]" },
    reactions: {
      __type: "ReactionConnection!",
      __args: {
        after: "String",
        before: "String",
        content: "ReactionContent",
        first: "Int",
        last: "Int",
        orderBy: "ReactionOrder",
      },
    },
    repository: { __type: "Repository!" },
    resourcePath: { __type: "URI!" },
    state: { __type: "IssueState!" },
    stateReason: { __type: "IssueStateReason" },
    timeline: {
      __type: "IssueTimelineConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        since: "DateTime",
      },
    },
    timelineItems: {
      __type: "IssueTimelineItemsConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        itemTypes: "[IssueTimelineItemsItemType!]",
        last: "Int",
        since: "DateTime",
        skip: "Int",
      },
    },
    title: { __type: "String!" },
    titleHTML: { __type: "String!" },
    trackedInIssues: {
      __type: "IssueConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    trackedIssues: {
      __type: "IssueConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    trackedIssuesCount: {
      __type: "Int!",
      __args: { states: "[TrackedIssueStates]" },
    },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    userContentEdits: {
      __type: "UserContentEditConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    viewerCanClose: { __type: "Boolean!" },
    viewerCanDelete: { __type: "Boolean!" },
    viewerCanReact: { __type: "Boolean!" },
    viewerCanReopen: { __type: "Boolean!" },
    viewerCanSubscribe: { __type: "Boolean!" },
    viewerCanUpdate: { __type: "Boolean!" },
    viewerCannotUpdateReasons: { __type: "[CommentCannotUpdateReason!]!" },
    viewerDidAuthor: { __type: "Boolean!" },
    viewerSubscription: { __type: "SubscriptionState" },
    viewerThreadSubscriptionFormAction: {
      __type: "ThreadSubscriptionFormAction",
    },
    viewerThreadSubscriptionStatus: { __type: "ThreadSubscriptionState" },
  },
  IssueComment: {
    __typename: { __type: "String!" },
    author: { __type: "Actor" },
    authorAssociation: { __type: "CommentAuthorAssociation!" },
    body: { __type: "String!" },
    bodyHTML: { __type: "HTML!" },
    bodyText: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    createdViaEmail: { __type: "Boolean!" },
    databaseId: { __type: "Int" },
    editor: { __type: "Actor" },
    fullDatabaseId: { __type: "BigInt" },
    id: { __type: "ID!" },
    includesCreatedEdit: { __type: "Boolean!" },
    isMinimized: { __type: "Boolean!" },
    issue: { __type: "Issue!" },
    lastEditedAt: { __type: "DateTime" },
    minimizedReason: { __type: "String" },
    publishedAt: { __type: "DateTime" },
    pullRequest: { __type: "PullRequest" },
    reactionGroups: { __type: "[ReactionGroup!]" },
    reactions: {
      __type: "ReactionConnection!",
      __args: {
        after: "String",
        before: "String",
        content: "ReactionContent",
        first: "Int",
        last: "Int",
        orderBy: "ReactionOrder",
      },
    },
    repository: { __type: "Repository!" },
    resourcePath: { __type: "URI!" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    userContentEdits: {
      __type: "UserContentEditConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    viewerCanDelete: { __type: "Boolean!" },
    viewerCanMinimize: { __type: "Boolean!" },
    viewerCanReact: { __type: "Boolean!" },
    viewerCanUpdate: { __type: "Boolean!" },
    viewerCannotUpdateReasons: { __type: "[CommentCannotUpdateReason!]!" },
    viewerDidAuthor: { __type: "Boolean!" },
  },
  IssueCommentConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[IssueCommentEdge]" },
    nodes: { __type: "[IssueComment]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  IssueCommentEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "IssueComment" },
  },
  IssueCommentOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "IssueCommentOrderField!" },
  },
  IssueConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[IssueEdge]" },
    nodes: { __type: "[Issue]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  IssueContributionsByRepository: {
    __typename: { __type: "String!" },
    contributions: {
      __type: "CreatedIssueContributionConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ContributionOrder",
      },
    },
    repository: { __type: "Repository!" },
  },
  IssueEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Issue" },
  },
  IssueFilters: {
    assignee: { __type: "String" },
    createdBy: { __type: "String" },
    labels: { __type: "[String!]" },
    mentioned: { __type: "String" },
    milestone: { __type: "String" },
    milestoneNumber: { __type: "String" },
    since: { __type: "DateTime" },
    states: { __type: "[IssueState!]" },
    viewerSubscribed: { __type: "Boolean" },
  },
  IssueOrPullRequest: {
    __typename: { __type: "String!" },
    $on: { __type: "$IssueOrPullRequest!" },
  },
  IssueOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "IssueOrderField!" },
  },
  IssueTemplate: {
    __typename: { __type: "String!" },
    about: { __type: "String" },
    assignees: {
      __type: "UserConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    body: { __type: "String" },
    filename: { __type: "String!" },
    labels: {
      __type: "LabelConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "LabelOrder",
      },
    },
    name: { __type: "String!" },
    title: { __type: "String" },
  },
  IssueTimelineConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[IssueTimelineItemEdge]" },
    nodes: { __type: "[IssueTimelineItem]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  IssueTimelineItem: {
    __typename: { __type: "String!" },
    $on: { __type: "$IssueTimelineItem!" },
  },
  IssueTimelineItemEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "IssueTimelineItem" },
  },
  IssueTimelineItems: {
    __typename: { __type: "String!" },
    $on: { __type: "$IssueTimelineItems!" },
  },
  IssueTimelineItemsConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[IssueTimelineItemsEdge]" },
    filteredCount: { __type: "Int!" },
    nodes: { __type: "[IssueTimelineItems]" },
    pageCount: { __type: "Int!" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
    updatedAt: { __type: "DateTime!" },
  },
  IssueTimelineItemsEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "IssueTimelineItems" },
  },
  JoinedGitHubContribution: {
    __typename: { __type: "String!" },
    isRestricted: { __type: "Boolean!" },
    occurredAt: { __type: "DateTime!" },
    resourcePath: { __type: "URI!" },
    url: { __type: "URI!" },
    user: { __type: "User!" },
  },
  Label: {
    __typename: { __type: "String!" },
    color: { __type: "String!" },
    createdAt: { __type: "DateTime" },
    description: { __type: "String" },
    id: { __type: "ID!" },
    isDefault: { __type: "Boolean!" },
    issues: {
      __type: "IssueConnection!",
      __args: {
        after: "String",
        before: "String",
        filterBy: "IssueFilters",
        first: "Int",
        labels: "[String!]",
        last: "Int",
        orderBy: "IssueOrder",
        states: "[IssueState!]",
      },
    },
    name: { __type: "String!" },
    pullRequests: {
      __type: "PullRequestConnection!",
      __args: {
        after: "String",
        baseRefName: "String",
        before: "String",
        first: "Int",
        headRefName: "String",
        labels: "[String!]",
        last: "Int",
        orderBy: "IssueOrder",
        states: "[PullRequestState!]",
      },
    },
    repository: { __type: "Repository!" },
    resourcePath: { __type: "URI!" },
    updatedAt: { __type: "DateTime" },
    url: { __type: "URI!" },
  },
  LabelConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[LabelEdge]" },
    nodes: { __type: "[Label]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  LabelEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Label" },
  },
  LabelOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "LabelOrderField!" },
  },
  Labelable: {
    __typename: { __type: "String!" },
    labels: {
      __type: "LabelConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "LabelOrder",
      },
    },
    $on: { __type: "$Labelable!" },
  },
  LabeledEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    label: { __type: "Label!" },
    labelable: { __type: "Labelable!" },
  },
  Language: {
    __typename: { __type: "String!" },
    color: { __type: "String" },
    id: { __type: "ID!" },
    name: { __type: "String!" },
  },
  LanguageConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[LanguageEdge]" },
    nodes: { __type: "[Language]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
    totalSize: { __type: "Int!" },
  },
  LanguageEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Language!" },
    size: { __type: "Int!" },
  },
  LanguageOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "LanguageOrderField!" },
  },
  License: {
    __typename: { __type: "String!" },
    body: { __type: "String!" },
    conditions: { __type: "[LicenseRule]!" },
    description: { __type: "String" },
    featured: { __type: "Boolean!" },
    hidden: { __type: "Boolean!" },
    id: { __type: "ID!" },
    implementation: { __type: "String" },
    key: { __type: "String!" },
    limitations: { __type: "[LicenseRule]!" },
    name: { __type: "String!" },
    nickname: { __type: "String" },
    permissions: { __type: "[LicenseRule]!" },
    pseudoLicense: { __type: "Boolean!" },
    spdxId: { __type: "String" },
    url: { __type: "URI" },
  },
  LicenseRule: {
    __typename: { __type: "String!" },
    description: { __type: "String!" },
    key: { __type: "String!" },
    label: { __type: "String!" },
  },
  LinkProjectV2ToRepositoryInput: {
    clientMutationId: { __type: "String" },
    projectId: { __type: "ID!" },
    repositoryId: { __type: "ID!" },
  },
  LinkProjectV2ToRepositoryPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    repository: { __type: "Repository" },
  },
  LinkProjectV2ToTeamInput: {
    clientMutationId: { __type: "String" },
    projectId: { __type: "ID!" },
    teamId: { __type: "ID!" },
  },
  LinkProjectV2ToTeamPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    team: { __type: "Team" },
  },
  LinkRepositoryToProjectInput: {
    clientMutationId: { __type: "String" },
    projectId: { __type: "ID!" },
    repositoryId: { __type: "ID!" },
  },
  LinkRepositoryToProjectPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    project: { __type: "Project" },
    repository: { __type: "Repository" },
  },
  LinkedBranch: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    ref: { __type: "Ref" },
  },
  LinkedBranchConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[LinkedBranchEdge]" },
    nodes: { __type: "[LinkedBranch]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  LinkedBranchEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "LinkedBranch" },
  },
  LockLockableInput: {
    clientMutationId: { __type: "String" },
    lockReason: { __type: "LockReason" },
    lockableId: { __type: "ID!" },
  },
  LockLockablePayload: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    clientMutationId: { __type: "String" },
    lockedRecord: { __type: "Lockable" },
  },
  Lockable: {
    __typename: { __type: "String!" },
    activeLockReason: { __type: "LockReason" },
    locked: { __type: "Boolean!" },
    $on: { __type: "$Lockable!" },
  },
  LockedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    lockReason: { __type: "LockReason" },
    lockable: { __type: "Lockable!" },
  },
  Mannequin: {
    __typename: { __type: "String!" },
    avatarUrl: { __type: "URI!", __args: { size: "Int" } },
    claimant: { __type: "User" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    email: { __type: "String" },
    id: { __type: "ID!" },
    login: { __type: "String!" },
    resourcePath: { __type: "URI!" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
  },
  MannequinConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[MannequinEdge]" },
    nodes: { __type: "[Mannequin]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  MannequinEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Mannequin" },
  },
  MannequinOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "MannequinOrderField!" },
  },
  MarkDiscussionCommentAsAnswerInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  MarkDiscussionCommentAsAnswerPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    discussion: { __type: "Discussion" },
  },
  MarkFileAsViewedInput: {
    clientMutationId: { __type: "String" },
    path: { __type: "String!" },
    pullRequestId: { __type: "ID!" },
  },
  MarkFileAsViewedPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pullRequest: { __type: "PullRequest" },
  },
  MarkNotificationAsDoneInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  MarkNotificationAsDonePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    success: { __type: "Boolean" },
    viewer: { __type: "User" },
  },
  MarkNotificationAsReadInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  MarkNotificationAsReadPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    success: { __type: "Boolean" },
    viewer: { __type: "User" },
  },
  MarkNotificationAsUndoneInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  MarkNotificationAsUndonePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    success: { __type: "Boolean" },
    viewer: { __type: "User" },
  },
  MarkNotificationAsUnreadInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  MarkNotificationAsUnreadPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    success: { __type: "Boolean" },
    viewer: { __type: "User" },
  },
  MarkNotificationSubjectAsReadInput: {
    clientMutationId: { __type: "String" },
    subjectId: { __type: "ID!" },
  },
  MarkNotificationSubjectAsReadPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    success: { __type: "Boolean" },
    viewer: { __type: "User" },
  },
  MarkNotificationsAsDoneInput: {
    clientMutationId: { __type: "String" },
    ids: { __type: "[ID!]!" },
  },
  MarkNotificationsAsDonePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    success: { __type: "Boolean" },
  },
  MarkNotificationsAsReadInput: {
    clientMutationId: { __type: "String" },
    ids: { __type: "[ID!]!" },
  },
  MarkNotificationsAsReadPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    success: { __type: "Boolean" },
  },
  MarkNotificationsAsUndoneInput: {
    clientMutationId: { __type: "String" },
    ids: { __type: "[ID!]!" },
  },
  MarkNotificationsAsUndonePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    success: { __type: "Boolean" },
  },
  MarkNotificationsAsUnreadInput: {
    clientMutationId: { __type: "String" },
    ids: { __type: "[ID!]!" },
  },
  MarkNotificationsAsUnreadPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    success: { __type: "Boolean" },
  },
  MarkProjectV2AsTemplateInput: {
    clientMutationId: { __type: "String" },
    projectId: { __type: "ID!" },
  },
  MarkProjectV2AsTemplatePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    projectV2: { __type: "ProjectV2" },
  },
  MarkPullRequestReadyForReviewInput: {
    clientMutationId: { __type: "String" },
    pullRequestId: { __type: "ID!" },
  },
  MarkPullRequestReadyForReviewPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pullRequest: { __type: "PullRequest" },
  },
  MarkedAsDuplicateEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    canonical: { __type: "IssueOrPullRequest" },
    createdAt: { __type: "DateTime!" },
    duplicate: { __type: "IssueOrPullRequest" },
    id: { __type: "ID!" },
    isCrossRepository: { __type: "Boolean!" },
  },
  MarketplaceCategory: {
    __typename: { __type: "String!" },
    description: { __type: "String" },
    howItWorks: { __type: "String" },
    id: { __type: "ID!" },
    name: { __type: "String!" },
    primaryListingCount: { __type: "Int!" },
    resourcePath: { __type: "URI!" },
    secondaryListingCount: { __type: "Int!" },
    slug: { __type: "String!" },
    url: { __type: "URI!" },
  },
  MarketplaceListing: {
    __typename: { __type: "String!" },
    app: { __type: "App" },
    companyUrl: { __type: "URI" },
    configurationResourcePath: { __type: "URI!" },
    configurationUrl: { __type: "URI!" },
    documentationUrl: { __type: "URI" },
    extendedDescription: { __type: "String" },
    extendedDescriptionHTML: { __type: "HTML!" },
    fullDescription: { __type: "String!" },
    fullDescriptionHTML: { __type: "HTML!" },
    hasPublishedFreeTrialPlans: { __type: "Boolean!" },
    hasTermsOfService: { __type: "Boolean!" },
    hasVerifiedOwner: { __type: "Boolean!" },
    howItWorks: { __type: "String" },
    howItWorksHTML: { __type: "HTML!" },
    id: { __type: "ID!" },
    installationUrl: { __type: "URI" },
    installedForViewer: { __type: "Boolean!" },
    isArchived: { __type: "Boolean!" },
    isDraft: { __type: "Boolean!" },
    isPaid: { __type: "Boolean!" },
    isPublic: { __type: "Boolean!" },
    isRejected: { __type: "Boolean!" },
    isUnverified: { __type: "Boolean!" },
    isUnverifiedPending: { __type: "Boolean!" },
    isVerificationPendingFromDraft: { __type: "Boolean!" },
    isVerificationPendingFromUnverified: { __type: "Boolean!" },
    isVerified: { __type: "Boolean!" },
    logoBackgroundColor: { __type: "String!" },
    logoUrl: { __type: "URI", __args: { size: "Int" } },
    name: { __type: "String!" },
    normalizedShortDescription: { __type: "String!" },
    pricingUrl: { __type: "URI" },
    primaryCategory: { __type: "MarketplaceCategory!" },
    privacyPolicyUrl: { __type: "URI!" },
    resourcePath: { __type: "URI!" },
    screenshotUrls: { __type: "[String]!" },
    secondaryCategory: { __type: "MarketplaceCategory" },
    shortDescription: { __type: "String!" },
    slug: { __type: "String!" },
    statusUrl: { __type: "URI" },
    supportEmail: { __type: "String" },
    supportUrl: { __type: "URI!" },
    termsOfServiceUrl: { __type: "URI" },
    url: { __type: "URI!" },
    viewerCanAddPlans: { __type: "Boolean!" },
    viewerCanApprove: { __type: "Boolean!" },
    viewerCanDelist: { __type: "Boolean!" },
    viewerCanEdit: { __type: "Boolean!" },
    viewerCanEditCategories: { __type: "Boolean!" },
    viewerCanEditPlans: { __type: "Boolean!" },
    viewerCanRedraft: { __type: "Boolean!" },
    viewerCanReject: { __type: "Boolean!" },
    viewerCanRequestApproval: { __type: "Boolean!" },
    viewerHasPurchased: { __type: "Boolean!" },
    viewerHasPurchasedForAllOrganizations: { __type: "Boolean!" },
    viewerIsListingAdmin: { __type: "Boolean!" },
  },
  MarketplaceListingConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[MarketplaceListingEdge]" },
    nodes: { __type: "[MarketplaceListing]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  MarketplaceListingEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "MarketplaceListing" },
  },
  MemberStatusable: {
    __typename: { __type: "String!" },
    memberStatuses: {
      __type: "UserStatusConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "UserStatusOrder",
      },
    },
    $on: { __type: "$MemberStatusable!" },
  },
  MembersCanDeleteReposClearAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    enterpriseResourcePath: { __type: "URI" },
    enterpriseSlug: { __type: "String" },
    enterpriseUrl: { __type: "URI" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  MembersCanDeleteReposDisableAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    enterpriseResourcePath: { __type: "URI" },
    enterpriseSlug: { __type: "String" },
    enterpriseUrl: { __type: "URI" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  MembersCanDeleteReposEnableAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    enterpriseResourcePath: { __type: "URI" },
    enterpriseSlug: { __type: "String" },
    enterpriseUrl: { __type: "URI" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  MentionedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
  },
  MergeBranchInput: {
    authorEmail: { __type: "String" },
    base: { __type: "String!" },
    clientMutationId: { __type: "String" },
    commitMessage: { __type: "String" },
    head: { __type: "String!" },
    repositoryId: { __type: "ID!" },
  },
  MergeBranchPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    mergeCommit: { __type: "Commit" },
  },
  MergePullRequestInput: {
    authorEmail: { __type: "String" },
    clientMutationId: { __type: "String" },
    commitBody: { __type: "String" },
    commitHeadline: { __type: "String" },
    expectedHeadOid: { __type: "GitObjectID" },
    mergeMethod: { __type: "PullRequestMergeMethod" },
    pullRequestId: { __type: "ID!" },
  },
  MergePullRequestPayload: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    clientMutationId: { __type: "String" },
    pullRequest: { __type: "PullRequest" },
  },
  MergeQueue: {
    __typename: { __type: "String!" },
    configuration: { __type: "MergeQueueConfiguration" },
    entries: {
      __type: "MergeQueueEntryConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    id: { __type: "ID!" },
    nextEntryEstimatedTimeToMerge: { __type: "Int" },
    repository: { __type: "Repository" },
    resourcePath: { __type: "URI!" },
    url: { __type: "URI!" },
  },
  MergeQueueConfiguration: {
    __typename: { __type: "String!" },
    checkResponseTimeout: { __type: "Int" },
    maximumEntriesToBuild: { __type: "Int" },
    maximumEntriesToMerge: { __type: "Int" },
    mergeMethod: { __type: "PullRequestMergeMethod" },
    mergingStrategy: { __type: "MergeQueueMergingStrategy" },
    minimumEntriesToMerge: { __type: "Int" },
    minimumEntriesToMergeWaitTime: { __type: "Int" },
  },
  MergeQueueEntry: {
    __typename: { __type: "String!" },
    baseCommit: { __type: "Commit" },
    enqueuedAt: { __type: "DateTime!" },
    enqueuer: { __type: "Actor!" },
    estimatedTimeToMerge: { __type: "Int" },
    headCommit: { __type: "Commit" },
    id: { __type: "ID!" },
    jump: { __type: "Boolean!" },
    mergeQueue: { __type: "MergeQueue" },
    position: { __type: "Int!" },
    pullRequest: { __type: "PullRequest" },
    solo: { __type: "Boolean!" },
    state: { __type: "MergeQueueEntryState!" },
  },
  MergeQueueEntryConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[MergeQueueEntryEdge]" },
    nodes: { __type: "[MergeQueueEntry]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  MergeQueueEntryEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "MergeQueueEntry" },
  },
  MergedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    commit: { __type: "Commit" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    mergeRef: { __type: "Ref" },
    mergeRefName: { __type: "String!" },
    pullRequest: { __type: "PullRequest!" },
    resourcePath: { __type: "URI!" },
    url: { __type: "URI!" },
  },
  Migration: {
    __typename: { __type: "String!" },
    continueOnError: { __type: "Boolean!" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "String" },
    failureReason: { __type: "String" },
    id: { __type: "ID!" },
    migrationLogUrl: { __type: "URI" },
    migrationSource: { __type: "MigrationSource!" },
    repositoryName: { __type: "String!" },
    sourceUrl: { __type: "URI!" },
    state: { __type: "MigrationState!" },
    warningsCount: { __type: "Int!" },
    $on: { __type: "$Migration!" },
  },
  MigrationSource: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    name: { __type: "String!" },
    type: { __type: "MigrationSourceType!" },
    url: { __type: "URI!" },
  },
  Milestone: {
    __typename: { __type: "String!" },
    closed: { __type: "Boolean!" },
    closedAt: { __type: "DateTime" },
    createdAt: { __type: "DateTime!" },
    creator: { __type: "Actor" },
    description: { __type: "String" },
    dueOn: { __type: "DateTime" },
    id: { __type: "ID!" },
    issues: {
      __type: "IssueConnection!",
      __args: {
        after: "String",
        before: "String",
        filterBy: "IssueFilters",
        first: "Int",
        labels: "[String!]",
        last: "Int",
        orderBy: "IssueOrder",
        states: "[IssueState!]",
      },
    },
    number: { __type: "Int!" },
    progressPercentage: { __type: "Float!" },
    pullRequests: {
      __type: "PullRequestConnection!",
      __args: {
        after: "String",
        baseRefName: "String",
        before: "String",
        first: "Int",
        headRefName: "String",
        labels: "[String!]",
        last: "Int",
        orderBy: "IssueOrder",
        states: "[PullRequestState!]",
      },
    },
    repository: { __type: "Repository!" },
    resourcePath: { __type: "URI!" },
    state: { __type: "MilestoneState!" },
    title: { __type: "String!" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    viewerCanClose: { __type: "Boolean!" },
    viewerCanReopen: { __type: "Boolean!" },
  },
  MilestoneConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[MilestoneEdge]" },
    nodes: { __type: "[Milestone]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  MilestoneEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Milestone" },
  },
  MilestoneItem: {
    __typename: { __type: "String!" },
    $on: { __type: "$MilestoneItem!" },
  },
  MilestoneOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "MilestoneOrderField!" },
  },
  MilestonedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    milestoneTitle: { __type: "String!" },
    subject: { __type: "MilestoneItem!" },
  },
  Minimizable: {
    __typename: { __type: "String!" },
    isMinimized: { __type: "Boolean!" },
    minimizedReason: { __type: "String" },
    viewerCanMinimize: { __type: "Boolean!" },
    $on: { __type: "$Minimizable!" },
  },
  MinimizeCommentInput: {
    classifier: { __type: "ReportedContentClassifiers!" },
    clientMutationId: { __type: "String" },
    subjectId: { __type: "ID!" },
  },
  MinimizeCommentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    minimizedComment: { __type: "Minimizable" },
  },
  MoveProjectCardInput: {
    afterCardId: { __type: "ID" },
    cardId: { __type: "ID!" },
    clientMutationId: { __type: "String" },
    columnId: { __type: "ID!" },
  },
  MoveProjectCardPayload: {
    __typename: { __type: "String!" },
    cardEdge: { __type: "ProjectCardEdge" },
    clientMutationId: { __type: "String" },
  },
  MoveProjectColumnInput: {
    afterColumnId: { __type: "ID" },
    clientMutationId: { __type: "String" },
    columnId: { __type: "ID!" },
  },
  MoveProjectColumnPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    columnEdge: { __type: "ProjectColumnEdge" },
  },
  MovedColumnsInProjectEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
  },
  Node: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    $on: { __type: "$Node!" },
  },
  NotificationThread: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    isArchived: { __type: "Boolean!" },
    isDone: { __type: "Boolean!" },
    isSaved: { __type: "Boolean!" },
    isStarred: { __type: "Boolean!" },
    isUnread: { __type: "Boolean!" },
    lastReadAt: { __type: "DateTime" },
    lastSummarizedAt: { __type: "DateTime!" },
    lastUpdatedAt: { __type: "DateTime!" },
    list: { __type: "NotificationsList!" },
    listId: { __type: "String!" },
    listType: { __type: "String!" },
    oldestUnreadItemAnchor: { __type: "String" },
    reason: { __type: "NotificationReason" },
    recentParticipants: { __type: "[User!]!" },
    subject: { __type: "NotificationsSubject!" },
    subscriptionStatus: { __type: "NotificationThreadSubscriptionState!" },
    summaryId: { __type: "String!" },
    summaryItemAuthor: { __type: "User" },
    summaryItemBody: { __type: "String" },
    threadId: { __type: "String!" },
    threadType: { __type: "String!" },
    title: { __type: "String!" },
    unreadItemsCount: { __type: "Int!" },
    url: { __type: "URI!" },
  },
  NotificationThreadConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[NotificationThreadEdge]" },
    nodes: { __type: "[NotificationThread]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  NotificationThreadEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "NotificationThread" },
  },
  NotificationThreadFilters: {
    listIds: { __type: "[ID!]" },
    reasons: { __type: "[NotificationReason!]" },
    savedOnly: { __type: "Boolean" },
    starredOnly: { __type: "Boolean" },
    statuses: { __type: "[NotificationStatus!]" },
    threadTypes: { __type: "[String!]" },
  },
  NotificationsList: {
    __typename: { __type: "String!" },
    $on: { __type: "$NotificationsList!" },
  },
  NotificationsSubject: {
    __typename: { __type: "String!" },
    $on: { __type: "$NotificationsSubject!" },
  },
  OIDCProvider: {
    __typename: { __type: "String!" },
    enterprise: { __type: "Enterprise" },
    externalIdentities: {
      __type: "ExternalIdentityConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        login: "String",
        membersOnly: "Boolean",
        userName: "String",
      },
    },
    id: { __type: "ID!" },
    providerType: { __type: "OIDCProviderType!" },
    tenantId: { __type: "String!" },
  },
  OauthApplicationAuditEntryData: {
    __typename: { __type: "String!" },
    oauthApplicationName: { __type: "String" },
    oauthApplicationResourcePath: { __type: "URI" },
    oauthApplicationUrl: { __type: "URI" },
    $on: { __type: "$OauthApplicationAuditEntryData!" },
  },
  OauthApplicationCreateAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    applicationUrl: { __type: "URI" },
    callbackUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    oauthApplicationName: { __type: "String" },
    oauthApplicationResourcePath: { __type: "URI" },
    oauthApplicationUrl: { __type: "URI" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    rateLimit: { __type: "Int" },
    state: { __type: "OauthApplicationCreateAuditEntryState" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgAddBillingManagerAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    invitationEmail: { __type: "String" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgAddMemberAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    permission: { __type: "OrgAddMemberAuditEntryPermission" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgBlockUserAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    blockedUser: { __type: "User" },
    blockedUserName: { __type: "String" },
    blockedUserResourcePath: { __type: "URI" },
    blockedUserUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgConfigDisableCollaboratorsOnlyAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgConfigEnableCollaboratorsOnlyAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgCreateAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    billingPlan: { __type: "OrgCreateAuditEntryBillingPlan" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgDisableOauthAppRestrictionsAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgDisableSamlAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    digestMethodUrl: { __type: "URI" },
    id: { __type: "ID!" },
    issuerUrl: { __type: "URI" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    signatureMethodUrl: { __type: "URI" },
    singleSignOnUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgDisableTwoFactorRequirementAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgEnableOauthAppRestrictionsAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgEnableSamlAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    digestMethodUrl: { __type: "URI" },
    id: { __type: "ID!" },
    issuerUrl: { __type: "URI" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    signatureMethodUrl: { __type: "URI" },
    singleSignOnUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgEnableTwoFactorRequirementAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgEnterpriseOwnerOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "OrgEnterpriseOwnerOrderField!" },
  },
  OrgInviteMemberAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    email: { __type: "String" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationInvitation: { __type: "OrganizationInvitation" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgInviteToBusinessAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    enterpriseResourcePath: { __type: "URI" },
    enterpriseSlug: { __type: "String" },
    enterpriseUrl: { __type: "URI" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgOauthAppAccessApprovedAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    oauthApplicationName: { __type: "String" },
    oauthApplicationResourcePath: { __type: "URI" },
    oauthApplicationUrl: { __type: "URI" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgOauthAppAccessBlockedAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    oauthApplicationName: { __type: "String" },
    oauthApplicationResourcePath: { __type: "URI" },
    oauthApplicationUrl: { __type: "URI" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgOauthAppAccessDeniedAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    oauthApplicationName: { __type: "String" },
    oauthApplicationResourcePath: { __type: "URI" },
    oauthApplicationUrl: { __type: "URI" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgOauthAppAccessRequestedAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    oauthApplicationName: { __type: "String" },
    oauthApplicationResourcePath: { __type: "URI" },
    oauthApplicationUrl: { __type: "URI" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgOauthAppAccessUnblockedAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    oauthApplicationName: { __type: "String" },
    oauthApplicationResourcePath: { __type: "URI" },
    oauthApplicationUrl: { __type: "URI" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgRemoveBillingManagerAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    reason: { __type: "OrgRemoveBillingManagerAuditEntryReason" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgRemoveMemberAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    membershipTypes: { __type: "[OrgRemoveMemberAuditEntryMembershipType!]" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    reason: { __type: "OrgRemoveMemberAuditEntryReason" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgRemoveOutsideCollaboratorAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    membershipTypes: {
      __type: "[OrgRemoveOutsideCollaboratorAuditEntryMembershipType!]",
    },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    reason: { __type: "OrgRemoveOutsideCollaboratorAuditEntryReason" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgRestoreMemberAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    restoredCustomEmailRoutingsCount: { __type: "Int" },
    restoredIssueAssignmentsCount: { __type: "Int" },
    restoredMemberships: { __type: "[OrgRestoreMemberAuditEntryMembership!]" },
    restoredMembershipsCount: { __type: "Int" },
    restoredRepositoriesCount: { __type: "Int" },
    restoredRepositoryStarsCount: { __type: "Int" },
    restoredRepositoryWatchesCount: { __type: "Int" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgRestoreMemberAuditEntryMembership: {
    __typename: { __type: "String!" },
    $on: { __type: "$OrgRestoreMemberAuditEntryMembership!" },
  },
  OrgRestoreMemberMembershipOrganizationAuditEntryData: {
    __typename: { __type: "String!" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
  },
  OrgRestoreMemberMembershipRepositoryAuditEntryData: {
    __typename: { __type: "String!" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
  },
  OrgRestoreMemberMembershipTeamAuditEntryData: {
    __typename: { __type: "String!" },
    team: { __type: "Team" },
    teamName: { __type: "String" },
    teamResourcePath: { __type: "URI" },
    teamUrl: { __type: "URI" },
  },
  OrgUnblockUserAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    blockedUser: { __type: "User" },
    blockedUserName: { __type: "String" },
    blockedUserResourcePath: { __type: "URI" },
    blockedUserUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgUpdateDefaultRepositoryPermissionAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    permission: {
      __type: "OrgUpdateDefaultRepositoryPermissionAuditEntryPermission",
    },
    permissionWas: {
      __type: "OrgUpdateDefaultRepositoryPermissionAuditEntryPermission",
    },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgUpdateMemberAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    permission: { __type: "OrgUpdateMemberAuditEntryPermission" },
    permissionWas: { __type: "OrgUpdateMemberAuditEntryPermission" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  OrgUpdateMemberRepositoryCreationPermissionAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    canCreateRepositories: { __type: "Boolean" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
    visibility: {
      __type: "OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility",
    },
  },
  OrgUpdateMemberRepositoryInvitationPermissionAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    canInviteOutsideCollaboratorsToRepositories: { __type: "Boolean" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  Organization: {
    __typename: { __type: "String!" },
    announcement: { __type: "String" },
    announcementExpiresAt: { __type: "DateTime" },
    announcementUserDismissible: { __type: "Boolean" },
    anyPinnableItems: {
      __type: "Boolean!",
      __args: { type: "PinnableItemType" },
    },
    archivedAt: { __type: "DateTime" },
    auditLog: {
      __type: "OrganizationAuditEntryConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "AuditLogOrder",
        query: "String",
      },
    },
    avatarUrl: { __type: "URI!", __args: { size: "Int" } },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    description: { __type: "String" },
    descriptionHTML: { __type: "String" },
    domains: {
      __type: "VerifiableDomainConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        isApproved: "Boolean",
        isVerified: "Boolean",
        last: "Int",
        orderBy: "VerifiableDomainOrder",
      },
    },
    email: { __type: "String" },
    enterpriseOwners: {
      __type: "OrganizationEnterpriseOwnerConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "OrgEnterpriseOwnerOrder",
        organizationRole: "RoleInOrganization",
        query: "String",
      },
    },
    estimatedNextSponsorsPayoutInCents: { __type: "Int!" },
    hasSponsorsListing: { __type: "Boolean!" },
    id: { __type: "ID!" },
    interactionAbility: { __type: "RepositoryInteractionAbility" },
    ipAllowListEnabledSetting: { __type: "IpAllowListEnabledSettingValue!" },
    ipAllowListEntries: {
      __type: "IpAllowListEntryConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "IpAllowListEntryOrder",
      },
    },
    ipAllowListForInstalledAppsEnabledSetting: {
      __type: "IpAllowListForInstalledAppsEnabledSettingValue!",
    },
    isSponsoredBy: { __type: "Boolean!", __args: { accountLogin: "String!" } },
    isSponsoringViewer: { __type: "Boolean!" },
    isVerified: { __type: "Boolean!" },
    itemShowcase: { __type: "ProfileItemShowcase!" },
    location: { __type: "String" },
    login: { __type: "String!" },
    mannequins: {
      __type: "MannequinConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        login: "String",
        orderBy: "MannequinOrder",
      },
    },
    memberStatuses: {
      __type: "UserStatusConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "UserStatusOrder",
      },
    },
    membersCanForkPrivateRepositories: { __type: "Boolean!" },
    membersWithRole: {
      __type: "OrganizationMemberConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    monthlyEstimatedSponsorsIncomeInCents: { __type: "Int!" },
    name: { __type: "String" },
    newTeamResourcePath: { __type: "URI!" },
    newTeamUrl: { __type: "URI!" },
    notificationDeliveryRestrictionEnabledSetting: {
      __type: "NotificationRestrictionSettingValue!",
    },
    organizationBillingEmail: { __type: "String" },
    packages: {
      __type: "PackageConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        names: "[String]",
        orderBy: "PackageOrder",
        packageType: "PackageType",
        repositoryId: "ID",
      },
    },
    pendingMembers: {
      __type: "UserConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    pinnableItems: {
      __type: "PinnableItemConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        types: "[PinnableItemType!]",
      },
    },
    pinnedItems: {
      __type: "PinnableItemConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        types: "[PinnableItemType!]",
      },
    },
    pinnedItemsRemaining: { __type: "Int!" },
    project: { __type: "Project", __args: { number: "Int!" } },
    projectV2: { __type: "ProjectV2", __args: { number: "Int!" } },
    projects: {
      __type: "ProjectConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectOrder",
        search: "String",
        states: "[ProjectState!]",
      },
    },
    projectsResourcePath: { __type: "URI!" },
    projectsUrl: { __type: "URI!" },
    projectsV2: {
      __type: "ProjectV2Connection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectV2Order",
        query: "String",
      },
    },
    recentProjects: {
      __type: "ProjectV2Connection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    repositories: {
      __type: "RepositoryConnection!",
      __args: {
        affiliations: "[RepositoryAffiliation]",
        after: "String",
        before: "String",
        first: "Int",
        hasIssuesEnabled: "Boolean",
        isArchived: "Boolean",
        isFork: "Boolean",
        isLocked: "Boolean",
        last: "Int",
        orderBy: "RepositoryOrder",
        ownerAffiliations: "[RepositoryAffiliation]",
        privacy: "RepositoryPrivacy",
      },
    },
    repository: {
      __type: "Repository",
      __args: { followRenames: "Boolean", name: "String!" },
    },
    repositoryDiscussionComments: {
      __type: "DiscussionCommentConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        onlyAnswers: "Boolean",
        repositoryId: "ID",
      },
    },
    repositoryDiscussions: {
      __type: "DiscussionConnection!",
      __args: {
        after: "String",
        answered: "Boolean",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "DiscussionOrder",
        repositoryId: "ID",
        states: "[DiscussionState!]",
      },
    },
    repositoryMigrations: {
      __type: "RepositoryMigrationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "RepositoryMigrationOrder",
        repositoryName: "String",
        state: "MigrationState",
      },
    },
    requiresTwoFactorAuthentication: { __type: "Boolean" },
    resourcePath: { __type: "URI!" },
    ruleset: { __type: "RepositoryRuleset", __args: { databaseId: "Int!" } },
    rulesets: {
      __type: "RepositoryRulesetConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        includeParents: "Boolean",
        last: "Int",
      },
    },
    samlIdentityProvider: { __type: "OrganizationIdentityProvider" },
    sponsoring: {
      __type: "SponsorConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "SponsorOrder",
      },
    },
    sponsors: {
      __type: "SponsorConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "SponsorOrder",
        tierId: "ID",
      },
    },
    sponsorsActivities: {
      __type: "SponsorsActivityConnection!",
      __args: {
        actions: "[SponsorsActivityAction!]",
        after: "String",
        before: "String",
        first: "Int",
        includeAsSponsor: "Boolean",
        includePrivate: "Boolean",
        last: "Int",
        orderBy: "SponsorsActivityOrder",
        period: "SponsorsActivityPeriod",
        since: "DateTime",
        until: "DateTime",
      },
    },
    sponsorsListing: { __type: "SponsorsListing" },
    sponsorshipForViewerAsSponsor: {
      __type: "Sponsorship",
      __args: { activeOnly: "Boolean" },
    },
    sponsorshipForViewerAsSponsorable: {
      __type: "Sponsorship",
      __args: { activeOnly: "Boolean" },
    },
    sponsorshipNewsletters: {
      __type: "SponsorshipNewsletterConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "SponsorshipNewsletterOrder",
      },
    },
    sponsorshipsAsMaintainer: {
      __type: "SponsorshipConnection!",
      __args: {
        activeOnly: "Boolean",
        after: "String",
        before: "String",
        first: "Int",
        includePrivate: "Boolean",
        last: "Int",
        orderBy: "SponsorshipOrder",
      },
    },
    sponsorshipsAsSponsor: {
      __type: "SponsorshipConnection!",
      __args: {
        activeOnly: "Boolean",
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        maintainerLogins: "[String!]",
        orderBy: "SponsorshipOrder",
      },
    },
    team: { __type: "Team", __args: { slug: "String!" } },
    teams: {
      __type: "TeamConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        ldapMapped: "Boolean",
        notificationSetting: "TeamNotificationSetting",
        orderBy: "TeamOrder",
        privacy: "TeamPrivacy",
        query: "String",
        role: "TeamRole",
        rootTeamsOnly: "Boolean",
        userLogins: "[String!]",
      },
    },
    teamsResourcePath: { __type: "URI!" },
    teamsUrl: { __type: "URI!" },
    totalSponsorshipAmountAsSponsorInCents: {
      __type: "Int",
      __args: {
        since: "DateTime",
        sponsorableLogins: "[String!]",
        until: "DateTime",
      },
    },
    twitterUsername: { __type: "String" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    viewerCanAdminister: { __type: "Boolean!" },
    viewerCanChangePinnedItems: { __type: "Boolean!" },
    viewerCanCreateProjects: { __type: "Boolean!" },
    viewerCanCreateRepositories: { __type: "Boolean!" },
    viewerCanCreateTeams: { __type: "Boolean!" },
    viewerCanSponsor: { __type: "Boolean!" },
    viewerIsAMember: { __type: "Boolean!" },
    viewerIsFollowing: { __type: "Boolean!" },
    viewerIsSponsoring: { __type: "Boolean!" },
    webCommitSignoffRequired: { __type: "Boolean!" },
    websiteUrl: { __type: "URI" },
  },
  OrganizationAuditEntry: {
    __typename: { __type: "String!" },
    $on: { __type: "$OrganizationAuditEntry!" },
  },
  OrganizationAuditEntryConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[OrganizationAuditEntryEdge]" },
    nodes: { __type: "[OrganizationAuditEntry]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  OrganizationAuditEntryData: {
    __typename: { __type: "String!" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    $on: { __type: "$OrganizationAuditEntryData!" },
  },
  OrganizationAuditEntryEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "OrganizationAuditEntry" },
  },
  OrganizationConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[OrganizationEdge]" },
    nodes: { __type: "[Organization]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  OrganizationEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Organization" },
  },
  OrganizationEnterpriseOwnerConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[OrganizationEnterpriseOwnerEdge]" },
    nodes: { __type: "[User]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  OrganizationEnterpriseOwnerEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "User" },
    organizationRole: { __type: "RoleInOrganization!" },
  },
  OrganizationIdentityProvider: {
    __typename: { __type: "String!" },
    digestMethod: { __type: "URI" },
    externalIdentities: {
      __type: "ExternalIdentityConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        login: "String",
        membersOnly: "Boolean",
        userName: "String",
      },
    },
    id: { __type: "ID!" },
    idpCertificate: { __type: "X509Certificate" },
    issuer: { __type: "String" },
    organization: { __type: "Organization" },
    signatureMethod: { __type: "URI" },
    ssoUrl: { __type: "URI" },
  },
  OrganizationInvitation: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    email: { __type: "String" },
    id: { __type: "ID!" },
    invitationSource: { __type: "OrganizationInvitationSource!" },
    invitationType: { __type: "OrganizationInvitationType!" },
    invitee: { __type: "User" },
    inviter: { __type: "User!" },
    organization: { __type: "Organization!" },
    role: { __type: "OrganizationInvitationRole!" },
  },
  OrganizationInvitationConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[OrganizationInvitationEdge]" },
    nodes: { __type: "[OrganizationInvitation]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  OrganizationInvitationEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "OrganizationInvitation" },
  },
  OrganizationMemberConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[OrganizationMemberEdge]" },
    nodes: { __type: "[User]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  OrganizationMemberEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    hasTwoFactorEnabled: { __type: "Boolean" },
    node: { __type: "User" },
    role: { __type: "OrganizationMemberRole" },
  },
  OrganizationMigration: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "String" },
    failureReason: { __type: "String" },
    id: { __type: "ID!" },
    remainingRepositoriesCount: { __type: "Int" },
    sourceOrgName: { __type: "String!" },
    sourceOrgUrl: { __type: "URI!" },
    state: { __type: "OrganizationMigrationState!" },
    targetOrgName: { __type: "String!" },
    totalRepositoriesCount: { __type: "Int" },
  },
  OrganizationOrUser: {
    __typename: { __type: "String!" },
    $on: { __type: "$OrganizationOrUser!" },
  },
  OrganizationOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "OrganizationOrderField!" },
  },
  OrganizationTeamsHovercardContext: {
    __typename: { __type: "String!" },
    message: { __type: "String!" },
    octicon: { __type: "String!" },
    relevantTeams: {
      __type: "TeamConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    teamsResourcePath: { __type: "URI!" },
    teamsUrl: { __type: "URI!" },
    totalTeamCount: { __type: "Int!" },
  },
  OrganizationsHovercardContext: {
    __typename: { __type: "String!" },
    message: { __type: "String!" },
    octicon: { __type: "String!" },
    relevantOrganizations: {
      __type: "OrganizationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "OrganizationOrder",
      },
    },
    totalOrganizationCount: { __type: "Int!" },
  },
  Package: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    latestVersion: { __type: "PackageVersion" },
    name: { __type: "String!" },
    packageType: { __type: "PackageType!" },
    repository: { __type: "Repository" },
    statistics: { __type: "PackageStatistics" },
    version: { __type: "PackageVersion", __args: { version: "String!" } },
    versions: {
      __type: "PackageVersionConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "PackageVersionOrder",
      },
    },
  },
  PackageConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PackageEdge]" },
    nodes: { __type: "[Package]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  PackageEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Package" },
  },
  PackageFile: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    md5: { __type: "String" },
    name: { __type: "String!" },
    packageVersion: { __type: "PackageVersion" },
    sha1: { __type: "String" },
    sha256: { __type: "String" },
    size: { __type: "Int" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI" },
  },
  PackageFileConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PackageFileEdge]" },
    nodes: { __type: "[PackageFile]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  PackageFileEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "PackageFile" },
  },
  PackageFileOrder: {
    direction: { __type: "OrderDirection" },
    field: { __type: "PackageFileOrderField" },
  },
  PackageOrder: {
    direction: { __type: "OrderDirection" },
    field: { __type: "PackageOrderField" },
  },
  PackageOwner: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    packages: {
      __type: "PackageConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        names: "[String]",
        orderBy: "PackageOrder",
        packageType: "PackageType",
        repositoryId: "ID",
      },
    },
    $on: { __type: "$PackageOwner!" },
  },
  PackageStatistics: {
    __typename: { __type: "String!" },
    downloadsTotalCount: { __type: "Int!" },
  },
  PackageTag: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    name: { __type: "String!" },
    version: { __type: "PackageVersion" },
  },
  PackageVersion: {
    __typename: { __type: "String!" },
    files: {
      __type: "PackageFileConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "PackageFileOrder",
      },
    },
    id: { __type: "ID!" },
    package: { __type: "Package" },
    platform: { __type: "String" },
    preRelease: { __type: "Boolean!" },
    readme: { __type: "String" },
    release: { __type: "Release" },
    statistics: { __type: "PackageVersionStatistics" },
    summary: { __type: "String" },
    version: { __type: "String!" },
  },
  PackageVersionConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PackageVersionEdge]" },
    nodes: { __type: "[PackageVersion]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  PackageVersionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "PackageVersion" },
  },
  PackageVersionOrder: {
    direction: { __type: "OrderDirection" },
    field: { __type: "PackageVersionOrderField" },
  },
  PackageVersionStatistics: {
    __typename: { __type: "String!" },
    downloadsTotalCount: { __type: "Int!" },
  },
  PageInfo: {
    __typename: { __type: "String!" },
    endCursor: { __type: "String" },
    hasNextPage: { __type: "Boolean!" },
    hasPreviousPage: { __type: "Boolean!" },
    startCursor: { __type: "String" },
  },
  PermissionGranter: {
    __typename: { __type: "String!" },
    $on: { __type: "$PermissionGranter!" },
  },
  PermissionSource: {
    __typename: { __type: "String!" },
    organization: { __type: "Organization!" },
    permission: { __type: "DefaultRepositoryPermissionField!" },
    roleName: { __type: "String" },
    source: { __type: "PermissionGranter!" },
  },
  PinIssueInput: {
    clientMutationId: { __type: "String" },
    issueId: { __type: "ID!" },
  },
  PinIssuePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    issue: { __type: "Issue" },
  },
  PinnableItem: {
    __typename: { __type: "String!" },
    $on: { __type: "$PinnableItem!" },
  },
  PinnableItemConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PinnableItemEdge]" },
    nodes: { __type: "[PinnableItem]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  PinnableItemEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "PinnableItem" },
  },
  PinnedDiscussion: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    discussion: { __type: "Discussion!" },
    gradientStopColors: { __type: "[String!]!" },
    id: { __type: "ID!" },
    pattern: { __type: "PinnedDiscussionPattern!" },
    pinnedBy: { __type: "Actor!" },
    preconfiguredGradient: { __type: "PinnedDiscussionGradient" },
    repository: { __type: "Repository!" },
    updatedAt: { __type: "DateTime!" },
  },
  PinnedDiscussionConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PinnedDiscussionEdge]" },
    nodes: { __type: "[PinnedDiscussion]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  PinnedDiscussionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "PinnedDiscussion" },
  },
  PinnedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    issue: { __type: "Issue!" },
  },
  PinnedIssue: {
    __typename: { __type: "String!" },
    databaseId: { __type: "Int" },
    fullDatabaseId: { __type: "BigInt" },
    id: { __type: "ID!" },
    issue: { __type: "Issue!" },
    pinnedBy: { __type: "Actor!" },
    repository: { __type: "Repository!" },
  },
  PinnedIssueConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PinnedIssueEdge]" },
    nodes: { __type: "[PinnedIssue]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  PinnedIssueEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "PinnedIssue" },
  },
  PrivateRepositoryForkingDisableAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    enterpriseResourcePath: { __type: "URI" },
    enterpriseSlug: { __type: "String" },
    enterpriseUrl: { __type: "URI" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  PrivateRepositoryForkingEnableAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    enterpriseResourcePath: { __type: "URI" },
    enterpriseSlug: { __type: "String" },
    enterpriseUrl: { __type: "URI" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  ProfileItemShowcase: {
    __typename: { __type: "String!" },
    hasPinnedItems: { __type: "Boolean!" },
    items: {
      __type: "PinnableItemConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
  },
  ProfileOwner: {
    __typename: { __type: "String!" },
    anyPinnableItems: {
      __type: "Boolean!",
      __args: { type: "PinnableItemType" },
    },
    email: { __type: "String" },
    id: { __type: "ID!" },
    itemShowcase: { __type: "ProfileItemShowcase!" },
    location: { __type: "String" },
    login: { __type: "String!" },
    name: { __type: "String" },
    pinnableItems: {
      __type: "PinnableItemConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        types: "[PinnableItemType!]",
      },
    },
    pinnedItems: {
      __type: "PinnableItemConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        types: "[PinnableItemType!]",
      },
    },
    pinnedItemsRemaining: { __type: "Int!" },
    viewerCanChangePinnedItems: { __type: "Boolean!" },
    websiteUrl: { __type: "URI" },
    $on: { __type: "$ProfileOwner!" },
  },
  Project: {
    __typename: { __type: "String!" },
    body: { __type: "String" },
    bodyHTML: { __type: "HTML!" },
    closed: { __type: "Boolean!" },
    closedAt: { __type: "DateTime" },
    columns: {
      __type: "ProjectColumnConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    createdAt: { __type: "DateTime!" },
    creator: { __type: "Actor" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
    name: { __type: "String!" },
    number: { __type: "Int!" },
    owner: { __type: "ProjectOwner!" },
    pendingCards: {
      __type: "ProjectCardConnection!",
      __args: {
        after: "String",
        archivedStates: "[ProjectCardArchivedState]",
        before: "String",
        first: "Int",
        last: "Int",
      },
    },
    progress: { __type: "ProjectProgress!" },
    resourcePath: { __type: "URI!" },
    state: { __type: "ProjectState!" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    viewerCanClose: { __type: "Boolean!" },
    viewerCanReopen: { __type: "Boolean!" },
    viewerCanUpdate: { __type: "Boolean!" },
  },
  ProjectCard: {
    __typename: { __type: "String!" },
    column: { __type: "ProjectColumn" },
    content: { __type: "ProjectCardItem" },
    createdAt: { __type: "DateTime!" },
    creator: { __type: "Actor" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
    isArchived: { __type: "Boolean!" },
    note: { __type: "String" },
    project: { __type: "Project!" },
    resourcePath: { __type: "URI!" },
    state: { __type: "ProjectCardState" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
  },
  ProjectCardConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ProjectCardEdge]" },
    nodes: { __type: "[ProjectCard]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ProjectCardEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "ProjectCard" },
  },
  ProjectCardItem: {
    __typename: { __type: "String!" },
    $on: { __type: "$ProjectCardItem!" },
  },
  ProjectColumn: {
    __typename: { __type: "String!" },
    cards: {
      __type: "ProjectCardConnection!",
      __args: {
        after: "String",
        archivedStates: "[ProjectCardArchivedState]",
        before: "String",
        first: "Int",
        last: "Int",
      },
    },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
    name: { __type: "String!" },
    project: { __type: "Project!" },
    purpose: { __type: "ProjectColumnPurpose" },
    resourcePath: { __type: "URI!" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
  },
  ProjectColumnConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ProjectColumnEdge]" },
    nodes: { __type: "[ProjectColumn]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ProjectColumnEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "ProjectColumn" },
  },
  ProjectConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ProjectEdge]" },
    nodes: { __type: "[Project]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ProjectEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Project" },
  },
  ProjectOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "ProjectOrderField!" },
  },
  ProjectOwner: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    project: { __type: "Project", __args: { number: "Int!" } },
    projects: {
      __type: "ProjectConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectOrder",
        search: "String",
        states: "[ProjectState!]",
      },
    },
    projectsResourcePath: { __type: "URI!" },
    projectsUrl: { __type: "URI!" },
    viewerCanCreateProjects: { __type: "Boolean!" },
    $on: { __type: "$ProjectOwner!" },
  },
  ProjectProgress: {
    __typename: { __type: "String!" },
    doneCount: { __type: "Int!" },
    donePercentage: { __type: "Float!" },
    enabled: { __type: "Boolean!" },
    inProgressCount: { __type: "Int!" },
    inProgressPercentage: { __type: "Float!" },
    todoCount: { __type: "Int!" },
    todoPercentage: { __type: "Float!" },
  },
  ProjectV2: {
    __typename: { __type: "String!" },
    closed: { __type: "Boolean!" },
    closedAt: { __type: "DateTime" },
    createdAt: { __type: "DateTime!" },
    creator: { __type: "Actor" },
    databaseId: { __type: "Int" },
    field: {
      __type: "ProjectV2FieldConfiguration",
      __args: { name: "String!" },
    },
    fields: {
      __type: "ProjectV2FieldConfigurationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectV2FieldOrder",
      },
    },
    id: { __type: "ID!" },
    items: {
      __type: "ProjectV2ItemConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectV2ItemOrder",
      },
    },
    number: { __type: "Int!" },
    owner: { __type: "ProjectV2Owner!" },
    public: { __type: "Boolean!" },
    readme: { __type: "String" },
    repositories: {
      __type: "RepositoryConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "RepositoryOrder",
      },
    },
    resourcePath: { __type: "URI!" },
    shortDescription: { __type: "String" },
    teams: {
      __type: "TeamConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "TeamOrder",
      },
    },
    template: { __type: "Boolean!" },
    title: { __type: "String!" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    view: { __type: "ProjectV2View", __args: { number: "Int!" } },
    viewerCanClose: { __type: "Boolean!" },
    viewerCanReopen: { __type: "Boolean!" },
    viewerCanUpdate: { __type: "Boolean!" },
    views: {
      __type: "ProjectV2ViewConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectV2ViewOrder",
      },
    },
    workflow: { __type: "ProjectV2Workflow", __args: { number: "Int!" } },
    workflows: {
      __type: "ProjectV2WorkflowConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectV2WorkflowOrder",
      },
    },
  },
  ProjectV2Actor: {
    __typename: { __type: "String!" },
    $on: { __type: "$ProjectV2Actor!" },
  },
  ProjectV2ActorConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ProjectV2ActorEdge]" },
    nodes: { __type: "[ProjectV2Actor]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ProjectV2ActorEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "ProjectV2Actor" },
  },
  ProjectV2Collaborator: {
    role: { __type: "ProjectV2Roles!" },
    teamId: { __type: "ID" },
    userId: { __type: "ID" },
  },
  ProjectV2Connection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ProjectV2Edge]" },
    nodes: { __type: "[ProjectV2]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ProjectV2Edge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "ProjectV2" },
  },
  ProjectV2Field: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    dataType: { __type: "ProjectV2FieldType!" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
    name: { __type: "String!" },
    project: { __type: "ProjectV2!" },
    updatedAt: { __type: "DateTime!" },
  },
  ProjectV2FieldCommon: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    dataType: { __type: "ProjectV2FieldType!" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
    name: { __type: "String!" },
    project: { __type: "ProjectV2!" },
    updatedAt: { __type: "DateTime!" },
    $on: { __type: "$ProjectV2FieldCommon!" },
  },
  ProjectV2FieldConfiguration: {
    __typename: { __type: "String!" },
    $on: { __type: "$ProjectV2FieldConfiguration!" },
  },
  ProjectV2FieldConfigurationConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ProjectV2FieldConfigurationEdge]" },
    nodes: { __type: "[ProjectV2FieldConfiguration]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ProjectV2FieldConfigurationEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "ProjectV2FieldConfiguration" },
  },
  ProjectV2FieldConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ProjectV2FieldEdge]" },
    nodes: { __type: "[ProjectV2Field]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ProjectV2FieldEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "ProjectV2Field" },
  },
  ProjectV2FieldOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "ProjectV2FieldOrderField!" },
  },
  ProjectV2FieldValue: {
    date: { __type: "Date" },
    iterationId: { __type: "String" },
    number: { __type: "Float" },
    singleSelectOptionId: { __type: "String" },
    text: { __type: "String" },
  },
  ProjectV2Filters: { state: { __type: "ProjectV2State" } },
  ProjectV2Item: {
    __typename: { __type: "String!" },
    content: { __type: "ProjectV2ItemContent" },
    createdAt: { __type: "DateTime!" },
    creator: { __type: "Actor" },
    databaseId: { __type: "Int" },
    fieldValueByName: {
      __type: "ProjectV2ItemFieldValue",
      __args: { name: "String!" },
    },
    fieldValues: {
      __type: "ProjectV2ItemFieldValueConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectV2ItemFieldValueOrder",
      },
    },
    id: { __type: "ID!" },
    isArchived: { __type: "Boolean!" },
    project: { __type: "ProjectV2!" },
    type: { __type: "ProjectV2ItemType!" },
    updatedAt: { __type: "DateTime!" },
  },
  ProjectV2ItemConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ProjectV2ItemEdge]" },
    nodes: { __type: "[ProjectV2Item]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ProjectV2ItemContent: {
    __typename: { __type: "String!" },
    $on: { __type: "$ProjectV2ItemContent!" },
  },
  ProjectV2ItemEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "ProjectV2Item" },
  },
  ProjectV2ItemFieldDateValue: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    creator: { __type: "Actor" },
    databaseId: { __type: "Int" },
    date: { __type: "Date" },
    field: { __type: "ProjectV2FieldConfiguration!" },
    id: { __type: "ID!" },
    item: { __type: "ProjectV2Item!" },
    updatedAt: { __type: "DateTime!" },
  },
  ProjectV2ItemFieldIterationValue: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    creator: { __type: "Actor" },
    databaseId: { __type: "Int" },
    duration: { __type: "Int!" },
    field: { __type: "ProjectV2FieldConfiguration!" },
    id: { __type: "ID!" },
    item: { __type: "ProjectV2Item!" },
    iterationId: { __type: "String!" },
    startDate: { __type: "Date!" },
    title: { __type: "String!" },
    titleHTML: { __type: "String!" },
    updatedAt: { __type: "DateTime!" },
  },
  ProjectV2ItemFieldLabelValue: {
    __typename: { __type: "String!" },
    field: { __type: "ProjectV2FieldConfiguration!" },
    labels: {
      __type: "LabelConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
  },
  ProjectV2ItemFieldMilestoneValue: {
    __typename: { __type: "String!" },
    field: { __type: "ProjectV2FieldConfiguration!" },
    milestone: { __type: "Milestone" },
  },
  ProjectV2ItemFieldNumberValue: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    creator: { __type: "Actor" },
    databaseId: { __type: "Int" },
    field: { __type: "ProjectV2FieldConfiguration!" },
    id: { __type: "ID!" },
    item: { __type: "ProjectV2Item!" },
    number: { __type: "Float" },
    updatedAt: { __type: "DateTime!" },
  },
  ProjectV2ItemFieldPullRequestValue: {
    __typename: { __type: "String!" },
    field: { __type: "ProjectV2FieldConfiguration!" },
    pullRequests: {
      __type: "PullRequestConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "PullRequestOrder",
      },
    },
  },
  ProjectV2ItemFieldRepositoryValue: {
    __typename: { __type: "String!" },
    field: { __type: "ProjectV2FieldConfiguration!" },
    repository: { __type: "Repository" },
  },
  ProjectV2ItemFieldReviewerValue: {
    __typename: { __type: "String!" },
    field: { __type: "ProjectV2FieldConfiguration!" },
    reviewers: {
      __type: "RequestedReviewerConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
  },
  ProjectV2ItemFieldSingleSelectValue: {
    __typename: { __type: "String!" },
    color: { __type: "ProjectV2SingleSelectFieldOptionColor!" },
    createdAt: { __type: "DateTime!" },
    creator: { __type: "Actor" },
    databaseId: { __type: "Int" },
    description: { __type: "String" },
    descriptionHTML: { __type: "String" },
    field: { __type: "ProjectV2FieldConfiguration!" },
    id: { __type: "ID!" },
    item: { __type: "ProjectV2Item!" },
    name: { __type: "String" },
    nameHTML: { __type: "String" },
    optionId: { __type: "String" },
    updatedAt: { __type: "DateTime!" },
  },
  ProjectV2ItemFieldTextValue: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    creator: { __type: "Actor" },
    databaseId: { __type: "Int" },
    field: { __type: "ProjectV2FieldConfiguration!" },
    id: { __type: "ID!" },
    item: { __type: "ProjectV2Item!" },
    text: { __type: "String" },
    updatedAt: { __type: "DateTime!" },
  },
  ProjectV2ItemFieldUserValue: {
    __typename: { __type: "String!" },
    field: { __type: "ProjectV2FieldConfiguration!" },
    users: {
      __type: "UserConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
  },
  ProjectV2ItemFieldValue: {
    __typename: { __type: "String!" },
    $on: { __type: "$ProjectV2ItemFieldValue!" },
  },
  ProjectV2ItemFieldValueCommon: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    creator: { __type: "Actor" },
    databaseId: { __type: "Int" },
    field: { __type: "ProjectV2FieldConfiguration!" },
    id: { __type: "ID!" },
    item: { __type: "ProjectV2Item!" },
    updatedAt: { __type: "DateTime!" },
    $on: { __type: "$ProjectV2ItemFieldValueCommon!" },
  },
  ProjectV2ItemFieldValueConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ProjectV2ItemFieldValueEdge]" },
    nodes: { __type: "[ProjectV2ItemFieldValue]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ProjectV2ItemFieldValueEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "ProjectV2ItemFieldValue" },
  },
  ProjectV2ItemFieldValueOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "ProjectV2ItemFieldValueOrderField!" },
  },
  ProjectV2ItemOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "ProjectV2ItemOrderField!" },
  },
  ProjectV2IterationField: {
    __typename: { __type: "String!" },
    configuration: { __type: "ProjectV2IterationFieldConfiguration!" },
    createdAt: { __type: "DateTime!" },
    dataType: { __type: "ProjectV2FieldType!" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
    name: { __type: "String!" },
    project: { __type: "ProjectV2!" },
    updatedAt: { __type: "DateTime!" },
  },
  ProjectV2IterationFieldConfiguration: {
    __typename: { __type: "String!" },
    completedIterations: { __type: "[ProjectV2IterationFieldIteration!]!" },
    duration: { __type: "Int!" },
    iterations: { __type: "[ProjectV2IterationFieldIteration!]!" },
    startDay: { __type: "Int!" },
  },
  ProjectV2IterationFieldIteration: {
    __typename: { __type: "String!" },
    duration: { __type: "Int!" },
    id: { __type: "String!" },
    startDate: { __type: "Date!" },
    title: { __type: "String!" },
    titleHTML: { __type: "String!" },
  },
  ProjectV2Order: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "ProjectV2OrderField!" },
  },
  ProjectV2Owner: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    projectV2: { __type: "ProjectV2", __args: { number: "Int!" } },
    projectsV2: {
      __type: "ProjectV2Connection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectV2Order",
        query: "String",
      },
    },
    $on: { __type: "$ProjectV2Owner!" },
  },
  ProjectV2Recent: {
    __typename: { __type: "String!" },
    recentProjects: {
      __type: "ProjectV2Connection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    $on: { __type: "$ProjectV2Recent!" },
  },
  ProjectV2SingleSelectField: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    dataType: { __type: "ProjectV2FieldType!" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
    name: { __type: "String!" },
    options: {
      __type: "[ProjectV2SingleSelectFieldOption!]!",
      __args: { names: "[String!]" },
    },
    project: { __type: "ProjectV2!" },
    updatedAt: { __type: "DateTime!" },
  },
  ProjectV2SingleSelectFieldOption: {
    __typename: { __type: "String!" },
    color: { __type: "ProjectV2SingleSelectFieldOptionColor!" },
    description: { __type: "String!" },
    descriptionHTML: { __type: "String!" },
    id: { __type: "String!" },
    name: { __type: "String!" },
    nameHTML: { __type: "String!" },
  },
  ProjectV2SingleSelectFieldOptionInput: {
    color: { __type: "ProjectV2SingleSelectFieldOptionColor!" },
    description: { __type: "String!" },
    name: { __type: "String!" },
  },
  ProjectV2SortBy: {
    __typename: { __type: "String!" },
    direction: { __type: "OrderDirection!" },
    field: { __type: "ProjectV2Field!" },
  },
  ProjectV2SortByConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ProjectV2SortByEdge]" },
    nodes: { __type: "[ProjectV2SortBy]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ProjectV2SortByEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "ProjectV2SortBy" },
  },
  ProjectV2SortByField: {
    __typename: { __type: "String!" },
    direction: { __type: "OrderDirection!" },
    field: { __type: "ProjectV2FieldConfiguration!" },
  },
  ProjectV2SortByFieldConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ProjectV2SortByFieldEdge]" },
    nodes: { __type: "[ProjectV2SortByField]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ProjectV2SortByFieldEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "ProjectV2SortByField" },
  },
  ProjectV2View: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    fields: {
      __type: "ProjectV2FieldConfigurationConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectV2FieldOrder",
      },
    },
    filter: { __type: "String" },
    groupBy: {
      __type: "ProjectV2FieldConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectV2FieldOrder",
      },
    },
    groupByFields: {
      __type: "ProjectV2FieldConfigurationConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectV2FieldOrder",
      },
    },
    id: { __type: "ID!" },
    layout: { __type: "ProjectV2ViewLayout!" },
    name: { __type: "String!" },
    number: { __type: "Int!" },
    project: { __type: "ProjectV2!" },
    sortBy: {
      __type: "ProjectV2SortByConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    sortByFields: {
      __type: "ProjectV2SortByFieldConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    updatedAt: { __type: "DateTime!" },
    verticalGroupBy: {
      __type: "ProjectV2FieldConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectV2FieldOrder",
      },
    },
    verticalGroupByFields: {
      __type: "ProjectV2FieldConfigurationConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectV2FieldOrder",
      },
    },
    visibleFields: {
      __type: "ProjectV2FieldConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectV2FieldOrder",
      },
    },
  },
  ProjectV2ViewConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ProjectV2ViewEdge]" },
    nodes: { __type: "[ProjectV2View]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ProjectV2ViewEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "ProjectV2View" },
  },
  ProjectV2ViewOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "ProjectV2ViewOrderField!" },
  },
  ProjectV2Workflow: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    enabled: { __type: "Boolean!" },
    id: { __type: "ID!" },
    name: { __type: "String!" },
    number: { __type: "Int!" },
    project: { __type: "ProjectV2!" },
    updatedAt: { __type: "DateTime!" },
  },
  ProjectV2WorkflowConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ProjectV2WorkflowEdge]" },
    nodes: { __type: "[ProjectV2Workflow]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ProjectV2WorkflowEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "ProjectV2Workflow" },
  },
  ProjectV2WorkflowOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "ProjectV2WorkflowsOrderField!" },
  },
  PublicKey: {
    __typename: { __type: "String!" },
    accessedAt: { __type: "DateTime" },
    createdAt: { __type: "DateTime" },
    fingerprint: { __type: "String!" },
    id: { __type: "ID!" },
    isReadOnly: { __type: "Boolean" },
    key: { __type: "String!" },
    updatedAt: { __type: "DateTime" },
  },
  PublicKeyConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PublicKeyEdge]" },
    nodes: { __type: "[PublicKey]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  PublicKeyEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "PublicKey" },
  },
  PublishSponsorsTierInput: {
    clientMutationId: { __type: "String" },
    tierId: { __type: "ID!" },
  },
  PublishSponsorsTierPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    sponsorsTier: { __type: "SponsorsTier" },
  },
  PullRequest: {
    __typename: { __type: "String!" },
    activeLockReason: { __type: "LockReason" },
    additions: { __type: "Int!" },
    assignees: {
      __type: "UserConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    author: { __type: "Actor" },
    authorAssociation: { __type: "CommentAuthorAssociation!" },
    autoMergeRequest: { __type: "AutoMergeRequest" },
    baseRef: { __type: "Ref" },
    baseRefName: { __type: "String!" },
    baseRefOid: { __type: "GitObjectID!" },
    baseRepository: { __type: "Repository" },
    body: { __type: "String!" },
    bodyHTML: { __type: "HTML!" },
    bodyText: { __type: "String!" },
    changedFiles: { __type: "Int!" },
    checksResourcePath: { __type: "URI!" },
    checksUrl: { __type: "URI!" },
    closed: { __type: "Boolean!" },
    closedAt: { __type: "DateTime" },
    closingIssuesReferences: {
      __type: "IssueConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "IssueOrder",
        userLinkedOnly: "Boolean",
      },
    },
    comments: {
      __type: "IssueCommentConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "IssueCommentOrder",
      },
    },
    commits: {
      __type: "PullRequestCommitConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    createdAt: { __type: "DateTime!" },
    createdViaEmail: { __type: "Boolean!" },
    databaseId: { __type: "Int" },
    deletions: { __type: "Int!" },
    editor: { __type: "Actor" },
    files: {
      __type: "PullRequestChangedFileConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    headRef: { __type: "Ref" },
    headRefName: { __type: "String!" },
    headRefOid: { __type: "GitObjectID!" },
    headRepository: { __type: "Repository" },
    headRepositoryOwner: { __type: "RepositoryOwner" },
    hovercard: {
      __type: "Hovercard!",
      __args: { includeNotificationContexts: "Boolean" },
    },
    id: { __type: "ID!" },
    includesCreatedEdit: { __type: "Boolean!" },
    isCrossRepository: { __type: "Boolean!" },
    isDraft: { __type: "Boolean!" },
    isReadByViewer: { __type: "Boolean" },
    labels: {
      __type: "LabelConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "LabelOrder",
      },
    },
    lastEditedAt: { __type: "DateTime" },
    latestOpinionatedReviews: {
      __type: "PullRequestReviewConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        writersOnly: "Boolean",
      },
    },
    latestReviews: {
      __type: "PullRequestReviewConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    locked: { __type: "Boolean!" },
    maintainerCanModify: { __type: "Boolean!" },
    mergeCommit: { __type: "Commit" },
    mergeQueueEntry: { __type: "MergeQueueEntry" },
    mergeable: { __type: "MergeableState!" },
    merged: { __type: "Boolean!" },
    mergedAt: { __type: "DateTime" },
    mergedBy: { __type: "Actor" },
    milestone: { __type: "Milestone" },
    number: { __type: "Int!" },
    participants: {
      __type: "UserConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    permalink: { __type: "URI!" },
    potentialMergeCommit: { __type: "Commit" },
    projectCards: {
      __type: "ProjectCardConnection!",
      __args: {
        after: "String",
        archivedStates: "[ProjectCardArchivedState]",
        before: "String",
        first: "Int",
        last: "Int",
      },
    },
    projectItems: {
      __type: "ProjectV2ItemConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        includeArchived: "Boolean",
        last: "Int",
      },
    },
    projectV2: { __type: "ProjectV2", __args: { number: "Int!" } },
    projectsV2: {
      __type: "ProjectV2Connection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectV2Order",
        query: "String",
      },
    },
    publishedAt: { __type: "DateTime" },
    reactionGroups: { __type: "[ReactionGroup!]" },
    reactions: {
      __type: "ReactionConnection!",
      __args: {
        after: "String",
        before: "String",
        content: "ReactionContent",
        first: "Int",
        last: "Int",
        orderBy: "ReactionOrder",
      },
    },
    repository: { __type: "Repository!" },
    resourcePath: { __type: "URI!" },
    revertResourcePath: { __type: "URI!" },
    revertUrl: { __type: "URI!" },
    reviewDecision: { __type: "PullRequestReviewDecision" },
    reviewRequests: {
      __type: "ReviewRequestConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    reviewThreads: {
      __type: "PullRequestReviewThreadConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    reviews: {
      __type: "PullRequestReviewConnection",
      __args: {
        after: "String",
        author: "String",
        before: "String",
        first: "Int",
        last: "Int",
        states: "[PullRequestReviewState!]",
      },
    },
    state: { __type: "PullRequestState!" },
    suggestedReviewers: { __type: "[SuggestedReviewer]!" },
    timeline: {
      __type: "PullRequestTimelineConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        since: "DateTime",
      },
    },
    timelineItems: {
      __type: "PullRequestTimelineItemsConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        itemTypes: "[PullRequestTimelineItemsItemType!]",
        last: "Int",
        since: "DateTime",
        skip: "Int",
      },
    },
    title: { __type: "String!" },
    titleHTML: { __type: "HTML!" },
    totalCommentsCount: { __type: "Int" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    userContentEdits: {
      __type: "UserContentEditConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    viewerCanApplySuggestion: { __type: "Boolean!" },
    viewerCanClose: { __type: "Boolean!" },
    viewerCanDeleteHeadRef: { __type: "Boolean!" },
    viewerCanDisableAutoMerge: { __type: "Boolean!" },
    viewerCanEditFiles: { __type: "Boolean!" },
    viewerCanEnableAutoMerge: { __type: "Boolean!" },
    viewerCanMergeAsAdmin: { __type: "Boolean!" },
    viewerCanReact: { __type: "Boolean!" },
    viewerCanReopen: { __type: "Boolean!" },
    viewerCanSubscribe: { __type: "Boolean!" },
    viewerCanUpdate: { __type: "Boolean!" },
    viewerCanUpdateBranch: { __type: "Boolean!" },
    viewerCannotUpdateReasons: { __type: "[CommentCannotUpdateReason!]!" },
    viewerDidAuthor: { __type: "Boolean!" },
    viewerLatestReview: { __type: "PullRequestReview" },
    viewerLatestReviewRequest: { __type: "ReviewRequest" },
    viewerMergeBodyText: {
      __type: "String!",
      __args: { mergeType: "PullRequestMergeMethod" },
    },
    viewerMergeHeadlineText: {
      __type: "String!",
      __args: { mergeType: "PullRequestMergeMethod" },
    },
    viewerSubscription: { __type: "SubscriptionState" },
  },
  PullRequestChangedFile: {
    __typename: { __type: "String!" },
    additions: { __type: "Int!" },
    changeType: { __type: "PatchStatus!" },
    deletions: { __type: "Int!" },
    path: { __type: "String!" },
    viewerViewedState: { __type: "FileViewedState!" },
  },
  PullRequestChangedFileConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PullRequestChangedFileEdge]" },
    nodes: { __type: "[PullRequestChangedFile]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  PullRequestChangedFileEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "PullRequestChangedFile" },
  },
  PullRequestCommit: {
    __typename: { __type: "String!" },
    commit: { __type: "Commit!" },
    id: { __type: "ID!" },
    pullRequest: { __type: "PullRequest!" },
    resourcePath: { __type: "URI!" },
    url: { __type: "URI!" },
  },
  PullRequestCommitCommentThread: {
    __typename: { __type: "String!" },
    comments: {
      __type: "CommitCommentConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    commit: { __type: "Commit!" },
    id: { __type: "ID!" },
    path: { __type: "String" },
    position: { __type: "Int" },
    pullRequest: { __type: "PullRequest!" },
    repository: { __type: "Repository!" },
  },
  PullRequestCommitConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PullRequestCommitEdge]" },
    nodes: { __type: "[PullRequestCommit]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  PullRequestCommitEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "PullRequestCommit" },
  },
  PullRequestConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PullRequestEdge]" },
    nodes: { __type: "[PullRequest]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  PullRequestContributionsByRepository: {
    __typename: { __type: "String!" },
    contributions: {
      __type: "CreatedPullRequestContributionConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ContributionOrder",
      },
    },
    repository: { __type: "Repository!" },
  },
  PullRequestEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "PullRequest" },
  },
  PullRequestOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "PullRequestOrderField!" },
  },
  PullRequestParameters: {
    __typename: { __type: "String!" },
    dismissStaleReviewsOnPush: { __type: "Boolean!" },
    requireCodeOwnerReview: { __type: "Boolean!" },
    requireLastPushApproval: { __type: "Boolean!" },
    requiredApprovingReviewCount: { __type: "Int!" },
    requiredReviewThreadResolution: { __type: "Boolean!" },
  },
  PullRequestParametersInput: {
    dismissStaleReviewsOnPush: { __type: "Boolean!" },
    requireCodeOwnerReview: { __type: "Boolean!" },
    requireLastPushApproval: { __type: "Boolean!" },
    requiredApprovingReviewCount: { __type: "Int!" },
    requiredReviewThreadResolution: { __type: "Boolean!" },
  },
  PullRequestReview: {
    __typename: { __type: "String!" },
    author: { __type: "Actor" },
    authorAssociation: { __type: "CommentAuthorAssociation!" },
    authorCanPushToRepository: { __type: "Boolean!" },
    body: { __type: "String!" },
    bodyHTML: { __type: "HTML!" },
    bodyText: { __type: "String!" },
    comments: {
      __type: "PullRequestReviewCommentConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    commit: { __type: "Commit" },
    createdAt: { __type: "DateTime!" },
    createdViaEmail: { __type: "Boolean!" },
    databaseId: { __type: "Int" },
    editor: { __type: "Actor" },
    id: { __type: "ID!" },
    includesCreatedEdit: { __type: "Boolean!" },
    isMinimized: { __type: "Boolean!" },
    lastEditedAt: { __type: "DateTime" },
    minimizedReason: { __type: "String" },
    onBehalfOf: {
      __type: "TeamConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    publishedAt: { __type: "DateTime" },
    pullRequest: { __type: "PullRequest!" },
    reactionGroups: { __type: "[ReactionGroup!]" },
    reactions: {
      __type: "ReactionConnection!",
      __args: {
        after: "String",
        before: "String",
        content: "ReactionContent",
        first: "Int",
        last: "Int",
        orderBy: "ReactionOrder",
      },
    },
    repository: { __type: "Repository!" },
    resourcePath: { __type: "URI!" },
    state: { __type: "PullRequestReviewState!" },
    submittedAt: { __type: "DateTime" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    userContentEdits: {
      __type: "UserContentEditConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    viewerCanDelete: { __type: "Boolean!" },
    viewerCanMinimize: { __type: "Boolean!" },
    viewerCanReact: { __type: "Boolean!" },
    viewerCanUpdate: { __type: "Boolean!" },
    viewerCannotUpdateReasons: { __type: "[CommentCannotUpdateReason!]!" },
    viewerDidAuthor: { __type: "Boolean!" },
  },
  PullRequestReviewComment: {
    __typename: { __type: "String!" },
    author: { __type: "Actor" },
    authorAssociation: { __type: "CommentAuthorAssociation!" },
    body: { __type: "String!" },
    bodyHTML: { __type: "HTML!" },
    bodyText: { __type: "String!" },
    commit: { __type: "Commit" },
    createdAt: { __type: "DateTime!" },
    createdViaEmail: { __type: "Boolean!" },
    databaseId: { __type: "Int" },
    diffHunk: { __type: "String!" },
    draftedAt: { __type: "DateTime!" },
    editor: { __type: "Actor" },
    id: { __type: "ID!" },
    includesCreatedEdit: { __type: "Boolean!" },
    isMinimized: { __type: "Boolean!" },
    lastEditedAt: { __type: "DateTime" },
    line: { __type: "Int" },
    minimizedReason: { __type: "String" },
    originalCommit: { __type: "Commit" },
    originalLine: { __type: "Int" },
    originalPosition: { __type: "Int!" },
    originalStartLine: { __type: "Int" },
    outdated: { __type: "Boolean!" },
    path: { __type: "String!" },
    position: { __type: "Int" },
    publishedAt: { __type: "DateTime" },
    pullRequest: { __type: "PullRequest!" },
    pullRequestReview: { __type: "PullRequestReview" },
    reactionGroups: { __type: "[ReactionGroup!]" },
    reactions: {
      __type: "ReactionConnection!",
      __args: {
        after: "String",
        before: "String",
        content: "ReactionContent",
        first: "Int",
        last: "Int",
        orderBy: "ReactionOrder",
      },
    },
    replyTo: { __type: "PullRequestReviewComment" },
    repository: { __type: "Repository!" },
    resourcePath: { __type: "URI!" },
    startLine: { __type: "Int" },
    state: { __type: "PullRequestReviewCommentState!" },
    subjectType: { __type: "PullRequestReviewThreadSubjectType!" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    userContentEdits: {
      __type: "UserContentEditConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    viewerCanDelete: { __type: "Boolean!" },
    viewerCanMinimize: { __type: "Boolean!" },
    viewerCanReact: { __type: "Boolean!" },
    viewerCanUpdate: { __type: "Boolean!" },
    viewerCannotUpdateReasons: { __type: "[CommentCannotUpdateReason!]!" },
    viewerDidAuthor: { __type: "Boolean!" },
  },
  PullRequestReviewCommentConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PullRequestReviewCommentEdge]" },
    nodes: { __type: "[PullRequestReviewComment]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  PullRequestReviewCommentEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "PullRequestReviewComment" },
  },
  PullRequestReviewConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PullRequestReviewEdge]" },
    nodes: { __type: "[PullRequestReview]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  PullRequestReviewContributionsByRepository: {
    __typename: { __type: "String!" },
    contributions: {
      __type: "CreatedPullRequestReviewContributionConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ContributionOrder",
      },
    },
    repository: { __type: "Repository!" },
  },
  PullRequestReviewEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "PullRequestReview" },
  },
  PullRequestReviewThread: {
    __typename: { __type: "String!" },
    comments: {
      __type: "PullRequestReviewCommentConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        skip: "Int",
      },
    },
    diffSide: { __type: "DiffSide!" },
    id: { __type: "ID!" },
    isCollapsed: { __type: "Boolean!" },
    isOutdated: { __type: "Boolean!" },
    isResolved: { __type: "Boolean!" },
    line: { __type: "Int" },
    originalLine: { __type: "Int" },
    originalStartLine: { __type: "Int" },
    path: { __type: "String!" },
    pullRequest: { __type: "PullRequest!" },
    repository: { __type: "Repository!" },
    resolvedBy: { __type: "User" },
    startDiffSide: { __type: "DiffSide" },
    startLine: { __type: "Int" },
    subjectType: { __type: "PullRequestReviewThreadSubjectType!" },
    viewerCanReply: { __type: "Boolean!" },
    viewerCanResolve: { __type: "Boolean!" },
    viewerCanUnresolve: { __type: "Boolean!" },
  },
  PullRequestReviewThreadConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PullRequestReviewThreadEdge]" },
    nodes: { __type: "[PullRequestReviewThread]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  PullRequestReviewThreadEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "PullRequestReviewThread" },
  },
  PullRequestRevisionMarker: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    lastSeenCommit: { __type: "Commit!" },
    pullRequest: { __type: "PullRequest!" },
  },
  PullRequestTemplate: {
    __typename: { __type: "String!" },
    body: { __type: "String" },
    filename: { __type: "String" },
    repository: { __type: "Repository!" },
  },
  PullRequestThread: {
    __typename: { __type: "String!" },
    comments: {
      __type: "PullRequestReviewCommentConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        skip: "Int",
      },
    },
    diffSide: { __type: "DiffSide!" },
    id: { __type: "ID!" },
    isCollapsed: { __type: "Boolean!" },
    isOutdated: { __type: "Boolean!" },
    isResolved: { __type: "Boolean!" },
    line: { __type: "Int" },
    path: { __type: "String!" },
    pullRequest: { __type: "PullRequest!" },
    repository: { __type: "Repository!" },
    resolvedBy: { __type: "User" },
    startDiffSide: { __type: "DiffSide" },
    startLine: { __type: "Int" },
    subjectType: { __type: "PullRequestReviewThreadSubjectType!" },
    viewerCanReply: { __type: "Boolean!" },
    viewerCanResolve: { __type: "Boolean!" },
    viewerCanUnresolve: { __type: "Boolean!" },
  },
  PullRequestTimelineConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PullRequestTimelineItemEdge]" },
    nodes: { __type: "[PullRequestTimelineItem]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  PullRequestTimelineItem: {
    __typename: { __type: "String!" },
    $on: { __type: "$PullRequestTimelineItem!" },
  },
  PullRequestTimelineItemEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "PullRequestTimelineItem" },
  },
  PullRequestTimelineItems: {
    __typename: { __type: "String!" },
    $on: { __type: "$PullRequestTimelineItems!" },
  },
  PullRequestTimelineItemsConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PullRequestTimelineItemsEdge]" },
    filteredCount: { __type: "Int!" },
    nodes: { __type: "[PullRequestTimelineItems]" },
    pageCount: { __type: "Int!" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
    updatedAt: { __type: "DateTime!" },
  },
  PullRequestTimelineItemsEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "PullRequestTimelineItems" },
  },
  Push: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    nextSha: { __type: "GitObjectID" },
    permalink: { __type: "URI!" },
    previousSha: { __type: "GitObjectID" },
    pusher: { __type: "Actor!" },
    repository: { __type: "Repository!" },
  },
  PushAllowance: {
    __typename: { __type: "String!" },
    actor: { __type: "PushAllowanceActor" },
    branchProtectionRule: { __type: "BranchProtectionRule" },
    id: { __type: "ID!" },
  },
  PushAllowanceActor: {
    __typename: { __type: "String!" },
    $on: { __type: "$PushAllowanceActor!" },
  },
  PushAllowanceConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PushAllowanceEdge]" },
    nodes: { __type: "[PushAllowance]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  PushAllowanceEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "PushAllowance" },
  },
  RateLimit: {
    __typename: { __type: "String!" },
    cost: { __type: "Int!" },
    limit: { __type: "Int!" },
    nodeCount: { __type: "Int!" },
    remaining: { __type: "Int!" },
    resetAt: { __type: "DateTime!" },
    used: { __type: "Int!" },
  },
  Reactable: {
    __typename: { __type: "String!" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
    reactionGroups: { __type: "[ReactionGroup!]" },
    reactions: {
      __type: "ReactionConnection!",
      __args: {
        after: "String",
        before: "String",
        content: "ReactionContent",
        first: "Int",
        last: "Int",
        orderBy: "ReactionOrder",
      },
    },
    viewerCanReact: { __type: "Boolean!" },
    $on: { __type: "$Reactable!" },
  },
  ReactingUserConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ReactingUserEdge]" },
    nodes: { __type: "[User]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ReactingUserEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "User!" },
    reactedAt: { __type: "DateTime!" },
  },
  Reaction: {
    __typename: { __type: "String!" },
    content: { __type: "ReactionContent!" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
    reactable: { __type: "Reactable!" },
    user: { __type: "User" },
  },
  ReactionConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ReactionEdge]" },
    nodes: { __type: "[Reaction]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
    viewerHasReacted: { __type: "Boolean!" },
  },
  ReactionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Reaction" },
  },
  ReactionGroup: {
    __typename: { __type: "String!" },
    content: { __type: "ReactionContent!" },
    createdAt: { __type: "DateTime" },
    reactors: {
      __type: "ReactorConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    subject: { __type: "Reactable!" },
    users: {
      __type: "ReactingUserConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    viewerHasReacted: { __type: "Boolean!" },
  },
  ReactionOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "ReactionOrderField!" },
  },
  Reactor: { __typename: { __type: "String!" }, $on: { __type: "$Reactor!" } },
  ReactorConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ReactorEdge]" },
    nodes: { __type: "[Reactor]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ReactorEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Reactor!" },
    reactedAt: { __type: "DateTime!" },
  },
  ReadyForReviewEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    pullRequest: { __type: "PullRequest!" },
    resourcePath: { __type: "URI!" },
    url: { __type: "URI!" },
  },
  Ref: {
    __typename: { __type: "String!" },
    associatedPullRequests: {
      __type: "PullRequestConnection!",
      __args: {
        after: "String",
        baseRefName: "String",
        before: "String",
        first: "Int",
        headRefName: "String",
        labels: "[String!]",
        last: "Int",
        orderBy: "IssueOrder",
        states: "[PullRequestState!]",
      },
    },
    branchProtectionRule: { __type: "BranchProtectionRule" },
    compare: { __type: "Comparison", __args: { headRef: "String!" } },
    id: { __type: "ID!" },
    name: { __type: "String!" },
    prefix: { __type: "String!" },
    refUpdateRule: { __type: "RefUpdateRule" },
    repository: { __type: "Repository!" },
    target: { __type: "GitObject" },
  },
  RefConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RefEdge]" },
    nodes: { __type: "[Ref]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  RefEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Ref" },
  },
  RefNameConditionTarget: {
    __typename: { __type: "String!" },
    exclude: { __type: "[String!]!" },
    include: { __type: "[String!]!" },
  },
  RefNameConditionTargetInput: {
    exclude: { __type: "[String!]!" },
    include: { __type: "[String!]!" },
  },
  RefOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "RefOrderField!" },
  },
  RefUpdateRule: {
    __typename: { __type: "String!" },
    allowsDeletions: { __type: "Boolean!" },
    allowsForcePushes: { __type: "Boolean!" },
    blocksCreations: { __type: "Boolean!" },
    pattern: { __type: "String!" },
    requiredApprovingReviewCount: { __type: "Int" },
    requiredStatusCheckContexts: { __type: "[String]" },
    requiresCodeOwnerReviews: { __type: "Boolean!" },
    requiresConversationResolution: { __type: "Boolean!" },
    requiresLinearHistory: { __type: "Boolean!" },
    requiresSignatures: { __type: "Boolean!" },
    viewerAllowedToDismissReviews: { __type: "Boolean!" },
    viewerCanPush: { __type: "Boolean!" },
  },
  ReferencedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    commit: { __type: "Commit" },
    commitRepository: { __type: "Repository!" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    isCrossRepository: { __type: "Boolean!" },
    isDirectReference: { __type: "Boolean!" },
    subject: { __type: "ReferencedSubject!" },
  },
  ReferencedSubject: {
    __typename: { __type: "String!" },
    $on: { __type: "$ReferencedSubject!" },
  },
  RegenerateEnterpriseIdentityProviderRecoveryCodesInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
  },
  RegenerateEnterpriseIdentityProviderRecoveryCodesPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    identityProvider: { __type: "EnterpriseIdentityProvider" },
  },
  RegenerateVerifiableDomainTokenInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  RegenerateVerifiableDomainTokenPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    verificationToken: { __type: "String" },
  },
  RejectDeploymentsInput: {
    clientMutationId: { __type: "String" },
    comment: { __type: "String" },
    environmentIds: { __type: "[ID!]!" },
    workflowRunId: { __type: "ID!" },
  },
  RejectDeploymentsPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deployments: { __type: "[Deployment!]" },
  },
  Release: {
    __typename: { __type: "String!" },
    author: { __type: "User" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    description: { __type: "String" },
    descriptionHTML: { __type: "HTML" },
    id: { __type: "ID!" },
    isDraft: { __type: "Boolean!" },
    isLatest: { __type: "Boolean!" },
    isPrerelease: { __type: "Boolean!" },
    mentions: {
      __type: "UserConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    name: { __type: "String" },
    publishedAt: { __type: "DateTime" },
    reactionGroups: { __type: "[ReactionGroup!]" },
    reactions: {
      __type: "ReactionConnection!",
      __args: {
        after: "String",
        before: "String",
        content: "ReactionContent",
        first: "Int",
        last: "Int",
        orderBy: "ReactionOrder",
      },
    },
    releaseAssets: {
      __type: "ReleaseAssetConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        name: "String",
      },
    },
    repository: { __type: "Repository!" },
    resourcePath: { __type: "URI!" },
    shortDescriptionHTML: { __type: "HTML", __args: { limit: "Int" } },
    tag: { __type: "Ref" },
    tagCommit: { __type: "Commit" },
    tagName: { __type: "String!" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    viewerCanReact: { __type: "Boolean!" },
  },
  ReleaseAsset: {
    __typename: { __type: "String!" },
    contentType: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    downloadCount: { __type: "Int!" },
    downloadUrl: { __type: "URI!" },
    id: { __type: "ID!" },
    name: { __type: "String!" },
    release: { __type: "Release" },
    size: { __type: "Int!" },
    updatedAt: { __type: "DateTime!" },
    uploadedBy: { __type: "User!" },
    url: { __type: "URI!" },
  },
  ReleaseAssetConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ReleaseAssetEdge]" },
    nodes: { __type: "[ReleaseAsset]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ReleaseAssetEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "ReleaseAsset" },
  },
  ReleaseConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ReleaseEdge]" },
    nodes: { __type: "[Release]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ReleaseEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Release" },
  },
  ReleaseOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "ReleaseOrderField!" },
  },
  RemoveAssigneesFromAssignableInput: {
    assignableId: { __type: "ID!" },
    assigneeIds: { __type: "[ID!]!" },
    clientMutationId: { __type: "String" },
  },
  RemoveAssigneesFromAssignablePayload: {
    __typename: { __type: "String!" },
    assignable: { __type: "Assignable" },
    clientMutationId: { __type: "String" },
  },
  RemoveEnterpriseAdminInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    login: { __type: "String!" },
  },
  RemoveEnterpriseAdminPayload: {
    __typename: { __type: "String!" },
    admin: { __type: "User" },
    clientMutationId: { __type: "String" },
    enterprise: { __type: "Enterprise" },
    message: { __type: "String" },
    viewer: { __type: "User" },
  },
  RemoveEnterpriseIdentityProviderInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
  },
  RemoveEnterpriseIdentityProviderPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    identityProvider: { __type: "EnterpriseIdentityProvider" },
  },
  RemoveEnterpriseMemberInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    userId: { __type: "ID!" },
  },
  RemoveEnterpriseMemberPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    enterprise: { __type: "Enterprise" },
    user: { __type: "User" },
    viewer: { __type: "User" },
  },
  RemoveEnterpriseOrganizationInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    organizationId: { __type: "ID!" },
  },
  RemoveEnterpriseOrganizationPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    enterprise: { __type: "Enterprise" },
    organization: { __type: "Organization" },
    viewer: { __type: "User" },
  },
  RemoveEnterpriseSupportEntitlementInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    login: { __type: "String!" },
  },
  RemoveEnterpriseSupportEntitlementPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    message: { __type: "String" },
  },
  RemoveLabelsFromLabelableInput: {
    clientMutationId: { __type: "String" },
    labelIds: { __type: "[ID!]!" },
    labelableId: { __type: "ID!" },
  },
  RemoveLabelsFromLabelablePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    labelable: { __type: "Labelable" },
  },
  RemoveOutsideCollaboratorInput: {
    clientMutationId: { __type: "String" },
    organizationId: { __type: "ID!" },
    userId: { __type: "ID!" },
  },
  RemoveOutsideCollaboratorPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    removedUser: { __type: "User" },
  },
  RemoveReactionInput: {
    clientMutationId: { __type: "String" },
    content: { __type: "ReactionContent!" },
    subjectId: { __type: "ID!" },
  },
  RemoveReactionPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    reaction: { __type: "Reaction" },
    reactionGroups: { __type: "[ReactionGroup!]" },
    subject: { __type: "Reactable" },
  },
  RemoveStarInput: {
    clientMutationId: { __type: "String" },
    starrableId: { __type: "ID!" },
  },
  RemoveStarPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    starrable: { __type: "Starrable" },
  },
  RemoveUpvoteInput: {
    clientMutationId: { __type: "String" },
    subjectId: { __type: "ID!" },
  },
  RemoveUpvotePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    subject: { __type: "Votable" },
  },
  RemovedFromMergeQueueEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    beforeCommit: { __type: "Commit" },
    createdAt: { __type: "DateTime!" },
    enqueuer: { __type: "User" },
    id: { __type: "ID!" },
    mergeQueue: { __type: "MergeQueue" },
    pullRequest: { __type: "PullRequest" },
    reason: { __type: "String" },
  },
  RemovedFromProjectEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
  },
  RenamedTitleEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    currentTitle: { __type: "String!" },
    id: { __type: "ID!" },
    previousTitle: { __type: "String!" },
    subject: { __type: "RenamedTitleSubject!" },
  },
  RenamedTitleSubject: {
    __typename: { __type: "String!" },
    $on: { __type: "$RenamedTitleSubject!" },
  },
  ReopenDiscussionInput: {
    clientMutationId: { __type: "String" },
    discussionId: { __type: "ID!" },
  },
  ReopenDiscussionPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    discussion: { __type: "Discussion" },
  },
  ReopenIssueInput: {
    clientMutationId: { __type: "String" },
    issueId: { __type: "ID!" },
  },
  ReopenIssuePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    issue: { __type: "Issue" },
  },
  ReopenPullRequestInput: {
    clientMutationId: { __type: "String" },
    pullRequestId: { __type: "ID!" },
  },
  ReopenPullRequestPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pullRequest: { __type: "PullRequest" },
  },
  ReopenedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    closable: { __type: "Closable!" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    stateReason: { __type: "IssueStateReason" },
  },
  RepoAccessAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
    visibility: { __type: "RepoAccessAuditEntryVisibility" },
  },
  RepoAddMemberAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
    visibility: { __type: "RepoAddMemberAuditEntryVisibility" },
  },
  RepoAddTopicAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    topic: { __type: "Topic" },
    topicName: { __type: "String" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  RepoArchivedAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
    visibility: { __type: "RepoArchivedAuditEntryVisibility" },
  },
  RepoChangeMergeSettingAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    isEnabled: { __type: "Boolean" },
    mergeType: { __type: "RepoChangeMergeSettingAuditEntryMergeType" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  RepoConfigDisableAnonymousGitAccessAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  RepoConfigDisableCollaboratorsOnlyAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  RepoConfigDisableContributorsOnlyAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  RepoConfigDisableSockpuppetDisallowedAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  RepoConfigEnableAnonymousGitAccessAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  RepoConfigEnableCollaboratorsOnlyAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  RepoConfigEnableContributorsOnlyAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  RepoConfigEnableSockpuppetDisallowedAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  RepoConfigLockAnonymousGitAccessAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  RepoConfigUnlockAnonymousGitAccessAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  RepoCreateAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    forkParentName: { __type: "String" },
    forkSourceName: { __type: "String" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
    visibility: { __type: "RepoCreateAuditEntryVisibility" },
  },
  RepoDestroyAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
    visibility: { __type: "RepoDestroyAuditEntryVisibility" },
  },
  RepoRemoveMemberAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
    visibility: { __type: "RepoRemoveMemberAuditEntryVisibility" },
  },
  RepoRemoveTopicAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    topic: { __type: "Topic" },
    topicName: { __type: "String" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  Repository: {
    __typename: { __type: "String!" },
    allowUpdateBranch: { __type: "Boolean!" },
    archivedAt: { __type: "DateTime" },
    assignableUsers: {
      __type: "UserConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        query: "String",
      },
    },
    autoMergeAllowed: { __type: "Boolean!" },
    branchProtectionRules: {
      __type: "BranchProtectionRuleConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    codeOfConduct: { __type: "CodeOfConduct" },
    codeowners: {
      __type: "RepositoryCodeowners",
      __args: { refName: "String" },
    },
    collaborators: {
      __type: "RepositoryCollaboratorConnection",
      __args: {
        affiliation: "CollaboratorAffiliation",
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        login: "String",
        query: "String",
      },
    },
    commitComments: {
      __type: "CommitCommentConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    contactLinks: { __type: "[RepositoryContactLink!]" },
    contributingGuidelines: { __type: "ContributingGuidelines" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    defaultBranchRef: { __type: "Ref" },
    deleteBranchOnMerge: { __type: "Boolean!" },
    deployKeys: {
      __type: "DeployKeyConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    deployments: {
      __type: "DeploymentConnection!",
      __args: {
        after: "String",
        before: "String",
        environments: "[String!]",
        first: "Int",
        last: "Int",
        orderBy: "DeploymentOrder",
      },
    },
    description: { __type: "String" },
    descriptionHTML: { __type: "HTML!" },
    discussion: { __type: "Discussion", __args: { number: "Int!" } },
    discussionCategories: {
      __type: "DiscussionCategoryConnection!",
      __args: {
        after: "String",
        before: "String",
        filterByAssignable: "Boolean",
        first: "Int",
        last: "Int",
      },
    },
    discussionCategory: {
      __type: "DiscussionCategory",
      __args: { slug: "String!" },
    },
    discussions: {
      __type: "DiscussionConnection!",
      __args: {
        after: "String",
        answered: "Boolean",
        before: "String",
        categoryId: "ID",
        first: "Int",
        last: "Int",
        orderBy: "DiscussionOrder",
        states: "[DiscussionState!]",
      },
    },
    diskUsage: { __type: "Int" },
    environment: { __type: "Environment", __args: { name: "String!" } },
    environments: {
      __type: "EnvironmentConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "Environments",
      },
    },
    forkCount: { __type: "Int!" },
    forkingAllowed: { __type: "Boolean!" },
    forks: {
      __type: "RepositoryConnection!",
      __args: {
        affiliations: "[RepositoryAffiliation]",
        after: "String",
        before: "String",
        first: "Int",
        hasIssuesEnabled: "Boolean",
        isLocked: "Boolean",
        last: "Int",
        orderBy: "RepositoryOrder",
        ownerAffiliations: "[RepositoryAffiliation]",
        privacy: "RepositoryPrivacy",
      },
    },
    fundingLinks: { __type: "[FundingLink!]!" },
    hasDiscussionsEnabled: { __type: "Boolean!" },
    hasIssuesEnabled: { __type: "Boolean!" },
    hasProjectsEnabled: { __type: "Boolean!" },
    hasVulnerabilityAlertsEnabled: { __type: "Boolean!" },
    hasWikiEnabled: { __type: "Boolean!" },
    homepageUrl: { __type: "URI" },
    id: { __type: "ID!" },
    interactionAbility: { __type: "RepositoryInteractionAbility" },
    isArchived: { __type: "Boolean!" },
    isBlankIssuesEnabled: { __type: "Boolean!" },
    isDisabled: { __type: "Boolean!" },
    isEmpty: { __type: "Boolean!" },
    isFork: { __type: "Boolean!" },
    isInOrganization: { __type: "Boolean!" },
    isLocked: { __type: "Boolean!" },
    isMirror: { __type: "Boolean!" },
    isPrivate: { __type: "Boolean!" },
    isSecurityPolicyEnabled: { __type: "Boolean" },
    isTemplate: { __type: "Boolean!" },
    isUserConfigurationRepository: { __type: "Boolean!" },
    issue: { __type: "Issue", __args: { number: "Int!" } },
    issueOrPullRequest: {
      __type: "IssueOrPullRequest",
      __args: { number: "Int!" },
    },
    issueTemplates: { __type: "[IssueTemplate!]" },
    issues: {
      __type: "IssueConnection!",
      __args: {
        after: "String",
        before: "String",
        filterBy: "IssueFilters",
        first: "Int",
        labels: "[String!]",
        last: "Int",
        orderBy: "IssueOrder",
        states: "[IssueState!]",
      },
    },
    label: { __type: "Label", __args: { name: "String!" } },
    labels: {
      __type: "LabelConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "LabelOrder",
        query: "String",
      },
    },
    languages: {
      __type: "LanguageConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "LanguageOrder",
      },
    },
    latestRelease: { __type: "Release" },
    licenseInfo: { __type: "License" },
    lockReason: { __type: "RepositoryLockReason" },
    mentionableUsers: {
      __type: "UserConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        query: "String",
      },
    },
    mergeCommitAllowed: { __type: "Boolean!" },
    mergeCommitMessage: { __type: "MergeCommitMessage!" },
    mergeCommitTitle: { __type: "MergeCommitTitle!" },
    mergeQueue: { __type: "MergeQueue", __args: { branch: "String" } },
    milestone: { __type: "Milestone", __args: { number: "Int!" } },
    milestones: {
      __type: "MilestoneConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "MilestoneOrder",
        query: "String",
        states: "[MilestoneState!]",
      },
    },
    mirrorUrl: { __type: "URI" },
    name: { __type: "String!" },
    nameWithOwner: { __type: "String!" },
    object: {
      __type: "GitObject",
      __args: { expression: "String", oid: "GitObjectID" },
    },
    openGraphImageUrl: { __type: "URI!" },
    owner: { __type: "RepositoryOwner!" },
    packages: {
      __type: "PackageConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        names: "[String]",
        orderBy: "PackageOrder",
        packageType: "PackageType",
        repositoryId: "ID",
      },
    },
    parent: { __type: "Repository" },
    pinnedDiscussions: {
      __type: "PinnedDiscussionConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    pinnedIssues: {
      __type: "PinnedIssueConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    primaryLanguage: { __type: "Language" },
    project: { __type: "Project", __args: { number: "Int!" } },
    projectV2: { __type: "ProjectV2", __args: { number: "Int!" } },
    projects: {
      __type: "ProjectConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectOrder",
        search: "String",
        states: "[ProjectState!]",
      },
    },
    projectsResourcePath: { __type: "URI!" },
    projectsUrl: { __type: "URI!" },
    projectsV2: {
      __type: "ProjectV2Connection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectV2Order",
        query: "String",
      },
    },
    pullRequest: { __type: "PullRequest", __args: { number: "Int!" } },
    pullRequestTemplates: { __type: "[PullRequestTemplate!]" },
    pullRequests: {
      __type: "PullRequestConnection!",
      __args: {
        after: "String",
        baseRefName: "String",
        before: "String",
        first: "Int",
        headRefName: "String",
        labels: "[String!]",
        last: "Int",
        orderBy: "IssueOrder",
        states: "[PullRequestState!]",
      },
    },
    pushedAt: { __type: "DateTime" },
    rebaseMergeAllowed: { __type: "Boolean!" },
    recentProjects: {
      __type: "ProjectV2Connection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    ref: { __type: "Ref", __args: { qualifiedName: "String!" } },
    refs: {
      __type: "RefConnection",
      __args: {
        after: "String",
        before: "String",
        direction: "OrderDirection",
        first: "Int",
        last: "Int",
        orderBy: "RefOrder",
        query: "String",
        refPrefix: "String!",
      },
    },
    release: { __type: "Release", __args: { tagName: "String!" } },
    releases: {
      __type: "ReleaseConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ReleaseOrder",
      },
    },
    repositoryTopics: {
      __type: "RepositoryTopicConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    resourcePath: { __type: "URI!" },
    ruleset: {
      __type: "RepositoryRuleset",
      __args: { databaseId: "Int!", includeParents: "Boolean" },
    },
    rulesets: {
      __type: "RepositoryRulesetConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        includeParents: "Boolean",
        last: "Int",
      },
    },
    securityPolicyUrl: { __type: "URI" },
    shortDescriptionHTML: { __type: "HTML!", __args: { limit: "Int" } },
    squashMergeAllowed: { __type: "Boolean!" },
    squashMergeCommitMessage: { __type: "SquashMergeCommitMessage!" },
    squashMergeCommitTitle: { __type: "SquashMergeCommitTitle!" },
    squashPrTitleUsedAsDefault: { __type: "Boolean!" },
    sshUrl: { __type: "GitSSHRemote!" },
    stargazerCount: { __type: "Int!" },
    stargazers: {
      __type: "StargazerConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "StarOrder",
      },
    },
    submodules: {
      __type: "SubmoduleConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    tempCloneToken: { __type: "String" },
    templateRepository: { __type: "Repository" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    usesCustomOpenGraphImage: { __type: "Boolean!" },
    viewerCanAdminister: { __type: "Boolean!" },
    viewerCanCreateProjects: { __type: "Boolean!" },
    viewerCanSubscribe: { __type: "Boolean!" },
    viewerCanUpdateTopics: { __type: "Boolean!" },
    viewerDefaultCommitEmail: { __type: "String" },
    viewerDefaultMergeMethod: { __type: "PullRequestMergeMethod!" },
    viewerHasStarred: { __type: "Boolean!" },
    viewerPermission: { __type: "RepositoryPermission" },
    viewerPossibleCommitEmails: { __type: "[String!]" },
    viewerSubscription: { __type: "SubscriptionState" },
    visibility: { __type: "RepositoryVisibility!" },
    vulnerabilityAlert: {
      __type: "RepositoryVulnerabilityAlert",
      __args: { number: "Int!" },
    },
    vulnerabilityAlerts: {
      __type: "RepositoryVulnerabilityAlertConnection",
      __args: {
        after: "String",
        before: "String",
        dependencyScopes: "[RepositoryVulnerabilityAlertDependencyScope!]",
        first: "Int",
        last: "Int",
        states: "[RepositoryVulnerabilityAlertState!]",
      },
    },
    watchers: {
      __type: "UserConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    webCommitSignoffRequired: { __type: "Boolean!" },
  },
  RepositoryAuditEntryData: {
    __typename: { __type: "String!" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    $on: { __type: "$RepositoryAuditEntryData!" },
  },
  RepositoryCodeowners: {
    __typename: { __type: "String!" },
    errors: { __type: "[RepositoryCodeownersError!]!" },
  },
  RepositoryCodeownersError: {
    __typename: { __type: "String!" },
    column: { __type: "Int!" },
    kind: { __type: "String!" },
    line: { __type: "Int!" },
    message: { __type: "String!" },
    path: { __type: "String!" },
    source: { __type: "String!" },
    suggestion: { __type: "String" },
  },
  RepositoryCollaboratorConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RepositoryCollaboratorEdge]" },
    nodes: { __type: "[User]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  RepositoryCollaboratorEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "User!" },
    permission: { __type: "RepositoryPermission!" },
    permissionSources: { __type: "[PermissionSource!]" },
  },
  RepositoryConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RepositoryEdge]" },
    nodes: { __type: "[Repository]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
    totalDiskUsage: { __type: "Int!" },
  },
  RepositoryContactLink: {
    __typename: { __type: "String!" },
    about: { __type: "String!" },
    name: { __type: "String!" },
    url: { __type: "URI!" },
  },
  RepositoryDependabotAlertsThread: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    notificationsPermalink: { __type: "URI" },
    repository: { __type: "Repository!" },
  },
  RepositoryDiscussionAuthor: {
    __typename: { __type: "String!" },
    repositoryDiscussions: {
      __type: "DiscussionConnection!",
      __args: {
        after: "String",
        answered: "Boolean",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "DiscussionOrder",
        repositoryId: "ID",
        states: "[DiscussionState!]",
      },
    },
    $on: { __type: "$RepositoryDiscussionAuthor!" },
  },
  RepositoryDiscussionCommentAuthor: {
    __typename: { __type: "String!" },
    repositoryDiscussionComments: {
      __type: "DiscussionCommentConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        onlyAnswers: "Boolean",
        repositoryId: "ID",
      },
    },
    $on: { __type: "$RepositoryDiscussionCommentAuthor!" },
  },
  RepositoryEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Repository" },
  },
  RepositoryIdConditionTarget: {
    __typename: { __type: "String!" },
    repositoryIds: { __type: "[ID!]!" },
  },
  RepositoryIdConditionTargetInput: { repositoryIds: { __type: "[ID!]!" } },
  RepositoryInfo: {
    __typename: { __type: "String!" },
    archivedAt: { __type: "DateTime" },
    createdAt: { __type: "DateTime!" },
    description: { __type: "String" },
    descriptionHTML: { __type: "HTML!" },
    forkCount: { __type: "Int!" },
    hasDiscussionsEnabled: { __type: "Boolean!" },
    hasIssuesEnabled: { __type: "Boolean!" },
    hasProjectsEnabled: { __type: "Boolean!" },
    hasWikiEnabled: { __type: "Boolean!" },
    homepageUrl: { __type: "URI" },
    isArchived: { __type: "Boolean!" },
    isFork: { __type: "Boolean!" },
    isInOrganization: { __type: "Boolean!" },
    isLocked: { __type: "Boolean!" },
    isMirror: { __type: "Boolean!" },
    isPrivate: { __type: "Boolean!" },
    isTemplate: { __type: "Boolean!" },
    licenseInfo: { __type: "License" },
    lockReason: { __type: "RepositoryLockReason" },
    mirrorUrl: { __type: "URI" },
    name: { __type: "String!" },
    nameWithOwner: { __type: "String!" },
    openGraphImageUrl: { __type: "URI!" },
    owner: { __type: "RepositoryOwner!" },
    pushedAt: { __type: "DateTime" },
    resourcePath: { __type: "URI!" },
    shortDescriptionHTML: { __type: "HTML!", __args: { limit: "Int" } },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    usesCustomOpenGraphImage: { __type: "Boolean!" },
    visibility: { __type: "RepositoryVisibility!" },
    $on: { __type: "$RepositoryInfo!" },
  },
  RepositoryInteractionAbility: {
    __typename: { __type: "String!" },
    expiresAt: { __type: "DateTime" },
    limit: { __type: "RepositoryInteractionLimit!" },
    origin: { __type: "RepositoryInteractionLimitOrigin!" },
  },
  RepositoryInvitation: {
    __typename: { __type: "String!" },
    email: { __type: "String" },
    id: { __type: "ID!" },
    invitee: { __type: "User" },
    inviter: { __type: "User!" },
    permalink: { __type: "URI!" },
    permission: { __type: "RepositoryPermission!" },
    repository: { __type: "RepositoryInfo" },
  },
  RepositoryInvitationConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RepositoryInvitationEdge]" },
    nodes: { __type: "[RepositoryInvitation]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  RepositoryInvitationEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "RepositoryInvitation" },
  },
  RepositoryInvitationOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "RepositoryInvitationOrderField!" },
  },
  RepositoryMigration: {
    __typename: { __type: "String!" },
    continueOnError: { __type: "Boolean!" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "String" },
    failureReason: { __type: "String" },
    id: { __type: "ID!" },
    migrationLogUrl: { __type: "URI" },
    migrationSource: { __type: "MigrationSource!" },
    repositoryName: { __type: "String!" },
    sourceUrl: { __type: "URI!" },
    state: { __type: "MigrationState!" },
    warningsCount: { __type: "Int!" },
  },
  RepositoryMigrationConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RepositoryMigrationEdge]" },
    nodes: { __type: "[RepositoryMigration]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  RepositoryMigrationEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "RepositoryMigration" },
  },
  RepositoryMigrationOrder: {
    direction: { __type: "RepositoryMigrationOrderDirection!" },
    field: { __type: "RepositoryMigrationOrderField!" },
  },
  RepositoryNameConditionTarget: {
    __typename: { __type: "String!" },
    exclude: { __type: "[String!]!" },
    include: { __type: "[String!]!" },
    protected: { __type: "Boolean!" },
  },
  RepositoryNameConditionTargetInput: {
    exclude: { __type: "[String!]!" },
    include: { __type: "[String!]!" },
    protected: { __type: "Boolean" },
  },
  RepositoryNode: {
    __typename: { __type: "String!" },
    repository: { __type: "Repository!" },
    $on: { __type: "$RepositoryNode!" },
  },
  RepositoryOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "RepositoryOrderField!" },
  },
  RepositoryOwner: {
    __typename: { __type: "String!" },
    avatarUrl: { __type: "URI!", __args: { size: "Int" } },
    id: { __type: "ID!" },
    login: { __type: "String!" },
    repositories: {
      __type: "RepositoryConnection!",
      __args: {
        affiliations: "[RepositoryAffiliation]",
        after: "String",
        before: "String",
        first: "Int",
        hasIssuesEnabled: "Boolean",
        isArchived: "Boolean",
        isFork: "Boolean",
        isLocked: "Boolean",
        last: "Int",
        orderBy: "RepositoryOrder",
        ownerAffiliations: "[RepositoryAffiliation]",
        privacy: "RepositoryPrivacy",
      },
    },
    repository: {
      __type: "Repository",
      __args: { followRenames: "Boolean", name: "String!" },
    },
    resourcePath: { __type: "URI!" },
    url: { __type: "URI!" },
    $on: { __type: "$RepositoryOwner!" },
  },
  RepositoryRule: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    parameters: { __type: "RuleParameters" },
    repositoryRuleset: { __type: "RepositoryRuleset" },
    type: { __type: "RepositoryRuleType!" },
  },
  RepositoryRuleConditions: {
    __typename: { __type: "String!" },
    refName: { __type: "RefNameConditionTarget" },
    repositoryId: { __type: "RepositoryIdConditionTarget" },
    repositoryName: { __type: "RepositoryNameConditionTarget" },
  },
  RepositoryRuleConditionsInput: {
    refName: { __type: "RefNameConditionTargetInput" },
    repositoryId: { __type: "RepositoryIdConditionTargetInput" },
    repositoryName: { __type: "RepositoryNameConditionTargetInput" },
  },
  RepositoryRuleConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RepositoryRuleEdge]" },
    nodes: { __type: "[RepositoryRule]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  RepositoryRuleEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "RepositoryRule" },
  },
  RepositoryRuleInput: {
    id: { __type: "ID" },
    parameters: { __type: "RuleParametersInput" },
    type: { __type: "RepositoryRuleType!" },
  },
  RepositoryRuleset: {
    __typename: { __type: "String!" },
    bypassActors: {
      __type: "RepositoryRulesetBypassActorConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    conditions: { __type: "RepositoryRuleConditions!" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    enforcement: { __type: "RuleEnforcement!" },
    id: { __type: "ID!" },
    name: { __type: "String!" },
    rules: {
      __type: "RepositoryRuleConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        type: "RepositoryRuleType",
      },
    },
    source: { __type: "RuleSource!" },
    target: { __type: "RepositoryRulesetTarget" },
    updatedAt: { __type: "DateTime!" },
  },
  RepositoryRulesetBypassActor: {
    __typename: { __type: "String!" },
    actor: { __type: "BypassActor" },
    bypassMode: { __type: "RepositoryRulesetBypassActorBypassMode" },
    id: { __type: "ID!" },
    organizationAdmin: { __type: "Boolean!" },
    repositoryRoleDatabaseId: { __type: "Int" },
    repositoryRoleName: { __type: "String" },
    repositoryRuleset: { __type: "RepositoryRuleset" },
  },
  RepositoryRulesetBypassActorConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RepositoryRulesetBypassActorEdge]" },
    nodes: { __type: "[RepositoryRulesetBypassActor]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  RepositoryRulesetBypassActorEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "RepositoryRulesetBypassActor" },
  },
  RepositoryRulesetBypassActorInput: {
    actorId: { __type: "ID" },
    bypassMode: { __type: "RepositoryRulesetBypassActorBypassMode!" },
    organizationAdmin: { __type: "Boolean" },
    repositoryRoleDatabaseId: { __type: "Int" },
  },
  RepositoryRulesetConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RepositoryRulesetEdge]" },
    nodes: { __type: "[RepositoryRuleset]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  RepositoryRulesetEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "RepositoryRuleset" },
  },
  RepositoryTopic: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    resourcePath: { __type: "URI!" },
    topic: { __type: "Topic!" },
    url: { __type: "URI!" },
  },
  RepositoryTopicConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RepositoryTopicEdge]" },
    nodes: { __type: "[RepositoryTopic]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  RepositoryTopicEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "RepositoryTopic" },
  },
  RepositoryVisibilityChangeDisableAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    enterpriseResourcePath: { __type: "URI" },
    enterpriseSlug: { __type: "String" },
    enterpriseUrl: { __type: "URI" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  RepositoryVisibilityChangeEnableAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    enterpriseResourcePath: { __type: "URI" },
    enterpriseSlug: { __type: "String" },
    enterpriseUrl: { __type: "URI" },
    id: { __type: "ID!" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  RepositoryVulnerabilityAlert: {
    __typename: { __type: "String!" },
    autoDismissedAt: { __type: "DateTime" },
    createdAt: { __type: "DateTime!" },
    dependabotUpdate: { __type: "DependabotUpdate" },
    dependencyScope: { __type: "RepositoryVulnerabilityAlertDependencyScope" },
    dismissComment: { __type: "String" },
    dismissReason: { __type: "String" },
    dismissedAt: { __type: "DateTime" },
    dismisser: { __type: "User" },
    fixedAt: { __type: "DateTime" },
    id: { __type: "ID!" },
    number: { __type: "Int!" },
    repository: { __type: "Repository!" },
    securityAdvisory: { __type: "SecurityAdvisory" },
    securityVulnerability: { __type: "SecurityVulnerability" },
    state: { __type: "RepositoryVulnerabilityAlertState!" },
    vulnerableManifestFilename: { __type: "String!" },
    vulnerableManifestPath: { __type: "String!" },
    vulnerableRequirements: { __type: "String" },
  },
  RepositoryVulnerabilityAlertConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RepositoryVulnerabilityAlertEdge]" },
    nodes: { __type: "[RepositoryVulnerabilityAlert]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  RepositoryVulnerabilityAlertEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "RepositoryVulnerabilityAlert" },
  },
  RequestReviewsInput: {
    clientMutationId: { __type: "String" },
    pullRequestId: { __type: "ID!" },
    teamIds: { __type: "[ID!]" },
    union: { __type: "Boolean" },
    userIds: { __type: "[ID!]" },
  },
  RequestReviewsPayload: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    clientMutationId: { __type: "String" },
    pullRequest: { __type: "PullRequest" },
    requestedReviewersEdge: { __type: "UserEdge" },
  },
  RequestedReviewer: {
    __typename: { __type: "String!" },
    $on: { __type: "$RequestedReviewer!" },
  },
  RequestedReviewerConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RequestedReviewerEdge]" },
    nodes: { __type: "[RequestedReviewer]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  RequestedReviewerEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "RequestedReviewer" },
  },
  RequirableByPullRequest: {
    __typename: { __type: "String!" },
    isRequired: {
      __type: "Boolean!",
      __args: { pullRequestId: "ID", pullRequestNumber: "Int" },
    },
    $on: { __type: "$RequirableByPullRequest!" },
  },
  RequiredDeploymentsParameters: {
    __typename: { __type: "String!" },
    requiredDeploymentEnvironments: { __type: "[String!]!" },
  },
  RequiredDeploymentsParametersInput: {
    requiredDeploymentEnvironments: { __type: "[String!]!" },
  },
  RequiredStatusCheckDescription: {
    __typename: { __type: "String!" },
    app: { __type: "App" },
    context: { __type: "String!" },
  },
  RequiredStatusCheckInput: {
    appId: { __type: "ID" },
    context: { __type: "String!" },
  },
  RequiredStatusChecksParameters: {
    __typename: { __type: "String!" },
    requiredStatusChecks: { __type: "[StatusCheckConfiguration!]!" },
    strictRequiredStatusChecksPolicy: { __type: "Boolean!" },
  },
  RequiredStatusChecksParametersInput: {
    requiredStatusChecks: { __type: "[StatusCheckConfigurationInput!]!" },
    strictRequiredStatusChecksPolicy: { __type: "Boolean!" },
  },
  RerequestCheckSuiteInput: {
    checkSuiteId: { __type: "ID!" },
    clientMutationId: { __type: "String" },
    repositoryId: { __type: "ID!" },
  },
  RerequestCheckSuitePayload: {
    __typename: { __type: "String!" },
    checkSuite: { __type: "CheckSuite" },
    clientMutationId: { __type: "String" },
  },
  ResolveReviewThreadInput: {
    clientMutationId: { __type: "String" },
    threadId: { __type: "ID!" },
  },
  ResolveReviewThreadPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    thread: { __type: "PullRequestReviewThread" },
  },
  RestrictedContribution: {
    __typename: { __type: "String!" },
    isRestricted: { __type: "Boolean!" },
    occurredAt: { __type: "DateTime!" },
    resourcePath: { __type: "URI!" },
    url: { __type: "URI!" },
    user: { __type: "User!" },
  },
  RetireSponsorsTierInput: {
    clientMutationId: { __type: "String" },
    tierId: { __type: "ID!" },
  },
  RetireSponsorsTierPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    sponsorsTier: { __type: "SponsorsTier" },
  },
  RevertPullRequestInput: {
    body: { __type: "String" },
    clientMutationId: { __type: "String" },
    draft: { __type: "Boolean" },
    pullRequestId: { __type: "ID!" },
    title: { __type: "String" },
  },
  RevertPullRequestPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pullRequest: { __type: "PullRequest" },
    revertPullRequest: { __type: "PullRequest" },
  },
  ReviewDismissalAllowance: {
    __typename: { __type: "String!" },
    actor: { __type: "ReviewDismissalAllowanceActor" },
    branchProtectionRule: { __type: "BranchProtectionRule" },
    id: { __type: "ID!" },
  },
  ReviewDismissalAllowanceActor: {
    __typename: { __type: "String!" },
    $on: { __type: "$ReviewDismissalAllowanceActor!" },
  },
  ReviewDismissalAllowanceConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ReviewDismissalAllowanceEdge]" },
    nodes: { __type: "[ReviewDismissalAllowance]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ReviewDismissalAllowanceEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "ReviewDismissalAllowance" },
  },
  ReviewDismissedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    dismissalMessage: { __type: "String" },
    dismissalMessageHTML: { __type: "String" },
    id: { __type: "ID!" },
    previousReviewState: { __type: "PullRequestReviewState!" },
    pullRequest: { __type: "PullRequest!" },
    pullRequestCommit: { __type: "PullRequestCommit" },
    resourcePath: { __type: "URI!" },
    review: { __type: "PullRequestReview" },
    url: { __type: "URI!" },
  },
  ReviewRequest: {
    __typename: { __type: "String!" },
    asCodeOwner: { __type: "Boolean!" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
    pullRequest: { __type: "PullRequest!" },
    requestedReviewer: { __type: "RequestedReviewer" },
  },
  ReviewRequestConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ReviewRequestEdge]" },
    nodes: { __type: "[ReviewRequest]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  ReviewRequestEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "ReviewRequest" },
  },
  ReviewRequestRemovedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    pullRequest: { __type: "PullRequest!" },
    requestedReviewer: { __type: "RequestedReviewer" },
  },
  ReviewRequestedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    pullRequest: { __type: "PullRequest!" },
    requestedReviewer: { __type: "RequestedReviewer" },
  },
  ReviewStatusHovercardContext: {
    __typename: { __type: "String!" },
    message: { __type: "String!" },
    octicon: { __type: "String!" },
    reviewDecision: { __type: "PullRequestReviewDecision" },
  },
  RevokeEnterpriseOrganizationsMigratorRoleInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    login: { __type: "String!" },
  },
  RevokeEnterpriseOrganizationsMigratorRolePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    organizations: {
      __type: "OrganizationConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
  },
  RevokeMigratorRoleInput: {
    actor: { __type: "String!" },
    actorType: { __type: "ActorType!" },
    clientMutationId: { __type: "String" },
    organizationId: { __type: "ID!" },
  },
  RevokeMigratorRolePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    success: { __type: "Boolean" },
  },
  RuleParameters: {
    __typename: { __type: "String!" },
    $on: { __type: "$RuleParameters!" },
  },
  RuleParametersInput: {
    branchNamePattern: { __type: "BranchNamePatternParametersInput" },
    commitAuthorEmailPattern: {
      __type: "CommitAuthorEmailPatternParametersInput",
    },
    commitMessagePattern: { __type: "CommitMessagePatternParametersInput" },
    committerEmailPattern: { __type: "CommitterEmailPatternParametersInput" },
    pullRequest: { __type: "PullRequestParametersInput" },
    requiredDeployments: { __type: "RequiredDeploymentsParametersInput" },
    requiredStatusChecks: { __type: "RequiredStatusChecksParametersInput" },
    tagNamePattern: { __type: "TagNamePatternParametersInput" },
    update: { __type: "UpdateParametersInput" },
    workflows: { __type: "WorkflowsParametersInput" },
  },
  RuleSource: {
    __typename: { __type: "String!" },
    $on: { __type: "$RuleSource!" },
  },
  SavedReply: {
    __typename: { __type: "String!" },
    body: { __type: "String!" },
    bodyHTML: { __type: "HTML!" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
    title: { __type: "String!" },
    user: { __type: "Actor" },
  },
  SavedReplyConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[SavedReplyEdge]" },
    nodes: { __type: "[SavedReply]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  SavedReplyEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "SavedReply" },
  },
  SavedReplyOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "SavedReplyOrderField!" },
  },
  SearchResultItem: {
    __typename: { __type: "String!" },
    $on: { __type: "$SearchResultItem!" },
  },
  SearchResultItemConnection: {
    __typename: { __type: "String!" },
    codeCount: { __type: "Int!" },
    discussionCount: { __type: "Int!" },
    edges: { __type: "[SearchResultItemEdge]" },
    issueCount: { __type: "Int!" },
    nodes: { __type: "[SearchResultItem]" },
    pageInfo: { __type: "PageInfo!" },
    repositoryCount: { __type: "Int!" },
    userCount: { __type: "Int!" },
    wikiCount: { __type: "Int!" },
  },
  SearchResultItemEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "SearchResultItem" },
    textMatches: { __type: "[TextMatch]" },
  },
  SecurityAdvisory: {
    __typename: { __type: "String!" },
    classification: { __type: "SecurityAdvisoryClassification!" },
    cvss: { __type: "CVSS!" },
    cwes: {
      __type: "CWEConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    databaseId: { __type: "Int" },
    description: { __type: "String!" },
    ghsaId: { __type: "String!" },
    id: { __type: "ID!" },
    identifiers: { __type: "[SecurityAdvisoryIdentifier!]!" },
    notificationsPermalink: { __type: "URI" },
    origin: { __type: "String!" },
    permalink: { __type: "URI" },
    publishedAt: { __type: "DateTime!" },
    references: { __type: "[SecurityAdvisoryReference!]!" },
    severity: { __type: "SecurityAdvisorySeverity!" },
    summary: { __type: "String!" },
    updatedAt: { __type: "DateTime!" },
    vulnerabilities: {
      __type: "SecurityVulnerabilityConnection!",
      __args: {
        after: "String",
        before: "String",
        classifications: "[SecurityAdvisoryClassification!]",
        ecosystem: "SecurityAdvisoryEcosystem",
        first: "Int",
        last: "Int",
        orderBy: "SecurityVulnerabilityOrder",
        package: "String",
        severities: "[SecurityAdvisorySeverity!]",
      },
    },
    withdrawnAt: { __type: "DateTime" },
  },
  SecurityAdvisoryConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[SecurityAdvisoryEdge]" },
    nodes: { __type: "[SecurityAdvisory]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  SecurityAdvisoryEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "SecurityAdvisory" },
  },
  SecurityAdvisoryIdentifier: {
    __typename: { __type: "String!" },
    type: { __type: "String!" },
    value: { __type: "String!" },
  },
  SecurityAdvisoryIdentifierFilter: {
    type: { __type: "SecurityAdvisoryIdentifierType!" },
    value: { __type: "String!" },
  },
  SecurityAdvisoryOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "SecurityAdvisoryOrderField!" },
  },
  SecurityAdvisoryPackage: {
    __typename: { __type: "String!" },
    ecosystem: { __type: "SecurityAdvisoryEcosystem!" },
    name: { __type: "String!" },
  },
  SecurityAdvisoryPackageVersion: {
    __typename: { __type: "String!" },
    identifier: { __type: "String!" },
  },
  SecurityAdvisoryReference: {
    __typename: { __type: "String!" },
    url: { __type: "URI!" },
  },
  SecurityVulnerability: {
    __typename: { __type: "String!" },
    advisory: { __type: "SecurityAdvisory!" },
    firstPatchedVersion: { __type: "SecurityAdvisoryPackageVersion" },
    package: { __type: "SecurityAdvisoryPackage!" },
    severity: { __type: "SecurityAdvisorySeverity!" },
    updatedAt: { __type: "DateTime!" },
    vulnerableVersionRange: { __type: "String!" },
  },
  SecurityVulnerabilityConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[SecurityVulnerabilityEdge]" },
    nodes: { __type: "[SecurityVulnerability]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  SecurityVulnerabilityEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "SecurityVulnerability" },
  },
  SecurityVulnerabilityOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "SecurityVulnerabilityOrderField!" },
  },
  SetEnterpriseIdentityProviderInput: {
    clientMutationId: { __type: "String" },
    digestMethod: { __type: "SamlDigestAlgorithm!" },
    enterpriseId: { __type: "ID!" },
    idpCertificate: { __type: "String!" },
    issuer: { __type: "String" },
    signatureMethod: { __type: "SamlSignatureAlgorithm!" },
    ssoUrl: { __type: "URI!" },
  },
  SetEnterpriseIdentityProviderPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    identityProvider: { __type: "EnterpriseIdentityProvider" },
  },
  SetOrganizationInteractionLimitInput: {
    clientMutationId: { __type: "String" },
    expiry: { __type: "RepositoryInteractionLimitExpiry" },
    limit: { __type: "RepositoryInteractionLimit!" },
    organizationId: { __type: "ID!" },
  },
  SetOrganizationInteractionLimitPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    organization: { __type: "Organization" },
  },
  SetRepositoryInteractionLimitInput: {
    clientMutationId: { __type: "String" },
    expiry: { __type: "RepositoryInteractionLimitExpiry" },
    limit: { __type: "RepositoryInteractionLimit!" },
    repositoryId: { __type: "ID!" },
  },
  SetRepositoryInteractionLimitPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    repository: { __type: "Repository" },
  },
  SetUserInteractionLimitInput: {
    clientMutationId: { __type: "String" },
    expiry: { __type: "RepositoryInteractionLimitExpiry" },
    limit: { __type: "RepositoryInteractionLimit!" },
    userId: { __type: "ID!" },
  },
  SetUserInteractionLimitPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    user: { __type: "User" },
  },
  SmimeSignature: {
    __typename: { __type: "String!" },
    email: { __type: "String!" },
    isValid: { __type: "Boolean!" },
    payload: { __type: "String!" },
    signature: { __type: "String!" },
    signer: { __type: "User" },
    state: { __type: "GitSignatureState!" },
    wasSignedByGitHub: { __type: "Boolean!" },
  },
  SocialAccount: {
    __typename: { __type: "String!" },
    displayName: { __type: "String!" },
    provider: { __type: "SocialAccountProvider!" },
    url: { __type: "URI!" },
  },
  SocialAccountConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[SocialAccountEdge]" },
    nodes: { __type: "[SocialAccount]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  SocialAccountEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "SocialAccount" },
  },
  Sponsor: { __typename: { __type: "String!" }, $on: { __type: "$Sponsor!" } },
  SponsorConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[SponsorEdge]" },
    nodes: { __type: "[Sponsor]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  SponsorEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Sponsor" },
  },
  SponsorOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "SponsorOrderField!" },
  },
  Sponsorable: {
    __typename: { __type: "String!" },
    estimatedNextSponsorsPayoutInCents: { __type: "Int!" },
    hasSponsorsListing: { __type: "Boolean!" },
    isSponsoredBy: { __type: "Boolean!", __args: { accountLogin: "String!" } },
    isSponsoringViewer: { __type: "Boolean!" },
    monthlyEstimatedSponsorsIncomeInCents: { __type: "Int!" },
    sponsoring: {
      __type: "SponsorConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "SponsorOrder",
      },
    },
    sponsors: {
      __type: "SponsorConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "SponsorOrder",
        tierId: "ID",
      },
    },
    sponsorsActivities: {
      __type: "SponsorsActivityConnection!",
      __args: {
        actions: "[SponsorsActivityAction!]",
        after: "String",
        before: "String",
        first: "Int",
        includeAsSponsor: "Boolean",
        includePrivate: "Boolean",
        last: "Int",
        orderBy: "SponsorsActivityOrder",
        period: "SponsorsActivityPeriod",
        since: "DateTime",
        until: "DateTime",
      },
    },
    sponsorsListing: { __type: "SponsorsListing" },
    sponsorshipForViewerAsSponsor: {
      __type: "Sponsorship",
      __args: { activeOnly: "Boolean" },
    },
    sponsorshipForViewerAsSponsorable: {
      __type: "Sponsorship",
      __args: { activeOnly: "Boolean" },
    },
    sponsorshipNewsletters: {
      __type: "SponsorshipNewsletterConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "SponsorshipNewsletterOrder",
      },
    },
    sponsorshipsAsMaintainer: {
      __type: "SponsorshipConnection!",
      __args: {
        activeOnly: "Boolean",
        after: "String",
        before: "String",
        first: "Int",
        includePrivate: "Boolean",
        last: "Int",
        orderBy: "SponsorshipOrder",
      },
    },
    sponsorshipsAsSponsor: {
      __type: "SponsorshipConnection!",
      __args: {
        activeOnly: "Boolean",
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        maintainerLogins: "[String!]",
        orderBy: "SponsorshipOrder",
      },
    },
    totalSponsorshipAmountAsSponsorInCents: {
      __type: "Int",
      __args: {
        since: "DateTime",
        sponsorableLogins: "[String!]",
        until: "DateTime",
      },
    },
    viewerCanSponsor: { __type: "Boolean!" },
    viewerIsSponsoring: { __type: "Boolean!" },
    $on: { __type: "$Sponsorable!" },
  },
  SponsorableItem: {
    __typename: { __type: "String!" },
    $on: { __type: "$SponsorableItem!" },
  },
  SponsorableItemConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[SponsorableItemEdge]" },
    nodes: { __type: "[SponsorableItem]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  SponsorableItemEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "SponsorableItem" },
  },
  SponsorableOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "SponsorableOrderField!" },
  },
  SponsorsActivity: {
    __typename: { __type: "String!" },
    action: { __type: "SponsorsActivityAction!" },
    currentPrivacyLevel: { __type: "SponsorshipPrivacy" },
    id: { __type: "ID!" },
    paymentSource: { __type: "SponsorshipPaymentSource" },
    previousSponsorsTier: { __type: "SponsorsTier" },
    sponsor: { __type: "Sponsor" },
    sponsorable: { __type: "Sponsorable!" },
    sponsorsTier: { __type: "SponsorsTier" },
    timestamp: { __type: "DateTime" },
    viaBulkSponsorship: { __type: "Boolean!" },
  },
  SponsorsActivityConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[SponsorsActivityEdge]" },
    nodes: { __type: "[SponsorsActivity]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  SponsorsActivityEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "SponsorsActivity" },
  },
  SponsorsActivityOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "SponsorsActivityOrderField!" },
  },
  SponsorsGoal: {
    __typename: { __type: "String!" },
    description: { __type: "String" },
    kind: { __type: "SponsorsGoalKind!" },
    percentComplete: { __type: "Int!" },
    targetValue: { __type: "Int!" },
    title: { __type: "String!" },
  },
  SponsorsListing: {
    __typename: { __type: "String!" },
    activeGoal: { __type: "SponsorsGoal" },
    activeStripeConnectAccount: { __type: "StripeConnectAccount" },
    billingCountryOrRegion: { __type: "String" },
    contactEmailAddress: { __type: "String" },
    createdAt: { __type: "DateTime!" },
    dashboardResourcePath: { __type: "URI!" },
    dashboardUrl: { __type: "URI!" },
    featuredItems: {
      __type: "[SponsorsListingFeaturedItem!]!",
      __args: {
        featureableTypes: "[SponsorsListingFeaturedItemFeatureableType!]",
      },
    },
    fiscalHost: { __type: "Organization" },
    fullDescription: { __type: "String!" },
    fullDescriptionHTML: { __type: "HTML!" },
    id: { __type: "ID!" },
    isPublic: { __type: "Boolean!" },
    name: { __type: "String!" },
    nextPayoutDate: { __type: "Date" },
    residenceCountryOrRegion: { __type: "String" },
    resourcePath: { __type: "URI!" },
    shortDescription: { __type: "String!" },
    slug: { __type: "String!" },
    sponsorable: { __type: "Sponsorable!" },
    tiers: {
      __type: "SponsorsTierConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        includeUnpublished: "Boolean",
        last: "Int",
        orderBy: "SponsorsTierOrder",
      },
    },
    url: { __type: "URI!" },
  },
  SponsorsListingFeatureableItem: {
    __typename: { __type: "String!" },
    $on: { __type: "$SponsorsListingFeatureableItem!" },
  },
  SponsorsListingFeaturedItem: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    description: { __type: "String" },
    featureable: { __type: "SponsorsListingFeatureableItem!" },
    id: { __type: "ID!" },
    position: { __type: "Int!" },
    sponsorsListing: { __type: "SponsorsListing!" },
    updatedAt: { __type: "DateTime!" },
  },
  SponsorsTier: {
    __typename: { __type: "String!" },
    adminInfo: { __type: "SponsorsTierAdminInfo" },
    closestLesserValueTier: { __type: "SponsorsTier" },
    createdAt: { __type: "DateTime!" },
    description: { __type: "String!" },
    descriptionHTML: { __type: "HTML!" },
    id: { __type: "ID!" },
    isCustomAmount: { __type: "Boolean!" },
    isOneTime: { __type: "Boolean!" },
    monthlyPriceInCents: { __type: "Int!" },
    monthlyPriceInDollars: { __type: "Int!" },
    name: { __type: "String!" },
    sponsorsListing: { __type: "SponsorsListing!" },
    updatedAt: { __type: "DateTime!" },
  },
  SponsorsTierAdminInfo: {
    __typename: { __type: "String!" },
    isDraft: { __type: "Boolean!" },
    isPublished: { __type: "Boolean!" },
    isRetired: { __type: "Boolean!" },
    sponsorships: {
      __type: "SponsorshipConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        includePrivate: "Boolean",
        last: "Int",
        orderBy: "SponsorshipOrder",
      },
    },
  },
  SponsorsTierConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[SponsorsTierEdge]" },
    nodes: { __type: "[SponsorsTier]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  SponsorsTierEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "SponsorsTier" },
  },
  SponsorsTierOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "SponsorsTierOrderField!" },
  },
  Sponsorship: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    isActive: { __type: "Boolean!" },
    isOneTimePayment: { __type: "Boolean!" },
    isSponsorOptedIntoEmail: { __type: "Boolean" },
    maintainer: { __type: "User!" },
    paymentSource: { __type: "SponsorshipPaymentSource" },
    privacyLevel: { __type: "SponsorshipPrivacy!" },
    sponsor: { __type: "User" },
    sponsorEntity: { __type: "Sponsor" },
    sponsorable: { __type: "Sponsorable!" },
    tier: { __type: "SponsorsTier" },
    tierSelectedAt: { __type: "DateTime" },
  },
  SponsorshipConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[SponsorshipEdge]" },
    nodes: { __type: "[Sponsorship]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
    totalRecurringMonthlyPriceInCents: { __type: "Int!" },
    totalRecurringMonthlyPriceInDollars: { __type: "Int!" },
  },
  SponsorshipEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Sponsorship" },
  },
  SponsorshipNewsletter: {
    __typename: { __type: "String!" },
    author: { __type: "User" },
    body: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    isPublished: { __type: "Boolean!" },
    sponsorable: { __type: "Sponsorable!" },
    subject: { __type: "String!" },
    updatedAt: { __type: "DateTime!" },
  },
  SponsorshipNewsletterConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[SponsorshipNewsletterEdge]" },
    nodes: { __type: "[SponsorshipNewsletter]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  SponsorshipNewsletterEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "SponsorshipNewsletter" },
  },
  SponsorshipNewsletterOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "SponsorshipNewsletterOrderField!" },
  },
  SponsorshipOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "SponsorshipOrderField!" },
  },
  SshSignature: {
    __typename: { __type: "String!" },
    email: { __type: "String!" },
    isValid: { __type: "Boolean!" },
    keyFingerprint: { __type: "String" },
    payload: { __type: "String!" },
    signature: { __type: "String!" },
    signer: { __type: "User" },
    state: { __type: "GitSignatureState!" },
    wasSignedByGitHub: { __type: "Boolean!" },
  },
  StarOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "StarOrderField!" },
  },
  StargazerConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[StargazerEdge]" },
    nodes: { __type: "[User]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  StargazerEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "User!" },
    starredAt: { __type: "DateTime!" },
  },
  Starrable: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    stargazerCount: { __type: "Int!" },
    stargazers: {
      __type: "StargazerConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "StarOrder",
      },
    },
    viewerHasStarred: { __type: "Boolean!" },
    $on: { __type: "$Starrable!" },
  },
  StarredRepositoryConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[StarredRepositoryEdge]" },
    isOverLimit: { __type: "Boolean!" },
    nodes: { __type: "[Repository]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  StarredRepositoryEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Repository!" },
    starredAt: { __type: "DateTime!" },
  },
  StartOrganizationMigrationInput: {
    clientMutationId: { __type: "String" },
    sourceAccessToken: { __type: "String!" },
    sourceOrgUrl: { __type: "URI!" },
    targetEnterpriseId: { __type: "ID!" },
    targetOrgName: { __type: "String!" },
  },
  StartOrganizationMigrationPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    orgMigration: { __type: "OrganizationMigration" },
  },
  StartRepositoryMigrationInput: {
    accessToken: { __type: "String" },
    clientMutationId: { __type: "String" },
    continueOnError: { __type: "Boolean" },
    gitArchiveUrl: { __type: "String" },
    githubPat: { __type: "String" },
    lockSource: { __type: "Boolean" },
    metadataArchiveUrl: { __type: "String" },
    ownerId: { __type: "ID!" },
    repositoryName: { __type: "String!" },
    skipReleases: { __type: "Boolean" },
    sourceId: { __type: "ID!" },
    sourceRepositoryUrl: { __type: "URI" },
    targetRepoVisibility: { __type: "String" },
  },
  StartRepositoryMigrationPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    repositoryMigration: { __type: "RepositoryMigration" },
  },
  Status: {
    __typename: { __type: "String!" },
    combinedContexts: {
      __type: "StatusCheckRollupContextConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    commit: { __type: "Commit" },
    context: { __type: "StatusContext", __args: { name: "String!" } },
    contexts: { __type: "[StatusContext!]!" },
    id: { __type: "ID!" },
    state: { __type: "StatusState!" },
  },
  StatusCheckConfiguration: {
    __typename: { __type: "String!" },
    context: { __type: "String!" },
    integrationId: { __type: "Int" },
  },
  StatusCheckConfigurationInput: {
    context: { __type: "String!" },
    integrationId: { __type: "Int" },
  },
  StatusCheckRollup: {
    __typename: { __type: "String!" },
    commit: { __type: "Commit" },
    contexts: {
      __type: "StatusCheckRollupContextConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    id: { __type: "ID!" },
    state: { __type: "StatusState!" },
  },
  StatusCheckRollupContext: {
    __typename: { __type: "String!" },
    $on: { __type: "$StatusCheckRollupContext!" },
  },
  StatusCheckRollupContextConnection: {
    __typename: { __type: "String!" },
    checkRunCount: { __type: "Int!" },
    checkRunCountsByState: { __type: "[CheckRunStateCount!]" },
    edges: { __type: "[StatusCheckRollupContextEdge]" },
    nodes: { __type: "[StatusCheckRollupContext]" },
    pageInfo: { __type: "PageInfo!" },
    statusContextCount: { __type: "Int!" },
    statusContextCountsByState: { __type: "[StatusContextStateCount!]" },
    totalCount: { __type: "Int!" },
  },
  StatusCheckRollupContextEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "StatusCheckRollupContext" },
  },
  StatusContext: {
    __typename: { __type: "String!" },
    avatarUrl: { __type: "URI", __args: { size: "Int" } },
    commit: { __type: "Commit" },
    context: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    creator: { __type: "Actor" },
    description: { __type: "String" },
    id: { __type: "ID!" },
    isRequired: {
      __type: "Boolean!",
      __args: { pullRequestId: "ID", pullRequestNumber: "Int" },
    },
    state: { __type: "StatusState!" },
    targetUrl: { __type: "URI" },
  },
  StatusContextStateCount: {
    __typename: { __type: "String!" },
    count: { __type: "Int!" },
    state: { __type: "StatusState!" },
  },
  StripeConnectAccount: {
    __typename: { __type: "String!" },
    accountId: { __type: "String!" },
    billingCountryOrRegion: { __type: "String" },
    countryOrRegion: { __type: "String" },
    isActive: { __type: "Boolean!" },
    sponsorsListing: { __type: "SponsorsListing!" },
    stripeDashboardUrl: { __type: "URI!" },
  },
  SubmitPullRequestReviewInput: {
    body: { __type: "String" },
    clientMutationId: { __type: "String" },
    event: { __type: "PullRequestReviewEvent!" },
    pullRequestId: { __type: "ID" },
    pullRequestReviewId: { __type: "ID" },
  },
  SubmitPullRequestReviewPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pullRequestReview: { __type: "PullRequestReview" },
  },
  Submodule: {
    __typename: { __type: "String!" },
    branch: { __type: "String" },
    gitUrl: { __type: "URI!" },
    name: { __type: "String!" },
    nameRaw: { __type: "Base64String!" },
    path: { __type: "String!" },
    pathRaw: { __type: "Base64String!" },
    subprojectCommitOid: { __type: "GitObjectID" },
  },
  SubmoduleConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[SubmoduleEdge]" },
    nodes: { __type: "[Submodule]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  SubmoduleEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Submodule" },
  },
  Subscribable: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    viewerCanSubscribe: { __type: "Boolean!" },
    viewerSubscription: { __type: "SubscriptionState" },
    $on: { __type: "$Subscribable!" },
  },
  SubscribableThread: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    viewerThreadSubscriptionFormAction: {
      __type: "ThreadSubscriptionFormAction",
    },
    viewerThreadSubscriptionStatus: { __type: "ThreadSubscriptionState" },
    $on: { __type: "$SubscribableThread!" },
  },
  SubscribedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    subscribable: { __type: "Subscribable!" },
  },
  SuggestedReviewer: {
    __typename: { __type: "String!" },
    isAuthor: { __type: "Boolean!" },
    isCommenter: { __type: "Boolean!" },
    reviewer: { __type: "User!" },
  },
  Tag: {
    __typename: { __type: "String!" },
    abbreviatedOid: { __type: "String!" },
    commitResourcePath: { __type: "URI!" },
    commitUrl: { __type: "URI!" },
    id: { __type: "ID!" },
    message: { __type: "String" },
    name: { __type: "String!" },
    oid: { __type: "GitObjectID!" },
    repository: { __type: "Repository!" },
    tagger: { __type: "GitActor" },
    target: { __type: "GitObject!" },
  },
  TagNamePatternParameters: {
    __typename: { __type: "String!" },
    name: { __type: "String" },
    negate: { __type: "Boolean!" },
    operator: { __type: "String!" },
    pattern: { __type: "String!" },
  },
  TagNamePatternParametersInput: {
    name: { __type: "String" },
    negate: { __type: "Boolean" },
    operator: { __type: "String!" },
    pattern: { __type: "String!" },
  },
  Team: {
    __typename: { __type: "String!" },
    ancestors: {
      __type: "TeamConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    avatarUrl: { __type: "URI", __args: { size: "Int" } },
    childTeams: {
      __type: "TeamConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        immediateOnly: "Boolean",
        last: "Int",
        orderBy: "TeamOrder",
        userLogins: "[String!]",
      },
    },
    combinedSlug: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    description: { __type: "String" },
    discussion: { __type: "TeamDiscussion", __args: { number: "Int!" } },
    discussions: {
      __type: "TeamDiscussionConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        isPinned: "Boolean",
        last: "Int",
        orderBy: "TeamDiscussionOrder",
      },
    },
    discussionsResourcePath: { __type: "URI!" },
    discussionsUrl: { __type: "URI!" },
    editTeamResourcePath: { __type: "URI!" },
    editTeamUrl: { __type: "URI!" },
    id: { __type: "ID!" },
    invitations: {
      __type: "OrganizationInvitationConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    memberStatuses: {
      __type: "UserStatusConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "UserStatusOrder",
      },
    },
    members: {
      __type: "TeamMemberConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        membership: "TeamMembershipType",
        orderBy: "TeamMemberOrder",
        query: "String",
        role: "TeamMemberRole",
      },
    },
    membersResourcePath: { __type: "URI!" },
    membersUrl: { __type: "URI!" },
    name: { __type: "String!" },
    newTeamResourcePath: { __type: "URI!" },
    newTeamUrl: { __type: "URI!" },
    notificationSetting: { __type: "TeamNotificationSetting!" },
    organization: { __type: "Organization!" },
    parentTeam: { __type: "Team" },
    privacy: { __type: "TeamPrivacy!" },
    projectV2: { __type: "ProjectV2", __args: { number: "Int!" } },
    projectsV2: {
      __type: "ProjectV2Connection!",
      __args: {
        after: "String",
        before: "String",
        filterBy: "ProjectV2Filters",
        first: "Int",
        last: "Int",
        orderBy: "ProjectV2Order",
        query: "String",
      },
    },
    repositories: {
      __type: "TeamRepositoryConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "TeamRepositoryOrder",
        query: "String",
      },
    },
    repositoriesResourcePath: { __type: "URI!" },
    repositoriesUrl: { __type: "URI!" },
    resourcePath: { __type: "URI!" },
    slug: { __type: "String!" },
    teamsResourcePath: { __type: "URI!" },
    teamsUrl: { __type: "URI!" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    viewerCanAdminister: { __type: "Boolean!" },
    viewerCanSubscribe: { __type: "Boolean!" },
    viewerSubscription: { __type: "SubscriptionState" },
  },
  TeamAddMemberAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    isLdapMapped: { __type: "Boolean" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    team: { __type: "Team" },
    teamName: { __type: "String" },
    teamResourcePath: { __type: "URI" },
    teamUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  TeamAddRepositoryAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    isLdapMapped: { __type: "Boolean" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    team: { __type: "Team" },
    teamName: { __type: "String" },
    teamResourcePath: { __type: "URI" },
    teamUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  TeamAuditEntryData: {
    __typename: { __type: "String!" },
    team: { __type: "Team" },
    teamName: { __type: "String" },
    teamResourcePath: { __type: "URI" },
    teamUrl: { __type: "URI" },
    $on: { __type: "$TeamAuditEntryData!" },
  },
  TeamChangeParentTeamAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    isLdapMapped: { __type: "Boolean" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    parentTeam: { __type: "Team" },
    parentTeamName: { __type: "String" },
    parentTeamNameWas: { __type: "String" },
    parentTeamResourcePath: { __type: "URI" },
    parentTeamUrl: { __type: "URI" },
    parentTeamWas: { __type: "Team" },
    parentTeamWasResourcePath: { __type: "URI" },
    parentTeamWasUrl: { __type: "URI" },
    team: { __type: "Team" },
    teamName: { __type: "String" },
    teamResourcePath: { __type: "URI" },
    teamUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  TeamConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[TeamEdge]" },
    nodes: { __type: "[Team]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  TeamDiscussion: {
    __typename: { __type: "String!" },
    author: { __type: "Actor" },
    authorAssociation: { __type: "CommentAuthorAssociation!" },
    body: { __type: "String!" },
    bodyHTML: { __type: "HTML!" },
    bodyText: { __type: "String!" },
    bodyVersion: { __type: "String!" },
    comments: {
      __type: "TeamDiscussionCommentConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        fromComment: "Int",
        last: "Int",
        orderBy: "TeamDiscussionCommentOrder",
      },
    },
    commentsResourcePath: { __type: "URI!" },
    commentsUrl: { __type: "URI!" },
    createdAt: { __type: "DateTime!" },
    createdViaEmail: { __type: "Boolean!" },
    databaseId: { __type: "Int" },
    editor: { __type: "Actor" },
    id: { __type: "ID!" },
    includesCreatedEdit: { __type: "Boolean!" },
    isPinned: { __type: "Boolean!" },
    isPrivate: { __type: "Boolean!" },
    lastEditedAt: { __type: "DateTime" },
    number: { __type: "Int!" },
    publishedAt: { __type: "DateTime" },
    reactionGroups: { __type: "[ReactionGroup!]" },
    reactions: {
      __type: "ReactionConnection!",
      __args: {
        after: "String",
        before: "String",
        content: "ReactionContent",
        first: "Int",
        last: "Int",
        orderBy: "ReactionOrder",
      },
    },
    resourcePath: { __type: "URI!" },
    team: { __type: "Team!" },
    title: { __type: "String!" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    userContentEdits: {
      __type: "UserContentEditConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    viewerCanDelete: { __type: "Boolean!" },
    viewerCanPin: { __type: "Boolean!" },
    viewerCanReact: { __type: "Boolean!" },
    viewerCanSubscribe: { __type: "Boolean!" },
    viewerCanUpdate: { __type: "Boolean!" },
    viewerCannotUpdateReasons: { __type: "[CommentCannotUpdateReason!]!" },
    viewerDidAuthor: { __type: "Boolean!" },
    viewerSubscription: { __type: "SubscriptionState" },
  },
  TeamDiscussionComment: {
    __typename: { __type: "String!" },
    author: { __type: "Actor" },
    authorAssociation: { __type: "CommentAuthorAssociation!" },
    body: { __type: "String!" },
    bodyHTML: { __type: "HTML!" },
    bodyText: { __type: "String!" },
    bodyVersion: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    createdViaEmail: { __type: "Boolean!" },
    databaseId: { __type: "Int" },
    discussion: { __type: "TeamDiscussion!" },
    editor: { __type: "Actor" },
    id: { __type: "ID!" },
    includesCreatedEdit: { __type: "Boolean!" },
    lastEditedAt: { __type: "DateTime" },
    number: { __type: "Int!" },
    publishedAt: { __type: "DateTime" },
    reactionGroups: { __type: "[ReactionGroup!]" },
    reactions: {
      __type: "ReactionConnection!",
      __args: {
        after: "String",
        before: "String",
        content: "ReactionContent",
        first: "Int",
        last: "Int",
        orderBy: "ReactionOrder",
      },
    },
    resourcePath: { __type: "URI!" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    userContentEdits: {
      __type: "UserContentEditConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    viewerCanDelete: { __type: "Boolean!" },
    viewerCanReact: { __type: "Boolean!" },
    viewerCanUpdate: { __type: "Boolean!" },
    viewerCannotUpdateReasons: { __type: "[CommentCannotUpdateReason!]!" },
    viewerDidAuthor: { __type: "Boolean!" },
  },
  TeamDiscussionCommentConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[TeamDiscussionCommentEdge]" },
    nodes: { __type: "[TeamDiscussionComment]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  TeamDiscussionCommentEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "TeamDiscussionComment" },
  },
  TeamDiscussionCommentOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "TeamDiscussionCommentOrderField!" },
  },
  TeamDiscussionConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[TeamDiscussionEdge]" },
    nodes: { __type: "[TeamDiscussion]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  TeamDiscussionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "TeamDiscussion" },
  },
  TeamDiscussionOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "TeamDiscussionOrderField!" },
  },
  TeamEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Team" },
  },
  TeamMemberConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[TeamMemberEdge]" },
    nodes: { __type: "[User]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  TeamMemberEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    memberAccessResourcePath: { __type: "URI!" },
    memberAccessUrl: { __type: "URI!" },
    node: { __type: "User!" },
    role: { __type: "TeamMemberRole!" },
  },
  TeamMemberOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "TeamMemberOrderField!" },
  },
  TeamOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "TeamOrderField!" },
  },
  TeamRemoveMemberAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    isLdapMapped: { __type: "Boolean" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    team: { __type: "Team" },
    teamName: { __type: "String" },
    teamResourcePath: { __type: "URI" },
    teamUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  TeamRemoveRepositoryAuditEntry: {
    __typename: { __type: "String!" },
    action: { __type: "String!" },
    actor: { __type: "AuditEntryActor" },
    actorIp: { __type: "String" },
    actorLocation: { __type: "ActorLocation" },
    actorLogin: { __type: "String" },
    actorResourcePath: { __type: "URI" },
    actorUrl: { __type: "URI" },
    createdAt: { __type: "PreciseDateTime!" },
    id: { __type: "ID!" },
    isLdapMapped: { __type: "Boolean" },
    operationType: { __type: "OperationType" },
    organization: { __type: "Organization" },
    organizationName: { __type: "String" },
    organizationResourcePath: { __type: "URI" },
    organizationUrl: { __type: "URI" },
    repository: { __type: "Repository" },
    repositoryName: { __type: "String" },
    repositoryResourcePath: { __type: "URI" },
    repositoryUrl: { __type: "URI" },
    team: { __type: "Team" },
    teamName: { __type: "String" },
    teamResourcePath: { __type: "URI" },
    teamUrl: { __type: "URI" },
    user: { __type: "User" },
    userLogin: { __type: "String" },
    userResourcePath: { __type: "URI" },
    userUrl: { __type: "URI" },
  },
  TeamRepositoryConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[TeamRepositoryEdge]" },
    nodes: { __type: "[Repository]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  TeamRepositoryEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "Repository!" },
    permission: { __type: "RepositoryPermission!" },
  },
  TeamRepositoryOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "TeamRepositoryOrderField!" },
  },
  TextMatch: {
    __typename: { __type: "String!" },
    fragment: { __type: "String!" },
    highlights: { __type: "[TextMatchHighlight!]!" },
    property: { __type: "String!" },
  },
  TextMatchHighlight: {
    __typename: { __type: "String!" },
    beginIndice: { __type: "Int!" },
    endIndice: { __type: "Int!" },
    text: { __type: "String!" },
  },
  Topic: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    name: { __type: "String!" },
    relatedTopics: { __type: "[Topic!]!", __args: { first: "Int" } },
    repositories: {
      __type: "RepositoryConnection!",
      __args: {
        affiliations: "[RepositoryAffiliation]",
        after: "String",
        before: "String",
        first: "Int",
        hasIssuesEnabled: "Boolean",
        isLocked: "Boolean",
        last: "Int",
        orderBy: "RepositoryOrder",
        ownerAffiliations: "[RepositoryAffiliation]",
        privacy: "RepositoryPrivacy",
        sponsorableOnly: "Boolean",
      },
    },
    stargazerCount: { __type: "Int!" },
    stargazers: {
      __type: "StargazerConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "StarOrder",
      },
    },
    viewerHasStarred: { __type: "Boolean!" },
  },
  TopicAuditEntryData: {
    __typename: { __type: "String!" },
    topic: { __type: "Topic" },
    topicName: { __type: "String" },
    $on: { __type: "$TopicAuditEntryData!" },
  },
  TransferEnterpriseOrganizationInput: {
    clientMutationId: { __type: "String" },
    destinationEnterpriseId: { __type: "ID!" },
    organizationId: { __type: "ID!" },
  },
  TransferEnterpriseOrganizationPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    organization: { __type: "Organization" },
  },
  TransferIssueInput: {
    clientMutationId: { __type: "String" },
    createLabelsIfMissing: { __type: "Boolean" },
    issueId: { __type: "ID!" },
    repositoryId: { __type: "ID!" },
  },
  TransferIssuePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    issue: { __type: "Issue" },
  },
  TransferredEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    fromRepository: { __type: "Repository" },
    id: { __type: "ID!" },
    issue: { __type: "Issue!" },
  },
  Tree: {
    __typename: { __type: "String!" },
    abbreviatedOid: { __type: "String!" },
    commitResourcePath: { __type: "URI!" },
    commitUrl: { __type: "URI!" },
    entries: { __type: "[TreeEntry!]" },
    id: { __type: "ID!" },
    oid: { __type: "GitObjectID!" },
    repository: { __type: "Repository!" },
  },
  TreeEntry: {
    __typename: { __type: "String!" },
    extension: { __type: "String" },
    isGenerated: { __type: "Boolean!" },
    language: { __type: "Language" },
    lineCount: { __type: "Int" },
    mode: { __type: "Int!" },
    name: { __type: "String!" },
    nameRaw: { __type: "Base64String!" },
    object: { __type: "GitObject" },
    oid: { __type: "GitObjectID!" },
    path: { __type: "String" },
    pathRaw: { __type: "Base64String" },
    repository: { __type: "Repository!" },
    size: { __type: "Int!" },
    submodule: { __type: "Submodule" },
    type: { __type: "String!" },
  },
  UnarchiveProjectV2ItemInput: {
    clientMutationId: { __type: "String" },
    itemId: { __type: "ID!" },
    projectId: { __type: "ID!" },
  },
  UnarchiveProjectV2ItemPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    item: { __type: "ProjectV2Item" },
  },
  UnarchiveRepositoryInput: {
    clientMutationId: { __type: "String" },
    repositoryId: { __type: "ID!" },
  },
  UnarchiveRepositoryPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    repository: { __type: "Repository" },
  },
  UnassignedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    assignable: { __type: "Assignable!" },
    assignee: { __type: "Assignee" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    user: { __type: "User" },
  },
  UnfollowOrganizationInput: {
    clientMutationId: { __type: "String" },
    organizationId: { __type: "ID!" },
  },
  UnfollowOrganizationPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    organization: { __type: "Organization" },
  },
  UnfollowUserInput: {
    clientMutationId: { __type: "String" },
    userId: { __type: "ID!" },
  },
  UnfollowUserPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    user: { __type: "User" },
  },
  UniformResourceLocatable: {
    __typename: { __type: "String!" },
    resourcePath: { __type: "URI!" },
    url: { __type: "URI!" },
    $on: { __type: "$UniformResourceLocatable!" },
  },
  UnknownSignature: {
    __typename: { __type: "String!" },
    email: { __type: "String!" },
    isValid: { __type: "Boolean!" },
    payload: { __type: "String!" },
    signature: { __type: "String!" },
    signer: { __type: "User" },
    state: { __type: "GitSignatureState!" },
    wasSignedByGitHub: { __type: "Boolean!" },
  },
  UnlabeledEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    label: { __type: "Label!" },
    labelable: { __type: "Labelable!" },
  },
  UnlinkProjectV2FromRepositoryInput: {
    clientMutationId: { __type: "String" },
    projectId: { __type: "ID!" },
    repositoryId: { __type: "ID!" },
  },
  UnlinkProjectV2FromRepositoryPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    repository: { __type: "Repository" },
  },
  UnlinkProjectV2FromTeamInput: {
    clientMutationId: { __type: "String" },
    projectId: { __type: "ID!" },
    teamId: { __type: "ID!" },
  },
  UnlinkProjectV2FromTeamPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    team: { __type: "Team" },
  },
  UnlinkRepositoryFromProjectInput: {
    clientMutationId: { __type: "String" },
    projectId: { __type: "ID!" },
    repositoryId: { __type: "ID!" },
  },
  UnlinkRepositoryFromProjectPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    project: { __type: "Project" },
    repository: { __type: "Repository" },
  },
  UnlockLockableInput: {
    clientMutationId: { __type: "String" },
    lockableId: { __type: "ID!" },
  },
  UnlockLockablePayload: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    clientMutationId: { __type: "String" },
    unlockedRecord: { __type: "Lockable" },
  },
  UnlockedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    lockable: { __type: "Lockable!" },
  },
  UnmarkDiscussionCommentAsAnswerInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  UnmarkDiscussionCommentAsAnswerPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    discussion: { __type: "Discussion" },
  },
  UnmarkFileAsViewedInput: {
    clientMutationId: { __type: "String" },
    path: { __type: "String!" },
    pullRequestId: { __type: "ID!" },
  },
  UnmarkFileAsViewedPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pullRequest: { __type: "PullRequest" },
  },
  UnmarkIssueAsDuplicateInput: {
    canonicalId: { __type: "ID!" },
    clientMutationId: { __type: "String" },
    duplicateId: { __type: "ID!" },
  },
  UnmarkIssueAsDuplicatePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    duplicate: { __type: "IssueOrPullRequest" },
  },
  UnmarkProjectV2AsTemplateInput: {
    clientMutationId: { __type: "String" },
    projectId: { __type: "ID!" },
  },
  UnmarkProjectV2AsTemplatePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    projectV2: { __type: "ProjectV2" },
  },
  UnmarkedAsDuplicateEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    canonical: { __type: "IssueOrPullRequest" },
    createdAt: { __type: "DateTime!" },
    duplicate: { __type: "IssueOrPullRequest" },
    id: { __type: "ID!" },
    isCrossRepository: { __type: "Boolean!" },
  },
  UnminimizeCommentInput: {
    clientMutationId: { __type: "String" },
    subjectId: { __type: "ID!" },
  },
  UnminimizeCommentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    unminimizedComment: { __type: "Minimizable" },
  },
  UnpinIssueInput: {
    clientMutationId: { __type: "String" },
    issueId: { __type: "ID!" },
  },
  UnpinIssuePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    issue: { __type: "Issue" },
  },
  UnpinnedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    issue: { __type: "Issue!" },
  },
  UnresolveReviewThreadInput: {
    clientMutationId: { __type: "String" },
    threadId: { __type: "ID!" },
  },
  UnresolveReviewThreadPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    thread: { __type: "PullRequestReviewThread" },
  },
  UnsubscribedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    subscribable: { __type: "Subscribable!" },
  },
  Updatable: {
    __typename: { __type: "String!" },
    viewerCanUpdate: { __type: "Boolean!" },
    $on: { __type: "$Updatable!" },
  },
  UpdatableComment: {
    __typename: { __type: "String!" },
    viewerCannotUpdateReasons: { __type: "[CommentCannotUpdateReason!]!" },
    $on: { __type: "$UpdatableComment!" },
  },
  UpdateBranchProtectionRuleInput: {
    allowsDeletions: { __type: "Boolean" },
    allowsForcePushes: { __type: "Boolean" },
    blocksCreations: { __type: "Boolean" },
    branchProtectionRuleId: { __type: "ID!" },
    bypassForcePushActorIds: { __type: "[ID!]" },
    bypassPullRequestActorIds: { __type: "[ID!]" },
    clientMutationId: { __type: "String" },
    dismissesStaleReviews: { __type: "Boolean" },
    isAdminEnforced: { __type: "Boolean" },
    lockAllowsFetchAndMerge: { __type: "Boolean" },
    lockBranch: { __type: "Boolean" },
    pattern: { __type: "String" },
    pushActorIds: { __type: "[ID!]" },
    requireLastPushApproval: { __type: "Boolean" },
    requiredApprovingReviewCount: { __type: "Int" },
    requiredDeploymentEnvironments: { __type: "[String!]" },
    requiredStatusCheckContexts: { __type: "[String!]" },
    requiredStatusChecks: { __type: "[RequiredStatusCheckInput!]" },
    requiresApprovingReviews: { __type: "Boolean" },
    requiresCodeOwnerReviews: { __type: "Boolean" },
    requiresCommitSignatures: { __type: "Boolean" },
    requiresConversationResolution: { __type: "Boolean" },
    requiresDeployments: { __type: "Boolean" },
    requiresLinearHistory: { __type: "Boolean" },
    requiresStatusChecks: { __type: "Boolean" },
    requiresStrictStatusChecks: { __type: "Boolean" },
    restrictsPushes: { __type: "Boolean" },
    restrictsReviewDismissals: { __type: "Boolean" },
    reviewDismissalActorIds: { __type: "[ID!]" },
  },
  UpdateBranchProtectionRulePayload: {
    __typename: { __type: "String!" },
    branchProtectionRule: { __type: "BranchProtectionRule" },
    clientMutationId: { __type: "String" },
  },
  UpdateCheckRunInput: {
    actions: { __type: "[CheckRunAction!]" },
    checkRunId: { __type: "ID!" },
    clientMutationId: { __type: "String" },
    completedAt: { __type: "DateTime" },
    conclusion: { __type: "CheckConclusionState" },
    detailsUrl: { __type: "URI" },
    externalId: { __type: "String" },
    name: { __type: "String" },
    output: { __type: "CheckRunOutput" },
    repositoryId: { __type: "ID!" },
    startedAt: { __type: "DateTime" },
    status: { __type: "RequestableCheckStatusState" },
  },
  UpdateCheckRunPayload: {
    __typename: { __type: "String!" },
    checkRun: { __type: "CheckRun" },
    clientMutationId: { __type: "String" },
  },
  UpdateCheckSuitePreferencesInput: {
    autoTriggerPreferences: { __type: "[CheckSuiteAutoTriggerPreference!]!" },
    clientMutationId: { __type: "String" },
    repositoryId: { __type: "ID!" },
  },
  UpdateCheckSuitePreferencesPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    repository: { __type: "Repository" },
  },
  UpdateDiscussionCommentInput: {
    body: { __type: "String!" },
    clientMutationId: { __type: "String" },
    commentId: { __type: "ID!" },
  },
  UpdateDiscussionCommentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    comment: { __type: "DiscussionComment" },
  },
  UpdateDiscussionInput: {
    body: { __type: "String" },
    categoryId: { __type: "ID" },
    clientMutationId: { __type: "String" },
    discussionId: { __type: "ID!" },
    title: { __type: "String" },
  },
  UpdateDiscussionPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    discussion: { __type: "Discussion" },
  },
  UpdateEnterpriseAdministratorRoleInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    login: { __type: "String!" },
    role: { __type: "EnterpriseAdministratorRole!" },
  },
  UpdateEnterpriseAdministratorRolePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    message: { __type: "String" },
  },
  UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    policyValue: {
      __type: "EnterpriseAllowPrivateRepositoryForkingPolicyValue",
    },
    settingValue: { __type: "EnterpriseEnabledDisabledSettingValue!" },
  },
  UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    enterprise: { __type: "Enterprise" },
    message: { __type: "String" },
  },
  UpdateEnterpriseDefaultRepositoryPermissionSettingInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    settingValue: {
      __type: "EnterpriseDefaultRepositoryPermissionSettingValue!",
    },
  },
  UpdateEnterpriseDefaultRepositoryPermissionSettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    enterprise: { __type: "Enterprise" },
    message: { __type: "String" },
  },
  UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    settingValue: { __type: "EnterpriseEnabledDisabledSettingValue!" },
  },
  UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    enterprise: { __type: "Enterprise" },
    message: { __type: "String" },
  },
  UpdateEnterpriseMembersCanCreateRepositoriesSettingInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    membersCanCreateInternalRepositories: { __type: "Boolean" },
    membersCanCreatePrivateRepositories: { __type: "Boolean" },
    membersCanCreatePublicRepositories: { __type: "Boolean" },
    membersCanCreateRepositoriesPolicyEnabled: { __type: "Boolean" },
    settingValue: {
      __type: "EnterpriseMembersCanCreateRepositoriesSettingValue",
    },
  },
  UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    enterprise: { __type: "Enterprise" },
    message: { __type: "String" },
  },
  UpdateEnterpriseMembersCanDeleteIssuesSettingInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    settingValue: { __type: "EnterpriseEnabledDisabledSettingValue!" },
  },
  UpdateEnterpriseMembersCanDeleteIssuesSettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    enterprise: { __type: "Enterprise" },
    message: { __type: "String" },
  },
  UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    settingValue: { __type: "EnterpriseEnabledDisabledSettingValue!" },
  },
  UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    enterprise: { __type: "Enterprise" },
    message: { __type: "String" },
  },
  UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    settingValue: { __type: "EnterpriseEnabledDisabledSettingValue!" },
  },
  UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    enterprise: { __type: "Enterprise" },
    message: { __type: "String" },
  },
  UpdateEnterpriseMembersCanMakePurchasesSettingInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    settingValue: { __type: "EnterpriseMembersCanMakePurchasesSettingValue!" },
  },
  UpdateEnterpriseMembersCanMakePurchasesSettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    enterprise: { __type: "Enterprise" },
    message: { __type: "String" },
  },
  UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    settingValue: { __type: "EnterpriseEnabledDisabledSettingValue!" },
  },
  UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    enterprise: { __type: "Enterprise" },
    message: { __type: "String" },
  },
  UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    settingValue: { __type: "EnterpriseEnabledDisabledSettingValue!" },
  },
  UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    enterprise: { __type: "Enterprise" },
    message: { __type: "String" },
  },
  UpdateEnterpriseOrganizationProjectsSettingInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    settingValue: { __type: "EnterpriseEnabledDisabledSettingValue!" },
  },
  UpdateEnterpriseOrganizationProjectsSettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    enterprise: { __type: "Enterprise" },
    message: { __type: "String" },
  },
  UpdateEnterpriseOwnerOrganizationRoleInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    organizationId: { __type: "ID!" },
    organizationRole: { __type: "RoleInOrganization!" },
  },
  UpdateEnterpriseOwnerOrganizationRolePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    message: { __type: "String" },
  },
  UpdateEnterpriseProfileInput: {
    clientMutationId: { __type: "String" },
    description: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    location: { __type: "String" },
    name: { __type: "String" },
    websiteUrl: { __type: "String" },
  },
  UpdateEnterpriseProfilePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    enterprise: { __type: "Enterprise" },
  },
  UpdateEnterpriseRepositoryProjectsSettingInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    settingValue: { __type: "EnterpriseEnabledDisabledSettingValue!" },
  },
  UpdateEnterpriseRepositoryProjectsSettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    enterprise: { __type: "Enterprise" },
    message: { __type: "String" },
  },
  UpdateEnterpriseTeamDiscussionsSettingInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    settingValue: { __type: "EnterpriseEnabledDisabledSettingValue!" },
  },
  UpdateEnterpriseTeamDiscussionsSettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    enterprise: { __type: "Enterprise" },
    message: { __type: "String" },
  },
  UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput: {
    clientMutationId: { __type: "String" },
    enterpriseId: { __type: "ID!" },
    settingValue: { __type: "EnterpriseEnabledSettingValue!" },
  },
  UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    enterprise: { __type: "Enterprise" },
    message: { __type: "String" },
  },
  UpdateEnvironmentInput: {
    clientMutationId: { __type: "String" },
    environmentId: { __type: "ID!" },
    preventSelfReview: { __type: "Boolean" },
    reviewers: { __type: "[ID!]" },
    waitTimer: { __type: "Int" },
  },
  UpdateEnvironmentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    environment: { __type: "Environment" },
  },
  UpdateIpAllowListEnabledSettingInput: {
    clientMutationId: { __type: "String" },
    ownerId: { __type: "ID!" },
    settingValue: { __type: "IpAllowListEnabledSettingValue!" },
  },
  UpdateIpAllowListEnabledSettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    owner: { __type: "IpAllowListOwner" },
  },
  UpdateIpAllowListEntryInput: {
    allowListValue: { __type: "String!" },
    clientMutationId: { __type: "String" },
    ipAllowListEntryId: { __type: "ID!" },
    isActive: { __type: "Boolean!" },
    name: { __type: "String" },
  },
  UpdateIpAllowListEntryPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    ipAllowListEntry: { __type: "IpAllowListEntry" },
  },
  UpdateIpAllowListForInstalledAppsEnabledSettingInput: {
    clientMutationId: { __type: "String" },
    ownerId: { __type: "ID!" },
    settingValue: { __type: "IpAllowListForInstalledAppsEnabledSettingValue!" },
  },
  UpdateIpAllowListForInstalledAppsEnabledSettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    owner: { __type: "IpAllowListOwner" },
  },
  UpdateIssueCommentInput: {
    body: { __type: "String!" },
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  UpdateIssueCommentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    issueComment: { __type: "IssueComment" },
  },
  UpdateIssueInput: {
    assigneeIds: { __type: "[ID!]" },
    body: { __type: "String" },
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
    labelIds: { __type: "[ID!]" },
    milestoneId: { __type: "ID" },
    projectIds: { __type: "[ID!]" },
    state: { __type: "IssueState" },
    title: { __type: "String" },
  },
  UpdateIssuePayload: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    clientMutationId: { __type: "String" },
    issue: { __type: "Issue" },
  },
  UpdateNotificationRestrictionSettingInput: {
    clientMutationId: { __type: "String" },
    ownerId: { __type: "ID!" },
    settingValue: { __type: "NotificationRestrictionSettingValue!" },
  },
  UpdateNotificationRestrictionSettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    owner: { __type: "VerifiableDomainOwner" },
  },
  UpdateOrganizationAllowPrivateRepositoryForkingSettingInput: {
    clientMutationId: { __type: "String" },
    forkingEnabled: { __type: "Boolean!" },
    organizationId: { __type: "ID!" },
  },
  UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    message: { __type: "String" },
    organization: { __type: "Organization" },
  },
  UpdateOrganizationWebCommitSignoffSettingInput: {
    clientMutationId: { __type: "String" },
    organizationId: { __type: "ID!" },
    webCommitSignoffRequired: { __type: "Boolean!" },
  },
  UpdateOrganizationWebCommitSignoffSettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    message: { __type: "String" },
    organization: { __type: "Organization" },
  },
  UpdateParameters: {
    __typename: { __type: "String!" },
    updateAllowsFetchAndMerge: { __type: "Boolean!" },
  },
  UpdateParametersInput: { updateAllowsFetchAndMerge: { __type: "Boolean!" } },
  UpdateProjectCardInput: {
    clientMutationId: { __type: "String" },
    isArchived: { __type: "Boolean" },
    note: { __type: "String" },
    projectCardId: { __type: "ID!" },
  },
  UpdateProjectCardPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    projectCard: { __type: "ProjectCard" },
  },
  UpdateProjectColumnInput: {
    clientMutationId: { __type: "String" },
    name: { __type: "String!" },
    projectColumnId: { __type: "ID!" },
  },
  UpdateProjectColumnPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    projectColumn: { __type: "ProjectColumn" },
  },
  UpdateProjectInput: {
    body: { __type: "String" },
    clientMutationId: { __type: "String" },
    name: { __type: "String" },
    projectId: { __type: "ID!" },
    public: { __type: "Boolean" },
    state: { __type: "ProjectState" },
  },
  UpdateProjectPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    project: { __type: "Project" },
  },
  UpdateProjectV2CollaboratorsInput: {
    clientMutationId: { __type: "String" },
    collaborators: { __type: "[ProjectV2Collaborator!]!" },
    projectId: { __type: "ID!" },
  },
  UpdateProjectV2CollaboratorsPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    collaborators: {
      __type: "ProjectV2ActorConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
  },
  UpdateProjectV2DraftIssueInput: {
    assigneeIds: { __type: "[ID!]" },
    body: { __type: "String" },
    clientMutationId: { __type: "String" },
    draftIssueId: { __type: "ID!" },
    title: { __type: "String" },
  },
  UpdateProjectV2DraftIssuePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    draftIssue: { __type: "DraftIssue" },
  },
  UpdateProjectV2Input: {
    clientMutationId: { __type: "String" },
    closed: { __type: "Boolean" },
    projectId: { __type: "ID!" },
    public: { __type: "Boolean" },
    readme: { __type: "String" },
    shortDescription: { __type: "String" },
    title: { __type: "String" },
  },
  UpdateProjectV2ItemFieldValueInput: {
    clientMutationId: { __type: "String" },
    fieldId: { __type: "ID!" },
    itemId: { __type: "ID!" },
    projectId: { __type: "ID!" },
    value: { __type: "ProjectV2FieldValue!" },
  },
  UpdateProjectV2ItemFieldValuePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    projectV2Item: { __type: "ProjectV2Item" },
  },
  UpdateProjectV2ItemPositionInput: {
    afterId: { __type: "ID" },
    clientMutationId: { __type: "String" },
    itemId: { __type: "ID!" },
    projectId: { __type: "ID!" },
  },
  UpdateProjectV2ItemPositionPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    items: {
      __type: "ProjectV2ItemConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
  },
  UpdateProjectV2Payload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    projectV2: { __type: "ProjectV2" },
  },
  UpdatePullRequestBranchInput: {
    clientMutationId: { __type: "String" },
    expectedHeadOid: { __type: "GitObjectID" },
    pullRequestId: { __type: "ID!" },
    updateMethod: { __type: "PullRequestBranchUpdateMethod" },
  },
  UpdatePullRequestBranchPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pullRequest: { __type: "PullRequest" },
  },
  UpdatePullRequestInput: {
    assigneeIds: { __type: "[ID!]" },
    baseRefName: { __type: "String" },
    body: { __type: "String" },
    clientMutationId: { __type: "String" },
    labelIds: { __type: "[ID!]" },
    maintainerCanModify: { __type: "Boolean" },
    milestoneId: { __type: "ID" },
    projectIds: { __type: "[ID!]" },
    pullRequestId: { __type: "ID!" },
    state: { __type: "PullRequestUpdateState" },
    title: { __type: "String" },
  },
  UpdatePullRequestPayload: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    clientMutationId: { __type: "String" },
    pullRequest: { __type: "PullRequest" },
  },
  UpdatePullRequestReviewCommentInput: {
    body: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pullRequestReviewCommentId: { __type: "ID!" },
  },
  UpdatePullRequestReviewCommentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pullRequestReviewComment: { __type: "PullRequestReviewComment" },
  },
  UpdatePullRequestReviewInput: {
    body: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pullRequestReviewId: { __type: "ID!" },
  },
  UpdatePullRequestReviewPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pullRequestReview: { __type: "PullRequestReview" },
  },
  UpdateRefInput: {
    clientMutationId: { __type: "String" },
    force: { __type: "Boolean" },
    oid: { __type: "GitObjectID!" },
    refId: { __type: "ID!" },
  },
  UpdateRefPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    ref: { __type: "Ref" },
  },
  UpdateRepositoryInput: {
    clientMutationId: { __type: "String" },
    description: { __type: "String" },
    hasDiscussionsEnabled: { __type: "Boolean" },
    hasIssuesEnabled: { __type: "Boolean" },
    hasProjectsEnabled: { __type: "Boolean" },
    hasWikiEnabled: { __type: "Boolean" },
    homepageUrl: { __type: "URI" },
    name: { __type: "String" },
    repositoryId: { __type: "ID!" },
    template: { __type: "Boolean" },
  },
  UpdateRepositoryPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    repository: { __type: "Repository" },
  },
  UpdateRepositoryRulesetInput: {
    bypassActors: { __type: "[RepositoryRulesetBypassActorInput!]" },
    clientMutationId: { __type: "String" },
    conditions: { __type: "RepositoryRuleConditionsInput" },
    enforcement: { __type: "RuleEnforcement" },
    name: { __type: "String" },
    repositoryRulesetId: { __type: "ID!" },
    rules: { __type: "[RepositoryRuleInput!]" },
    target: { __type: "RepositoryRulesetTarget" },
  },
  UpdateRepositoryRulesetPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    ruleset: { __type: "RepositoryRuleset" },
  },
  UpdateRepositoryWebCommitSignoffSettingInput: {
    clientMutationId: { __type: "String" },
    repositoryId: { __type: "ID!" },
    webCommitSignoffRequired: { __type: "Boolean!" },
  },
  UpdateRepositoryWebCommitSignoffSettingPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    message: { __type: "String" },
    repository: { __type: "Repository" },
  },
  UpdateSponsorshipPreferencesInput: {
    clientMutationId: { __type: "String" },
    privacyLevel: { __type: "SponsorshipPrivacy" },
    receiveEmails: { __type: "Boolean" },
    sponsorId: { __type: "ID" },
    sponsorLogin: { __type: "String" },
    sponsorableId: { __type: "ID" },
    sponsorableLogin: { __type: "String" },
  },
  UpdateSponsorshipPreferencesPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    sponsorship: { __type: "Sponsorship" },
  },
  UpdateSubscriptionInput: {
    clientMutationId: { __type: "String" },
    state: { __type: "SubscriptionState!" },
    subscribableId: { __type: "ID!" },
  },
  UpdateSubscriptionPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    subscribable: { __type: "Subscribable" },
  },
  UpdateTeamDiscussionCommentInput: {
    body: { __type: "String!" },
    bodyVersion: { __type: "String" },
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  UpdateTeamDiscussionCommentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    teamDiscussionComment: { __type: "TeamDiscussionComment" },
  },
  UpdateTeamDiscussionInput: {
    body: { __type: "String" },
    bodyVersion: { __type: "String" },
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
    pinned: { __type: "Boolean" },
    title: { __type: "String" },
  },
  UpdateTeamDiscussionPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    teamDiscussion: { __type: "TeamDiscussion" },
  },
  UpdateTeamsRepositoryInput: {
    clientMutationId: { __type: "String" },
    permission: { __type: "RepositoryPermission!" },
    repositoryId: { __type: "ID!" },
    teamIds: { __type: "[ID!]!" },
  },
  UpdateTeamsRepositoryPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    repository: { __type: "Repository" },
    teams: { __type: "[Team!]" },
  },
  UpdateTopicsInput: {
    clientMutationId: { __type: "String" },
    repositoryId: { __type: "ID!" },
    topicNames: { __type: "[String!]!" },
  },
  UpdateTopicsPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    invalidTopicNames: { __type: "[String!]" },
    repository: { __type: "Repository" },
  },
  User: {
    __typename: { __type: "String!" },
    anyPinnableItems: {
      __type: "Boolean!",
      __args: { type: "PinnableItemType" },
    },
    avatarUrl: { __type: "URI!", __args: { size: "Int" } },
    bio: { __type: "String" },
    bioHTML: { __type: "HTML!" },
    canReceiveOrganizationEmailsWhenNotificationsRestricted: {
      __type: "Boolean!",
      __args: { login: "String!" },
    },
    commitComments: {
      __type: "CommitCommentConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    company: { __type: "String" },
    companyHTML: { __type: "HTML!" },
    contributionsCollection: {
      __type: "ContributionsCollection!",
      __args: { from: "DateTime", organizationID: "ID", to: "DateTime" },
    },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    email: { __type: "String!" },
    enterprises: {
      __type: "EnterpriseConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        membershipType: "EnterpriseMembershipType",
        orderBy: "EnterpriseOrder",
      },
    },
    estimatedNextSponsorsPayoutInCents: { __type: "Int!" },
    followers: {
      __type: "FollowerConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    following: {
      __type: "FollowingConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    gist: { __type: "Gist", __args: { name: "String!" } },
    gistComments: {
      __type: "GistCommentConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    gists: {
      __type: "GistConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "GistOrder",
        privacy: "GistPrivacy",
      },
    },
    hasSponsorsListing: { __type: "Boolean!" },
    hovercard: { __type: "Hovercard!", __args: { primarySubjectId: "ID" } },
    id: { __type: "ID!" },
    interactionAbility: { __type: "RepositoryInteractionAbility" },
    isBountyHunter: { __type: "Boolean!" },
    isCampusExpert: { __type: "Boolean!" },
    isDeveloperProgramMember: { __type: "Boolean!" },
    isEmployee: { __type: "Boolean!" },
    isFollowingViewer: { __type: "Boolean!" },
    isGitHubStar: { __type: "Boolean!" },
    isHireable: { __type: "Boolean!" },
    isSiteAdmin: { __type: "Boolean!" },
    isSponsoredBy: { __type: "Boolean!", __args: { accountLogin: "String!" } },
    isSponsoringViewer: { __type: "Boolean!" },
    isViewer: { __type: "Boolean!" },
    issueComments: {
      __type: "IssueCommentConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "IssueCommentOrder",
      },
    },
    issues: {
      __type: "IssueConnection!",
      __args: {
        after: "String",
        before: "String",
        filterBy: "IssueFilters",
        first: "Int",
        labels: "[String!]",
        last: "Int",
        orderBy: "IssueOrder",
        states: "[IssueState!]",
      },
    },
    itemShowcase: { __type: "ProfileItemShowcase!" },
    location: { __type: "String" },
    login: { __type: "String!" },
    monthlyEstimatedSponsorsIncomeInCents: { __type: "Int!" },
    name: { __type: "String" },
    notificationThreads: {
      __type: "NotificationThreadConnection!",
      __args: {
        after: "String",
        before: "String",
        filterBy: "NotificationThreadFilters",
        first: "Int",
        last: "Int",
        query: "String",
      },
    },
    organization: { __type: "Organization", __args: { login: "String!" } },
    organizationVerifiedDomainEmails: {
      __type: "[String!]!",
      __args: { login: "String!" },
    },
    organizations: {
      __type: "OrganizationConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "OrganizationOrder",
      },
    },
    packages: {
      __type: "PackageConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        names: "[String]",
        orderBy: "PackageOrder",
        packageType: "PackageType",
        repositoryId: "ID",
      },
    },
    pinnableItems: {
      __type: "PinnableItemConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        types: "[PinnableItemType!]",
      },
    },
    pinnedItems: {
      __type: "PinnableItemConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        types: "[PinnableItemType!]",
      },
    },
    pinnedItemsRemaining: { __type: "Int!" },
    project: { __type: "Project", __args: { number: "Int!" } },
    projectV2: { __type: "ProjectV2", __args: { number: "Int!" } },
    projects: {
      __type: "ProjectConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectOrder",
        search: "String",
        states: "[ProjectState!]",
      },
    },
    projectsResourcePath: { __type: "URI!" },
    projectsUrl: { __type: "URI!" },
    projectsV2: {
      __type: "ProjectV2Connection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "ProjectV2Order",
        query: "String",
      },
    },
    pronouns: { __type: "String" },
    publicKeys: {
      __type: "PublicKeyConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    pullRequests: {
      __type: "PullRequestConnection!",
      __args: {
        after: "String",
        baseRefName: "String",
        before: "String",
        first: "Int",
        headRefName: "String",
        labels: "[String!]",
        last: "Int",
        orderBy: "IssueOrder",
        states: "[PullRequestState!]",
      },
    },
    recentProjects: {
      __type: "ProjectV2Connection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    repositories: {
      __type: "RepositoryConnection!",
      __args: {
        affiliations: "[RepositoryAffiliation]",
        after: "String",
        before: "String",
        first: "Int",
        hasIssuesEnabled: "Boolean",
        isArchived: "Boolean",
        isFork: "Boolean",
        isLocked: "Boolean",
        last: "Int",
        orderBy: "RepositoryOrder",
        ownerAffiliations: "[RepositoryAffiliation]",
        privacy: "RepositoryPrivacy",
      },
    },
    repositoriesContributedTo: {
      __type: "RepositoryConnection!",
      __args: {
        after: "String",
        before: "String",
        contributionTypes: "[RepositoryContributionType]",
        first: "Int",
        hasIssues: "Boolean",
        includeUserRepositories: "Boolean",
        isLocked: "Boolean",
        last: "Int",
        orderBy: "RepositoryOrder",
        privacy: "RepositoryPrivacy",
      },
    },
    repository: {
      __type: "Repository",
      __args: { followRenames: "Boolean", name: "String!" },
    },
    repositoryDiscussionComments: {
      __type: "DiscussionCommentConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        onlyAnswers: "Boolean",
        repositoryId: "ID",
      },
    },
    repositoryDiscussions: {
      __type: "DiscussionConnection!",
      __args: {
        after: "String",
        answered: "Boolean",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "DiscussionOrder",
        repositoryId: "ID",
        states: "[DiscussionState!]",
      },
    },
    resourcePath: { __type: "URI!" },
    savedReplies: {
      __type: "SavedReplyConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "SavedReplyOrder",
      },
    },
    socialAccounts: {
      __type: "SocialAccountConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    sponsoring: {
      __type: "SponsorConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "SponsorOrder",
      },
    },
    sponsors: {
      __type: "SponsorConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "SponsorOrder",
        tierId: "ID",
      },
    },
    sponsorsActivities: {
      __type: "SponsorsActivityConnection!",
      __args: {
        actions: "[SponsorsActivityAction!]",
        after: "String",
        before: "String",
        first: "Int",
        includeAsSponsor: "Boolean",
        includePrivate: "Boolean",
        last: "Int",
        orderBy: "SponsorsActivityOrder",
        period: "SponsorsActivityPeriod",
        since: "DateTime",
        until: "DateTime",
      },
    },
    sponsorsListing: { __type: "SponsorsListing" },
    sponsorshipForViewerAsSponsor: {
      __type: "Sponsorship",
      __args: { activeOnly: "Boolean" },
    },
    sponsorshipForViewerAsSponsorable: {
      __type: "Sponsorship",
      __args: { activeOnly: "Boolean" },
    },
    sponsorshipNewsletters: {
      __type: "SponsorshipNewsletterConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "SponsorshipNewsletterOrder",
      },
    },
    sponsorshipsAsMaintainer: {
      __type: "SponsorshipConnection!",
      __args: {
        activeOnly: "Boolean",
        after: "String",
        before: "String",
        first: "Int",
        includePrivate: "Boolean",
        last: "Int",
        orderBy: "SponsorshipOrder",
      },
    },
    sponsorshipsAsSponsor: {
      __type: "SponsorshipConnection!",
      __args: {
        activeOnly: "Boolean",
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        maintainerLogins: "[String!]",
        orderBy: "SponsorshipOrder",
      },
    },
    starredRepositories: {
      __type: "StarredRepositoryConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "StarOrder",
        ownedByViewer: "Boolean",
      },
    },
    status: { __type: "UserStatus" },
    topRepositories: {
      __type: "RepositoryConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "RepositoryOrder!",
        since: "DateTime",
      },
    },
    totalSponsorshipAmountAsSponsorInCents: {
      __type: "Int",
      __args: {
        since: "DateTime",
        sponsorableLogins: "[String!]",
        until: "DateTime",
      },
    },
    twitterUsername: { __type: "String" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    viewerCanChangePinnedItems: { __type: "Boolean!" },
    viewerCanCreateProjects: { __type: "Boolean!" },
    viewerCanFollow: { __type: "Boolean!" },
    viewerCanSponsor: { __type: "Boolean!" },
    viewerIsFollowing: { __type: "Boolean!" },
    viewerIsSponsoring: { __type: "Boolean!" },
    watching: {
      __type: "RepositoryConnection!",
      __args: {
        affiliations: "[RepositoryAffiliation]",
        after: "String",
        before: "String",
        first: "Int",
        hasIssuesEnabled: "Boolean",
        isLocked: "Boolean",
        last: "Int",
        orderBy: "RepositoryOrder",
        ownerAffiliations: "[RepositoryAffiliation]",
        privacy: "RepositoryPrivacy",
      },
    },
    websiteUrl: { __type: "URI" },
  },
  UserBlockedEvent: {
    __typename: { __type: "String!" },
    actor: { __type: "Actor" },
    blockDuration: { __type: "UserBlockDuration!" },
    createdAt: { __type: "DateTime!" },
    id: { __type: "ID!" },
    subject: { __type: "User" },
  },
  UserConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserEdge]" },
    nodes: { __type: "[User]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  UserContentEdit: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    deletedAt: { __type: "DateTime" },
    deletedBy: { __type: "Actor" },
    diff: { __type: "String" },
    editedAt: { __type: "DateTime!" },
    editor: { __type: "Actor" },
    id: { __type: "ID!" },
    updatedAt: { __type: "DateTime!" },
  },
  UserContentEditConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserContentEditEdge]" },
    nodes: { __type: "[UserContentEdit]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  UserContentEditEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "UserContentEdit" },
  },
  UserEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "User" },
  },
  UserEmailMetadata: {
    __typename: { __type: "String!" },
    primary: { __type: "Boolean" },
    type: { __type: "String" },
    value: { __type: "String!" },
  },
  UserStatus: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    emoji: { __type: "String" },
    emojiHTML: { __type: "HTML" },
    expiresAt: { __type: "DateTime" },
    id: { __type: "ID!" },
    indicatesLimitedAvailability: { __type: "Boolean!" },
    message: { __type: "String" },
    organization: { __type: "Organization" },
    updatedAt: { __type: "DateTime!" },
    user: { __type: "User!" },
  },
  UserStatusConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserStatusEdge]" },
    nodes: { __type: "[UserStatus]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  UserStatusEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "UserStatus" },
  },
  UserStatusOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "UserStatusOrderField!" },
  },
  VerifiableDomain: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    dnsHostName: { __type: "URI" },
    domain: { __type: "URI!" },
    hasFoundHostName: { __type: "Boolean!" },
    hasFoundVerificationToken: { __type: "Boolean!" },
    id: { __type: "ID!" },
    isApproved: { __type: "Boolean!" },
    isRequiredForPolicyEnforcement: { __type: "Boolean!" },
    isVerified: { __type: "Boolean!" },
    owner: { __type: "VerifiableDomainOwner!" },
    punycodeEncodedDomain: { __type: "URI!" },
    tokenExpirationTime: { __type: "DateTime" },
    updatedAt: { __type: "DateTime!" },
    verificationToken: { __type: "String" },
  },
  VerifiableDomainConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[VerifiableDomainEdge]" },
    nodes: { __type: "[VerifiableDomain]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  VerifiableDomainEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "VerifiableDomain" },
  },
  VerifiableDomainOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "VerifiableDomainOrderField!" },
  },
  VerifiableDomainOwner: {
    __typename: { __type: "String!" },
    $on: { __type: "$VerifiableDomainOwner!" },
  },
  VerifyVerifiableDomainInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  VerifyVerifiableDomainPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    domain: { __type: "VerifiableDomain" },
  },
  ViewerHovercardContext: {
    __typename: { __type: "String!" },
    message: { __type: "String!" },
    octicon: { __type: "String!" },
    viewer: { __type: "User!" },
  },
  Votable: {
    __typename: { __type: "String!" },
    upvoteCount: { __type: "Int!" },
    viewerCanUpvote: { __type: "Boolean!" },
    viewerHasUpvoted: { __type: "Boolean!" },
    $on: { __type: "$Votable!" },
  },
  Workflow: {
    __typename: { __type: "String!" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    id: { __type: "ID!" },
    name: { __type: "String!" },
    resourcePath: { __type: "URI!" },
    runs: {
      __type: "WorkflowRunConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        orderBy: "WorkflowRunOrder",
      },
    },
    state: { __type: "WorkflowState!" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
  },
  WorkflowFileReference: {
    __typename: { __type: "String!" },
    path: { __type: "String!" },
    ref: { __type: "String" },
    repositoryId: { __type: "Int!" },
    sha: { __type: "String" },
  },
  WorkflowFileReferenceInput: {
    path: { __type: "String!" },
    ref: { __type: "String" },
    repositoryId: { __type: "Int!" },
    sha: { __type: "String" },
  },
  WorkflowRun: {
    __typename: { __type: "String!" },
    checkSuite: { __type: "CheckSuite!" },
    createdAt: { __type: "DateTime!" },
    databaseId: { __type: "Int" },
    deploymentReviews: {
      __type: "DeploymentReviewConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    event: { __type: "String!" },
    file: { __type: "WorkflowRunFile" },
    id: { __type: "ID!" },
    pendingDeploymentRequests: {
      __type: "DeploymentRequestConnection!",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    resourcePath: { __type: "URI!" },
    runNumber: { __type: "Int!" },
    updatedAt: { __type: "DateTime!" },
    url: { __type: "URI!" },
    workflow: { __type: "Workflow!" },
  },
  WorkflowRunConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[WorkflowRunEdge]" },
    nodes: { __type: "[WorkflowRun]" },
    pageInfo: { __type: "PageInfo!" },
    totalCount: { __type: "Int!" },
  },
  WorkflowRunEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String!" },
    node: { __type: "WorkflowRun" },
  },
  WorkflowRunFile: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    path: { __type: "String!" },
    repositoryFileUrl: { __type: "URI!" },
    repositoryName: { __type: "URI!" },
    resourcePath: { __type: "URI!" },
    run: { __type: "WorkflowRun!" },
    url: { __type: "URI!" },
    viewerCanPushRepository: { __type: "Boolean!" },
    viewerCanReadRepository: { __type: "Boolean!" },
  },
  WorkflowRunOrder: {
    direction: { __type: "OrderDirection!" },
    field: { __type: "WorkflowRunOrderField!" },
  },
  WorkflowsParameters: {
    __typename: { __type: "String!" },
    workflows: { __type: "[WorkflowFileReference!]!" },
  },
  WorkflowsParametersInput: {
    workflows: { __type: "[WorkflowFileReferenceInput!]!" },
  },
  mutation: {
    __typename: { __type: "String!" },
    abortQueuedMigrations: {
      __type: "AbortQueuedMigrationsPayload",
      __args: { input: "AbortQueuedMigrationsInput!" },
    },
    abortRepositoryMigration: {
      __type: "AbortRepositoryMigrationPayload",
      __args: { input: "AbortRepositoryMigrationInput!" },
    },
    acceptEnterpriseAdministratorInvitation: {
      __type: "AcceptEnterpriseAdministratorInvitationPayload",
      __args: { input: "AcceptEnterpriseAdministratorInvitationInput!" },
    },
    acceptTopicSuggestion: {
      __type: "AcceptTopicSuggestionPayload",
      __args: { input: "AcceptTopicSuggestionInput!" },
    },
    addAssigneesToAssignable: {
      __type: "AddAssigneesToAssignablePayload",
      __args: { input: "AddAssigneesToAssignableInput!" },
    },
    addComment: {
      __type: "AddCommentPayload",
      __args: { input: "AddCommentInput!" },
    },
    addDiscussionComment: {
      __type: "AddDiscussionCommentPayload",
      __args: { input: "AddDiscussionCommentInput!" },
    },
    addDiscussionPollVote: {
      __type: "AddDiscussionPollVotePayload",
      __args: { input: "AddDiscussionPollVoteInput!" },
    },
    addEnterpriseOrganizationMember: {
      __type: "AddEnterpriseOrganizationMemberPayload",
      __args: { input: "AddEnterpriseOrganizationMemberInput!" },
    },
    addEnterpriseSupportEntitlement: {
      __type: "AddEnterpriseSupportEntitlementPayload",
      __args: { input: "AddEnterpriseSupportEntitlementInput!" },
    },
    addLabelsToLabelable: {
      __type: "AddLabelsToLabelablePayload",
      __args: { input: "AddLabelsToLabelableInput!" },
    },
    addProjectCard: {
      __type: "AddProjectCardPayload",
      __args: { input: "AddProjectCardInput!" },
    },
    addProjectColumn: {
      __type: "AddProjectColumnPayload",
      __args: { input: "AddProjectColumnInput!" },
    },
    addProjectV2DraftIssue: {
      __type: "AddProjectV2DraftIssuePayload",
      __args: { input: "AddProjectV2DraftIssueInput!" },
    },
    addProjectV2ItemById: {
      __type: "AddProjectV2ItemByIdPayload",
      __args: { input: "AddProjectV2ItemByIdInput!" },
    },
    addPullRequestReview: {
      __type: "AddPullRequestReviewPayload",
      __args: { input: "AddPullRequestReviewInput!" },
    },
    addPullRequestReviewComment: {
      __type: "AddPullRequestReviewCommentPayload",
      __args: { input: "AddPullRequestReviewCommentInput!" },
    },
    addPullRequestReviewThread: {
      __type: "AddPullRequestReviewThreadPayload",
      __args: { input: "AddPullRequestReviewThreadInput!" },
    },
    addPullRequestReviewThreadReply: {
      __type: "AddPullRequestReviewThreadReplyPayload",
      __args: { input: "AddPullRequestReviewThreadReplyInput!" },
    },
    addReaction: {
      __type: "AddReactionPayload",
      __args: { input: "AddReactionInput!" },
    },
    addStar: { __type: "AddStarPayload", __args: { input: "AddStarInput!" } },
    addUpvote: {
      __type: "AddUpvotePayload",
      __args: { input: "AddUpvoteInput!" },
    },
    addVerifiableDomain: {
      __type: "AddVerifiableDomainPayload",
      __args: { input: "AddVerifiableDomainInput!" },
    },
    approveDeployments: {
      __type: "ApproveDeploymentsPayload",
      __args: { input: "ApproveDeploymentsInput!" },
    },
    approveVerifiableDomain: {
      __type: "ApproveVerifiableDomainPayload",
      __args: { input: "ApproveVerifiableDomainInput!" },
    },
    archiveProjectV2Item: {
      __type: "ArchiveProjectV2ItemPayload",
      __args: { input: "ArchiveProjectV2ItemInput!" },
    },
    archiveRepository: {
      __type: "ArchiveRepositoryPayload",
      __args: { input: "ArchiveRepositoryInput!" },
    },
    cancelEnterpriseAdminInvitation: {
      __type: "CancelEnterpriseAdminInvitationPayload",
      __args: { input: "CancelEnterpriseAdminInvitationInput!" },
    },
    cancelSponsorship: {
      __type: "CancelSponsorshipPayload",
      __args: { input: "CancelSponsorshipInput!" },
    },
    changeUserStatus: {
      __type: "ChangeUserStatusPayload",
      __args: { input: "ChangeUserStatusInput!" },
    },
    clearLabelsFromLabelable: {
      __type: "ClearLabelsFromLabelablePayload",
      __args: { input: "ClearLabelsFromLabelableInput!" },
    },
    clearProjectV2ItemFieldValue: {
      __type: "ClearProjectV2ItemFieldValuePayload",
      __args: { input: "ClearProjectV2ItemFieldValueInput!" },
    },
    cloneProject: {
      __type: "CloneProjectPayload",
      __args: { input: "CloneProjectInput!" },
    },
    cloneTemplateRepository: {
      __type: "CloneTemplateRepositoryPayload",
      __args: { input: "CloneTemplateRepositoryInput!" },
    },
    closeDiscussion: {
      __type: "CloseDiscussionPayload",
      __args: { input: "CloseDiscussionInput!" },
    },
    closeIssue: {
      __type: "CloseIssuePayload",
      __args: { input: "CloseIssueInput!" },
    },
    closePullRequest: {
      __type: "ClosePullRequestPayload",
      __args: { input: "ClosePullRequestInput!" },
    },
    convertProjectCardNoteToIssue: {
      __type: "ConvertProjectCardNoteToIssuePayload",
      __args: { input: "ConvertProjectCardNoteToIssueInput!" },
    },
    convertPullRequestToDraft: {
      __type: "ConvertPullRequestToDraftPayload",
      __args: { input: "ConvertPullRequestToDraftInput!" },
    },
    copyProjectV2: {
      __type: "CopyProjectV2Payload",
      __args: { input: "CopyProjectV2Input!" },
    },
    createAttributionInvitation: {
      __type: "CreateAttributionInvitationPayload",
      __args: { input: "CreateAttributionInvitationInput!" },
    },
    createBranchProtectionRule: {
      __type: "CreateBranchProtectionRulePayload",
      __args: { input: "CreateBranchProtectionRuleInput!" },
    },
    createCheckRun: {
      __type: "CreateCheckRunPayload",
      __args: { input: "CreateCheckRunInput!" },
    },
    createCheckSuite: {
      __type: "CreateCheckSuitePayload",
      __args: { input: "CreateCheckSuiteInput!" },
    },
    createCommitOnBranch: {
      __type: "CreateCommitOnBranchPayload",
      __args: { input: "CreateCommitOnBranchInput!" },
    },
    createDiscussion: {
      __type: "CreateDiscussionPayload",
      __args: { input: "CreateDiscussionInput!" },
    },
    createEnterpriseOrganization: {
      __type: "CreateEnterpriseOrganizationPayload",
      __args: { input: "CreateEnterpriseOrganizationInput!" },
    },
    createEnvironment: {
      __type: "CreateEnvironmentPayload",
      __args: { input: "CreateEnvironmentInput!" },
    },
    createIpAllowListEntry: {
      __type: "CreateIpAllowListEntryPayload",
      __args: { input: "CreateIpAllowListEntryInput!" },
    },
    createIssue: {
      __type: "CreateIssuePayload",
      __args: { input: "CreateIssueInput!" },
    },
    createLinkedBranch: {
      __type: "CreateLinkedBranchPayload",
      __args: { input: "CreateLinkedBranchInput!" },
    },
    createMigrationSource: {
      __type: "CreateMigrationSourcePayload",
      __args: { input: "CreateMigrationSourceInput!" },
    },
    createProject: {
      __type: "CreateProjectPayload",
      __args: { input: "CreateProjectInput!" },
    },
    createProjectV2: {
      __type: "CreateProjectV2Payload",
      __args: { input: "CreateProjectV2Input!" },
    },
    createProjectV2Field: {
      __type: "CreateProjectV2FieldPayload",
      __args: { input: "CreateProjectV2FieldInput!" },
    },
    createPullRequest: {
      __type: "CreatePullRequestPayload",
      __args: { input: "CreatePullRequestInput!" },
    },
    createRef: {
      __type: "CreateRefPayload",
      __args: { input: "CreateRefInput!" },
    },
    createRepository: {
      __type: "CreateRepositoryPayload",
      __args: { input: "CreateRepositoryInput!" },
    },
    createRepositoryRuleset: {
      __type: "CreateRepositoryRulesetPayload",
      __args: { input: "CreateRepositoryRulesetInput!" },
    },
    createSavedNotificationThread: {
      __type: "CreateSavedNotificationThreadPayload",
      __args: { input: "CreateSavedNotificationThreadInput!" },
    },
    createSponsorsListing: {
      __type: "CreateSponsorsListingPayload",
      __args: { input: "CreateSponsorsListingInput!" },
    },
    createSponsorsTier: {
      __type: "CreateSponsorsTierPayload",
      __args: { input: "CreateSponsorsTierInput!" },
    },
    createSponsorship: {
      __type: "CreateSponsorshipPayload",
      __args: { input: "CreateSponsorshipInput!" },
    },
    createSponsorships: {
      __type: "CreateSponsorshipsPayload",
      __args: { input: "CreateSponsorshipsInput!" },
    },
    createTeamDiscussion: {
      __type: "CreateTeamDiscussionPayload",
      __args: { input: "CreateTeamDiscussionInput!" },
    },
    createTeamDiscussionComment: {
      __type: "CreateTeamDiscussionCommentPayload",
      __args: { input: "CreateTeamDiscussionCommentInput!" },
    },
    declineTopicSuggestion: {
      __type: "DeclineTopicSuggestionPayload",
      __args: { input: "DeclineTopicSuggestionInput!" },
    },
    deleteBranchProtectionRule: {
      __type: "DeleteBranchProtectionRulePayload",
      __args: { input: "DeleteBranchProtectionRuleInput!" },
    },
    deleteDeployment: {
      __type: "DeleteDeploymentPayload",
      __args: { input: "DeleteDeploymentInput!" },
    },
    deleteDiscussion: {
      __type: "DeleteDiscussionPayload",
      __args: { input: "DeleteDiscussionInput!" },
    },
    deleteDiscussionComment: {
      __type: "DeleteDiscussionCommentPayload",
      __args: { input: "DeleteDiscussionCommentInput!" },
    },
    deleteEnvironment: {
      __type: "DeleteEnvironmentPayload",
      __args: { input: "DeleteEnvironmentInput!" },
    },
    deleteIpAllowListEntry: {
      __type: "DeleteIpAllowListEntryPayload",
      __args: { input: "DeleteIpAllowListEntryInput!" },
    },
    deleteIssue: {
      __type: "DeleteIssuePayload",
      __args: { input: "DeleteIssueInput!" },
    },
    deleteIssueComment: {
      __type: "DeleteIssueCommentPayload",
      __args: { input: "DeleteIssueCommentInput!" },
    },
    deleteLinkedBranch: {
      __type: "DeleteLinkedBranchPayload",
      __args: { input: "DeleteLinkedBranchInput!" },
    },
    deleteProject: {
      __type: "DeleteProjectPayload",
      __args: { input: "DeleteProjectInput!" },
    },
    deleteProjectCard: {
      __type: "DeleteProjectCardPayload",
      __args: { input: "DeleteProjectCardInput!" },
    },
    deleteProjectColumn: {
      __type: "DeleteProjectColumnPayload",
      __args: { input: "DeleteProjectColumnInput!" },
    },
    deleteProjectV2: {
      __type: "DeleteProjectV2Payload",
      __args: { input: "DeleteProjectV2Input!" },
    },
    deleteProjectV2Field: {
      __type: "DeleteProjectV2FieldPayload",
      __args: { input: "DeleteProjectV2FieldInput!" },
    },
    deleteProjectV2Item: {
      __type: "DeleteProjectV2ItemPayload",
      __args: { input: "DeleteProjectV2ItemInput!" },
    },
    deleteProjectV2Workflow: {
      __type: "DeleteProjectV2WorkflowPayload",
      __args: { input: "DeleteProjectV2WorkflowInput!" },
    },
    deletePullRequestReview: {
      __type: "DeletePullRequestReviewPayload",
      __args: { input: "DeletePullRequestReviewInput!" },
    },
    deletePullRequestReviewComment: {
      __type: "DeletePullRequestReviewCommentPayload",
      __args: { input: "DeletePullRequestReviewCommentInput!" },
    },
    deleteRef: {
      __type: "DeleteRefPayload",
      __args: { input: "DeleteRefInput!" },
    },
    deleteRepositoryRuleset: {
      __type: "DeleteRepositoryRulesetPayload",
      __args: { input: "DeleteRepositoryRulesetInput!" },
    },
    deleteSavedNotificationThread: {
      __type: "DeleteSavedNotificationThreadPayload",
      __args: { input: "DeleteSavedNotificationThreadInput!" },
    },
    deleteTeamDiscussion: {
      __type: "DeleteTeamDiscussionPayload",
      __args: { input: "DeleteTeamDiscussionInput!" },
    },
    deleteTeamDiscussionComment: {
      __type: "DeleteTeamDiscussionCommentPayload",
      __args: { input: "DeleteTeamDiscussionCommentInput!" },
    },
    deleteVerifiableDomain: {
      __type: "DeleteVerifiableDomainPayload",
      __args: { input: "DeleteVerifiableDomainInput!" },
    },
    dequeuePullRequest: {
      __type: "DequeuePullRequestPayload",
      __args: { input: "DequeuePullRequestInput!" },
    },
    disablePullRequestAutoMerge: {
      __type: "DisablePullRequestAutoMergePayload",
      __args: { input: "DisablePullRequestAutoMergeInput!" },
    },
    dismissPullRequestReview: {
      __type: "DismissPullRequestReviewPayload",
      __args: { input: "DismissPullRequestReviewInput!" },
    },
    dismissRepositoryVulnerabilityAlert: {
      __type: "DismissRepositoryVulnerabilityAlertPayload",
      __args: { input: "DismissRepositoryVulnerabilityAlertInput!" },
    },
    enablePullRequestAutoMerge: {
      __type: "EnablePullRequestAutoMergePayload",
      __args: { input: "EnablePullRequestAutoMergeInput!" },
    },
    enqueuePullRequest: {
      __type: "EnqueuePullRequestPayload",
      __args: { input: "EnqueuePullRequestInput!" },
    },
    followOrganization: {
      __type: "FollowOrganizationPayload",
      __args: { input: "FollowOrganizationInput!" },
    },
    followUser: {
      __type: "FollowUserPayload",
      __args: { input: "FollowUserInput!" },
    },
    grantEnterpriseOrganizationsMigratorRole: {
      __type: "GrantEnterpriseOrganizationsMigratorRolePayload",
      __args: { input: "GrantEnterpriseOrganizationsMigratorRoleInput!" },
    },
    grantMigratorRole: {
      __type: "GrantMigratorRolePayload",
      __args: { input: "GrantMigratorRoleInput!" },
    },
    inviteEnterpriseAdmin: {
      __type: "InviteEnterpriseAdminPayload",
      __args: { input: "InviteEnterpriseAdminInput!" },
    },
    linkProjectV2ToRepository: {
      __type: "LinkProjectV2ToRepositoryPayload",
      __args: { input: "LinkProjectV2ToRepositoryInput!" },
    },
    linkProjectV2ToTeam: {
      __type: "LinkProjectV2ToTeamPayload",
      __args: { input: "LinkProjectV2ToTeamInput!" },
    },
    linkRepositoryToProject: {
      __type: "LinkRepositoryToProjectPayload",
      __args: { input: "LinkRepositoryToProjectInput!" },
    },
    lockLockable: {
      __type: "LockLockablePayload",
      __args: { input: "LockLockableInput!" },
    },
    markDiscussionCommentAsAnswer: {
      __type: "MarkDiscussionCommentAsAnswerPayload",
      __args: { input: "MarkDiscussionCommentAsAnswerInput!" },
    },
    markFileAsViewed: {
      __type: "MarkFileAsViewedPayload",
      __args: { input: "MarkFileAsViewedInput!" },
    },
    markNotificationAsDone: {
      __type: "MarkNotificationAsDonePayload",
      __args: { input: "MarkNotificationAsDoneInput!" },
    },
    markNotificationAsRead: {
      __type: "MarkNotificationAsReadPayload",
      __args: { input: "MarkNotificationAsReadInput!" },
    },
    markNotificationAsUndone: {
      __type: "MarkNotificationAsUndonePayload",
      __args: { input: "MarkNotificationAsUndoneInput!" },
    },
    markNotificationAsUnread: {
      __type: "MarkNotificationAsUnreadPayload",
      __args: { input: "MarkNotificationAsUnreadInput!" },
    },
    markNotificationSubjectAsRead: {
      __type: "MarkNotificationSubjectAsReadPayload",
      __args: { input: "MarkNotificationSubjectAsReadInput!" },
    },
    markNotificationsAsDone: {
      __type: "MarkNotificationsAsDonePayload",
      __args: { input: "MarkNotificationsAsDoneInput!" },
    },
    markNotificationsAsRead: {
      __type: "MarkNotificationsAsReadPayload",
      __args: { input: "MarkNotificationsAsReadInput!" },
    },
    markNotificationsAsUndone: {
      __type: "MarkNotificationsAsUndonePayload",
      __args: { input: "MarkNotificationsAsUndoneInput!" },
    },
    markNotificationsAsUnread: {
      __type: "MarkNotificationsAsUnreadPayload",
      __args: { input: "MarkNotificationsAsUnreadInput!" },
    },
    markProjectV2AsTemplate: {
      __type: "MarkProjectV2AsTemplatePayload",
      __args: { input: "MarkProjectV2AsTemplateInput!" },
    },
    markPullRequestReadyForReview: {
      __type: "MarkPullRequestReadyForReviewPayload",
      __args: { input: "MarkPullRequestReadyForReviewInput!" },
    },
    mergeBranch: {
      __type: "MergeBranchPayload",
      __args: { input: "MergeBranchInput!" },
    },
    mergePullRequest: {
      __type: "MergePullRequestPayload",
      __args: { input: "MergePullRequestInput!" },
    },
    minimizeComment: {
      __type: "MinimizeCommentPayload",
      __args: { input: "MinimizeCommentInput!" },
    },
    moveProjectCard: {
      __type: "MoveProjectCardPayload",
      __args: { input: "MoveProjectCardInput!" },
    },
    moveProjectColumn: {
      __type: "MoveProjectColumnPayload",
      __args: { input: "MoveProjectColumnInput!" },
    },
    pinIssue: {
      __type: "PinIssuePayload",
      __args: { input: "PinIssueInput!" },
    },
    publishSponsorsTier: {
      __type: "PublishSponsorsTierPayload",
      __args: { input: "PublishSponsorsTierInput!" },
    },
    regenerateEnterpriseIdentityProviderRecoveryCodes: {
      __type: "RegenerateEnterpriseIdentityProviderRecoveryCodesPayload",
      __args: {
        input: "RegenerateEnterpriseIdentityProviderRecoveryCodesInput!",
      },
    },
    regenerateVerifiableDomainToken: {
      __type: "RegenerateVerifiableDomainTokenPayload",
      __args: { input: "RegenerateVerifiableDomainTokenInput!" },
    },
    rejectDeployments: {
      __type: "RejectDeploymentsPayload",
      __args: { input: "RejectDeploymentsInput!" },
    },
    removeAssigneesFromAssignable: {
      __type: "RemoveAssigneesFromAssignablePayload",
      __args: { input: "RemoveAssigneesFromAssignableInput!" },
    },
    removeEnterpriseAdmin: {
      __type: "RemoveEnterpriseAdminPayload",
      __args: { input: "RemoveEnterpriseAdminInput!" },
    },
    removeEnterpriseIdentityProvider: {
      __type: "RemoveEnterpriseIdentityProviderPayload",
      __args: { input: "RemoveEnterpriseIdentityProviderInput!" },
    },
    removeEnterpriseMember: {
      __type: "RemoveEnterpriseMemberPayload",
      __args: { input: "RemoveEnterpriseMemberInput!" },
    },
    removeEnterpriseOrganization: {
      __type: "RemoveEnterpriseOrganizationPayload",
      __args: { input: "RemoveEnterpriseOrganizationInput!" },
    },
    removeEnterpriseSupportEntitlement: {
      __type: "RemoveEnterpriseSupportEntitlementPayload",
      __args: { input: "RemoveEnterpriseSupportEntitlementInput!" },
    },
    removeLabelsFromLabelable: {
      __type: "RemoveLabelsFromLabelablePayload",
      __args: { input: "RemoveLabelsFromLabelableInput!" },
    },
    removeOutsideCollaborator: {
      __type: "RemoveOutsideCollaboratorPayload",
      __args: { input: "RemoveOutsideCollaboratorInput!" },
    },
    removeReaction: {
      __type: "RemoveReactionPayload",
      __args: { input: "RemoveReactionInput!" },
    },
    removeStar: {
      __type: "RemoveStarPayload",
      __args: { input: "RemoveStarInput!" },
    },
    removeUpvote: {
      __type: "RemoveUpvotePayload",
      __args: { input: "RemoveUpvoteInput!" },
    },
    reopenDiscussion: {
      __type: "ReopenDiscussionPayload",
      __args: { input: "ReopenDiscussionInput!" },
    },
    reopenIssue: {
      __type: "ReopenIssuePayload",
      __args: { input: "ReopenIssueInput!" },
    },
    reopenPullRequest: {
      __type: "ReopenPullRequestPayload",
      __args: { input: "ReopenPullRequestInput!" },
    },
    requestReviews: {
      __type: "RequestReviewsPayload",
      __args: { input: "RequestReviewsInput!" },
    },
    rerequestCheckSuite: {
      __type: "RerequestCheckSuitePayload",
      __args: { input: "RerequestCheckSuiteInput!" },
    },
    resolveReviewThread: {
      __type: "ResolveReviewThreadPayload",
      __args: { input: "ResolveReviewThreadInput!" },
    },
    retireSponsorsTier: {
      __type: "RetireSponsorsTierPayload",
      __args: { input: "RetireSponsorsTierInput!" },
    },
    revertPullRequest: {
      __type: "RevertPullRequestPayload",
      __args: { input: "RevertPullRequestInput!" },
    },
    revokeEnterpriseOrganizationsMigratorRole: {
      __type: "RevokeEnterpriseOrganizationsMigratorRolePayload",
      __args: { input: "RevokeEnterpriseOrganizationsMigratorRoleInput!" },
    },
    revokeMigratorRole: {
      __type: "RevokeMigratorRolePayload",
      __args: { input: "RevokeMigratorRoleInput!" },
    },
    setEnterpriseIdentityProvider: {
      __type: "SetEnterpriseIdentityProviderPayload",
      __args: { input: "SetEnterpriseIdentityProviderInput!" },
    },
    setOrganizationInteractionLimit: {
      __type: "SetOrganizationInteractionLimitPayload",
      __args: { input: "SetOrganizationInteractionLimitInput!" },
    },
    setRepositoryInteractionLimit: {
      __type: "SetRepositoryInteractionLimitPayload",
      __args: { input: "SetRepositoryInteractionLimitInput!" },
    },
    setUserInteractionLimit: {
      __type: "SetUserInteractionLimitPayload",
      __args: { input: "SetUserInteractionLimitInput!" },
    },
    startOrganizationMigration: {
      __type: "StartOrganizationMigrationPayload",
      __args: { input: "StartOrganizationMigrationInput!" },
    },
    startRepositoryMigration: {
      __type: "StartRepositoryMigrationPayload",
      __args: { input: "StartRepositoryMigrationInput!" },
    },
    submitPullRequestReview: {
      __type: "SubmitPullRequestReviewPayload",
      __args: { input: "SubmitPullRequestReviewInput!" },
    },
    transferEnterpriseOrganization: {
      __type: "TransferEnterpriseOrganizationPayload",
      __args: { input: "TransferEnterpriseOrganizationInput!" },
    },
    transferIssue: {
      __type: "TransferIssuePayload",
      __args: { input: "TransferIssueInput!" },
    },
    unarchiveProjectV2Item: {
      __type: "UnarchiveProjectV2ItemPayload",
      __args: { input: "UnarchiveProjectV2ItemInput!" },
    },
    unarchiveRepository: {
      __type: "UnarchiveRepositoryPayload",
      __args: { input: "UnarchiveRepositoryInput!" },
    },
    unfollowOrganization: {
      __type: "UnfollowOrganizationPayload",
      __args: { input: "UnfollowOrganizationInput!" },
    },
    unfollowUser: {
      __type: "UnfollowUserPayload",
      __args: { input: "UnfollowUserInput!" },
    },
    unlinkProjectV2FromRepository: {
      __type: "UnlinkProjectV2FromRepositoryPayload",
      __args: { input: "UnlinkProjectV2FromRepositoryInput!" },
    },
    unlinkProjectV2FromTeam: {
      __type: "UnlinkProjectV2FromTeamPayload",
      __args: { input: "UnlinkProjectV2FromTeamInput!" },
    },
    unlinkRepositoryFromProject: {
      __type: "UnlinkRepositoryFromProjectPayload",
      __args: { input: "UnlinkRepositoryFromProjectInput!" },
    },
    unlockLockable: {
      __type: "UnlockLockablePayload",
      __args: { input: "UnlockLockableInput!" },
    },
    unmarkDiscussionCommentAsAnswer: {
      __type: "UnmarkDiscussionCommentAsAnswerPayload",
      __args: { input: "UnmarkDiscussionCommentAsAnswerInput!" },
    },
    unmarkFileAsViewed: {
      __type: "UnmarkFileAsViewedPayload",
      __args: { input: "UnmarkFileAsViewedInput!" },
    },
    unmarkIssueAsDuplicate: {
      __type: "UnmarkIssueAsDuplicatePayload",
      __args: { input: "UnmarkIssueAsDuplicateInput!" },
    },
    unmarkProjectV2AsTemplate: {
      __type: "UnmarkProjectV2AsTemplatePayload",
      __args: { input: "UnmarkProjectV2AsTemplateInput!" },
    },
    unminimizeComment: {
      __type: "UnminimizeCommentPayload",
      __args: { input: "UnminimizeCommentInput!" },
    },
    unpinIssue: {
      __type: "UnpinIssuePayload",
      __args: { input: "UnpinIssueInput!" },
    },
    unresolveReviewThread: {
      __type: "UnresolveReviewThreadPayload",
      __args: { input: "UnresolveReviewThreadInput!" },
    },
    updateBranchProtectionRule: {
      __type: "UpdateBranchProtectionRulePayload",
      __args: { input: "UpdateBranchProtectionRuleInput!" },
    },
    updateCheckRun: {
      __type: "UpdateCheckRunPayload",
      __args: { input: "UpdateCheckRunInput!" },
    },
    updateCheckSuitePreferences: {
      __type: "UpdateCheckSuitePreferencesPayload",
      __args: { input: "UpdateCheckSuitePreferencesInput!" },
    },
    updateDiscussion: {
      __type: "UpdateDiscussionPayload",
      __args: { input: "UpdateDiscussionInput!" },
    },
    updateDiscussionComment: {
      __type: "UpdateDiscussionCommentPayload",
      __args: { input: "UpdateDiscussionCommentInput!" },
    },
    updateEnterpriseAdministratorRole: {
      __type: "UpdateEnterpriseAdministratorRolePayload",
      __args: { input: "UpdateEnterpriseAdministratorRoleInput!" },
    },
    updateEnterpriseAllowPrivateRepositoryForkingSetting: {
      __type: "UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload",
      __args: {
        input: "UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput!",
      },
    },
    updateEnterpriseDefaultRepositoryPermissionSetting: {
      __type: "UpdateEnterpriseDefaultRepositoryPermissionSettingPayload",
      __args: {
        input: "UpdateEnterpriseDefaultRepositoryPermissionSettingInput!",
      },
    },
    updateEnterpriseMembersCanChangeRepositoryVisibilitySetting: {
      __type:
        "UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload",
      __args: {
        input:
          "UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput!",
      },
    },
    updateEnterpriseMembersCanCreateRepositoriesSetting: {
      __type: "UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload",
      __args: {
        input: "UpdateEnterpriseMembersCanCreateRepositoriesSettingInput!",
      },
    },
    updateEnterpriseMembersCanDeleteIssuesSetting: {
      __type: "UpdateEnterpriseMembersCanDeleteIssuesSettingPayload",
      __args: { input: "UpdateEnterpriseMembersCanDeleteIssuesSettingInput!" },
    },
    updateEnterpriseMembersCanDeleteRepositoriesSetting: {
      __type: "UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload",
      __args: {
        input: "UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput!",
      },
    },
    updateEnterpriseMembersCanInviteCollaboratorsSetting: {
      __type: "UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload",
      __args: {
        input: "UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput!",
      },
    },
    updateEnterpriseMembersCanMakePurchasesSetting: {
      __type: "UpdateEnterpriseMembersCanMakePurchasesSettingPayload",
      __args: { input: "UpdateEnterpriseMembersCanMakePurchasesSettingInput!" },
    },
    updateEnterpriseMembersCanUpdateProtectedBranchesSetting: {
      __type: "UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload",
      __args: {
        input: "UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput!",
      },
    },
    updateEnterpriseMembersCanViewDependencyInsightsSetting: {
      __type: "UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload",
      __args: {
        input: "UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput!",
      },
    },
    updateEnterpriseOrganizationProjectsSetting: {
      __type: "UpdateEnterpriseOrganizationProjectsSettingPayload",
      __args: { input: "UpdateEnterpriseOrganizationProjectsSettingInput!" },
    },
    updateEnterpriseOwnerOrganizationRole: {
      __type: "UpdateEnterpriseOwnerOrganizationRolePayload",
      __args: { input: "UpdateEnterpriseOwnerOrganizationRoleInput!" },
    },
    updateEnterpriseProfile: {
      __type: "UpdateEnterpriseProfilePayload",
      __args: { input: "UpdateEnterpriseProfileInput!" },
    },
    updateEnterpriseRepositoryProjectsSetting: {
      __type: "UpdateEnterpriseRepositoryProjectsSettingPayload",
      __args: { input: "UpdateEnterpriseRepositoryProjectsSettingInput!" },
    },
    updateEnterpriseTeamDiscussionsSetting: {
      __type: "UpdateEnterpriseTeamDiscussionsSettingPayload",
      __args: { input: "UpdateEnterpriseTeamDiscussionsSettingInput!" },
    },
    updateEnterpriseTwoFactorAuthenticationRequiredSetting: {
      __type: "UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload",
      __args: {
        input: "UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput!",
      },
    },
    updateEnvironment: {
      __type: "UpdateEnvironmentPayload",
      __args: { input: "UpdateEnvironmentInput!" },
    },
    updateIpAllowListEnabledSetting: {
      __type: "UpdateIpAllowListEnabledSettingPayload",
      __args: { input: "UpdateIpAllowListEnabledSettingInput!" },
    },
    updateIpAllowListEntry: {
      __type: "UpdateIpAllowListEntryPayload",
      __args: { input: "UpdateIpAllowListEntryInput!" },
    },
    updateIpAllowListForInstalledAppsEnabledSetting: {
      __type: "UpdateIpAllowListForInstalledAppsEnabledSettingPayload",
      __args: {
        input: "UpdateIpAllowListForInstalledAppsEnabledSettingInput!",
      },
    },
    updateIssue: {
      __type: "UpdateIssuePayload",
      __args: { input: "UpdateIssueInput!" },
    },
    updateIssueComment: {
      __type: "UpdateIssueCommentPayload",
      __args: { input: "UpdateIssueCommentInput!" },
    },
    updateNotificationRestrictionSetting: {
      __type: "UpdateNotificationRestrictionSettingPayload",
      __args: { input: "UpdateNotificationRestrictionSettingInput!" },
    },
    updateOrganizationAllowPrivateRepositoryForkingSetting: {
      __type: "UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload",
      __args: {
        input: "UpdateOrganizationAllowPrivateRepositoryForkingSettingInput!",
      },
    },
    updateOrganizationWebCommitSignoffSetting: {
      __type: "UpdateOrganizationWebCommitSignoffSettingPayload",
      __args: { input: "UpdateOrganizationWebCommitSignoffSettingInput!" },
    },
    updateProject: {
      __type: "UpdateProjectPayload",
      __args: { input: "UpdateProjectInput!" },
    },
    updateProjectCard: {
      __type: "UpdateProjectCardPayload",
      __args: { input: "UpdateProjectCardInput!" },
    },
    updateProjectColumn: {
      __type: "UpdateProjectColumnPayload",
      __args: { input: "UpdateProjectColumnInput!" },
    },
    updateProjectV2: {
      __type: "UpdateProjectV2Payload",
      __args: { input: "UpdateProjectV2Input!" },
    },
    updateProjectV2Collaborators: {
      __type: "UpdateProjectV2CollaboratorsPayload",
      __args: { input: "UpdateProjectV2CollaboratorsInput!" },
    },
    updateProjectV2DraftIssue: {
      __type: "UpdateProjectV2DraftIssuePayload",
      __args: { input: "UpdateProjectV2DraftIssueInput!" },
    },
    updateProjectV2ItemFieldValue: {
      __type: "UpdateProjectV2ItemFieldValuePayload",
      __args: { input: "UpdateProjectV2ItemFieldValueInput!" },
    },
    updateProjectV2ItemPosition: {
      __type: "UpdateProjectV2ItemPositionPayload",
      __args: { input: "UpdateProjectV2ItemPositionInput!" },
    },
    updatePullRequest: {
      __type: "UpdatePullRequestPayload",
      __args: { input: "UpdatePullRequestInput!" },
    },
    updatePullRequestBranch: {
      __type: "UpdatePullRequestBranchPayload",
      __args: { input: "UpdatePullRequestBranchInput!" },
    },
    updatePullRequestReview: {
      __type: "UpdatePullRequestReviewPayload",
      __args: { input: "UpdatePullRequestReviewInput!" },
    },
    updatePullRequestReviewComment: {
      __type: "UpdatePullRequestReviewCommentPayload",
      __args: { input: "UpdatePullRequestReviewCommentInput!" },
    },
    updateRef: {
      __type: "UpdateRefPayload",
      __args: { input: "UpdateRefInput!" },
    },
    updateRepository: {
      __type: "UpdateRepositoryPayload",
      __args: { input: "UpdateRepositoryInput!" },
    },
    updateRepositoryRuleset: {
      __type: "UpdateRepositoryRulesetPayload",
      __args: { input: "UpdateRepositoryRulesetInput!" },
    },
    updateRepositoryWebCommitSignoffSetting: {
      __type: "UpdateRepositoryWebCommitSignoffSettingPayload",
      __args: { input: "UpdateRepositoryWebCommitSignoffSettingInput!" },
    },
    updateSponsorshipPreferences: {
      __type: "UpdateSponsorshipPreferencesPayload",
      __args: { input: "UpdateSponsorshipPreferencesInput!" },
    },
    updateSubscription: {
      __type: "UpdateSubscriptionPayload",
      __args: { input: "UpdateSubscriptionInput!" },
    },
    updateTeamDiscussion: {
      __type: "UpdateTeamDiscussionPayload",
      __args: { input: "UpdateTeamDiscussionInput!" },
    },
    updateTeamDiscussionComment: {
      __type: "UpdateTeamDiscussionCommentPayload",
      __args: { input: "UpdateTeamDiscussionCommentInput!" },
    },
    updateTeamsRepository: {
      __type: "UpdateTeamsRepositoryPayload",
      __args: { input: "UpdateTeamsRepositoryInput!" },
    },
    updateTopics: {
      __type: "UpdateTopicsPayload",
      __args: { input: "UpdateTopicsInput!" },
    },
    verifyVerifiableDomain: {
      __type: "VerifyVerifiableDomainPayload",
      __args: { input: "VerifyVerifiableDomainInput!" },
    },
  },
  query: {
    __typename: { __type: "String!" },
    codeOfConduct: { __type: "CodeOfConduct", __args: { key: "String!" } },
    codesOfConduct: { __type: "[CodeOfConduct]" },
    enterprise: {
      __type: "Enterprise",
      __args: { invitationToken: "String", slug: "String!" },
    },
    enterpriseAdministratorInvitation: {
      __type: "EnterpriseAdministratorInvitation",
      __args: {
        enterpriseSlug: "String!",
        role: "EnterpriseAdministratorRole!",
        userLogin: "String!",
      },
    },
    enterpriseAdministratorInvitationByToken: {
      __type: "EnterpriseAdministratorInvitation",
      __args: { invitationToken: "String!" },
    },
    license: { __type: "License", __args: { key: "String!" } },
    licenses: { __type: "[License]!" },
    marketplaceCategories: {
      __type: "[MarketplaceCategory!]!",
      __args: {
        excludeEmpty: "Boolean",
        excludeSubcategories: "Boolean",
        includeCategories: "[String!]",
      },
    },
    marketplaceCategory: {
      __type: "MarketplaceCategory",
      __args: { slug: "String!", useTopicAliases: "Boolean" },
    },
    marketplaceListing: {
      __type: "MarketplaceListing",
      __args: { slug: "String!" },
    },
    marketplaceListings: {
      __type: "MarketplaceListingConnection!",
      __args: {
        adminId: "ID",
        after: "String",
        allStates: "Boolean",
        before: "String",
        categorySlug: "String",
        first: "Int",
        last: "Int",
        organizationId: "ID",
        primaryCategoryOnly: "Boolean",
        slugs: "[String]",
        useTopicAliases: "Boolean",
        viewerCanAdmin: "Boolean",
        withFreeTrialsOnly: "Boolean",
      },
    },
    meta: { __type: "GitHubMetadata!" },
    node: { __type: "Node", __args: { id: "ID!" } },
    nodes: { __type: "[Node]!", __args: { ids: "[ID!]!" } },
    organization: { __type: "Organization", __args: { login: "String!" } },
    rateLimit: { __type: "RateLimit", __args: { dryRun: "Boolean" } },
    relay: { __type: "Query!" },
    repository: {
      __type: "Repository",
      __args: { followRenames: "Boolean", name: "String!", owner: "String!" },
    },
    repositoryOwner: {
      __type: "RepositoryOwner",
      __args: { login: "String!" },
    },
    resource: { __type: "UniformResourceLocatable", __args: { url: "URI!" } },
    search: {
      __type: "SearchResultItemConnection!",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        query: "String!",
        type: "SearchType!",
      },
    },
    securityAdvisories: {
      __type: "SecurityAdvisoryConnection!",
      __args: {
        after: "String",
        before: "String",
        classifications: "[SecurityAdvisoryClassification!]",
        first: "Int",
        identifier: "SecurityAdvisoryIdentifierFilter",
        last: "Int",
        orderBy: "SecurityAdvisoryOrder",
        publishedSince: "DateTime",
        updatedSince: "DateTime",
      },
    },
    securityAdvisory: {
      __type: "SecurityAdvisory",
      __args: { ghsaId: "String!" },
    },
    securityVulnerabilities: {
      __type: "SecurityVulnerabilityConnection!",
      __args: {
        after: "String",
        before: "String",
        classifications: "[SecurityAdvisoryClassification!]",
        ecosystem: "SecurityAdvisoryEcosystem",
        first: "Int",
        last: "Int",
        orderBy: "SecurityVulnerabilityOrder",
        package: "String",
        severities: "[SecurityAdvisorySeverity!]",
      },
    },
    sponsorables: {
      __type: "SponsorableItemConnection!",
      __args: {
        after: "String",
        before: "String",
        dependencyEcosystem: "SecurityAdvisoryEcosystem",
        ecosystem: "DependencyGraphEcosystem",
        first: "Int",
        last: "Int",
        onlyDependencies: "Boolean",
        orderBy: "SponsorableOrder",
        orgLoginForDependencies: "String",
      },
    },
    topic: { __type: "Topic", __args: { name: "String!" } },
    user: { __type: "User", __args: { login: "String!" } },
    viewer: { __type: "User!" },
  },
  subscription: {},
  [SchemaUnionsKey]: {
    Node: [
      "AddedToMergeQueueEvent",
      "AddedToProjectEvent",
      "App",
      "AssignedEvent",
      "AutoMergeDisabledEvent",
      "AutoMergeEnabledEvent",
      "AutoRebaseEnabledEvent",
      "AutoSquashEnabledEvent",
      "AutomaticBaseChangeFailedEvent",
      "AutomaticBaseChangeSucceededEvent",
      "BaseRefChangedEvent",
      "BaseRefDeletedEvent",
      "BaseRefForcePushedEvent",
      "Blob",
      "Bot",
      "BranchProtectionRule",
      "BypassForcePushAllowance",
      "BypassPullRequestAllowance",
      "CWE",
      "CheckRun",
      "CheckSuite",
      "ClosedEvent",
      "CodeOfConduct",
      "CommentDeletedEvent",
      "Commit",
      "CommitComment",
      "CommitCommentThread",
      "Comparison",
      "ConnectedEvent",
      "ConvertToDraftEvent",
      "ConvertedNoteToIssueEvent",
      "ConvertedToDiscussionEvent",
      "CrossReferencedEvent",
      "DemilestonedEvent",
      "DeployKey",
      "DeployedEvent",
      "Deployment",
      "DeploymentEnvironmentChangedEvent",
      "DeploymentReview",
      "DeploymentStatus",
      "DisconnectedEvent",
      "Discussion",
      "DiscussionCategory",
      "DiscussionComment",
      "DiscussionPoll",
      "DiscussionPollOption",
      "DraftIssue",
      "Enterprise",
      "EnterpriseAdministratorInvitation",
      "EnterpriseIdentityProvider",
      "EnterpriseRepositoryInfo",
      "EnterpriseServerInstallation",
      "EnterpriseServerUserAccount",
      "EnterpriseServerUserAccountEmail",
      "EnterpriseServerUserAccountsUpload",
      "EnterpriseUserAccount",
      "Environment",
      "ExternalIdentity",
      "Gist",
      "GistComment",
      "HeadRefDeletedEvent",
      "HeadRefForcePushedEvent",
      "HeadRefRestoredEvent",
      "IpAllowListEntry",
      "Issue",
      "IssueComment",
      "Label",
      "LabeledEvent",
      "Language",
      "License",
      "LinkedBranch",
      "LockedEvent",
      "Mannequin",
      "MarkedAsDuplicateEvent",
      "MarketplaceCategory",
      "MarketplaceListing",
      "MembersCanDeleteReposClearAuditEntry",
      "MembersCanDeleteReposDisableAuditEntry",
      "MembersCanDeleteReposEnableAuditEntry",
      "MentionedEvent",
      "MergeQueue",
      "MergeQueueEntry",
      "MergedEvent",
      "MigrationSource",
      "Milestone",
      "MilestonedEvent",
      "MovedColumnsInProjectEvent",
      "NotificationThread",
      "OIDCProvider",
      "OauthApplicationCreateAuditEntry",
      "OrgAddBillingManagerAuditEntry",
      "OrgAddMemberAuditEntry",
      "OrgBlockUserAuditEntry",
      "OrgConfigDisableCollaboratorsOnlyAuditEntry",
      "OrgConfigEnableCollaboratorsOnlyAuditEntry",
      "OrgCreateAuditEntry",
      "OrgDisableOauthAppRestrictionsAuditEntry",
      "OrgDisableSamlAuditEntry",
      "OrgDisableTwoFactorRequirementAuditEntry",
      "OrgEnableOauthAppRestrictionsAuditEntry",
      "OrgEnableSamlAuditEntry",
      "OrgEnableTwoFactorRequirementAuditEntry",
      "OrgInviteMemberAuditEntry",
      "OrgInviteToBusinessAuditEntry",
      "OrgOauthAppAccessApprovedAuditEntry",
      "OrgOauthAppAccessBlockedAuditEntry",
      "OrgOauthAppAccessDeniedAuditEntry",
      "OrgOauthAppAccessRequestedAuditEntry",
      "OrgOauthAppAccessUnblockedAuditEntry",
      "OrgRemoveBillingManagerAuditEntry",
      "OrgRemoveMemberAuditEntry",
      "OrgRemoveOutsideCollaboratorAuditEntry",
      "OrgRestoreMemberAuditEntry",
      "OrgUnblockUserAuditEntry",
      "OrgUpdateDefaultRepositoryPermissionAuditEntry",
      "OrgUpdateMemberAuditEntry",
      "OrgUpdateMemberRepositoryCreationPermissionAuditEntry",
      "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry",
      "Organization",
      "OrganizationIdentityProvider",
      "OrganizationInvitation",
      "OrganizationMigration",
      "Package",
      "PackageFile",
      "PackageTag",
      "PackageVersion",
      "PinnedDiscussion",
      "PinnedEvent",
      "PinnedIssue",
      "PrivateRepositoryForkingDisableAuditEntry",
      "PrivateRepositoryForkingEnableAuditEntry",
      "Project",
      "ProjectCard",
      "ProjectColumn",
      "ProjectV2",
      "ProjectV2Field",
      "ProjectV2Item",
      "ProjectV2ItemFieldDateValue",
      "ProjectV2ItemFieldIterationValue",
      "ProjectV2ItemFieldNumberValue",
      "ProjectV2ItemFieldSingleSelectValue",
      "ProjectV2ItemFieldTextValue",
      "ProjectV2IterationField",
      "ProjectV2SingleSelectField",
      "ProjectV2View",
      "ProjectV2Workflow",
      "PublicKey",
      "PullRequest",
      "PullRequestCommit",
      "PullRequestCommitCommentThread",
      "PullRequestReview",
      "PullRequestReviewComment",
      "PullRequestReviewThread",
      "PullRequestThread",
      "Push",
      "PushAllowance",
      "Reaction",
      "ReadyForReviewEvent",
      "Ref",
      "ReferencedEvent",
      "Release",
      "ReleaseAsset",
      "RemovedFromMergeQueueEvent",
      "RemovedFromProjectEvent",
      "RenamedTitleEvent",
      "ReopenedEvent",
      "RepoAccessAuditEntry",
      "RepoAddMemberAuditEntry",
      "RepoAddTopicAuditEntry",
      "RepoArchivedAuditEntry",
      "RepoChangeMergeSettingAuditEntry",
      "RepoConfigDisableAnonymousGitAccessAuditEntry",
      "RepoConfigDisableCollaboratorsOnlyAuditEntry",
      "RepoConfigDisableContributorsOnlyAuditEntry",
      "RepoConfigDisableSockpuppetDisallowedAuditEntry",
      "RepoConfigEnableAnonymousGitAccessAuditEntry",
      "RepoConfigEnableCollaboratorsOnlyAuditEntry",
      "RepoConfigEnableContributorsOnlyAuditEntry",
      "RepoConfigEnableSockpuppetDisallowedAuditEntry",
      "RepoConfigLockAnonymousGitAccessAuditEntry",
      "RepoConfigUnlockAnonymousGitAccessAuditEntry",
      "RepoCreateAuditEntry",
      "RepoDestroyAuditEntry",
      "RepoRemoveMemberAuditEntry",
      "RepoRemoveTopicAuditEntry",
      "Repository",
      "RepositoryDependabotAlertsThread",
      "RepositoryInvitation",
      "RepositoryMigration",
      "RepositoryRule",
      "RepositoryRuleset",
      "RepositoryRulesetBypassActor",
      "RepositoryTopic",
      "RepositoryVisibilityChangeDisableAuditEntry",
      "RepositoryVisibilityChangeEnableAuditEntry",
      "RepositoryVulnerabilityAlert",
      "ReviewDismissalAllowance",
      "ReviewDismissedEvent",
      "ReviewRequest",
      "ReviewRequestRemovedEvent",
      "ReviewRequestedEvent",
      "SavedReply",
      "SecurityAdvisory",
      "SponsorsActivity",
      "SponsorsListing",
      "SponsorsListingFeaturedItem",
      "SponsorsTier",
      "Sponsorship",
      "SponsorshipNewsletter",
      "Status",
      "StatusCheckRollup",
      "StatusContext",
      "SubscribedEvent",
      "Tag",
      "Team",
      "TeamAddMemberAuditEntry",
      "TeamAddRepositoryAuditEntry",
      "TeamChangeParentTeamAuditEntry",
      "TeamDiscussion",
      "TeamDiscussionComment",
      "TeamRemoveMemberAuditEntry",
      "TeamRemoveRepositoryAuditEntry",
      "Topic",
      "TransferredEvent",
      "Tree",
      "UnassignedEvent",
      "UnlabeledEvent",
      "UnlockedEvent",
      "UnmarkedAsDuplicateEvent",
      "UnpinnedEvent",
      "UnsubscribedEvent",
      "User",
      "UserBlockedEvent",
      "UserContentEdit",
      "UserStatus",
      "VerifiableDomain",
      "Workflow",
      "WorkflowRun",
      "WorkflowRunFile",
    ],
    Assignee: ["Bot", "Mannequin", "Organization", "User"],
    AuditEntryActor: ["Bot", "Organization", "User"],
    GitObject: ["Blob", "Commit", "Tag", "Tree"],
    Actor: [
      "Bot",
      "EnterpriseUserAccount",
      "Mannequin",
      "Organization",
      "User",
    ],
    UniformResourceLocatable: [
      "Bot",
      "CheckRun",
      "ClosedEvent",
      "Commit",
      "ConvertToDraftEvent",
      "CrossReferencedEvent",
      "Gist",
      "Issue",
      "Mannequin",
      "MergedEvent",
      "Milestone",
      "Organization",
      "PullRequest",
      "PullRequestCommit",
      "ReadyForReviewEvent",
      "Release",
      "Repository",
      "RepositoryTopic",
      "ReviewDismissedEvent",
      "TeamDiscussion",
      "TeamDiscussionComment",
      "User",
      "Workflow",
      "WorkflowRun",
      "WorkflowRunFile",
    ],
    BranchActorAllowanceActor: ["App", "Team", "User"],
    BypassActor: ["App", "Team"],
    RequirableByPullRequest: ["CheckRun", "StatusContext"],
    Claimable: ["Mannequin", "User"],
    Closer: ["Commit", "PullRequest"],
    Subscribable: [
      "Commit",
      "Discussion",
      "Issue",
      "PullRequest",
      "Repository",
      "Team",
      "TeamDiscussion",
    ],
    Comment: [
      "CommitComment",
      "Discussion",
      "DiscussionComment",
      "GistComment",
      "Issue",
      "IssueComment",
      "PullRequest",
      "PullRequestReview",
      "PullRequestReviewComment",
      "TeamDiscussion",
      "TeamDiscussionComment",
    ],
    Deletable: [
      "CommitComment",
      "Discussion",
      "DiscussionComment",
      "GistComment",
      "Issue",
      "IssueComment",
      "PullRequestReview",
      "PullRequestReviewComment",
      "TeamDiscussion",
      "TeamDiscussionComment",
    ],
    Minimizable: [
      "CommitComment",
      "DiscussionComment",
      "GistComment",
      "IssueComment",
      "PullRequestReview",
      "PullRequestReviewComment",
    ],
    Reactable: [
      "CommitComment",
      "Discussion",
      "DiscussionComment",
      "Issue",
      "IssueComment",
      "PullRequest",
      "PullRequestReview",
      "PullRequestReviewComment",
      "Release",
      "TeamDiscussion",
      "TeamDiscussionComment",
    ],
    RepositoryNode: [
      "CommitComment",
      "CommitCommentThread",
      "DependabotUpdate",
      "Discussion",
      "DiscussionCategory",
      "Issue",
      "IssueComment",
      "PinnedDiscussion",
      "PullRequest",
      "PullRequestCommitCommentThread",
      "PullRequestReview",
      "PullRequestReviewComment",
      "RepositoryDependabotAlertsThread",
      "RepositoryVulnerabilityAlert",
    ],
    Updatable: [
      "CommitComment",
      "Discussion",
      "DiscussionComment",
      "GistComment",
      "Issue",
      "IssueComment",
      "Project",
      "ProjectV2",
      "PullRequest",
      "PullRequestReview",
      "PullRequestReviewComment",
      "TeamDiscussion",
      "TeamDiscussionComment",
    ],
    UpdatableComment: [
      "CommitComment",
      "DiscussionComment",
      "GistComment",
      "Issue",
      "IssueComment",
      "PullRequest",
      "PullRequestReview",
      "PullRequestReviewComment",
      "TeamDiscussion",
      "TeamDiscussionComment",
    ],
    Contribution: [
      "CreatedCommitContribution",
      "CreatedIssueContribution",
      "CreatedPullRequestContribution",
      "CreatedPullRequestReviewContribution",
      "CreatedRepositoryContribution",
      "JoinedGitHubContribution",
      "RestrictedContribution",
    ],
    CreatedIssueOrRestrictedContribution: [
      "CreatedIssueContribution",
      "RestrictedContribution",
    ],
    CreatedPullRequestOrRestrictedContribution: [
      "CreatedPullRequestContribution",
      "RestrictedContribution",
    ],
    CreatedRepositoryOrRestrictedContribution: [
      "CreatedRepositoryContribution",
      "RestrictedContribution",
    ],
    DeploymentReviewer: ["Team", "User"],
    Closable: [
      "Discussion",
      "Issue",
      "Milestone",
      "Project",
      "ProjectV2",
      "PullRequest",
    ],
    Labelable: ["Discussion", "Issue", "PullRequest"],
    Lockable: ["Discussion", "Issue", "PullRequest"],
    Votable: ["Discussion", "DiscussionComment"],
    AnnouncementBanner: ["Enterprise", "Organization"],
    EnterpriseMember: ["EnterpriseUserAccount", "User"],
    HovercardContext: [
      "GenericHovercardContext",
      "OrganizationTeamsHovercardContext",
      "OrganizationsHovercardContext",
      "ReviewStatusHovercardContext",
      "ViewerHovercardContext",
    ],
    Starrable: ["Gist", "Repository", "Topic"],
    GitSignature: [
      "GpgSignature",
      "SmimeSignature",
      "SshSignature",
      "UnknownSignature",
    ],
    IpAllowListOwner: ["App", "Enterprise", "Organization"],
    Assignable: ["Issue", "PullRequest"],
    ProjectV2Owner: ["Issue", "Organization", "PullRequest", "User"],
    SubscribableThread: ["Issue"],
    IssueOrPullRequest: ["Issue", "PullRequest"],
    IssueTimelineItem: [
      "AssignedEvent",
      "ClosedEvent",
      "Commit",
      "CrossReferencedEvent",
      "DemilestonedEvent",
      "IssueComment",
      "LabeledEvent",
      "LockedEvent",
      "MilestonedEvent",
      "ReferencedEvent",
      "RenamedTitleEvent",
      "ReopenedEvent",
      "SubscribedEvent",
      "TransferredEvent",
      "UnassignedEvent",
      "UnlabeledEvent",
      "UnlockedEvent",
      "UnsubscribedEvent",
      "UserBlockedEvent",
    ],
    IssueTimelineItems: [
      "AddedToProjectEvent",
      "AssignedEvent",
      "ClosedEvent",
      "CommentDeletedEvent",
      "ConnectedEvent",
      "ConvertedNoteToIssueEvent",
      "ConvertedToDiscussionEvent",
      "CrossReferencedEvent",
      "DemilestonedEvent",
      "DisconnectedEvent",
      "IssueComment",
      "LabeledEvent",
      "LockedEvent",
      "MarkedAsDuplicateEvent",
      "MentionedEvent",
      "MilestonedEvent",
      "MovedColumnsInProjectEvent",
      "PinnedEvent",
      "ReferencedEvent",
      "RemovedFromProjectEvent",
      "RenamedTitleEvent",
      "ReopenedEvent",
      "SubscribedEvent",
      "TransferredEvent",
      "UnassignedEvent",
      "UnlabeledEvent",
      "UnlockedEvent",
      "UnmarkedAsDuplicateEvent",
      "UnpinnedEvent",
      "UnsubscribedEvent",
      "UserBlockedEvent",
    ],
    AuditEntry: [
      "MembersCanDeleteReposClearAuditEntry",
      "MembersCanDeleteReposDisableAuditEntry",
      "MembersCanDeleteReposEnableAuditEntry",
      "OauthApplicationCreateAuditEntry",
      "OrgAddBillingManagerAuditEntry",
      "OrgAddMemberAuditEntry",
      "OrgBlockUserAuditEntry",
      "OrgConfigDisableCollaboratorsOnlyAuditEntry",
      "OrgConfigEnableCollaboratorsOnlyAuditEntry",
      "OrgCreateAuditEntry",
      "OrgDisableOauthAppRestrictionsAuditEntry",
      "OrgDisableSamlAuditEntry",
      "OrgDisableTwoFactorRequirementAuditEntry",
      "OrgEnableOauthAppRestrictionsAuditEntry",
      "OrgEnableSamlAuditEntry",
      "OrgEnableTwoFactorRequirementAuditEntry",
      "OrgInviteMemberAuditEntry",
      "OrgInviteToBusinessAuditEntry",
      "OrgOauthAppAccessApprovedAuditEntry",
      "OrgOauthAppAccessBlockedAuditEntry",
      "OrgOauthAppAccessDeniedAuditEntry",
      "OrgOauthAppAccessRequestedAuditEntry",
      "OrgOauthAppAccessUnblockedAuditEntry",
      "OrgRemoveBillingManagerAuditEntry",
      "OrgRemoveMemberAuditEntry",
      "OrgRemoveOutsideCollaboratorAuditEntry",
      "OrgRestoreMemberAuditEntry",
      "OrgUnblockUserAuditEntry",
      "OrgUpdateDefaultRepositoryPermissionAuditEntry",
      "OrgUpdateMemberAuditEntry",
      "OrgUpdateMemberRepositoryCreationPermissionAuditEntry",
      "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry",
      "PrivateRepositoryForkingDisableAuditEntry",
      "PrivateRepositoryForkingEnableAuditEntry",
      "RepoAccessAuditEntry",
      "RepoAddMemberAuditEntry",
      "RepoAddTopicAuditEntry",
      "RepoArchivedAuditEntry",
      "RepoChangeMergeSettingAuditEntry",
      "RepoConfigDisableAnonymousGitAccessAuditEntry",
      "RepoConfigDisableCollaboratorsOnlyAuditEntry",
      "RepoConfigDisableContributorsOnlyAuditEntry",
      "RepoConfigDisableSockpuppetDisallowedAuditEntry",
      "RepoConfigEnableAnonymousGitAccessAuditEntry",
      "RepoConfigEnableCollaboratorsOnlyAuditEntry",
      "RepoConfigEnableContributorsOnlyAuditEntry",
      "RepoConfigEnableSockpuppetDisallowedAuditEntry",
      "RepoConfigLockAnonymousGitAccessAuditEntry",
      "RepoConfigUnlockAnonymousGitAccessAuditEntry",
      "RepoCreateAuditEntry",
      "RepoDestroyAuditEntry",
      "RepoRemoveMemberAuditEntry",
      "RepoRemoveTopicAuditEntry",
      "RepositoryVisibilityChangeDisableAuditEntry",
      "RepositoryVisibilityChangeEnableAuditEntry",
      "TeamAddMemberAuditEntry",
      "TeamAddRepositoryAuditEntry",
      "TeamChangeParentTeamAuditEntry",
      "TeamRemoveMemberAuditEntry",
      "TeamRemoveRepositoryAuditEntry",
    ],
    EnterpriseAuditEntryData: [
      "MembersCanDeleteReposClearAuditEntry",
      "MembersCanDeleteReposDisableAuditEntry",
      "MembersCanDeleteReposEnableAuditEntry",
      "OrgInviteToBusinessAuditEntry",
      "PrivateRepositoryForkingDisableAuditEntry",
      "PrivateRepositoryForkingEnableAuditEntry",
      "RepositoryVisibilityChangeDisableAuditEntry",
      "RepositoryVisibilityChangeEnableAuditEntry",
    ],
    OrganizationAuditEntryData: [
      "MembersCanDeleteReposClearAuditEntry",
      "MembersCanDeleteReposDisableAuditEntry",
      "MembersCanDeleteReposEnableAuditEntry",
      "OauthApplicationCreateAuditEntry",
      "OrgAddBillingManagerAuditEntry",
      "OrgAddMemberAuditEntry",
      "OrgBlockUserAuditEntry",
      "OrgConfigDisableCollaboratorsOnlyAuditEntry",
      "OrgConfigEnableCollaboratorsOnlyAuditEntry",
      "OrgCreateAuditEntry",
      "OrgDisableOauthAppRestrictionsAuditEntry",
      "OrgDisableSamlAuditEntry",
      "OrgDisableTwoFactorRequirementAuditEntry",
      "OrgEnableOauthAppRestrictionsAuditEntry",
      "OrgEnableSamlAuditEntry",
      "OrgEnableTwoFactorRequirementAuditEntry",
      "OrgInviteMemberAuditEntry",
      "OrgInviteToBusinessAuditEntry",
      "OrgOauthAppAccessApprovedAuditEntry",
      "OrgOauthAppAccessBlockedAuditEntry",
      "OrgOauthAppAccessDeniedAuditEntry",
      "OrgOauthAppAccessRequestedAuditEntry",
      "OrgOauthAppAccessUnblockedAuditEntry",
      "OrgRemoveBillingManagerAuditEntry",
      "OrgRemoveMemberAuditEntry",
      "OrgRemoveOutsideCollaboratorAuditEntry",
      "OrgRestoreMemberAuditEntry",
      "OrgRestoreMemberMembershipOrganizationAuditEntryData",
      "OrgUnblockUserAuditEntry",
      "OrgUpdateDefaultRepositoryPermissionAuditEntry",
      "OrgUpdateMemberAuditEntry",
      "OrgUpdateMemberRepositoryCreationPermissionAuditEntry",
      "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry",
      "PrivateRepositoryForkingDisableAuditEntry",
      "PrivateRepositoryForkingEnableAuditEntry",
      "RepoAccessAuditEntry",
      "RepoAddMemberAuditEntry",
      "RepoAddTopicAuditEntry",
      "RepoArchivedAuditEntry",
      "RepoChangeMergeSettingAuditEntry",
      "RepoConfigDisableAnonymousGitAccessAuditEntry",
      "RepoConfigDisableCollaboratorsOnlyAuditEntry",
      "RepoConfigDisableContributorsOnlyAuditEntry",
      "RepoConfigDisableSockpuppetDisallowedAuditEntry",
      "RepoConfigEnableAnonymousGitAccessAuditEntry",
      "RepoConfigEnableCollaboratorsOnlyAuditEntry",
      "RepoConfigEnableContributorsOnlyAuditEntry",
      "RepoConfigEnableSockpuppetDisallowedAuditEntry",
      "RepoConfigLockAnonymousGitAccessAuditEntry",
      "RepoConfigUnlockAnonymousGitAccessAuditEntry",
      "RepoCreateAuditEntry",
      "RepoDestroyAuditEntry",
      "RepoRemoveMemberAuditEntry",
      "RepoRemoveTopicAuditEntry",
      "RepositoryVisibilityChangeDisableAuditEntry",
      "RepositoryVisibilityChangeEnableAuditEntry",
      "TeamAddMemberAuditEntry",
      "TeamAddRepositoryAuditEntry",
      "TeamChangeParentTeamAuditEntry",
      "TeamRemoveMemberAuditEntry",
      "TeamRemoveRepositoryAuditEntry",
    ],
    MilestoneItem: ["Issue", "PullRequest"],
    NotificationsList: ["Organization", "Repository", "Team", "User"],
    NotificationsSubject: [
      "CheckSuite",
      "Commit",
      "Discussion",
      "Gist",
      "Issue",
      "PullRequest",
      "Release",
      "RepositoryDependabotAlertsThread",
      "RepositoryInvitation",
      "RepositoryVulnerabilityAlert",
      "SecurityAdvisory",
      "TeamDiscussion",
      "WorkflowRun",
    ],
    OauthApplicationAuditEntryData: [
      "OauthApplicationCreateAuditEntry",
      "OrgOauthAppAccessApprovedAuditEntry",
      "OrgOauthAppAccessBlockedAuditEntry",
      "OrgOauthAppAccessDeniedAuditEntry",
      "OrgOauthAppAccessRequestedAuditEntry",
      "OrgOauthAppAccessUnblockedAuditEntry",
    ],
    OrgRestoreMemberAuditEntryMembership: [
      "OrgRestoreMemberMembershipOrganizationAuditEntryData",
      "OrgRestoreMemberMembershipRepositoryAuditEntryData",
      "OrgRestoreMemberMembershipTeamAuditEntryData",
    ],
    RepositoryAuditEntryData: [
      "OrgRestoreMemberMembershipRepositoryAuditEntryData",
      "PrivateRepositoryForkingDisableAuditEntry",
      "PrivateRepositoryForkingEnableAuditEntry",
      "RepoAccessAuditEntry",
      "RepoAddMemberAuditEntry",
      "RepoAddTopicAuditEntry",
      "RepoArchivedAuditEntry",
      "RepoChangeMergeSettingAuditEntry",
      "RepoConfigDisableAnonymousGitAccessAuditEntry",
      "RepoConfigDisableCollaboratorsOnlyAuditEntry",
      "RepoConfigDisableContributorsOnlyAuditEntry",
      "RepoConfigDisableSockpuppetDisallowedAuditEntry",
      "RepoConfigEnableAnonymousGitAccessAuditEntry",
      "RepoConfigEnableCollaboratorsOnlyAuditEntry",
      "RepoConfigEnableContributorsOnlyAuditEntry",
      "RepoConfigEnableSockpuppetDisallowedAuditEntry",
      "RepoConfigLockAnonymousGitAccessAuditEntry",
      "RepoConfigUnlockAnonymousGitAccessAuditEntry",
      "RepoCreateAuditEntry",
      "RepoDestroyAuditEntry",
      "RepoRemoveMemberAuditEntry",
      "RepoRemoveTopicAuditEntry",
      "TeamAddRepositoryAuditEntry",
      "TeamRemoveRepositoryAuditEntry",
    ],
    TeamAuditEntryData: [
      "OrgRestoreMemberMembershipTeamAuditEntryData",
      "TeamAddMemberAuditEntry",
      "TeamAddRepositoryAuditEntry",
      "TeamChangeParentTeamAuditEntry",
      "TeamRemoveMemberAuditEntry",
      "TeamRemoveRepositoryAuditEntry",
    ],
    MemberStatusable: ["Organization", "Team"],
    PackageOwner: ["Organization", "Repository", "User"],
    ProfileOwner: ["Organization", "User"],
    ProjectOwner: ["Organization", "Repository", "User"],
    ProjectV2Recent: ["Organization", "Repository", "User"],
    RepositoryDiscussionAuthor: ["Organization", "User"],
    RepositoryDiscussionCommentAuthor: ["Organization", "User"],
    RepositoryOwner: ["Organization", "User"],
    Sponsorable: ["Organization", "User"],
    OrganizationAuditEntry: [
      "MembersCanDeleteReposClearAuditEntry",
      "MembersCanDeleteReposDisableAuditEntry",
      "MembersCanDeleteReposEnableAuditEntry",
      "OauthApplicationCreateAuditEntry",
      "OrgAddBillingManagerAuditEntry",
      "OrgAddMemberAuditEntry",
      "OrgBlockUserAuditEntry",
      "OrgConfigDisableCollaboratorsOnlyAuditEntry",
      "OrgConfigEnableCollaboratorsOnlyAuditEntry",
      "OrgCreateAuditEntry",
      "OrgDisableOauthAppRestrictionsAuditEntry",
      "OrgDisableSamlAuditEntry",
      "OrgDisableTwoFactorRequirementAuditEntry",
      "OrgEnableOauthAppRestrictionsAuditEntry",
      "OrgEnableSamlAuditEntry",
      "OrgEnableTwoFactorRequirementAuditEntry",
      "OrgInviteMemberAuditEntry",
      "OrgInviteToBusinessAuditEntry",
      "OrgOauthAppAccessApprovedAuditEntry",
      "OrgOauthAppAccessBlockedAuditEntry",
      "OrgOauthAppAccessDeniedAuditEntry",
      "OrgOauthAppAccessRequestedAuditEntry",
      "OrgOauthAppAccessUnblockedAuditEntry",
      "OrgRemoveBillingManagerAuditEntry",
      "OrgRemoveMemberAuditEntry",
      "OrgRemoveOutsideCollaboratorAuditEntry",
      "OrgRestoreMemberAuditEntry",
      "OrgUnblockUserAuditEntry",
      "OrgUpdateDefaultRepositoryPermissionAuditEntry",
      "OrgUpdateMemberAuditEntry",
      "OrgUpdateMemberRepositoryCreationPermissionAuditEntry",
      "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry",
      "PrivateRepositoryForkingDisableAuditEntry",
      "PrivateRepositoryForkingEnableAuditEntry",
      "RepoAccessAuditEntry",
      "RepoAddMemberAuditEntry",
      "RepoAddTopicAuditEntry",
      "RepoArchivedAuditEntry",
      "RepoChangeMergeSettingAuditEntry",
      "RepoConfigDisableAnonymousGitAccessAuditEntry",
      "RepoConfigDisableCollaboratorsOnlyAuditEntry",
      "RepoConfigDisableContributorsOnlyAuditEntry",
      "RepoConfigDisableSockpuppetDisallowedAuditEntry",
      "RepoConfigEnableAnonymousGitAccessAuditEntry",
      "RepoConfigEnableCollaboratorsOnlyAuditEntry",
      "RepoConfigEnableContributorsOnlyAuditEntry",
      "RepoConfigEnableSockpuppetDisallowedAuditEntry",
      "RepoConfigLockAnonymousGitAccessAuditEntry",
      "RepoConfigUnlockAnonymousGitAccessAuditEntry",
      "RepoCreateAuditEntry",
      "RepoDestroyAuditEntry",
      "RepoRemoveMemberAuditEntry",
      "RepoRemoveTopicAuditEntry",
      "RepositoryVisibilityChangeDisableAuditEntry",
      "RepositoryVisibilityChangeEnableAuditEntry",
      "TeamAddMemberAuditEntry",
      "TeamAddRepositoryAuditEntry",
      "TeamChangeParentTeamAuditEntry",
      "TeamRemoveMemberAuditEntry",
      "TeamRemoveRepositoryAuditEntry",
    ],
    OrganizationOrUser: ["Organization", "User"],
    PermissionGranter: ["Organization", "Repository", "Team"],
    PinnableItem: ["Gist", "Repository"],
    ProjectCardItem: ["Issue", "PullRequest"],
    ProjectV2Actor: ["Team", "User"],
    ProjectV2FieldCommon: [
      "ProjectV2Field",
      "ProjectV2IterationField",
      "ProjectV2SingleSelectField",
    ],
    ProjectV2FieldConfiguration: [
      "ProjectV2Field",
      "ProjectV2IterationField",
      "ProjectV2SingleSelectField",
    ],
    ProjectV2ItemContent: ["DraftIssue", "Issue", "PullRequest"],
    ProjectV2ItemFieldValueCommon: [
      "ProjectV2ItemFieldDateValue",
      "ProjectV2ItemFieldIterationValue",
      "ProjectV2ItemFieldNumberValue",
      "ProjectV2ItemFieldSingleSelectValue",
      "ProjectV2ItemFieldTextValue",
    ],
    ProjectV2ItemFieldValue: [
      "ProjectV2ItemFieldDateValue",
      "ProjectV2ItemFieldIterationValue",
      "ProjectV2ItemFieldLabelValue",
      "ProjectV2ItemFieldMilestoneValue",
      "ProjectV2ItemFieldNumberValue",
      "ProjectV2ItemFieldPullRequestValue",
      "ProjectV2ItemFieldRepositoryValue",
      "ProjectV2ItemFieldReviewerValue",
      "ProjectV2ItemFieldSingleSelectValue",
      "ProjectV2ItemFieldTextValue",
      "ProjectV2ItemFieldUserValue",
    ],
    PullRequestTimelineItem: [
      "AssignedEvent",
      "BaseRefDeletedEvent",
      "BaseRefForcePushedEvent",
      "ClosedEvent",
      "Commit",
      "CommitCommentThread",
      "CrossReferencedEvent",
      "DemilestonedEvent",
      "DeployedEvent",
      "DeploymentEnvironmentChangedEvent",
      "HeadRefDeletedEvent",
      "HeadRefForcePushedEvent",
      "HeadRefRestoredEvent",
      "IssueComment",
      "LabeledEvent",
      "LockedEvent",
      "MergedEvent",
      "MilestonedEvent",
      "PullRequestReview",
      "PullRequestReviewComment",
      "PullRequestReviewThread",
      "ReferencedEvent",
      "RenamedTitleEvent",
      "ReopenedEvent",
      "ReviewDismissedEvent",
      "ReviewRequestRemovedEvent",
      "ReviewRequestedEvent",
      "SubscribedEvent",
      "UnassignedEvent",
      "UnlabeledEvent",
      "UnlockedEvent",
      "UnsubscribedEvent",
      "UserBlockedEvent",
    ],
    PullRequestTimelineItems: [
      "AddedToMergeQueueEvent",
      "AddedToProjectEvent",
      "AssignedEvent",
      "AutoMergeDisabledEvent",
      "AutoMergeEnabledEvent",
      "AutoRebaseEnabledEvent",
      "AutoSquashEnabledEvent",
      "AutomaticBaseChangeFailedEvent",
      "AutomaticBaseChangeSucceededEvent",
      "BaseRefChangedEvent",
      "BaseRefDeletedEvent",
      "BaseRefForcePushedEvent",
      "ClosedEvent",
      "CommentDeletedEvent",
      "ConnectedEvent",
      "ConvertToDraftEvent",
      "ConvertedNoteToIssueEvent",
      "ConvertedToDiscussionEvent",
      "CrossReferencedEvent",
      "DemilestonedEvent",
      "DeployedEvent",
      "DeploymentEnvironmentChangedEvent",
      "DisconnectedEvent",
      "HeadRefDeletedEvent",
      "HeadRefForcePushedEvent",
      "HeadRefRestoredEvent",
      "IssueComment",
      "LabeledEvent",
      "LockedEvent",
      "MarkedAsDuplicateEvent",
      "MentionedEvent",
      "MergedEvent",
      "MilestonedEvent",
      "MovedColumnsInProjectEvent",
      "PinnedEvent",
      "PullRequestCommit",
      "PullRequestCommitCommentThread",
      "PullRequestReview",
      "PullRequestReviewThread",
      "PullRequestRevisionMarker",
      "ReadyForReviewEvent",
      "ReferencedEvent",
      "RemovedFromMergeQueueEvent",
      "RemovedFromProjectEvent",
      "RenamedTitleEvent",
      "ReopenedEvent",
      "ReviewDismissedEvent",
      "ReviewRequestRemovedEvent",
      "ReviewRequestedEvent",
      "SubscribedEvent",
      "TransferredEvent",
      "UnassignedEvent",
      "UnlabeledEvent",
      "UnlockedEvent",
      "UnmarkedAsDuplicateEvent",
      "UnpinnedEvent",
      "UnsubscribedEvent",
      "UserBlockedEvent",
    ],
    PushAllowanceActor: ["App", "Team", "User"],
    Reactor: ["Bot", "Mannequin", "Organization", "User"],
    ReferencedSubject: ["Issue", "PullRequest"],
    RenamedTitleSubject: ["Issue", "PullRequest"],
    TopicAuditEntryData: [
      "RepoAddTopicAuditEntry",
      "RepoRemoveTopicAuditEntry",
    ],
    RepositoryInfo: ["Repository"],
    Migration: ["RepositoryMigration"],
    RequestedReviewer: ["Bot", "Mannequin", "Team", "User"],
    ReviewDismissalAllowanceActor: ["App", "Team", "User"],
    RuleParameters: [
      "BranchNamePatternParameters",
      "CommitAuthorEmailPatternParameters",
      "CommitMessagePatternParameters",
      "CommitterEmailPatternParameters",
      "PullRequestParameters",
      "RequiredDeploymentsParameters",
      "RequiredStatusChecksParameters",
      "TagNamePatternParameters",
      "UpdateParameters",
      "WorkflowsParameters",
    ],
    RuleSource: ["Organization", "Repository"],
    SearchResultItem: [
      "App",
      "Discussion",
      "Issue",
      "MarketplaceListing",
      "Organization",
      "PullRequest",
      "Repository",
      "User",
    ],
    Sponsor: ["Organization", "User"],
    SponsorableItem: ["Organization", "User"],
    SponsorsListingFeatureableItem: ["Repository", "User"],
    StatusCheckRollupContext: ["CheckRun", "StatusContext"],
    VerifiableDomainOwner: ["Enterprise", "Organization"],
  },
} as const;

/**
 * Autogenerated return type of AbortQueuedMigrations
 */
export interface AbortQueuedMigrationsPayload {
  __typename?: "AbortQueuedMigrationsPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Did the operation succeed?
   */
  success?: Maybe<ScalarsEnums["Boolean"]>;
}

/**
 * Autogenerated return type of AbortRepositoryMigration
 */
export interface AbortRepositoryMigrationPayload {
  __typename?: "AbortRepositoryMigrationPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Did the operation succeed?
   */
  success?: Maybe<ScalarsEnums["Boolean"]>;
}

/**
 * Autogenerated return type of AcceptEnterpriseAdministratorInvitation
 */
export interface AcceptEnterpriseAdministratorInvitationPayload {
  __typename?: "AcceptEnterpriseAdministratorInvitationPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The invitation that was accepted.
   */
  invitation?: Maybe<EnterpriseAdministratorInvitation>;
  /**
   * A message confirming the result of accepting an administrator invitation.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of AcceptTopicSuggestion
 */
export interface AcceptTopicSuggestionPayload {
  __typename?: "AcceptTopicSuggestionPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The accepted topic.
   */
  topic?: Maybe<Topic>;
}

/**
 * Represents an object which can take actions on GitHub. Typically a User or Bot.
 */
export interface Actor {
  __typename?:
    | "Bot"
    | "EnterpriseUserAccount"
    | "Mannequin"
    | "Organization"
    | "User";
  /**
   * A URL pointing to the actor's public avatar.
   */
  avatarUrl: (args?: {
    /**
     * The size of the resulting square image.
     */
    size?: Maybe<Scalars["Int"]>;
  }) => ScalarsEnums["URI"];
  /**
   * The username of the actor.
   */
  login: ScalarsEnums["String"];
  /**
   * The HTTP path for this actor.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this actor.
   */
  url: ScalarsEnums["URI"];
  $on: $Actor;
}

/**
 * Location information for an actor
 */
export interface ActorLocation {
  __typename?: "ActorLocation";
  /**
   * City
   */
  city?: Maybe<ScalarsEnums["String"]>;
  /**
   * Country name
   */
  country?: Maybe<ScalarsEnums["String"]>;
  /**
   * Country code
   */
  countryCode?: Maybe<ScalarsEnums["String"]>;
  /**
   * Region name
   */
  region?: Maybe<ScalarsEnums["String"]>;
  /**
   * Region or state code
   */
  regionCode?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of AddAssigneesToAssignable
 */
export interface AddAssigneesToAssignablePayload {
  __typename?: "AddAssigneesToAssignablePayload";
  /**
   * The item that was assigned.
   */
  assignable?: Maybe<Assignable>;
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of AddComment
 */
export interface AddCommentPayload {
  __typename?: "AddCommentPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The edge from the subject's comment connection.
   */
  commentEdge?: Maybe<IssueCommentEdge>;
  /**
   * The subject
   */
  subject?: Maybe<Node>;
  /**
   * The edge from the subject's timeline connection.
   */
  timelineEdge?: Maybe<IssueTimelineItemEdge>;
}

/**
 * Autogenerated return type of AddDiscussionComment
 */
export interface AddDiscussionCommentPayload {
  __typename?: "AddDiscussionCommentPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The newly created discussion comment.
   */
  comment?: Maybe<DiscussionComment>;
}

/**
 * Autogenerated return type of AddDiscussionPollVote
 */
export interface AddDiscussionPollVotePayload {
  __typename?: "AddDiscussionPollVotePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The poll option that a vote was added to.
   */
  pollOption?: Maybe<DiscussionPollOption>;
}

/**
 * Autogenerated return type of AddEnterpriseOrganizationMember
 */
export interface AddEnterpriseOrganizationMemberPayload {
  __typename?: "AddEnterpriseOrganizationMemberPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The users who were added to the organization.
   */
  users?: Maybe<Array<User>>;
}

/**
 * Autogenerated return type of AddEnterpriseSupportEntitlement
 */
export interface AddEnterpriseSupportEntitlementPayload {
  __typename?: "AddEnterpriseSupportEntitlementPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * A message confirming the result of adding the support entitlement.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of AddLabelsToLabelable
 */
export interface AddLabelsToLabelablePayload {
  __typename?: "AddLabelsToLabelablePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item that was labeled.
   */
  labelable?: Maybe<Labelable>;
}

/**
 * Autogenerated return type of AddProjectCard
 */
export interface AddProjectCardPayload {
  __typename?: "AddProjectCardPayload";
  /**
   * The edge from the ProjectColumn's card connection.
   */
  cardEdge?: Maybe<ProjectCardEdge>;
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ProjectColumn
   */
  projectColumn?: Maybe<ProjectColumn>;
}

/**
 * Autogenerated return type of AddProjectColumn
 */
export interface AddProjectColumnPayload {
  __typename?: "AddProjectColumnPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The edge from the project's column connection.
   */
  columnEdge?: Maybe<ProjectColumnEdge>;
  /**
   * The project
   */
  project?: Maybe<Project>;
}

/**
 * Autogenerated return type of AddProjectV2DraftIssue
 */
export interface AddProjectV2DraftIssuePayload {
  __typename?: "AddProjectV2DraftIssuePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The draft issue added to the project.
   */
  projectItem?: Maybe<ProjectV2Item>;
}

/**
 * Autogenerated return type of AddProjectV2ItemById
 */
export interface AddProjectV2ItemByIdPayload {
  __typename?: "AddProjectV2ItemByIdPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item added to the project.
   */
  item?: Maybe<ProjectV2Item>;
}

/**
 * Autogenerated return type of AddPullRequestReviewComment
 */
export interface AddPullRequestReviewCommentPayload {
  __typename?: "AddPullRequestReviewCommentPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The newly created comment.
   */
  comment?: Maybe<PullRequestReviewComment>;
  /**
   * The edge from the review's comment connection.
   */
  commentEdge?: Maybe<PullRequestReviewCommentEdge>;
}

/**
 * Autogenerated return type of AddPullRequestReview
 */
export interface AddPullRequestReviewPayload {
  __typename?: "AddPullRequestReviewPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The newly created pull request review.
   */
  pullRequestReview?: Maybe<PullRequestReview>;
  /**
   * The edge from the pull request's review connection.
   */
  reviewEdge?: Maybe<PullRequestReviewEdge>;
}

/**
 * Autogenerated return type of AddPullRequestReviewThread
 */
export interface AddPullRequestReviewThreadPayload {
  __typename?: "AddPullRequestReviewThreadPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The newly created thread.
   */
  thread?: Maybe<PullRequestReviewThread>;
}

/**
 * Autogenerated return type of AddPullRequestReviewThreadReply
 */
export interface AddPullRequestReviewThreadReplyPayload {
  __typename?: "AddPullRequestReviewThreadReplyPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The newly created reply.
   */
  comment?: Maybe<PullRequestReviewComment>;
}

/**
 * Autogenerated return type of AddReaction
 */
export interface AddReactionPayload {
  __typename?: "AddReactionPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The reaction object.
   */
  reaction?: Maybe<Reaction>;
  /**
   * The reaction groups for the subject.
   */
  reactionGroups?: Maybe<Array<ReactionGroup>>;
  /**
   * The reactable subject.
   */
  subject?: Maybe<Reactable>;
}

/**
 * Autogenerated return type of AddStar
 */
export interface AddStarPayload {
  __typename?: "AddStarPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The starrable.
   */
  starrable?: Maybe<Starrable>;
}

/**
 * Autogenerated return type of AddUpvote
 */
export interface AddUpvotePayload {
  __typename?: "AddUpvotePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The votable subject.
   */
  subject?: Maybe<Votable>;
}

/**
 * Autogenerated return type of AddVerifiableDomain
 */
export interface AddVerifiableDomainPayload {
  __typename?: "AddVerifiableDomainPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The verifiable domain that was added.
   */
  domain?: Maybe<VerifiableDomain>;
}

/**
 * Represents an 'added_to_merge_queue' event on a given pull request.
 */
export interface AddedToMergeQueueEvent {
  __typename?: "AddedToMergeQueueEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The user who added this Pull Request to the merge queue
   */
  enqueuer?: Maybe<User>;
  id: ScalarsEnums["ID"];
  /**
   * The merge queue where this pull request was added to.
   */
  mergeQueue?: Maybe<MergeQueue>;
  /**
   * PullRequest referenced by event.
   */
  pullRequest?: Maybe<PullRequest>;
}

/**
 * Represents a 'added_to_project' event on a given issue or pull request.
 */
export interface AddedToProjectEvent {
  __typename?: "AddedToProjectEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
}

/**
 * Represents an announcement banner.
 */
export interface AnnouncementBanner {
  __typename?: "Enterprise" | "Organization";
  /**
   * The text of the announcement
   */
  announcement?: Maybe<ScalarsEnums["String"]>;
  /**
   * The expiration date of the announcement, if any
   */
  announcementExpiresAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Whether the announcement can be dismissed by the user
   */
  announcementUserDismissible?: Maybe<ScalarsEnums["Boolean"]>;
  $on: $AnnouncementBanner;
}

/**
 * A GitHub App.
 */
export interface App {
  __typename?: "App";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The description of the app.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  id: ScalarsEnums["ID"];
  /**
   * The IP addresses of the app.
   */
  ipAllowListEntries: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for IP allow list entries returned.
     * @defaultValue `{"direction":"ASC","field":"ALLOW_LIST_VALUE"}`
     */
    orderBy?: Maybe<IpAllowListEntryOrder>;
  }) => IpAllowListEntryConnection;
  /**
   * The hex color code, without the leading '#', for the logo background.
   */
  logoBackgroundColor: ScalarsEnums["String"];
  /**
   * A URL pointing to the app's logo.
   */
  logoUrl: (args?: {
    /**
     * The size of the resulting image.
     */
    size?: Maybe<Scalars["Int"]>;
  }) => ScalarsEnums["URI"];
  /**
   * The name of the app.
   */
  name: ScalarsEnums["String"];
  /**
   * A slug based on the name of the app for use in URLs.
   */
  slug: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The URL to the app's homepage.
   */
  url: ScalarsEnums["URI"];
}

/**
 * Autogenerated return type of ApproveDeployments
 */
export interface ApproveDeploymentsPayload {
  __typename?: "ApproveDeploymentsPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The affected deployments.
   */
  deployments?: Maybe<Array<Deployment>>;
}

/**
 * Autogenerated return type of ApproveVerifiableDomain
 */
export interface ApproveVerifiableDomainPayload {
  __typename?: "ApproveVerifiableDomainPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The verifiable domain that was approved.
   */
  domain?: Maybe<VerifiableDomain>;
}

/**
 * Autogenerated return type of ArchiveProjectV2Item
 */
export interface ArchiveProjectV2ItemPayload {
  __typename?: "ArchiveProjectV2ItemPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item archived from the project.
   */
  item?: Maybe<ProjectV2Item>;
}

/**
 * Autogenerated return type of ArchiveRepository
 */
export interface ArchiveRepositoryPayload {
  __typename?: "ArchiveRepositoryPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The repository that was marked as archived.
   */
  repository?: Maybe<Repository>;
}

/**
 * An object that can have users assigned to it.
 */
export interface Assignable {
  __typename?: "Issue" | "PullRequest";
  /**
   * A list of Users assigned to this object.
   */
  assignees: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => UserConnection;
  $on: $Assignable;
}

/**
 * Represents an 'assigned' event on any assignable object.
 */
export interface AssignedEvent {
  __typename?: "AssignedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the assignable associated with the event.
   */
  assignable: Assignable;
  /**
   * Identifies the user or mannequin that was assigned.
   */
  assignee?: Maybe<Assignee>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Identifies the user who was assigned.
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
   */
  user?: Maybe<User>;
}

/**
 * Types that can be assigned to issues.
 */
export interface Assignee {
  __typename?: "Bot" | "Mannequin" | "Organization" | "User";
  $on: $Assignee;
}

/**
 * An entry in the audit log.
 */
export interface AuditEntry {
  __typename?:
    | "MembersCanDeleteReposClearAuditEntry"
    | "MembersCanDeleteReposDisableAuditEntry"
    | "MembersCanDeleteReposEnableAuditEntry"
    | "OauthApplicationCreateAuditEntry"
    | "OrgAddBillingManagerAuditEntry"
    | "OrgAddMemberAuditEntry"
    | "OrgBlockUserAuditEntry"
    | "OrgConfigDisableCollaboratorsOnlyAuditEntry"
    | "OrgConfigEnableCollaboratorsOnlyAuditEntry"
    | "OrgCreateAuditEntry"
    | "OrgDisableOauthAppRestrictionsAuditEntry"
    | "OrgDisableSamlAuditEntry"
    | "OrgDisableTwoFactorRequirementAuditEntry"
    | "OrgEnableOauthAppRestrictionsAuditEntry"
    | "OrgEnableSamlAuditEntry"
    | "OrgEnableTwoFactorRequirementAuditEntry"
    | "OrgInviteMemberAuditEntry"
    | "OrgInviteToBusinessAuditEntry"
    | "OrgOauthAppAccessApprovedAuditEntry"
    | "OrgOauthAppAccessBlockedAuditEntry"
    | "OrgOauthAppAccessDeniedAuditEntry"
    | "OrgOauthAppAccessRequestedAuditEntry"
    | "OrgOauthAppAccessUnblockedAuditEntry"
    | "OrgRemoveBillingManagerAuditEntry"
    | "OrgRemoveMemberAuditEntry"
    | "OrgRemoveOutsideCollaboratorAuditEntry"
    | "OrgRestoreMemberAuditEntry"
    | "OrgUnblockUserAuditEntry"
    | "OrgUpdateDefaultRepositoryPermissionAuditEntry"
    | "OrgUpdateMemberAuditEntry"
    | "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
    | "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
    | "PrivateRepositoryForkingDisableAuditEntry"
    | "PrivateRepositoryForkingEnableAuditEntry"
    | "RepoAccessAuditEntry"
    | "RepoAddMemberAuditEntry"
    | "RepoAddTopicAuditEntry"
    | "RepoArchivedAuditEntry"
    | "RepoChangeMergeSettingAuditEntry"
    | "RepoConfigDisableAnonymousGitAccessAuditEntry"
    | "RepoConfigDisableCollaboratorsOnlyAuditEntry"
    | "RepoConfigDisableContributorsOnlyAuditEntry"
    | "RepoConfigDisableSockpuppetDisallowedAuditEntry"
    | "RepoConfigEnableAnonymousGitAccessAuditEntry"
    | "RepoConfigEnableCollaboratorsOnlyAuditEntry"
    | "RepoConfigEnableContributorsOnlyAuditEntry"
    | "RepoConfigEnableSockpuppetDisallowedAuditEntry"
    | "RepoConfigLockAnonymousGitAccessAuditEntry"
    | "RepoConfigUnlockAnonymousGitAccessAuditEntry"
    | "RepoCreateAuditEntry"
    | "RepoDestroyAuditEntry"
    | "RepoRemoveMemberAuditEntry"
    | "RepoRemoveTopicAuditEntry"
    | "RepositoryVisibilityChangeDisableAuditEntry"
    | "RepositoryVisibilityChangeEnableAuditEntry"
    | "TeamAddMemberAuditEntry"
    | "TeamAddRepositoryAuditEntry"
    | "TeamChangeParentTeamAuditEntry"
    | "TeamRemoveMemberAuditEntry"
    | "TeamRemoveRepositoryAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
  $on: $AuditEntry;
}

/**
 * Types that can initiate an audit log event.
 */
export interface AuditEntryActor {
  __typename?: "Bot" | "Organization" | "User";
  $on: $AuditEntryActor;
}

/**
 * Represents a 'auto_merge_disabled' event on a given pull request.
 */
export interface AutoMergeDisabledEvent {
  __typename?: "AutoMergeDisabledEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The user who disabled auto-merge for this Pull Request
   */
  disabler?: Maybe<User>;
  id: ScalarsEnums["ID"];
  /**
   * PullRequest referenced by event
   */
  pullRequest?: Maybe<PullRequest>;
  /**
   * The reason auto-merge was disabled
   */
  reason?: Maybe<ScalarsEnums["String"]>;
  /**
   * The reason_code relating to why auto-merge was disabled
   */
  reasonCode?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Represents a 'auto_merge_enabled' event on a given pull request.
 */
export interface AutoMergeEnabledEvent {
  __typename?: "AutoMergeEnabledEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The user who enabled auto-merge for this Pull Request
   */
  enabler?: Maybe<User>;
  id: ScalarsEnums["ID"];
  /**
   * PullRequest referenced by event.
   */
  pullRequest?: Maybe<PullRequest>;
}

/**
 * Represents an auto-merge request for a pull request
 */
export interface AutoMergeRequest {
  __typename?: "AutoMergeRequest";
  /**
   * The email address of the author of this auto-merge request.
   */
  authorEmail?: Maybe<ScalarsEnums["String"]>;
  /**
   * The commit message of the auto-merge request. If a merge queue is required by the base branch, this value will be set by the merge queue when merging.
   */
  commitBody?: Maybe<ScalarsEnums["String"]>;
  /**
   * The commit title of the auto-merge request. If a merge queue is required by the base branch, this value will be set by the merge queue when merging
   */
  commitHeadline?: Maybe<ScalarsEnums["String"]>;
  /**
   * When was this auto-merge request was enabled.
   */
  enabledAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The actor who created the auto-merge request.
   */
  enabledBy?: Maybe<Actor>;
  /**
   * The merge method of the auto-merge request. If a merge queue is required by the base branch, this value will be set by the merge queue when merging.
   */
  mergeMethod: ScalarsEnums["PullRequestMergeMethod"];
  /**
   * The pull request that this auto-merge request is set against.
   */
  pullRequest: PullRequest;
}

/**
 * Represents a 'auto_rebase_enabled' event on a given pull request.
 */
export interface AutoRebaseEnabledEvent {
  __typename?: "AutoRebaseEnabledEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The user who enabled auto-merge (rebase) for this Pull Request
   */
  enabler?: Maybe<User>;
  id: ScalarsEnums["ID"];
  /**
   * PullRequest referenced by event.
   */
  pullRequest?: Maybe<PullRequest>;
}

/**
 * Represents a 'auto_squash_enabled' event on a given pull request.
 */
export interface AutoSquashEnabledEvent {
  __typename?: "AutoSquashEnabledEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The user who enabled auto-merge (squash) for this Pull Request
   */
  enabler?: Maybe<User>;
  id: ScalarsEnums["ID"];
  /**
   * PullRequest referenced by event.
   */
  pullRequest?: Maybe<PullRequest>;
}

/**
 * Represents a 'automatic_base_change_failed' event on a given pull request.
 */
export interface AutomaticBaseChangeFailedEvent {
  __typename?: "AutomaticBaseChangeFailedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The new base for this PR
   */
  newBase: ScalarsEnums["String"];
  /**
   * The old base for this PR
   */
  oldBase: ScalarsEnums["String"];
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
}

/**
 * Represents a 'automatic_base_change_succeeded' event on a given pull request.
 */
export interface AutomaticBaseChangeSucceededEvent {
  __typename?: "AutomaticBaseChangeSucceededEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The new base for this PR
   */
  newBase: ScalarsEnums["String"];
  /**
   * The old base for this PR
   */
  oldBase: ScalarsEnums["String"];
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
}

/**
 * Represents a 'base_ref_changed' event on a given issue or pull request.
 */
export interface BaseRefChangedEvent {
  __typename?: "BaseRefChangedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the name of the base ref for the pull request after it was changed.
   */
  currentRefName: ScalarsEnums["String"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
  /**
   * Identifies the name of the base ref for the pull request before it was changed.
   */
  previousRefName: ScalarsEnums["String"];
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
}

/**
 * Represents a 'base_ref_deleted' event on a given pull request.
 */
export interface BaseRefDeletedEvent {
  __typename?: "BaseRefDeletedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the name of the Ref associated with the `base_ref_deleted` event.
   */
  baseRefName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * PullRequest referenced by event.
   */
  pullRequest?: Maybe<PullRequest>;
}

/**
 * Represents a 'base_ref_force_pushed' event on a given pull request.
 */
export interface BaseRefForcePushedEvent {
  __typename?: "BaseRefForcePushedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the after commit SHA for the 'base_ref_force_pushed' event.
   */
  afterCommit?: Maybe<Commit>;
  /**
   * Identifies the before commit SHA for the 'base_ref_force_pushed' event.
   */
  beforeCommit?: Maybe<Commit>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
  /**
   * Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
   */
  ref?: Maybe<Ref>;
}

/**
 * Represents a Git blame.
 */
export interface Blame {
  __typename?: "Blame";
  /**
   * The list of ranges from a Git blame.
   */
  ranges: Array<BlameRange>;
}

/**
 * Represents a range of information from a Git blame.
 */
export interface BlameRange {
  __typename?: "BlameRange";
  /**
   * Identifies the recency of the change, from 1 (new) to 10 (old). This is calculated as a 2-quantile and determines the length of distance between the median age of all the changes in the file and the recency of the current range's change.
   */
  age: ScalarsEnums["Int"];
  /**
   * Identifies the line author
   */
  commit: Commit;
  /**
   * The ending line for the range
   */
  endingLine: ScalarsEnums["Int"];
  /**
   * The starting line for the range
   */
  startingLine: ScalarsEnums["Int"];
}

/**
 * Represents a Git blob.
 */
export interface Blob {
  __typename?: "Blob";
  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: ScalarsEnums["String"];
  /**
   * Byte size of Blob object
   */
  byteSize: ScalarsEnums["Int"];
  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this Git object
   */
  commitUrl: ScalarsEnums["URI"];
  id: ScalarsEnums["ID"];
  /**
   * Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.
   */
  isBinary?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Indicates whether the contents is truncated
   */
  isTruncated: ScalarsEnums["Boolean"];
  /**
   * The Git object ID
   */
  oid: ScalarsEnums["GitObjectID"];
  /**
   * The Repository the Git object belongs to
   */
  repository: Repository;
  /**
   * UTF8 text data or null if the Blob is binary
   */
  text?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A special type of user which takes actions on behalf of GitHub Apps.
 */
export interface Bot {
  __typename?: "Bot";
  /**
   * A URL pointing to the GitHub App's public avatar.
   */
  avatarUrl: (args?: {
    /**
     * The size of the resulting square image.
     */
    size?: Maybe<Scalars["Int"]>;
  }) => ScalarsEnums["URI"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
  /**
   * The username of the actor.
   */
  login: ScalarsEnums["String"];
  /**
   * The HTTP path for this bot
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this bot
   */
  url: ScalarsEnums["URI"];
}

/**
 * Types which can be actors for `BranchActorAllowance` objects.
 */
export interface BranchActorAllowanceActor {
  __typename?: "App" | "Team" | "User";
  $on: $BranchActorAllowanceActor;
}

/**
 * Parameters to be used for the branch_name_pattern rule
 */
export interface BranchNamePatternParameters {
  __typename?: "BranchNamePatternParameters";
  /**
   * How this rule will appear to users.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * If true, the rule will fail if the pattern matches.
   */
  negate: ScalarsEnums["Boolean"];
  /**
   * The operator to use for matching.
   */
  operator: ScalarsEnums["String"];
  /**
   * The pattern to match with.
   */
  pattern: ScalarsEnums["String"];
}

/**
 * A branch protection rule.
 */
export interface BranchProtectionRule {
  __typename?: "BranchProtectionRule";
  /**
   * Can this branch be deleted.
   */
  allowsDeletions: ScalarsEnums["Boolean"];
  /**
   * Are force pushes allowed on this branch.
   */
  allowsForcePushes: ScalarsEnums["Boolean"];
  /**
   * Is branch creation a protected operation.
   */
  blocksCreations: ScalarsEnums["Boolean"];
  /**
   * A list of conflicts matching branches protection rule and other branch protection rules
   */
  branchProtectionRuleConflicts: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => BranchProtectionRuleConflictConnection;
  /**
   * A list of actors able to force push for this branch protection rule.
   */
  bypassForcePushAllowances: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => BypassForcePushAllowanceConnection;
  /**
   * A list of actors able to bypass PRs for this branch protection rule.
   */
  bypassPullRequestAllowances: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => BypassPullRequestAllowanceConnection;
  /**
   * The actor who created this branch protection rule.
   */
  creator?: Maybe<Actor>;
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Will new commits pushed to matching branches dismiss pull request review approvals.
   */
  dismissesStaleReviews: ScalarsEnums["Boolean"];
  id: ScalarsEnums["ID"];
  /**
   * Can admins overwrite branch protection.
   */
  isAdminEnforced: ScalarsEnums["Boolean"];
  /**
   * Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
   */
  lockAllowsFetchAndMerge: ScalarsEnums["Boolean"];
  /**
   * Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
   */
  lockBranch: ScalarsEnums["Boolean"];
  /**
   * Repository refs that are protected by this rule
   */
  matchingRefs: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filters refs with query on name
     */
    query?: Maybe<Scalars["String"]>;
  }) => RefConnection;
  /**
   * Identifies the protection rule pattern.
   */
  pattern: ScalarsEnums["String"];
  /**
   * A list push allowances for this branch protection rule.
   */
  pushAllowances: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => PushAllowanceConnection;
  /**
   * The repository associated with this branch protection rule.
   */
  repository?: Maybe<Repository>;
  /**
   * Whether the most recent push must be approved by someone other than the person who pushed it
   */
  requireLastPushApproval: ScalarsEnums["Boolean"];
  /**
   * Number of approving reviews required to update matching branches.
   */
  requiredApprovingReviewCount?: Maybe<ScalarsEnums["Int"]>;
  /**
   * List of required deployment environments that must be deployed successfully to update matching branches
   */
  requiredDeploymentEnvironments?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * List of required status check contexts that must pass for commits to be accepted to matching branches.
   */
  requiredStatusCheckContexts?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * List of required status checks that must pass for commits to be accepted to matching branches.
   */
  requiredStatusChecks?: Maybe<Array<RequiredStatusCheckDescription>>;
  /**
   * Are approving reviews required to update matching branches.
   */
  requiresApprovingReviews: ScalarsEnums["Boolean"];
  /**
   * Are reviews from code owners required to update matching branches.
   */
  requiresCodeOwnerReviews: ScalarsEnums["Boolean"];
  /**
   * Are commits required to be signed.
   */
  requiresCommitSignatures: ScalarsEnums["Boolean"];
  /**
   * Are conversations required to be resolved before merging.
   */
  requiresConversationResolution: ScalarsEnums["Boolean"];
  /**
   * Does this branch require deployment to specific environments before merging
   */
  requiresDeployments: ScalarsEnums["Boolean"];
  /**
   * Are merge commits prohibited from being pushed to this branch.
   */
  requiresLinearHistory: ScalarsEnums["Boolean"];
  /**
   * Are status checks required to update matching branches.
   */
  requiresStatusChecks: ScalarsEnums["Boolean"];
  /**
   * Are branches required to be up to date before merging.
   */
  requiresStrictStatusChecks: ScalarsEnums["Boolean"];
  /**
   * Is pushing to matching branches restricted.
   */
  restrictsPushes: ScalarsEnums["Boolean"];
  /**
   * Is dismissal of pull request reviews restricted.
   */
  restrictsReviewDismissals: ScalarsEnums["Boolean"];
  /**
   * A list review dismissal allowances for this branch protection rule.
   */
  reviewDismissalAllowances: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => ReviewDismissalAllowanceConnection;
}

/**
 * A conflict between two branch protection rules.
 */
export interface BranchProtectionRuleConflict {
  __typename?: "BranchProtectionRuleConflict";
  /**
   * Identifies the branch protection rule.
   */
  branchProtectionRule?: Maybe<BranchProtectionRule>;
  /**
   * Identifies the conflicting branch protection rule.
   */
  conflictingBranchProtectionRule?: Maybe<BranchProtectionRule>;
  /**
   * Identifies the branch ref that has conflicting rules
   */
  ref?: Maybe<Ref>;
}

/**
 * The connection type for BranchProtectionRuleConflict.
 */
export interface BranchProtectionRuleConflictConnection {
  __typename?: "BranchProtectionRuleConflictConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<BranchProtectionRuleConflictEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<BranchProtectionRuleConflict>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface BranchProtectionRuleConflictEdge {
  __typename?: "BranchProtectionRuleConflictEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<BranchProtectionRuleConflict>;
}

/**
 * The connection type for BranchProtectionRule.
 */
export interface BranchProtectionRuleConnection {
  __typename?: "BranchProtectionRuleConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<BranchProtectionRuleEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<BranchProtectionRule>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface BranchProtectionRuleEdge {
  __typename?: "BranchProtectionRuleEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<BranchProtectionRule>;
}

/**
 * Types that can represent a repository ruleset bypass actor.
 */
export interface BypassActor {
  __typename?: "App" | "Team";
  $on: $BypassActor;
}

/**
 * A user, team, or app who has the ability to bypass a force push requirement on a protected branch.
 */
export interface BypassForcePushAllowance {
  __typename?: "BypassForcePushAllowance";
  /**
   * The actor that can force push.
   */
  actor?: Maybe<BranchActorAllowanceActor>;
  /**
   * Identifies the branch protection rule associated with the allowed user, team, or app.
   */
  branchProtectionRule?: Maybe<BranchProtectionRule>;
  id: ScalarsEnums["ID"];
}

/**
 * The connection type for BypassForcePushAllowance.
 */
export interface BypassForcePushAllowanceConnection {
  __typename?: "BypassForcePushAllowanceConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<BypassForcePushAllowanceEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<BypassForcePushAllowance>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface BypassForcePushAllowanceEdge {
  __typename?: "BypassForcePushAllowanceEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<BypassForcePushAllowance>;
}

/**
 * A user, team, or app who has the ability to bypass a pull request requirement on a protected branch.
 */
export interface BypassPullRequestAllowance {
  __typename?: "BypassPullRequestAllowance";
  /**
   * The actor that can bypass.
   */
  actor?: Maybe<BranchActorAllowanceActor>;
  /**
   * Identifies the branch protection rule associated with the allowed user, team, or app.
   */
  branchProtectionRule?: Maybe<BranchProtectionRule>;
  id: ScalarsEnums["ID"];
}

/**
 * The connection type for BypassPullRequestAllowance.
 */
export interface BypassPullRequestAllowanceConnection {
  __typename?: "BypassPullRequestAllowanceConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<BypassPullRequestAllowanceEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<BypassPullRequestAllowance>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface BypassPullRequestAllowanceEdge {
  __typename?: "BypassPullRequestAllowanceEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<BypassPullRequestAllowance>;
}

/**
 * The Common Vulnerability Scoring System
 */
export interface CVSS {
  __typename?: "CVSS";
  /**
   * The CVSS score associated with this advisory
   */
  score: ScalarsEnums["Float"];
  /**
   * The CVSS vector string associated with this advisory
   */
  vectorString?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A common weakness enumeration
 */
export interface CWE {
  __typename?: "CWE";
  /**
   * The id of the CWE
   */
  cweId: ScalarsEnums["String"];
  /**
   * A detailed description of this CWE
   */
  description: ScalarsEnums["String"];
  id: ScalarsEnums["ID"];
  /**
   * The name of this CWE
   */
  name: ScalarsEnums["String"];
}

/**
 * The connection type for CWE.
 */
export interface CWEConnection {
  __typename?: "CWEConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<CWEEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<CWE>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface CWEEdge {
  __typename?: "CWEEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<CWE>;
}

/**
 * Autogenerated return type of CancelEnterpriseAdminInvitation
 */
export interface CancelEnterpriseAdminInvitationPayload {
  __typename?: "CancelEnterpriseAdminInvitationPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The invitation that was canceled.
   */
  invitation?: Maybe<EnterpriseAdministratorInvitation>;
  /**
   * A message confirming the result of canceling an administrator invitation.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of CancelSponsorship
 */
export interface CancelSponsorshipPayload {
  __typename?: "CancelSponsorshipPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The tier that was being used at the time of cancellation.
   */
  sponsorsTier?: Maybe<SponsorsTier>;
}

/**
 * Autogenerated return type of ChangeUserStatus
 */
export interface ChangeUserStatusPayload {
  __typename?: "ChangeUserStatusPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Your updated status.
   */
  status?: Maybe<UserStatus>;
}

/**
 * A single check annotation.
 */
export interface CheckAnnotation {
  __typename?: "CheckAnnotation";
  /**
   * The annotation's severity level.
   */
  annotationLevel?: Maybe<ScalarsEnums["CheckAnnotationLevel"]>;
  /**
   * The path to the file that this annotation was made on.
   */
  blobUrl: ScalarsEnums["URI"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The position of this annotation.
   */
  location: CheckAnnotationSpan;
  /**
   * The annotation's message.
   */
  message: ScalarsEnums["String"];
  /**
   * The path that this annotation was made on.
   */
  path: ScalarsEnums["String"];
  /**
   * Additional information about the annotation.
   */
  rawDetails?: Maybe<ScalarsEnums["String"]>;
  /**
   * The annotation's title
   */
  title?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The connection type for CheckAnnotation.
 */
export interface CheckAnnotationConnection {
  __typename?: "CheckAnnotationConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<CheckAnnotationEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<CheckAnnotation>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface CheckAnnotationEdge {
  __typename?: "CheckAnnotationEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<CheckAnnotation>;
}

/**
 * A character position in a check annotation.
 */
export interface CheckAnnotationPosition {
  __typename?: "CheckAnnotationPosition";
  /**
   * Column number (1 indexed).
   */
  column?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Line number (1 indexed).
   */
  line: ScalarsEnums["Int"];
}

/**
 * An inclusive pair of positions for a check annotation.
 */
export interface CheckAnnotationSpan {
  __typename?: "CheckAnnotationSpan";
  /**
   * End position (inclusive).
   */
  end: CheckAnnotationPosition;
  /**
   * Start position (inclusive).
   */
  start: CheckAnnotationPosition;
}

/**
 * A check run.
 */
export interface CheckRun {
  __typename?: "CheckRun";
  /**
   * The check run's annotations
   */
  annotations: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<CheckAnnotationConnection>;
  /**
   * The check suite that this run is a part of.
   */
  checkSuite: CheckSuite;
  /**
   * Identifies the date and time when the check run was completed.
   */
  completedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The conclusion of the check run.
   */
  conclusion?: Maybe<ScalarsEnums["CheckConclusionState"]>;
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The corresponding deployment for this job, if any
   */
  deployment?: Maybe<Deployment>;
  /**
   * The URL from which to find full details of the check run on the integrator's site.
   */
  detailsUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * A reference for the check run on the integrator's system.
   */
  externalId?: Maybe<ScalarsEnums["String"]>;
  id: ScalarsEnums["ID"];
  /**
   * Whether this is required to pass before merging for a specific pull request.
   */
  isRequired: (args?: {
    /**
     * The id of the pull request this is required for
     */
    pullRequestId?: Maybe<Scalars["ID"]>;
    /**
     * The number of the pull request this is required for
     */
    pullRequestNumber?: Maybe<Scalars["Int"]>;
  }) => ScalarsEnums["Boolean"];
  /**
   * The name of the check for this check run.
   */
  name: ScalarsEnums["String"];
  /**
   * Information about a pending deployment, if any, in this check run
   */
  pendingDeploymentRequest?: Maybe<DeploymentRequest>;
  /**
   * The permalink to the check run summary.
   */
  permalink: ScalarsEnums["URI"];
  /**
   * The repository associated with this check run.
   */
  repository: Repository;
  /**
   * The HTTP path for this check run.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Identifies the date and time when the check run was started.
   */
  startedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The current status of the check run.
   */
  status: ScalarsEnums["CheckStatusState"];
  /**
   * The check run's steps
   */
  steps: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Step number
     */
    number?: Maybe<Scalars["Int"]>;
  }) => Maybe<CheckStepConnection>;
  /**
   * A string representing the check run's summary
   */
  summary?: Maybe<ScalarsEnums["String"]>;
  /**
   * A string representing the check run's text
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * A string representing the check run
   */
  title?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP URL for this check run.
   */
  url: ScalarsEnums["URI"];
}

/**
 * The connection type for CheckRun.
 */
export interface CheckRunConnection {
  __typename?: "CheckRunConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<CheckRunEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<CheckRun>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface CheckRunEdge {
  __typename?: "CheckRunEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<CheckRun>;
}

/**
 * Represents a count of the state of a check run.
 */
export interface CheckRunStateCount {
  __typename?: "CheckRunStateCount";
  /**
   * The number of check runs with this state.
   */
  count: ScalarsEnums["Int"];
  /**
   * The state of a check run.
   */
  state: ScalarsEnums["CheckRunState"];
}

/**
 * A single check step.
 */
export interface CheckStep {
  __typename?: "CheckStep";
  /**
   * Identifies the date and time when the check step was completed.
   */
  completedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The conclusion of the check step.
   */
  conclusion?: Maybe<ScalarsEnums["CheckConclusionState"]>;
  /**
   * A reference for the check step on the integrator's system.
   */
  externalId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The step's name.
   */
  name: ScalarsEnums["String"];
  /**
   * The index of the step in the list of steps of the parent check run.
   */
  number: ScalarsEnums["Int"];
  /**
   * Number of seconds to completion.
   */
  secondsToCompletion?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Identifies the date and time when the check step was started.
   */
  startedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The current status of the check step.
   */
  status: ScalarsEnums["CheckStatusState"];
}

/**
 * The connection type for CheckStep.
 */
export interface CheckStepConnection {
  __typename?: "CheckStepConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<CheckStepEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<CheckStep>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface CheckStepEdge {
  __typename?: "CheckStepEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<CheckStep>;
}

/**
 * A check suite.
 */
export interface CheckSuite {
  __typename?: "CheckSuite";
  /**
   * The GitHub App which created this check suite.
   */
  app?: Maybe<App>;
  /**
   * The name of the branch for this check suite.
   */
  branch?: Maybe<Ref>;
  /**
   * The check runs associated with a check suite.
   */
  checkRuns: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Filters the check runs by this type.
     */
    filterBy?: Maybe<CheckRunFilter>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<CheckRunConnection>;
  /**
   * The commit for this check suite
   */
  commit: Commit;
  /**
   * The conclusion of this check suite.
   */
  conclusion?: Maybe<ScalarsEnums["CheckConclusionState"]>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The user who triggered the check suite.
   */
  creator?: Maybe<User>;
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
  /**
   * A list of open pull requests matching the check suite.
   */
  matchingPullRequests: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * The base ref name to filter the pull requests by.
     */
    baseRefName?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The head ref name to filter the pull requests by.
     */
    headRefName?: Maybe<Scalars["String"]>;
    /**
     * A list of label names to filter the pull requests by.
     */
    labels?: Maybe<Array<Scalars["String"]>>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for pull requests returned from the connection.
     */
    orderBy?: Maybe<IssueOrder>;
    /**
     * A list of states to filter the pull requests by.
     */
    states?: Maybe<Array<PullRequestState>>;
  }) => Maybe<PullRequestConnection>;
  /**
   * The push that triggered this check suite.
   */
  push?: Maybe<Push>;
  /**
   * The repository associated with this check suite.
   */
  repository: Repository;
  /**
   * The HTTP path for this check suite
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The status of this check suite.
   */
  status: ScalarsEnums["CheckStatusState"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this check suite
   */
  url: ScalarsEnums["URI"];
  /**
   * The workflow run associated with this check suite.
   */
  workflowRun?: Maybe<WorkflowRun>;
}

/**
 * The connection type for CheckSuite.
 */
export interface CheckSuiteConnection {
  __typename?: "CheckSuiteConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<CheckSuiteEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<CheckSuite>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface CheckSuiteEdge {
  __typename?: "CheckSuiteEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<CheckSuite>;
}

/**
 * An object which can have its data claimed or claim data from another.
 */
export interface Claimable {
  __typename?: "Mannequin" | "User";
  $on: $Claimable;
}

/**
 * Autogenerated return type of ClearLabelsFromLabelable
 */
export interface ClearLabelsFromLabelablePayload {
  __typename?: "ClearLabelsFromLabelablePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item that was unlabeled.
   */
  labelable?: Maybe<Labelable>;
}

/**
 * Autogenerated return type of ClearProjectV2ItemFieldValue
 */
export interface ClearProjectV2ItemFieldValuePayload {
  __typename?: "ClearProjectV2ItemFieldValuePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated item.
   */
  projectV2Item?: Maybe<ProjectV2Item>;
}

/**
 * Autogenerated return type of CloneProject
 */
export interface CloneProjectPayload {
  __typename?: "CloneProjectPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The id of the JobStatus for populating cloned fields.
   */
  jobStatusId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The new cloned project.
   */
  project?: Maybe<Project>;
}

/**
 * Autogenerated return type of CloneTemplateRepository
 */
export interface CloneTemplateRepositoryPayload {
  __typename?: "CloneTemplateRepositoryPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The new repository.
   */
  repository?: Maybe<Repository>;
}

/**
 * An object that can be closed
 */
export interface Closable {
  __typename?:
    | "Discussion"
    | "Issue"
    | "Milestone"
    | "Project"
    | "ProjectV2"
    | "PullRequest";
  /**
   * Indicates if the object is closed (definition of closed may depend on type)
   */
  closed: ScalarsEnums["Boolean"];
  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Indicates if the object can be closed by the viewer.
   */
  viewerCanClose: ScalarsEnums["Boolean"];
  /**
   * Indicates if the object can be reopened by the viewer.
   */
  viewerCanReopen: ScalarsEnums["Boolean"];
  $on: $Closable;
}

/**
 * Autogenerated return type of CloseDiscussion
 */
export interface CloseDiscussionPayload {
  __typename?: "CloseDiscussionPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The discussion that was closed.
   */
  discussion?: Maybe<Discussion>;
}

/**
 * Autogenerated return type of CloseIssue
 */
export interface CloseIssuePayload {
  __typename?: "CloseIssuePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The issue that was closed.
   */
  issue?: Maybe<Issue>;
}

/**
 * Autogenerated return type of ClosePullRequest
 */
export interface ClosePullRequestPayload {
  __typename?: "ClosePullRequestPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The pull request that was closed.
   */
  pullRequest?: Maybe<PullRequest>;
}

/**
 * Represents a 'closed' event on any `Closable`.
 */
export interface ClosedEvent {
  __typename?: "ClosedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Object that was closed.
   */
  closable: Closable;
  /**
   * Object which triggered the creation of this event.
   */
  closer?: Maybe<Closer>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The HTTP path for this closed event.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The reason the issue state was changed to closed.
   */
  stateReason?: Maybe<ScalarsEnums["IssueStateReason"]>;
  /**
   * The HTTP URL for this closed event.
   */
  url: ScalarsEnums["URI"];
}

/**
 * The object which triggered a `ClosedEvent`.
 */
export interface Closer {
  __typename?: "Commit" | "PullRequest";
  $on: $Closer;
}

/**
 * The Code of Conduct for a repository
 */
export interface CodeOfConduct {
  __typename?: "CodeOfConduct";
  /**
   * The body of the Code of Conduct
   */
  body?: Maybe<ScalarsEnums["String"]>;
  id: ScalarsEnums["ID"];
  /**
   * The key for the Code of Conduct
   */
  key: ScalarsEnums["String"];
  /**
   * The formal name of the Code of Conduct
   */
  name: ScalarsEnums["String"];
  /**
   * The HTTP path for this Code of Conduct
   */
  resourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for this Code of Conduct
   */
  url?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Represents a comment.
 */
export interface Comment {
  __typename?:
    | "CommitComment"
    | "Discussion"
    | "DiscussionComment"
    | "GistComment"
    | "Issue"
    | "IssueComment"
    | "PullRequest"
    | "PullRequestReview"
    | "PullRequestReviewComment"
    | "TeamDiscussion"
    | "TeamDiscussionComment";
  /**
   * The actor who authored the comment.
   */
  author?: Maybe<Actor>;
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: ScalarsEnums["CommentAuthorAssociation"];
  /**
   * The body as Markdown.
   */
  body: ScalarsEnums["String"];
  /**
   * The body rendered to HTML.
   */
  bodyHTML: ScalarsEnums["HTML"];
  /**
   * The body rendered to text.
   */
  bodyText: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: ScalarsEnums["Boolean"];
  /**
   * The actor who edited the comment.
   */
  editor?: Maybe<Actor>;
  id: ScalarsEnums["ID"];
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: ScalarsEnums["Boolean"];
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * A list of edits to this content.
   */
  userContentEdits: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<UserContentEditConnection>;
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: ScalarsEnums["Boolean"];
  $on: $Comment;
}

/**
 * Represents a 'comment_deleted' event on a given issue or pull request.
 */
export interface CommentDeletedEvent {
  __typename?: "CommentDeletedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The user who authored the deleted comment.
   */
  deletedCommentAuthor?: Maybe<Actor>;
  id: ScalarsEnums["ID"];
}

/**
 * Represents a Git commit.
 */
export interface Commit {
  __typename?: "Commit";
  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: ScalarsEnums["String"];
  /**
   * The number of additions in this commit.
   */
  additions: ScalarsEnums["Int"];
  /**
   * The merged Pull Request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open Pull Requests associated with the commit
   */
  associatedPullRequests: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for pull requests.
     * @defaultValue `{"direction":"ASC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<PullRequestOrder>;
  }) => Maybe<PullRequestConnection>;
  /**
   * Authorship details of the commit.
   */
  author?: Maybe<GitActor>;
  /**
   * Check if the committer and the author match.
   */
  authoredByCommitter: ScalarsEnums["Boolean"];
  /**
   * The datetime when this commit was authored.
   */
  authoredDate: ScalarsEnums["DateTime"];
  /**
   * The list of authors for this commit based on the git author and the Co-authored-by
   * message trailer. The git author will always be first.
   */
  authors: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => GitActorConnection;
  /**
   * Fetches `git blame` information.
   */
  blame: (args: {
    /**
     * The file whose Git blame information you want.
     */
    path: Scalars["String"];
  }) => Blame;
  /**
   * We recommend using the `changedFilesIfAvailable` field instead of `changedFiles`, as `changedFiles` will cause your request to return an error if GitHub is unable to calculate the number of changed files.
   * @deprecated `changedFiles` will be removed. Use `changedFilesIfAvailable` instead. Removal on 2023-01-01 UTC.
   */
  changedFiles: ScalarsEnums["Int"];
  /**
   * The number of changed files in this commit. If GitHub is unable to calculate the number of changed files (for example due to a timeout), this will return `null`. We recommend using this field instead of `changedFiles`.
   */
  changedFilesIfAvailable?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The check suites associated with a commit.
   */
  checkSuites: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Filters the check suites by this type.
     */
    filterBy?: Maybe<CheckSuiteFilter>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<CheckSuiteConnection>;
  /**
   * Comments made on the commit.
   */
  comments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => CommitCommentConnection;
  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this Git object
   */
  commitUrl: ScalarsEnums["URI"];
  /**
   * The datetime when this commit was committed.
   */
  committedDate: ScalarsEnums["DateTime"];
  /**
   * Check if committed via GitHub web UI.
   */
  committedViaWeb: ScalarsEnums["Boolean"];
  /**
   * Committer details of the commit.
   */
  committer?: Maybe<GitActor>;
  /**
   * The number of deletions in this commit.
   */
  deletions: ScalarsEnums["Int"];
  /**
   * The deployments associated with a commit.
   */
  deployments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Environments to list deployments for
     */
    environments?: Maybe<Array<Scalars["String"]>>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for deployments returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<DeploymentOrder>;
  }) => Maybe<DeploymentConnection>;
  /**
   * The tree entry representing the file located at the given path.
   */
  file: (args: {
    /**
     * The path for the file
     */
    path: Scalars["String"];
  }) => Maybe<TreeEntry>;
  /**
   * The linear commit history starting from (and including) this commit, in the same order as `git log`.
   */
  history: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * If non-null, filters history to only show commits with matching authorship.
     */
    author?: Maybe<CommitAuthor>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * If non-null, filters history to only show commits touching files under this path.
     */
    path?: Maybe<Scalars["String"]>;
    /**
     * Allows specifying a beginning time or date for fetching commits.
     */
    since?: Maybe<Scalars["GitTimestamp"]>;
    /**
     * Allows specifying an ending time or date for fetching commits.
     */
    until?: Maybe<Scalars["GitTimestamp"]>;
  }) => CommitHistoryConnection;
  id: ScalarsEnums["ID"];
  /**
   * The Git commit message
   */
  message: ScalarsEnums["String"];
  /**
   * The Git commit message body
   */
  messageBody: ScalarsEnums["String"];
  /**
   * The commit message body rendered to HTML.
   */
  messageBodyHTML: ScalarsEnums["HTML"];
  /**
   * The Git commit message headline
   */
  messageHeadline: ScalarsEnums["String"];
  /**
   * The commit message headline rendered to HTML.
   */
  messageHeadlineHTML: ScalarsEnums["HTML"];
  /**
   * The Git object ID
   */
  oid: ScalarsEnums["GitObjectID"];
  /**
   * The organization this commit was made on behalf of.
   */
  onBehalfOf?: Maybe<Organization>;
  /**
   * The parents of a commit.
   */
  parents: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => CommitConnection;
  /**
   * The datetime when this commit was pushed.
   * @deprecated `pushedDate` is no longer supported. Removal on 2023-07-01 UTC.
   */
  pushedDate?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The Repository this commit belongs to
   */
  repository: Repository;
  /**
   * The HTTP path for this commit
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Commit signing information, if present.
   */
  signature?: Maybe<GitSignature>;
  /**
   * Status information for this commit
   */
  status?: Maybe<Status>;
  /**
   * Check and Status rollup information for this commit.
   */
  statusCheckRollup?: Maybe<StatusCheckRollup>;
  /**
   * Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.
   */
  submodules: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => SubmoduleConnection;
  /**
   * Returns a URL to download a tarball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes.
   */
  tarballUrl: ScalarsEnums["URI"];
  /**
   * Commit's root Tree
   */
  tree: Tree;
  /**
   * The HTTP path for the tree of this commit
   */
  treeResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for the tree of this commit
   */
  treeUrl: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this commit
   */
  url: ScalarsEnums["URI"];
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: ScalarsEnums["Boolean"];
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: Maybe<ScalarsEnums["SubscriptionState"]>;
  /**
   * Returns a URL to download a zipball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes.
   */
  zipballUrl: ScalarsEnums["URI"];
}

/**
 * Parameters to be used for the commit_author_email_pattern rule
 */
export interface CommitAuthorEmailPatternParameters {
  __typename?: "CommitAuthorEmailPatternParameters";
  /**
   * How this rule will appear to users.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * If true, the rule will fail if the pattern matches.
   */
  negate: ScalarsEnums["Boolean"];
  /**
   * The operator to use for matching.
   */
  operator: ScalarsEnums["String"];
  /**
   * The pattern to match with.
   */
  pattern: ScalarsEnums["String"];
}

/**
 * Represents a comment on a given Commit.
 */
export interface CommitComment {
  __typename?: "CommitComment";
  /**
   * The actor who authored the comment.
   */
  author?: Maybe<Actor>;
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: ScalarsEnums["CommentAuthorAssociation"];
  /**
   * Identifies the comment body.
   */
  body: ScalarsEnums["String"];
  /**
   * The body rendered to HTML.
   */
  bodyHTML: ScalarsEnums["HTML"];
  /**
   * The body rendered to text.
   */
  bodyText: ScalarsEnums["String"];
  /**
   * Identifies the commit associated with the comment, if the commit exists.
   */
  commit?: Maybe<Commit>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: ScalarsEnums["Boolean"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The actor who edited the comment.
   */
  editor?: Maybe<Actor>;
  id: ScalarsEnums["ID"];
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: ScalarsEnums["Boolean"];
  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: ScalarsEnums["Boolean"];
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
   */
  minimizedReason?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies the file path associated with the comment.
   */
  path?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies the line position associated with the comment.
   */
  position?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Maybe<Array<ReactionGroup>>;
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Allows filtering Reactions by emoji.
     */
    content?: Maybe<ReactionContent>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Allows specifying the order in which reactions are returned.
     */
    orderBy?: Maybe<ReactionOrder>;
  }) => ReactionConnection;
  /**
   * The repository associated with this node.
   */
  repository: Repository;
  /**
   * The HTTP path permalink for this commit comment.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL permalink for this commit comment.
   */
  url: ScalarsEnums["URI"];
  /**
   * A list of edits to this content.
   */
  userContentEdits: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<UserContentEditConnection>;
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: ScalarsEnums["Boolean"];
  /**
   * Can user react to this subject
   */
  viewerCanReact: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: ScalarsEnums["Boolean"];
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<ScalarsEnums["CommentCannotUpdateReason"]>;
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: ScalarsEnums["Boolean"];
}

/**
 * The connection type for CommitComment.
 */
export interface CommitCommentConnection {
  __typename?: "CommitCommentConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<CommitCommentEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<CommitComment>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface CommitCommentEdge {
  __typename?: "CommitCommentEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<CommitComment>;
}

/**
 * A thread of comments on a commit.
 */
export interface CommitCommentThread {
  __typename?: "CommitCommentThread";
  /**
   * The comments that exist in this thread.
   */
  comments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => CommitCommentConnection;
  /**
   * The commit the comments were made on.
   */
  commit?: Maybe<Commit>;
  id: ScalarsEnums["ID"];
  /**
   * The file the comments were made on.
   */
  path?: Maybe<ScalarsEnums["String"]>;
  /**
   * The position in the diff for the commit that the comment was made on.
   */
  position?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The repository associated with this node.
   */
  repository: Repository;
}

/**
 * The connection type for Commit.
 */
export interface CommitConnection {
  __typename?: "CommitConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<CommitEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Commit>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * This aggregates commits made by a user within one repository.
 */
export interface CommitContributionsByRepository {
  __typename?: "CommitContributionsByRepository";
  /**
   * The commit contributions, each representing a day.
   */
  contributions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for commit contributions returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"OCCURRED_AT"}`
     */
    orderBy?: Maybe<CommitContributionOrder>;
  }) => CreatedCommitContributionConnection;
  /**
   * The repository in which the commits were made.
   */
  repository: Repository;
  /**
   * The HTTP path for the user's commits to the repository in this time range.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for the user's commits to the repository in this time range.
   */
  url: ScalarsEnums["URI"];
}

/**
 * An edge in a connection.
 */
export interface CommitEdge {
  __typename?: "CommitEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Commit>;
}

/**
 * The connection type for Commit.
 */
export interface CommitHistoryConnection {
  __typename?: "CommitHistoryConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<CommitEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Commit>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * Parameters to be used for the commit_message_pattern rule
 */
export interface CommitMessagePatternParameters {
  __typename?: "CommitMessagePatternParameters";
  /**
   * How this rule will appear to users.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * If true, the rule will fail if the pattern matches.
   */
  negate: ScalarsEnums["Boolean"];
  /**
   * The operator to use for matching.
   */
  operator: ScalarsEnums["String"];
  /**
   * The pattern to match with.
   */
  pattern: ScalarsEnums["String"];
}

/**
 * Parameters to be used for the committer_email_pattern rule
 */
export interface CommitterEmailPatternParameters {
  __typename?: "CommitterEmailPatternParameters";
  /**
   * How this rule will appear to users.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * If true, the rule will fail if the pattern matches.
   */
  negate: ScalarsEnums["Boolean"];
  /**
   * The operator to use for matching.
   */
  operator: ScalarsEnums["String"];
  /**
   * The pattern to match with.
   */
  pattern: ScalarsEnums["String"];
}

/**
 * Represents a comparison between two commit revisions.
 */
export interface Comparison {
  __typename?: "Comparison";
  /**
   * The number of commits ahead of the base branch.
   */
  aheadBy: ScalarsEnums["Int"];
  /**
   * The base revision of this comparison.
   */
  baseTarget: GitObject;
  /**
   * The number of commits behind the base branch.
   */
  behindBy: ScalarsEnums["Int"];
  /**
   * The commits which compose this comparison.
   */
  commits: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => ComparisonCommitConnection;
  /**
   * The head revision of this comparison.
   */
  headTarget: GitObject;
  id: ScalarsEnums["ID"];
  /**
   * The status of this comparison.
   */
  status: ScalarsEnums["ComparisonStatus"];
}

/**
 * The connection type for Commit.
 */
export interface ComparisonCommitConnection {
  __typename?: "ComparisonCommitConnection";
  /**
   * The total count of authors and co-authors across all commits.
   */
  authorCount: ScalarsEnums["Int"];
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<CommitEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Commit>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * Represents a 'connected' event on a given issue or pull request.
 */
export interface ConnectedEvent {
  __typename?: "ConnectedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Reference originated in a different repository.
   */
  isCrossRepository: ScalarsEnums["Boolean"];
  /**
   * Issue or pull request that made the reference.
   */
  source: ReferencedSubject;
  /**
   * Issue or pull request which was connected.
   */
  subject: ReferencedSubject;
}

/**
 * The Contributing Guidelines for a repository.
 */
export interface ContributingGuidelines {
  __typename?: "ContributingGuidelines";
  /**
   * The body of the Contributing Guidelines.
   */
  body?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the Contributing Guidelines.
   */
  resourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the Contributing Guidelines.
   */
  url?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Represents a contribution a user made on GitHub, such as opening an issue.
 */
export interface Contribution {
  __typename?:
    | "CreatedCommitContribution"
    | "CreatedIssueContribution"
    | "CreatedPullRequestContribution"
    | "CreatedPullRequestReviewContribution"
    | "CreatedRepositoryContribution"
    | "JoinedGitHubContribution"
    | "RestrictedContribution";
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: ScalarsEnums["Boolean"];
  /**
   * When this contribution was made.
   */
  occurredAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this contribution.
   */
  url: ScalarsEnums["URI"];
  /**
   * The user who made this contribution.
   */
  user: User;
  $on: $Contribution;
}

/**
 * A calendar of contributions made on GitHub by a user.
 */
export interface ContributionCalendar {
  __typename?: "ContributionCalendar";
  /**
   * A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
   */
  colors: Array<ScalarsEnums["String"]>;
  /**
   * Determine if the color set was chosen because it's currently Halloween.
   */
  isHalloween: ScalarsEnums["Boolean"];
  /**
   * A list of the months of contributions in this calendar.
   */
  months: Array<ContributionCalendarMonth>;
  /**
   * The count of total contributions in the calendar.
   */
  totalContributions: ScalarsEnums["Int"];
  /**
   * A list of the weeks of contributions in this calendar.
   */
  weeks: Array<ContributionCalendarWeek>;
}

/**
 * Represents a single day of contributions on GitHub by a user.
 */
export interface ContributionCalendarDay {
  __typename?: "ContributionCalendarDay";
  /**
   * The hex color code that represents how many contributions were made on this day compared to others in the calendar.
   */
  color: ScalarsEnums["String"];
  /**
   * How many contributions were made by the user on this day.
   */
  contributionCount: ScalarsEnums["Int"];
  /**
   * Indication of contributions, relative to other days. Can be used to indicate which color to represent this day on a calendar.
   */
  contributionLevel: ScalarsEnums["ContributionLevel"];
  /**
   * The day this square represents.
   */
  date: ScalarsEnums["Date"];
  /**
   * A number representing which day of the week this square represents, e.g., 1 is Monday.
   */
  weekday: ScalarsEnums["Int"];
}

/**
 * A month of contributions in a user's contribution graph.
 */
export interface ContributionCalendarMonth {
  __typename?: "ContributionCalendarMonth";
  /**
   * The date of the first day of this month.
   */
  firstDay: ScalarsEnums["Date"];
  /**
   * The name of the month.
   */
  name: ScalarsEnums["String"];
  /**
   * How many weeks started in this month.
   */
  totalWeeks: ScalarsEnums["Int"];
  /**
   * The year the month occurred in.
   */
  year: ScalarsEnums["Int"];
}

/**
 * A week of contributions in a user's contribution graph.
 */
export interface ContributionCalendarWeek {
  __typename?: "ContributionCalendarWeek";
  /**
   * The days of contributions in this week.
   */
  contributionDays: Array<ContributionCalendarDay>;
  /**
   * The date of the earliest square in this week.
   */
  firstDay: ScalarsEnums["Date"];
}

/**
 * A contributions collection aggregates contributions such as opened issues and commits created by a user.
 */
export interface ContributionsCollection {
  __typename?: "ContributionsCollection";
  /**
   * Commit contributions made by the user, grouped by repository.
   */
  commitContributionsByRepository: (args?: {
    /**
     * How many repositories should be included.
     * @defaultValue `25`
     */
    maxRepositories?: Maybe<Scalars["Int"]>;
  }) => Array<CommitContributionsByRepository>;
  /**
   * A calendar of this user's contributions on GitHub.
   */
  contributionCalendar: ContributionCalendar;
  /**
   * The years the user has been making contributions with the most recent year first.
   */
  contributionYears: Array<ScalarsEnums["Int"]>;
  /**
   * Determine if this collection's time span ends in the current month.
   */
  doesEndInCurrentMonth: ScalarsEnums["Boolean"];
  /**
   * The date of the first restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
   */
  earliestRestrictedContributionDate?: Maybe<ScalarsEnums["Date"]>;
  /**
   * The ending date and time of this collection.
   */
  endedAt: ScalarsEnums["DateTime"];
  /**
   * The first issue the user opened on GitHub. This will be null if that issue was opened outside the collection's time range and ignoreTimeRange is false. If the issue is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
   */
  firstIssueContribution?: Maybe<CreatedIssueOrRestrictedContribution>;
  /**
   * The first pull request the user opened on GitHub. This will be null if that pull request was opened outside the collection's time range and ignoreTimeRange is not true. If the pull request is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
   */
  firstPullRequestContribution?: Maybe<CreatedPullRequestOrRestrictedContribution>;
  /**
   * The first repository the user created on GitHub. This will be null if that first repository was created outside the collection's time range and ignoreTimeRange is false. If the repository is not visible, then a RestrictedContribution is returned.
   */
  firstRepositoryContribution?: Maybe<CreatedRepositoryOrRestrictedContribution>;
  /**
   * Does the user have any more activity in the timeline that occurred prior to the collection's time range?
   */
  hasActivityInThePast: ScalarsEnums["Boolean"];
  /**
   * Determine if there are any contributions in this collection.
   */
  hasAnyContributions: ScalarsEnums["Boolean"];
  /**
   * Determine if the user made any contributions in this time frame whose details are not visible because they were made in a private repository. Can only be true if the user enabled private contribution counts.
   */
  hasAnyRestrictedContributions: ScalarsEnums["Boolean"];
  /**
   * Whether or not the collector's time span is all within the same day.
   */
  isSingleDay: ScalarsEnums["Boolean"];
  /**
   * A list of issues the user opened.
   */
  issueContributions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Should the user's first issue ever be excluded from the result.
     * @defaultValue `false`
     */
    excludeFirst?: Maybe<Scalars["Boolean"]>;
    /**
     * Should the user's most commented issue be excluded from the result.
     * @defaultValue `false`
     */
    excludePopular?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for contributions returned from the connection.
     * @defaultValue `{"direction":"DESC"}`
     */
    orderBy?: Maybe<ContributionOrder>;
  }) => CreatedIssueContributionConnection;
  /**
   * Issue contributions made by the user, grouped by repository.
   */
  issueContributionsByRepository: (args?: {
    /**
     * Should the user's first issue ever be excluded from the result.
     * @defaultValue `false`
     */
    excludeFirst?: Maybe<Scalars["Boolean"]>;
    /**
     * Should the user's most commented issue be excluded from the result.
     * @defaultValue `false`
     */
    excludePopular?: Maybe<Scalars["Boolean"]>;
    /**
     * How many repositories should be included.
     * @defaultValue `25`
     */
    maxRepositories?: Maybe<Scalars["Int"]>;
  }) => Array<IssueContributionsByRepository>;
  /**
   * When the user signed up for GitHub. This will be null if that sign up date falls outside the collection's time range and ignoreTimeRange is false.
   */
  joinedGitHubContribution?: Maybe<JoinedGitHubContribution>;
  /**
   * The date of the most recent restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
   */
  latestRestrictedContributionDate?: Maybe<ScalarsEnums["Date"]>;
  /**
   * When this collection's time range does not include any activity from the user, use this
   * to get a different collection from an earlier time range that does have activity.
   */
  mostRecentCollectionWithActivity?: Maybe<ContributionsCollection>;
  /**
   * Returns a different contributions collection from an earlier time range than this one
   * that does not have any contributions.
   */
  mostRecentCollectionWithoutActivity?: Maybe<ContributionsCollection>;
  /**
   * The issue the user opened on GitHub that received the most comments in the specified
   * time frame.
   */
  popularIssueContribution?: Maybe<CreatedIssueContribution>;
  /**
   * The pull request the user opened on GitHub that received the most comments in the
   * specified time frame.
   */
  popularPullRequestContribution?: Maybe<CreatedPullRequestContribution>;
  /**
   * Pull request contributions made by the user.
   */
  pullRequestContributions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Should the user's first pull request ever be excluded from the result.
     * @defaultValue `false`
     */
    excludeFirst?: Maybe<Scalars["Boolean"]>;
    /**
     * Should the user's most commented pull request be excluded from the result.
     * @defaultValue `false`
     */
    excludePopular?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for contributions returned from the connection.
     * @defaultValue `{"direction":"DESC"}`
     */
    orderBy?: Maybe<ContributionOrder>;
  }) => CreatedPullRequestContributionConnection;
  /**
   * Pull request contributions made by the user, grouped by repository.
   */
  pullRequestContributionsByRepository: (args?: {
    /**
     * Should the user's first pull request ever be excluded from the result.
     * @defaultValue `false`
     */
    excludeFirst?: Maybe<Scalars["Boolean"]>;
    /**
     * Should the user's most commented pull request be excluded from the result.
     * @defaultValue `false`
     */
    excludePopular?: Maybe<Scalars["Boolean"]>;
    /**
     * How many repositories should be included.
     * @defaultValue `25`
     */
    maxRepositories?: Maybe<Scalars["Int"]>;
  }) => Array<PullRequestContributionsByRepository>;
  /**
   * Pull request review contributions made by the user. Returns the most recently
   * submitted review for each PR reviewed by the user.
   */
  pullRequestReviewContributions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for contributions returned from the connection.
     * @defaultValue `{"direction":"DESC"}`
     */
    orderBy?: Maybe<ContributionOrder>;
  }) => CreatedPullRequestReviewContributionConnection;
  /**
   * Pull request review contributions made by the user, grouped by repository.
   */
  pullRequestReviewContributionsByRepository: (args?: {
    /**
     * How many repositories should be included.
     * @defaultValue `25`
     */
    maxRepositories?: Maybe<Scalars["Int"]>;
  }) => Array<PullRequestReviewContributionsByRepository>;
  /**
   * A list of repositories owned by the user that the user created in this time range.
   */
  repositoryContributions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Should the user's first repository ever be excluded from the result.
     * @defaultValue `false`
     */
    excludeFirst?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for contributions returned from the connection.
     * @defaultValue `{"direction":"DESC"}`
     */
    orderBy?: Maybe<ContributionOrder>;
  }) => CreatedRepositoryContributionConnection;
  /**
   * A count of contributions made by the user that the viewer cannot access. Only non-zero when the user has chosen to share their private contribution counts.
   */
  restrictedContributionsCount: ScalarsEnums["Int"];
  /**
   * The beginning date and time of this collection.
   */
  startedAt: ScalarsEnums["DateTime"];
  /**
   * How many commits were made by the user in this time span.
   */
  totalCommitContributions: ScalarsEnums["Int"];
  /**
   * How many issues the user opened.
   */
  totalIssueContributions: (args?: {
    /**
     * Should the user's first issue ever be excluded from this count.
     * @defaultValue `false`
     */
    excludeFirst?: Maybe<Scalars["Boolean"]>;
    /**
     * Should the user's most commented issue be excluded from this count.
     * @defaultValue `false`
     */
    excludePopular?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  /**
   * How many pull requests the user opened.
   */
  totalPullRequestContributions: (args?: {
    /**
     * Should the user's first pull request ever be excluded from this count.
     * @defaultValue `false`
     */
    excludeFirst?: Maybe<Scalars["Boolean"]>;
    /**
     * Should the user's most commented pull request be excluded from this count.
     * @defaultValue `false`
     */
    excludePopular?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  /**
   * How many pull request reviews the user left.
   */
  totalPullRequestReviewContributions: ScalarsEnums["Int"];
  /**
   * How many different repositories the user committed to.
   */
  totalRepositoriesWithContributedCommits: ScalarsEnums["Int"];
  /**
   * How many different repositories the user opened issues in.
   */
  totalRepositoriesWithContributedIssues: (args?: {
    /**
     * Should the user's first issue ever be excluded from this count.
     * @defaultValue `false`
     */
    excludeFirst?: Maybe<Scalars["Boolean"]>;
    /**
     * Should the user's most commented issue be excluded from this count.
     * @defaultValue `false`
     */
    excludePopular?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  /**
   * How many different repositories the user left pull request reviews in.
   */
  totalRepositoriesWithContributedPullRequestReviews: ScalarsEnums["Int"];
  /**
   * How many different repositories the user opened pull requests in.
   */
  totalRepositoriesWithContributedPullRequests: (args?: {
    /**
     * Should the user's first pull request ever be excluded from this count.
     * @defaultValue `false`
     */
    excludeFirst?: Maybe<Scalars["Boolean"]>;
    /**
     * Should the user's most commented pull request be excluded from this count.
     * @defaultValue `false`
     */
    excludePopular?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  /**
   * How many repositories the user created.
   */
  totalRepositoryContributions: (args?: {
    /**
     * Should the user's first repository ever be excluded from this count.
     * @defaultValue `false`
     */
    excludeFirst?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  /**
   * The user who made the contributions in this collection.
   */
  user: User;
}

/**
 * Autogenerated return type of ConvertProjectCardNoteToIssue
 */
export interface ConvertProjectCardNoteToIssuePayload {
  __typename?: "ConvertProjectCardNoteToIssuePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated ProjectCard.
   */
  projectCard?: Maybe<ProjectCard>;
}

/**
 * Autogenerated return type of ConvertPullRequestToDraft
 */
export interface ConvertPullRequestToDraftPayload {
  __typename?: "ConvertPullRequestToDraftPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The pull request that is now a draft.
   */
  pullRequest?: Maybe<PullRequest>;
}

/**
 * Represents a 'convert_to_draft' event on a given pull request.
 */
export interface ConvertToDraftEvent {
  __typename?: "ConvertToDraftEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
  /**
   * The HTTP path for this convert to draft event.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this convert to draft event.
   */
  url: ScalarsEnums["URI"];
}

/**
 * Represents a 'converted_note_to_issue' event on a given issue or pull request.
 */
export interface ConvertedNoteToIssueEvent {
  __typename?: "ConvertedNoteToIssueEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
}

/**
 * Represents a 'converted_to_discussion' event on a given issue.
 */
export interface ConvertedToDiscussionEvent {
  __typename?: "ConvertedToDiscussionEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The discussion that the issue was converted into.
   */
  discussion?: Maybe<Discussion>;
  id: ScalarsEnums["ID"];
}

/**
 * Autogenerated return type of CopyProjectV2
 */
export interface CopyProjectV2Payload {
  __typename?: "CopyProjectV2Payload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The copied project.
   */
  projectV2?: Maybe<ProjectV2>;
}

/**
 * Autogenerated return type of CreateAttributionInvitation
 */
export interface CreateAttributionInvitationPayload {
  __typename?: "CreateAttributionInvitationPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The owner scoping the reattributable data.
   */
  owner?: Maybe<Organization>;
  /**
   * The account owning the data to reattribute.
   */
  source?: Maybe<Claimable>;
  /**
   * The account which may claim the data.
   */
  target?: Maybe<Claimable>;
}

/**
 * Autogenerated return type of CreateBranchProtectionRule
 */
export interface CreateBranchProtectionRulePayload {
  __typename?: "CreateBranchProtectionRulePayload";
  /**
   * The newly created BranchProtectionRule.
   */
  branchProtectionRule?: Maybe<BranchProtectionRule>;
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of CreateCheckRun
 */
export interface CreateCheckRunPayload {
  __typename?: "CreateCheckRunPayload";
  /**
   * The newly created check run.
   */
  checkRun?: Maybe<CheckRun>;
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of CreateCheckSuite
 */
export interface CreateCheckSuitePayload {
  __typename?: "CreateCheckSuitePayload";
  /**
   * The newly created check suite.
   */
  checkSuite?: Maybe<CheckSuite>;
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of CreateCommitOnBranch
 */
export interface CreateCommitOnBranchPayload {
  __typename?: "CreateCommitOnBranchPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The new commit.
   */
  commit?: Maybe<Commit>;
  /**
   * The ref which has been updated to point to the new commit.
   */
  ref?: Maybe<Ref>;
}

/**
 * Autogenerated return type of CreateDiscussion
 */
export interface CreateDiscussionPayload {
  __typename?: "CreateDiscussionPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The discussion that was just created.
   */
  discussion?: Maybe<Discussion>;
}

/**
 * Autogenerated return type of CreateEnterpriseOrganization
 */
export interface CreateEnterpriseOrganizationPayload {
  __typename?: "CreateEnterpriseOrganizationPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The enterprise that owns the created organization.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * The organization that was created.
   */
  organization?: Maybe<Organization>;
}

/**
 * Autogenerated return type of CreateEnvironment
 */
export interface CreateEnvironmentPayload {
  __typename?: "CreateEnvironmentPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The new or existing environment.
   */
  environment?: Maybe<Environment>;
}

/**
 * Autogenerated return type of CreateIpAllowListEntry
 */
export interface CreateIpAllowListEntryPayload {
  __typename?: "CreateIpAllowListEntryPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The IP allow list entry that was created.
   */
  ipAllowListEntry?: Maybe<IpAllowListEntry>;
}

/**
 * Autogenerated return type of CreateIssue
 */
export interface CreateIssuePayload {
  __typename?: "CreateIssuePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The new issue.
   */
  issue?: Maybe<Issue>;
}

/**
 * Autogenerated return type of CreateLinkedBranch
 */
export interface CreateLinkedBranchPayload {
  __typename?: "CreateLinkedBranchPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The issue that was linked to.
   */
  issue?: Maybe<Issue>;
  /**
   * The new branch issue reference.
   */
  linkedBranch?: Maybe<LinkedBranch>;
}

/**
 * Autogenerated return type of CreateMigrationSource
 */
export interface CreateMigrationSourcePayload {
  __typename?: "CreateMigrationSourcePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The created migration source.
   */
  migrationSource?: Maybe<MigrationSource>;
}

/**
 * Autogenerated return type of CreateProject
 */
export interface CreateProjectPayload {
  __typename?: "CreateProjectPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The new project.
   */
  project?: Maybe<Project>;
}

/**
 * Autogenerated return type of CreateProjectV2Field
 */
export interface CreateProjectV2FieldPayload {
  __typename?: "CreateProjectV2FieldPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The new field.
   */
  projectV2Field?: Maybe<ProjectV2FieldConfiguration>;
}

/**
 * Autogenerated return type of CreateProjectV2
 */
export interface CreateProjectV2Payload {
  __typename?: "CreateProjectV2Payload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The new project.
   */
  projectV2?: Maybe<ProjectV2>;
}

/**
 * Autogenerated return type of CreatePullRequest
 */
export interface CreatePullRequestPayload {
  __typename?: "CreatePullRequestPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The new pull request.
   */
  pullRequest?: Maybe<PullRequest>;
}

/**
 * Autogenerated return type of CreateRef
 */
export interface CreateRefPayload {
  __typename?: "CreateRefPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The newly created ref.
   */
  ref?: Maybe<Ref>;
}

/**
 * Autogenerated return type of CreateRepository
 */
export interface CreateRepositoryPayload {
  __typename?: "CreateRepositoryPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The new repository.
   */
  repository?: Maybe<Repository>;
}

/**
 * Autogenerated return type of CreateRepositoryRuleset
 */
export interface CreateRepositoryRulesetPayload {
  __typename?: "CreateRepositoryRulesetPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The newly created Ruleset.
   */
  ruleset?: Maybe<RepositoryRuleset>;
}

/**
 * Autogenerated return type of CreateSavedNotificationThread
 */
export interface CreateSavedNotificationThreadPayload {
  __typename?: "CreateSavedNotificationThreadPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Did the operation succeed?
   */
  success?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The user that the saved notification belongs to.
   */
  viewer?: Maybe<User>;
}

/**
 * Autogenerated return type of CreateSponsorsListing
 */
export interface CreateSponsorsListingPayload {
  __typename?: "CreateSponsorsListingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The new GitHub Sponsors profile.
   */
  sponsorsListing?: Maybe<SponsorsListing>;
}

/**
 * Autogenerated return type of CreateSponsorsTier
 */
export interface CreateSponsorsTierPayload {
  __typename?: "CreateSponsorsTierPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The new tier.
   */
  sponsorsTier?: Maybe<SponsorsTier>;
}

/**
 * Autogenerated return type of CreateSponsorship
 */
export interface CreateSponsorshipPayload {
  __typename?: "CreateSponsorshipPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The sponsorship that was started.
   */
  sponsorship?: Maybe<Sponsorship>;
}

/**
 * Autogenerated return type of CreateSponsorships
 */
export interface CreateSponsorshipsPayload {
  __typename?: "CreateSponsorshipsPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The users and organizations who received a sponsorship.
   */
  sponsorables?: Maybe<Array<Sponsorable>>;
}

/**
 * Autogenerated return type of CreateTeamDiscussionComment
 */
export interface CreateTeamDiscussionCommentPayload {
  __typename?: "CreateTeamDiscussionCommentPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The new comment.
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  teamDiscussionComment?: Maybe<TeamDiscussionComment>;
}

/**
 * Autogenerated return type of CreateTeamDiscussion
 */
export interface CreateTeamDiscussionPayload {
  __typename?: "CreateTeamDiscussionPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The new discussion.
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  teamDiscussion?: Maybe<TeamDiscussion>;
}

/**
 * Represents the contribution a user made by committing to a repository.
 */
export interface CreatedCommitContribution {
  __typename?: "CreatedCommitContribution";
  /**
   * How many commits were made on this day to this repository by the user.
   */
  commitCount: ScalarsEnums["Int"];
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: ScalarsEnums["Boolean"];
  /**
   * When this contribution was made.
   */
  occurredAt: ScalarsEnums["DateTime"];
  /**
   * The repository the user made a commit in.
   */
  repository: Repository;
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this contribution.
   */
  url: ScalarsEnums["URI"];
  /**
   * The user who made this contribution.
   */
  user: User;
}

/**
 * The connection type for CreatedCommitContribution.
 */
export interface CreatedCommitContributionConnection {
  __typename?: "CreatedCommitContributionConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<CreatedCommitContributionEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<CreatedCommitContribution>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of commits across days and repositories in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface CreatedCommitContributionEdge {
  __typename?: "CreatedCommitContributionEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<CreatedCommitContribution>;
}

/**
 * Represents the contribution a user made on GitHub by opening an issue.
 */
export interface CreatedIssueContribution {
  __typename?: "CreatedIssueContribution";
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: ScalarsEnums["Boolean"];
  /**
   * The issue that was opened.
   */
  issue: Issue;
  /**
   * When this contribution was made.
   */
  occurredAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this contribution.
   */
  url: ScalarsEnums["URI"];
  /**
   * The user who made this contribution.
   */
  user: User;
}

/**
 * The connection type for CreatedIssueContribution.
 */
export interface CreatedIssueContributionConnection {
  __typename?: "CreatedIssueContributionConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<CreatedIssueContributionEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<CreatedIssueContribution>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface CreatedIssueContributionEdge {
  __typename?: "CreatedIssueContributionEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<CreatedIssueContribution>;
}

/**
 * Represents either a issue the viewer can access or a restricted contribution.
 */
export interface CreatedIssueOrRestrictedContribution {
  __typename?: "CreatedIssueContribution" | "RestrictedContribution";
  $on: $CreatedIssueOrRestrictedContribution;
}

/**
 * Represents the contribution a user made on GitHub by opening a pull request.
 */
export interface CreatedPullRequestContribution {
  __typename?: "CreatedPullRequestContribution";
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: ScalarsEnums["Boolean"];
  /**
   * When this contribution was made.
   */
  occurredAt: ScalarsEnums["DateTime"];
  /**
   * The pull request that was opened.
   */
  pullRequest: PullRequest;
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this contribution.
   */
  url: ScalarsEnums["URI"];
  /**
   * The user who made this contribution.
   */
  user: User;
}

/**
 * The connection type for CreatedPullRequestContribution.
 */
export interface CreatedPullRequestContributionConnection {
  __typename?: "CreatedPullRequestContributionConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<CreatedPullRequestContributionEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<CreatedPullRequestContribution>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface CreatedPullRequestContributionEdge {
  __typename?: "CreatedPullRequestContributionEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<CreatedPullRequestContribution>;
}

/**
 * Represents either a pull request the viewer can access or a restricted contribution.
 */
export interface CreatedPullRequestOrRestrictedContribution {
  __typename?: "CreatedPullRequestContribution" | "RestrictedContribution";
  $on: $CreatedPullRequestOrRestrictedContribution;
}

/**
 * Represents the contribution a user made by leaving a review on a pull request.
 */
export interface CreatedPullRequestReviewContribution {
  __typename?: "CreatedPullRequestReviewContribution";
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: ScalarsEnums["Boolean"];
  /**
   * When this contribution was made.
   */
  occurredAt: ScalarsEnums["DateTime"];
  /**
   * The pull request the user reviewed.
   */
  pullRequest: PullRequest;
  /**
   * The review the user left on the pull request.
   */
  pullRequestReview: PullRequestReview;
  /**
   * The repository containing the pull request that the user reviewed.
   */
  repository: Repository;
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this contribution.
   */
  url: ScalarsEnums["URI"];
  /**
   * The user who made this contribution.
   */
  user: User;
}

/**
 * The connection type for CreatedPullRequestReviewContribution.
 */
export interface CreatedPullRequestReviewContributionConnection {
  __typename?: "CreatedPullRequestReviewContributionConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<CreatedPullRequestReviewContributionEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<CreatedPullRequestReviewContribution>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface CreatedPullRequestReviewContributionEdge {
  __typename?: "CreatedPullRequestReviewContributionEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<CreatedPullRequestReviewContribution>;
}

/**
 * Represents the contribution a user made on GitHub by creating a repository.
 */
export interface CreatedRepositoryContribution {
  __typename?: "CreatedRepositoryContribution";
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: ScalarsEnums["Boolean"];
  /**
   * When this contribution was made.
   */
  occurredAt: ScalarsEnums["DateTime"];
  /**
   * The repository that was created.
   */
  repository: Repository;
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this contribution.
   */
  url: ScalarsEnums["URI"];
  /**
   * The user who made this contribution.
   */
  user: User;
}

/**
 * The connection type for CreatedRepositoryContribution.
 */
export interface CreatedRepositoryContributionConnection {
  __typename?: "CreatedRepositoryContributionConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<CreatedRepositoryContributionEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<CreatedRepositoryContribution>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface CreatedRepositoryContributionEdge {
  __typename?: "CreatedRepositoryContributionEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<CreatedRepositoryContribution>;
}

/**
 * Represents either a repository the viewer can access or a restricted contribution.
 */
export interface CreatedRepositoryOrRestrictedContribution {
  __typename?: "CreatedRepositoryContribution" | "RestrictedContribution";
  $on: $CreatedRepositoryOrRestrictedContribution;
}

/**
 * Represents a mention made by one issue or pull request to another.
 */
export interface CrossReferencedEvent {
  __typename?: "CrossReferencedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Reference originated in a different repository.
   */
  isCrossRepository: ScalarsEnums["Boolean"];
  /**
   * Identifies when the reference was made.
   */
  referencedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP path for this pull request.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Issue or pull request that made the reference.
   */
  source: ReferencedSubject;
  /**
   * Issue or pull request to which the reference was made.
   */
  target: ReferencedSubject;
  /**
   * The HTTP URL for this pull request.
   */
  url: ScalarsEnums["URI"];
  /**
   * Checks if the target will be closed when the source is merged.
   */
  willCloseTarget: ScalarsEnums["Boolean"];
}

/**
 * Autogenerated return type of DeclineTopicSuggestion
 */
export interface DeclineTopicSuggestionPayload {
  __typename?: "DeclineTopicSuggestionPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The declined topic.
   */
  topic?: Maybe<Topic>;
}

/**
 * Entities that can be deleted.
 */
export interface Deletable {
  __typename?:
    | "CommitComment"
    | "Discussion"
    | "DiscussionComment"
    | "GistComment"
    | "Issue"
    | "IssueComment"
    | "PullRequestReview"
    | "PullRequestReviewComment"
    | "TeamDiscussion"
    | "TeamDiscussionComment";
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: ScalarsEnums["Boolean"];
  $on: $Deletable;
}

/**
 * Autogenerated return type of DeleteBranchProtectionRule
 */
export interface DeleteBranchProtectionRulePayload {
  __typename?: "DeleteBranchProtectionRulePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of DeleteDeployment
 */
export interface DeleteDeploymentPayload {
  __typename?: "DeleteDeploymentPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of DeleteDiscussionComment
 */
export interface DeleteDiscussionCommentPayload {
  __typename?: "DeleteDiscussionCommentPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The discussion comment that was just deleted.
   */
  comment?: Maybe<DiscussionComment>;
}

/**
 * Autogenerated return type of DeleteDiscussion
 */
export interface DeleteDiscussionPayload {
  __typename?: "DeleteDiscussionPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The discussion that was just deleted.
   */
  discussion?: Maybe<Discussion>;
}

/**
 * Autogenerated return type of DeleteEnvironment
 */
export interface DeleteEnvironmentPayload {
  __typename?: "DeleteEnvironmentPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of DeleteIpAllowListEntry
 */
export interface DeleteIpAllowListEntryPayload {
  __typename?: "DeleteIpAllowListEntryPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The IP allow list entry that was deleted.
   */
  ipAllowListEntry?: Maybe<IpAllowListEntry>;
}

/**
 * Autogenerated return type of DeleteIssueComment
 */
export interface DeleteIssueCommentPayload {
  __typename?: "DeleteIssueCommentPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of DeleteIssue
 */
export interface DeleteIssuePayload {
  __typename?: "DeleteIssuePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The repository the issue belonged to
   */
  repository?: Maybe<Repository>;
}

/**
 * Autogenerated return type of DeleteLinkedBranch
 */
export interface DeleteLinkedBranchPayload {
  __typename?: "DeleteLinkedBranchPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The issue the linked branch was unlinked from.
   */
  issue?: Maybe<Issue>;
}

/**
 * Autogenerated return type of DeleteProjectCard
 */
export interface DeleteProjectCardPayload {
  __typename?: "DeleteProjectCardPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The column the deleted card was in.
   */
  column?: Maybe<ProjectColumn>;
  /**
   * The deleted card ID.
   */
  deletedCardId?: Maybe<ScalarsEnums["ID"]>;
}

/**
 * Autogenerated return type of DeleteProjectColumn
 */
export interface DeleteProjectColumnPayload {
  __typename?: "DeleteProjectColumnPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The deleted column ID.
   */
  deletedColumnId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The project the deleted column was in.
   */
  project?: Maybe<Project>;
}

/**
 * Autogenerated return type of DeleteProject
 */
export interface DeleteProjectPayload {
  __typename?: "DeleteProjectPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The repository or organization the project was removed from.
   */
  owner?: Maybe<ProjectOwner>;
}

/**
 * Autogenerated return type of DeleteProjectV2Field
 */
export interface DeleteProjectV2FieldPayload {
  __typename?: "DeleteProjectV2FieldPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The deleted field.
   */
  projectV2Field?: Maybe<ProjectV2FieldConfiguration>;
}

/**
 * Autogenerated return type of DeleteProjectV2Item
 */
export interface DeleteProjectV2ItemPayload {
  __typename?: "DeleteProjectV2ItemPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted item.
   */
  deletedItemId?: Maybe<ScalarsEnums["ID"]>;
}

/**
 * Autogenerated return type of DeleteProjectV2
 */
export interface DeleteProjectV2Payload {
  __typename?: "DeleteProjectV2Payload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The deleted Project.
   */
  projectV2?: Maybe<ProjectV2>;
}

/**
 * Autogenerated return type of DeleteProjectV2Workflow
 */
export interface DeleteProjectV2WorkflowPayload {
  __typename?: "DeleteProjectV2WorkflowPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted workflow.
   */
  deletedWorkflowId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The project the deleted workflow was in.
   */
  projectV2?: Maybe<ProjectV2>;
}

/**
 * Autogenerated return type of DeletePullRequestReviewComment
 */
export interface DeletePullRequestReviewCommentPayload {
  __typename?: "DeletePullRequestReviewCommentPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The pull request review the deleted comment belonged to.
   */
  pullRequestReview?: Maybe<PullRequestReview>;
  /**
   * The deleted pull request review comment.
   */
  pullRequestReviewComment?: Maybe<PullRequestReviewComment>;
}

/**
 * Autogenerated return type of DeletePullRequestReview
 */
export interface DeletePullRequestReviewPayload {
  __typename?: "DeletePullRequestReviewPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The deleted pull request review.
   */
  pullRequestReview?: Maybe<PullRequestReview>;
}

/**
 * Autogenerated return type of DeleteRef
 */
export interface DeleteRefPayload {
  __typename?: "DeleteRefPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of DeleteRepositoryRuleset
 */
export interface DeleteRepositoryRulesetPayload {
  __typename?: "DeleteRepositoryRulesetPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of DeleteSavedNotificationThread
 */
export interface DeleteSavedNotificationThreadPayload {
  __typename?: "DeleteSavedNotificationThreadPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Did the operation succeed?
   */
  success?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The user that deleted the saved notification.
   */
  viewer?: Maybe<User>;
}

/**
 * Autogenerated return type of DeleteTeamDiscussionComment
 */
export interface DeleteTeamDiscussionCommentPayload {
  __typename?: "DeleteTeamDiscussionCommentPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of DeleteTeamDiscussion
 */
export interface DeleteTeamDiscussionPayload {
  __typename?: "DeleteTeamDiscussionPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of DeleteVerifiableDomain
 */
export interface DeleteVerifiableDomainPayload {
  __typename?: "DeleteVerifiableDomainPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The owning account from which the domain was deleted.
   */
  owner?: Maybe<VerifiableDomainOwner>;
}

/**
 * Represents a 'demilestoned' event on a given issue or pull request.
 */
export interface DemilestonedEvent {
  __typename?: "DemilestonedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Identifies the milestone title associated with the 'demilestoned' event.
   */
  milestoneTitle: ScalarsEnums["String"];
  /**
   * Object referenced by event.
   */
  subject: MilestoneItem;
}

/**
 * A Dependabot Update for a dependency in a repository
 */
export interface DependabotUpdate {
  __typename?: "DependabotUpdate";
  /**
   * The error from a dependency update
   */
  error?: Maybe<DependabotUpdateError>;
  /**
   * The associated pull request
   */
  pullRequest?: Maybe<PullRequest>;
  /**
   * The repository associated with this node.
   */
  repository: Repository;
}

/**
 * An error produced from a Dependabot Update
 */
export interface DependabotUpdateError {
  __typename?: "DependabotUpdateError";
  /**
   * The body of the error
   */
  body: ScalarsEnums["String"];
  /**
   * The error code
   */
  errorType: ScalarsEnums["String"];
  /**
   * The title of the error
   */
  title: ScalarsEnums["String"];
}

/**
 * A repository deploy key.
 */
export interface DeployKey {
  __typename?: "DeployKey";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The deploy key.
   */
  key: ScalarsEnums["String"];
  /**
   * Whether or not the deploy key is read only.
   */
  readOnly: ScalarsEnums["Boolean"];
  /**
   * The deploy key title.
   */
  title: ScalarsEnums["String"];
  /**
   * Whether or not the deploy key has been verified.
   */
  verified: ScalarsEnums["Boolean"];
}

/**
 * The connection type for DeployKey.
 */
export interface DeployKeyConnection {
  __typename?: "DeployKeyConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<DeployKeyEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<DeployKey>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface DeployKeyEdge {
  __typename?: "DeployKeyEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<DeployKey>;
}

/**
 * Represents a 'deployed' event on a given pull request.
 */
export interface DeployedEvent {
  __typename?: "DeployedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The deployment associated with the 'deployed' event.
   */
  deployment: Deployment;
  id: ScalarsEnums["ID"];
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
  /**
   * The ref associated with the 'deployed' event.
   */
  ref?: Maybe<Ref>;
}

/**
 * Represents triggered deployment instance.
 */
export interface Deployment {
  __typename?: "Deployment";
  /**
   * Identifies the commit sha of the deployment.
   */
  commit?: Maybe<Commit>;
  /**
   * Identifies the oid of the deployment commit, even if the commit has been deleted.
   */
  commitOid: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the actor who triggered the deployment.
   */
  creator: Actor;
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The deployment description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The latest environment to which this deployment was made.
   */
  environment?: Maybe<ScalarsEnums["String"]>;
  id: ScalarsEnums["ID"];
  /**
   * The latest environment to which this deployment was made.
   */
  latestEnvironment?: Maybe<ScalarsEnums["String"]>;
  /**
   * The latest status of this deployment.
   */
  latestStatus?: Maybe<DeploymentStatus>;
  /**
   * The original environment to which this deployment was made.
   */
  originalEnvironment?: Maybe<ScalarsEnums["String"]>;
  /**
   * Extra information that a deployment system might need.
   */
  payload?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies the Ref of the deployment, if the deployment was created by ref.
   */
  ref?: Maybe<Ref>;
  /**
   * Identifies the repository associated with the deployment.
   */
  repository: Repository;
  /**
   * The current state of the deployment.
   */
  state?: Maybe<ScalarsEnums["DeploymentState"]>;
  /**
   * A list of statuses associated with the deployment.
   */
  statuses: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<DeploymentStatusConnection>;
  /**
   * The deployment task.
   */
  task?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * The connection type for Deployment.
 */
export interface DeploymentConnection {
  __typename?: "DeploymentConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<DeploymentEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Deployment>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface DeploymentEdge {
  __typename?: "DeploymentEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Deployment>;
}

/**
 * Represents a 'deployment_environment_changed' event on a given pull request.
 */
export interface DeploymentEnvironmentChangedEvent {
  __typename?: "DeploymentEnvironmentChangedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The deployment status that updated the deployment environment.
   */
  deploymentStatus: DeploymentStatus;
  id: ScalarsEnums["ID"];
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
}

/**
 * A protection rule.
 */
export interface DeploymentProtectionRule {
  __typename?: "DeploymentProtectionRule";
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether deployments to this environment can be approved by the user who created the deployment.
   */
  preventSelfReview?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The teams or users that can review the deployment
   */
  reviewers: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => DeploymentReviewerConnection;
  /**
   * The timeout in minutes for this protection rule.
   */
  timeout: ScalarsEnums["Int"];
  /**
   * The type of protection rule.
   */
  type: ScalarsEnums["DeploymentProtectionRuleType"];
}

/**
 * The connection type for DeploymentProtectionRule.
 */
export interface DeploymentProtectionRuleConnection {
  __typename?: "DeploymentProtectionRuleConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<DeploymentProtectionRuleEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<DeploymentProtectionRule>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface DeploymentProtectionRuleEdge {
  __typename?: "DeploymentProtectionRuleEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<DeploymentProtectionRule>;
}

/**
 * A request to deploy a workflow run to an environment.
 */
export interface DeploymentRequest {
  __typename?: "DeploymentRequest";
  /**
   * Whether or not the current user can approve the deployment
   */
  currentUserCanApprove: ScalarsEnums["Boolean"];
  /**
   * The target environment of the deployment
   */
  environment: Environment;
  /**
   * The teams or users that can review the deployment
   */
  reviewers: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => DeploymentReviewerConnection;
  /**
   * The wait timer in minutes configured in the environment
   */
  waitTimer: ScalarsEnums["Int"];
  /**
   * The wait timer in minutes configured in the environment
   */
  waitTimerStartedAt?: Maybe<ScalarsEnums["DateTime"]>;
}

/**
 * The connection type for DeploymentRequest.
 */
export interface DeploymentRequestConnection {
  __typename?: "DeploymentRequestConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<DeploymentRequestEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<DeploymentRequest>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface DeploymentRequestEdge {
  __typename?: "DeploymentRequestEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<DeploymentRequest>;
}

/**
 * A deployment review.
 */
export interface DeploymentReview {
  __typename?: "DeploymentReview";
  /**
   * The comment the user left.
   */
  comment: ScalarsEnums["String"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The environments approved or rejected
   */
  environments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => EnvironmentConnection;
  id: ScalarsEnums["ID"];
  /**
   * The decision of the user.
   */
  state: ScalarsEnums["DeploymentReviewState"];
  /**
   * The user that reviewed the deployment.
   */
  user: User;
}

/**
 * The connection type for DeploymentReview.
 */
export interface DeploymentReviewConnection {
  __typename?: "DeploymentReviewConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<DeploymentReviewEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<DeploymentReview>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface DeploymentReviewEdge {
  __typename?: "DeploymentReviewEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<DeploymentReview>;
}

/**
 * Users and teams.
 */
export interface DeploymentReviewer {
  __typename?: "Team" | "User";
  $on: $DeploymentReviewer;
}

/**
 * The connection type for DeploymentReviewer.
 */
export interface DeploymentReviewerConnection {
  __typename?: "DeploymentReviewerConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<DeploymentReviewerEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<DeploymentReviewer>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface DeploymentReviewerEdge {
  __typename?: "DeploymentReviewerEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<DeploymentReviewer>;
}

/**
 * Describes the status of a given deployment attempt.
 */
export interface DeploymentStatus {
  __typename?: "DeploymentStatus";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the actor who triggered the deployment.
   */
  creator: Actor;
  /**
   * Identifies the deployment associated with status.
   */
  deployment: Deployment;
  /**
   * Identifies the description of the deployment.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies the environment URL of the deployment.
   */
  environmentUrl?: Maybe<ScalarsEnums["URI"]>;
  id: ScalarsEnums["ID"];
  /**
   * Identifies the log URL of the deployment.
   */
  logUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * Identifies the current state of the deployment.
   */
  state: ScalarsEnums["DeploymentStatusState"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * The connection type for DeploymentStatus.
 */
export interface DeploymentStatusConnection {
  __typename?: "DeploymentStatusConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<DeploymentStatusEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<DeploymentStatus>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface DeploymentStatusEdge {
  __typename?: "DeploymentStatusEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<DeploymentStatus>;
}

/**
 * Autogenerated return type of DequeuePullRequest
 */
export interface DequeuePullRequestPayload {
  __typename?: "DequeuePullRequestPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The merge queue entry of the dequeued pull request.
   */
  mergeQueueEntry?: Maybe<MergeQueueEntry>;
}

/**
 * Autogenerated return type of DisablePullRequestAutoMerge
 */
export interface DisablePullRequestAutoMergePayload {
  __typename?: "DisablePullRequestAutoMergePayload";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The pull request auto merge was disabled on.
   */
  pullRequest?: Maybe<PullRequest>;
}

/**
 * Represents a 'disconnected' event on a given issue or pull request.
 */
export interface DisconnectedEvent {
  __typename?: "DisconnectedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Reference originated in a different repository.
   */
  isCrossRepository: ScalarsEnums["Boolean"];
  /**
   * Issue or pull request from which the issue was disconnected.
   */
  source: ReferencedSubject;
  /**
   * Issue or pull request which was disconnected.
   */
  subject: ReferencedSubject;
}

/**
 * A discussion in a repository.
 */
export interface Discussion {
  __typename?: "Discussion";
  /**
   * Reason that the conversation was locked.
   */
  activeLockReason?: Maybe<ScalarsEnums["LockReason"]>;
  /**
   * The comment chosen as this discussion's answer, if any.
   */
  answer?: Maybe<DiscussionComment>;
  /**
   * The time when a user chose this discussion's answer, if answered.
   */
  answerChosenAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The user who chose this discussion's answer, if answered.
   */
  answerChosenBy?: Maybe<Actor>;
  /**
   * The actor who authored the comment.
   */
  author?: Maybe<Actor>;
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: ScalarsEnums["CommentAuthorAssociation"];
  /**
   * The main text of the discussion post.
   */
  body: ScalarsEnums["String"];
  /**
   * The body rendered to HTML.
   */
  bodyHTML: ScalarsEnums["HTML"];
  /**
   * The body rendered to text.
   */
  bodyText: ScalarsEnums["String"];
  /**
   * The category for this discussion.
   */
  category: DiscussionCategory;
  /**
   * Indicates if the object is closed (definition of closed may depend on type)
   */
  closed: ScalarsEnums["Boolean"];
  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The replies to the discussion.
   */
  comments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => DiscussionCommentConnection;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: ScalarsEnums["Boolean"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The actor who edited the comment.
   */
  editor?: Maybe<Actor>;
  id: ScalarsEnums["ID"];
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: ScalarsEnums["Boolean"];
  /**
   * Only return answered/unanswered discussions
   */
  isAnswered?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * A list of labels associated with the object.
   */
  labels: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for labels returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<LabelOrder>;
  }) => Maybe<LabelConnection>;
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * `true` if the object is locked
   */
  locked: ScalarsEnums["Boolean"];
  /**
   * The number identifying this discussion within the repository.
   */
  number: ScalarsEnums["Int"];
  /**
   * The poll associated with this discussion, if one exists.
   */
  poll?: Maybe<DiscussionPoll>;
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Maybe<Array<ReactionGroup>>;
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Allows filtering Reactions by emoji.
     */
    content?: Maybe<ReactionContent>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Allows specifying the order in which reactions are returned.
     */
    orderBy?: Maybe<ReactionOrder>;
  }) => ReactionConnection;
  /**
   * The repository associated with this node.
   */
  repository: Repository;
  /**
   * The path for this discussion.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Identifies the reason for the discussion's state.
   */
  stateReason?: Maybe<ScalarsEnums["DiscussionStateReason"]>;
  /**
   * The title of this discussion.
   */
  title: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * Number of upvotes that this subject has received.
   */
  upvoteCount: ScalarsEnums["Int"];
  /**
   * The URL for this discussion.
   */
  url: ScalarsEnums["URI"];
  /**
   * A list of edits to this content.
   */
  userContentEdits: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<UserContentEditConnection>;
  /**
   * Indicates if the object can be closed by the viewer.
   */
  viewerCanClose: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: ScalarsEnums["Boolean"];
  /**
   * Can user react to this subject
   */
  viewerCanReact: ScalarsEnums["Boolean"];
  /**
   * Indicates if the object can be reopened by the viewer.
   */
  viewerCanReopen: ScalarsEnums["Boolean"];
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: ScalarsEnums["Boolean"];
  /**
   * Whether or not the current user can add or remove an upvote on this subject.
   */
  viewerCanUpvote: ScalarsEnums["Boolean"];
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: ScalarsEnums["Boolean"];
  /**
   * Whether or not the current user has already upvoted this subject.
   */
  viewerHasUpvoted: ScalarsEnums["Boolean"];
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: Maybe<ScalarsEnums["SubscriptionState"]>;
}

/**
 * A category for discussions in a repository.
 */
export interface DiscussionCategory {
  __typename?: "DiscussionCategory";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * A description of this category.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * An emoji representing this category.
   */
  emoji: ScalarsEnums["String"];
  /**
   * This category's emoji rendered as HTML.
   */
  emojiHTML: ScalarsEnums["HTML"];
  id: ScalarsEnums["ID"];
  /**
   * Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation.
   */
  isAnswerable: ScalarsEnums["Boolean"];
  /**
   * The name of this category.
   */
  name: ScalarsEnums["String"];
  /**
   * The repository associated with this node.
   */
  repository: Repository;
  /**
   * The slug of this category.
   */
  slug: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * The connection type for DiscussionCategory.
 */
export interface DiscussionCategoryConnection {
  __typename?: "DiscussionCategoryConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<DiscussionCategoryEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<DiscussionCategory>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface DiscussionCategoryEdge {
  __typename?: "DiscussionCategoryEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<DiscussionCategory>;
}

/**
 * A comment on a discussion.
 */
export interface DiscussionComment {
  __typename?: "DiscussionComment";
  /**
   * The actor who authored the comment.
   */
  author?: Maybe<Actor>;
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: ScalarsEnums["CommentAuthorAssociation"];
  /**
   * The body as Markdown.
   */
  body: ScalarsEnums["String"];
  /**
   * The body rendered to HTML.
   */
  bodyHTML: ScalarsEnums["HTML"];
  /**
   * The body rendered to text.
   */
  bodyText: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: ScalarsEnums["Boolean"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The time when this replied-to comment was deleted
   */
  deletedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The discussion this comment was created in
   */
  discussion?: Maybe<Discussion>;
  /**
   * The actor who edited the comment.
   */
  editor?: Maybe<Actor>;
  id: ScalarsEnums["ID"];
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: ScalarsEnums["Boolean"];
  /**
   * Has this comment been chosen as the answer of its discussion?
   */
  isAnswer: ScalarsEnums["Boolean"];
  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: ScalarsEnums["Boolean"];
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
   */
  minimizedReason?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Maybe<Array<ReactionGroup>>;
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Allows filtering Reactions by emoji.
     */
    content?: Maybe<ReactionContent>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Allows specifying the order in which reactions are returned.
     */
    orderBy?: Maybe<ReactionOrder>;
  }) => ReactionConnection;
  /**
   * The threaded replies to this comment.
   */
  replies: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => DiscussionCommentConnection;
  /**
   * The discussion comment this comment is a reply to
   */
  replyTo?: Maybe<DiscussionComment>;
  /**
   * The path for this discussion comment.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * Number of upvotes that this subject has received.
   */
  upvoteCount: ScalarsEnums["Int"];
  /**
   * The URL for this discussion comment.
   */
  url: ScalarsEnums["URI"];
  /**
   * A list of edits to this content.
   */
  userContentEdits: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<UserContentEditConnection>;
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: ScalarsEnums["Boolean"];
  /**
   * Can the current user mark this comment as an answer?
   */
  viewerCanMarkAsAnswer: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: ScalarsEnums["Boolean"];
  /**
   * Can user react to this subject
   */
  viewerCanReact: ScalarsEnums["Boolean"];
  /**
   * Can the current user unmark this comment as an answer?
   */
  viewerCanUnmarkAsAnswer: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: ScalarsEnums["Boolean"];
  /**
   * Whether or not the current user can add or remove an upvote on this subject.
   */
  viewerCanUpvote: ScalarsEnums["Boolean"];
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<ScalarsEnums["CommentCannotUpdateReason"]>;
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: ScalarsEnums["Boolean"];
  /**
   * Whether or not the current user has already upvoted this subject.
   */
  viewerHasUpvoted: ScalarsEnums["Boolean"];
}

/**
 * The connection type for DiscussionComment.
 */
export interface DiscussionCommentConnection {
  __typename?: "DiscussionCommentConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<DiscussionCommentEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<DiscussionComment>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface DiscussionCommentEdge {
  __typename?: "DiscussionCommentEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<DiscussionComment>;
}

/**
 * The connection type for Discussion.
 */
export interface DiscussionConnection {
  __typename?: "DiscussionConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<DiscussionEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Discussion>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface DiscussionEdge {
  __typename?: "DiscussionEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Discussion>;
}

/**
 * A poll for a discussion.
 */
export interface DiscussionPoll {
  __typename?: "DiscussionPoll";
  /**
   * The discussion that this poll belongs to.
   */
  discussion?: Maybe<Discussion>;
  id: ScalarsEnums["ID"];
  /**
   * The options for this poll.
   */
  options: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * How to order the options for the discussion poll.
     * @defaultValue `{"direction":"ASC","field":"AUTHORED_ORDER"}`
     */
    orderBy?: Maybe<DiscussionPollOptionOrder>;
  }) => Maybe<DiscussionPollOptionConnection>;
  /**
   * The question that is being asked by this poll.
   */
  question: ScalarsEnums["String"];
  /**
   * The total number of votes that have been cast for this poll.
   */
  totalVoteCount: ScalarsEnums["Int"];
  /**
   * Indicates if the viewer has permission to vote in this poll.
   */
  viewerCanVote: ScalarsEnums["Boolean"];
  /**
   * Indicates if the viewer has voted for any option in this poll.
   */
  viewerHasVoted: ScalarsEnums["Boolean"];
}

/**
 * An option for a discussion poll.
 */
export interface DiscussionPollOption {
  __typename?: "DiscussionPollOption";
  id: ScalarsEnums["ID"];
  /**
   * The text for this option.
   */
  option: ScalarsEnums["String"];
  /**
   * The discussion poll that this option belongs to.
   */
  poll?: Maybe<DiscussionPoll>;
  /**
   * The total number of votes that have been cast for this option.
   */
  totalVoteCount: ScalarsEnums["Int"];
  /**
   * Indicates if the viewer has voted for this option in the poll.
   */
  viewerHasVoted: ScalarsEnums["Boolean"];
}

/**
 * The connection type for DiscussionPollOption.
 */
export interface DiscussionPollOptionConnection {
  __typename?: "DiscussionPollOptionConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<DiscussionPollOptionEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<DiscussionPollOption>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface DiscussionPollOptionEdge {
  __typename?: "DiscussionPollOptionEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<DiscussionPollOption>;
}

/**
 * Autogenerated return type of DismissPullRequestReview
 */
export interface DismissPullRequestReviewPayload {
  __typename?: "DismissPullRequestReviewPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The dismissed pull request review.
   */
  pullRequestReview?: Maybe<PullRequestReview>;
}

/**
 * Autogenerated return type of DismissRepositoryVulnerabilityAlert
 */
export interface DismissRepositoryVulnerabilityAlertPayload {
  __typename?: "DismissRepositoryVulnerabilityAlertPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Dependabot alert that was dismissed
   */
  repositoryVulnerabilityAlert?: Maybe<RepositoryVulnerabilityAlert>;
}

/**
 * A draft issue within a project.
 */
export interface DraftIssue {
  __typename?: "DraftIssue";
  /**
   * A list of users to assigned to this draft issue.
   */
  assignees: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => UserConnection;
  /**
   * The body of the draft issue.
   */
  body: ScalarsEnums["String"];
  /**
   * The body of the draft issue rendered to HTML.
   */
  bodyHTML: ScalarsEnums["HTML"];
  /**
   * The body of the draft issue rendered to text.
   */
  bodyText: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The actor who created this draft issue.
   */
  creator?: Maybe<Actor>;
  id: ScalarsEnums["ID"];
  /**
   * List of items linked with the draft issue (currently draft issue can be linked to only one item).
   */
  projectV2Items: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => ProjectV2ItemConnection;
  /**
   * Projects that link to this draft issue (currently draft issue can be linked to only one project).
   */
  projectsV2: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => ProjectV2Connection;
  /**
   * The title of the draft issue
   */
  title: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * Autogenerated return type of EnablePullRequestAutoMerge
 */
export interface EnablePullRequestAutoMergePayload {
  __typename?: "EnablePullRequestAutoMergePayload";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The pull request auto-merge was enabled on.
   */
  pullRequest?: Maybe<PullRequest>;
}

/**
 * Autogenerated return type of EnqueuePullRequest
 */
export interface EnqueuePullRequestPayload {
  __typename?: "EnqueuePullRequestPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The merge queue entry for the enqueued pull request.
   */
  mergeQueueEntry?: Maybe<MergeQueueEntry>;
}

/**
 * An account to manage multiple organizations with consolidated policy and billing.
 */
export interface Enterprise {
  __typename?: "Enterprise";
  /**
   * The text of the announcement
   */
  announcement?: Maybe<ScalarsEnums["String"]>;
  /**
   * The expiration date of the announcement, if any
   */
  announcementExpiresAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Whether the announcement can be dismissed by the user
   */
  announcementUserDismissible?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * A URL pointing to the enterprise's public avatar.
   */
  avatarUrl: (args?: {
    /**
     * The size of the resulting square image.
     */
    size?: Maybe<Scalars["Int"]>;
  }) => ScalarsEnums["URI"];
  /**
   * Enterprise billing information visible to enterprise billing managers.
   */
  billingInfo?: Maybe<EnterpriseBillingInfo>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The description of the enterprise.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The description of the enterprise as HTML.
   */
  descriptionHTML: ScalarsEnums["HTML"];
  id: ScalarsEnums["ID"];
  /**
   * The location of the enterprise.
   */
  location?: Maybe<ScalarsEnums["String"]>;
  /**
   * A list of users who are members of this enterprise.
   */
  members: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Only return members within the selected GitHub Enterprise deployment
     */
    deployment?: Maybe<EnterpriseUserDeployment>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Only return members with this two-factor authentication status. Does not include members who only have an account on a GitHub Enterprise Server instance.
     */
    hasTwoFactorEnabled?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for members returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<EnterpriseMemberOrder>;
    /**
     * Only return members within the organizations with these logins
     */
    organizationLogins?: Maybe<Array<Scalars["String"]>>;
    /**
     * The search string to look for.
     */
    query?: Maybe<Scalars["String"]>;
    /**
     * The role of the user in the enterprise organization or server.
     */
    role?: Maybe<EnterpriseUserAccountMembershipRole>;
  }) => EnterpriseMemberConnection;
  /**
   * The name of the enterprise.
   */
  name: ScalarsEnums["String"];
  /**
   * A list of organizations that belong to this enterprise.
   */
  organizations: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for organizations returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<OrganizationOrder>;
    /**
     * The search string to look for.
     */
    query?: Maybe<Scalars["String"]>;
    /**
     * The viewer's role in an organization.
     */
    viewerOrganizationRole?: Maybe<RoleInOrganization>;
  }) => OrganizationConnection;
  /**
   * Enterprise information visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope.
   */
  ownerInfo?: Maybe<EnterpriseOwnerInfo>;
  /**
   * The HTTP path for this enterprise.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The URL-friendly identifier for the enterprise.
   */
  slug: ScalarsEnums["String"];
  /**
   * The HTTP URL for this enterprise.
   */
  url: ScalarsEnums["URI"];
  /**
   * Is the current viewer an admin of this enterprise?
   */
  viewerIsAdmin: ScalarsEnums["Boolean"];
  /**
   * The URL of the enterprise website.
   */
  websiteUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * The connection type for User.
 */
export interface EnterpriseAdministratorConnection {
  __typename?: "EnterpriseAdministratorConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<EnterpriseAdministratorEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<User>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * A User who is an administrator of an enterprise.
 */
export interface EnterpriseAdministratorEdge {
  __typename?: "EnterpriseAdministratorEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<User>;
  /**
   * The role of the administrator.
   */
  role: ScalarsEnums["EnterpriseAdministratorRole"];
}

/**
 * An invitation for a user to become an owner or billing manager of an enterprise.
 */
export interface EnterpriseAdministratorInvitation {
  __typename?: "EnterpriseAdministratorInvitation";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The email of the person who was invited to the enterprise.
   */
  email?: Maybe<ScalarsEnums["String"]>;
  /**
   * The enterprise the invitation is for.
   */
  enterprise: Enterprise;
  id: ScalarsEnums["ID"];
  /**
   * The user who was invited to the enterprise.
   */
  invitee?: Maybe<User>;
  /**
   * The user who created the invitation.
   */
  inviter?: Maybe<User>;
  /**
   * The invitee's pending role in the enterprise (owner or billing_manager).
   */
  role: ScalarsEnums["EnterpriseAdministratorRole"];
}

/**
 * The connection type for EnterpriseAdministratorInvitation.
 */
export interface EnterpriseAdministratorInvitationConnection {
  __typename?: "EnterpriseAdministratorInvitationConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<EnterpriseAdministratorInvitationEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<EnterpriseAdministratorInvitation>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface EnterpriseAdministratorInvitationEdge {
  __typename?: "EnterpriseAdministratorInvitationEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<EnterpriseAdministratorInvitation>;
}

/**
 * Metadata for an audit entry containing enterprise account information.
 */
export interface EnterpriseAuditEntryData {
  __typename?:
    | "MembersCanDeleteReposClearAuditEntry"
    | "MembersCanDeleteReposDisableAuditEntry"
    | "MembersCanDeleteReposEnableAuditEntry"
    | "OrgInviteToBusinessAuditEntry"
    | "PrivateRepositoryForkingDisableAuditEntry"
    | "PrivateRepositoryForkingEnableAuditEntry"
    | "RepositoryVisibilityChangeDisableAuditEntry"
    | "RepositoryVisibilityChangeEnableAuditEntry";
  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The slug of the enterprise.
   */
  enterpriseSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl?: Maybe<ScalarsEnums["URI"]>;
  $on: $EnterpriseAuditEntryData;
}

/**
 * Enterprise billing information visible to enterprise billing managers and owners.
 */
export interface EnterpriseBillingInfo {
  __typename?: "EnterpriseBillingInfo";
  /**
   * The number of licenseable users/emails across the enterprise.
   */
  allLicensableUsersCount: ScalarsEnums["Int"];
  /**
   * The number of data packs used by all organizations owned by the enterprise.
   */
  assetPacks: ScalarsEnums["Int"];
  /**
   * The bandwidth quota in GB for all organizations owned by the enterprise.
   */
  bandwidthQuota: ScalarsEnums["Float"];
  /**
   * The bandwidth usage in GB for all organizations owned by the enterprise.
   */
  bandwidthUsage: ScalarsEnums["Float"];
  /**
   * The bandwidth usage as a percentage of the bandwidth quota.
   */
  bandwidthUsagePercentage: ScalarsEnums["Int"];
  /**
   * The storage quota in GB for all organizations owned by the enterprise.
   */
  storageQuota: ScalarsEnums["Float"];
  /**
   * The storage usage in GB for all organizations owned by the enterprise.
   */
  storageUsage: ScalarsEnums["Float"];
  /**
   * The storage usage as a percentage of the storage quota.
   */
  storageUsagePercentage: ScalarsEnums["Int"];
  /**
   * The number of available licenses across all owned organizations based on the unique number of billable users.
   */
  totalAvailableLicenses: ScalarsEnums["Int"];
  /**
   * The total number of licenses allocated.
   */
  totalLicenses: ScalarsEnums["Int"];
}

/**
 * The connection type for Enterprise.
 */
export interface EnterpriseConnection {
  __typename?: "EnterpriseConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<EnterpriseEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Enterprise>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface EnterpriseEdge {
  __typename?: "EnterpriseEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Enterprise>;
}

/**
 * The connection type for OrganizationInvitation.
 */
export interface EnterpriseFailedInvitationConnection {
  __typename?: "EnterpriseFailedInvitationConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<EnterpriseFailedInvitationEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<OrganizationInvitation>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
  /**
   * Identifies the total count of unique users in the connection.
   */
  totalUniqueUserCount: ScalarsEnums["Int"];
}

/**
 * A failed invitation to be a member in an enterprise organization.
 */
export interface EnterpriseFailedInvitationEdge {
  __typename?: "EnterpriseFailedInvitationEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<OrganizationInvitation>;
}

/**
 * An identity provider configured to provision identities for an enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope.
 */
export interface EnterpriseIdentityProvider {
  __typename?: "EnterpriseIdentityProvider";
  /**
   * The digest algorithm used to sign SAML requests for the identity provider.
   */
  digestMethod?: Maybe<ScalarsEnums["SamlDigestAlgorithm"]>;
  /**
   * The enterprise this identity provider belongs to.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * ExternalIdentities provisioned by this identity provider.
   */
  externalIdentities: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter to external identities with the users login
     */
    login?: Maybe<Scalars["String"]>;
    /**
     * Filter to external identities with valid org membership only
     */
    membersOnly?: Maybe<Scalars["Boolean"]>;
    /**
     * Filter to external identities with the users userName/NameID attribute
     */
    userName?: Maybe<Scalars["String"]>;
  }) => ExternalIdentityConnection;
  id: ScalarsEnums["ID"];
  /**
   * The x509 certificate used by the identity provider to sign assertions and responses.
   */
  idpCertificate?: Maybe<ScalarsEnums["X509Certificate"]>;
  /**
   * The Issuer Entity ID for the SAML identity provider.
   */
  issuer?: Maybe<ScalarsEnums["String"]>;
  /**
   * Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
   */
  recoveryCodes?: Maybe<Array<ScalarsEnums["String"]>>;
  /**
   * The signature algorithm used to sign SAML requests for the identity provider.
   */
  signatureMethod?: Maybe<ScalarsEnums["SamlSignatureAlgorithm"]>;
  /**
   * The URL endpoint for the identity provider's SAML SSO.
   */
  ssoUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * An object that is a member of an enterprise.
 */
export interface EnterpriseMember {
  __typename?: "EnterpriseUserAccount" | "User";
  $on: $EnterpriseMember;
}

/**
 * The connection type for EnterpriseMember.
 */
export interface EnterpriseMemberConnection {
  __typename?: "EnterpriseMemberConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<EnterpriseMemberEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<EnterpriseMember>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * A User who is a member of an enterprise through one or more organizations.
 */
export interface EnterpriseMemberEdge {
  __typename?: "EnterpriseMemberEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<EnterpriseMember>;
}

/**
 * The connection type for Organization.
 */
export interface EnterpriseOrganizationMembershipConnection {
  __typename?: "EnterpriseOrganizationMembershipConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<EnterpriseOrganizationMembershipEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Organization>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An enterprise organization that a user is a member of.
 */
export interface EnterpriseOrganizationMembershipEdge {
  __typename?: "EnterpriseOrganizationMembershipEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Organization>;
  /**
   * The role of the user in the enterprise membership.
   */
  role: ScalarsEnums["EnterpriseUserAccountMembershipRole"];
}

/**
 * The connection type for User.
 */
export interface EnterpriseOutsideCollaboratorConnection {
  __typename?: "EnterpriseOutsideCollaboratorConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<EnterpriseOutsideCollaboratorEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<User>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * A User who is an outside collaborator of an enterprise through one or more organizations.
 */
export interface EnterpriseOutsideCollaboratorEdge {
  __typename?: "EnterpriseOutsideCollaboratorEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<User>;
  /**
   * The enterprise organization repositories this user is a member of.
   */
  repositories: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for repositories.
     * @defaultValue `{"direction":"ASC","field":"NAME"}`
     */
    orderBy?: Maybe<RepositoryOrder>;
  }) => EnterpriseRepositoryInfoConnection;
}

/**
 * Enterprise information visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope.
 */
export interface EnterpriseOwnerInfo {
  __typename?: "EnterpriseOwnerInfo";
  /**
   * A list of all of the administrators for this enterprise.
   */
  admins: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Only return administrators with this two-factor authentication status.
     */
    hasTwoFactorEnabled?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for administrators returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<EnterpriseMemberOrder>;
    /**
     * Only return members within the organizations with these logins
     */
    organizationLogins?: Maybe<Array<Scalars["String"]>>;
    /**
     * The search string to look for.
     */
    query?: Maybe<Scalars["String"]>;
    /**
     * The role to filter by.
     */
    role?: Maybe<EnterpriseAdministratorRole>;
  }) => EnterpriseAdministratorConnection;
  /**
   * A list of users in the enterprise who currently have two-factor authentication disabled.
   */
  affiliatedUsersWithTwoFactorDisabled: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => UserConnection;
  /**
   * Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.
   */
  affiliatedUsersWithTwoFactorDisabledExist: ScalarsEnums["Boolean"];
  /**
   * The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.
   */
  allowPrivateRepositoryForkingSetting: ScalarsEnums["EnterpriseEnabledDisabledSettingValue"];
  /**
   * A list of enterprise organizations configured with the provided private repository forking setting value.
   */
  allowPrivateRepositoryForkingSettingOrganizations: (args: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for organizations with this setting.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<OrganizationOrder>;
    /**
     * The setting value to find organizations for.
     */
    value: Scalars["Boolean"];
  }) => OrganizationConnection;
  /**
   * The value for the allow private repository forking policy on the enterprise.
   */
  allowPrivateRepositoryForkingSettingPolicyValue?: Maybe<
    ScalarsEnums["EnterpriseAllowPrivateRepositoryForkingPolicyValue"]
  >;
  /**
   * The setting value for base repository permissions for organizations in this enterprise.
   */
  defaultRepositoryPermissionSetting: ScalarsEnums["EnterpriseDefaultRepositoryPermissionSettingValue"];
  /**
   * A list of enterprise organizations configured with the provided base repository permission.
   */
  defaultRepositoryPermissionSettingOrganizations: (args: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for organizations with this setting.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<OrganizationOrder>;
    /**
     * The permission to find organizations for.
     */
    value: DefaultRepositoryPermissionField;
  }) => OrganizationConnection;
  /**
   * A list of domains owned by the enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with admin:enterprise scope.
   */
  domains: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Filter whether or not the domain is approved.
     */
    isApproved?: Maybe<Scalars["Boolean"]>;
    /**
     * Filter whether or not the domain is verified.
     */
    isVerified?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for verifiable domains returned.
     * @defaultValue `{"direction":"ASC","field":"DOMAIN"}`
     */
    orderBy?: Maybe<VerifiableDomainOrder>;
  }) => VerifiableDomainConnection;
  /**
   * Enterprise Server installations owned by the enterprise.
   */
  enterpriseServerInstallations: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Whether or not to only return installations discovered via GitHub Connect.
     * @defaultValue `false`
     */
    connectedOnly?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for Enterprise Server installations returned.
     * @defaultValue `{"direction":"ASC","field":"HOST_NAME"}`
     */
    orderBy?: Maybe<EnterpriseServerInstallationOrder>;
  }) => EnterpriseServerInstallationConnection;
  /**
   * A list of failed invitations in the enterprise.
   */
  failedInvitations: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * The search string to look for.
     */
    query?: Maybe<Scalars["String"]>;
  }) => EnterpriseFailedInvitationConnection;
  /**
   * The setting value for whether the enterprise has an IP allow list enabled.
   */
  ipAllowListEnabledSetting: ScalarsEnums["IpAllowListEnabledSettingValue"];
  /**
   * The IP addresses that are allowed to access resources owned by the enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with admin:enterprise scope.
   */
  ipAllowListEntries: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for IP allow list entries returned.
     * @defaultValue `{"direction":"ASC","field":"ALLOW_LIST_VALUE"}`
     */
    orderBy?: Maybe<IpAllowListEntryOrder>;
  }) => IpAllowListEntryConnection;
  /**
   * The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled.
   */
  ipAllowListForInstalledAppsEnabledSetting: ScalarsEnums["IpAllowListForInstalledAppsEnabledSettingValue"];
  /**
   * Whether or not the base repository permission is currently being updated.
   */
  isUpdatingDefaultRepositoryPermission: ScalarsEnums["Boolean"];
  /**
   * Whether the two-factor authentication requirement is currently being enforced.
   */
  isUpdatingTwoFactorRequirement: ScalarsEnums["Boolean"];
  /**
   * The setting value for whether organization members with admin permissions on a repository can change repository visibility.
   */
  membersCanChangeRepositoryVisibilitySetting: ScalarsEnums["EnterpriseEnabledDisabledSettingValue"];
  /**
   * A list of enterprise organizations configured with the provided can change repository visibility setting value.
   */
  membersCanChangeRepositoryVisibilitySettingOrganizations: (args: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for organizations with this setting.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<OrganizationOrder>;
    /**
     * The setting value to find organizations for.
     */
    value: Scalars["Boolean"];
  }) => OrganizationConnection;
  /**
   * The setting value for whether members of organizations in the enterprise can create internal repositories.
   */
  membersCanCreateInternalRepositoriesSetting?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The setting value for whether members of organizations in the enterprise can create private repositories.
   */
  membersCanCreatePrivateRepositoriesSetting?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The setting value for whether members of organizations in the enterprise can create public repositories.
   */
  membersCanCreatePublicRepositoriesSetting?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The setting value for whether members of organizations in the enterprise can create repositories.
   */
  membersCanCreateRepositoriesSetting?: Maybe<
    ScalarsEnums["EnterpriseMembersCanCreateRepositoriesSettingValue"]
  >;
  /**
   * A list of enterprise organizations configured with the provided repository creation setting value.
   */
  membersCanCreateRepositoriesSettingOrganizations: (args: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for organizations with this setting.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<OrganizationOrder>;
    /**
     * The setting to find organizations for.
     */
    value: OrganizationMembersCanCreateRepositoriesSettingValue;
  }) => OrganizationConnection;
  /**
   * The setting value for whether members with admin permissions for repositories can delete issues.
   */
  membersCanDeleteIssuesSetting: ScalarsEnums["EnterpriseEnabledDisabledSettingValue"];
  /**
   * A list of enterprise organizations configured with the provided members can delete issues setting value.
   */
  membersCanDeleteIssuesSettingOrganizations: (args: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for organizations with this setting.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<OrganizationOrder>;
    /**
     * The setting value to find organizations for.
     */
    value: Scalars["Boolean"];
  }) => OrganizationConnection;
  /**
   * The setting value for whether members with admin permissions for repositories can delete or transfer repositories.
   */
  membersCanDeleteRepositoriesSetting: ScalarsEnums["EnterpriseEnabledDisabledSettingValue"];
  /**
   * A list of enterprise organizations configured with the provided members can delete repositories setting value.
   */
  membersCanDeleteRepositoriesSettingOrganizations: (args: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for organizations with this setting.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<OrganizationOrder>;
    /**
     * The setting value to find organizations for.
     */
    value: Scalars["Boolean"];
  }) => OrganizationConnection;
  /**
   * The setting value for whether members of organizations in the enterprise can invite outside collaborators.
   */
  membersCanInviteCollaboratorsSetting: ScalarsEnums["EnterpriseEnabledDisabledSettingValue"];
  /**
   * A list of enterprise organizations configured with the provided members can invite collaborators setting value.
   */
  membersCanInviteCollaboratorsSettingOrganizations: (args: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for organizations with this setting.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<OrganizationOrder>;
    /**
     * The setting value to find organizations for.
     */
    value: Scalars["Boolean"];
  }) => OrganizationConnection;
  /**
   * Indicates whether members of this enterprise's organizations can purchase additional services for those organizations.
   */
  membersCanMakePurchasesSetting: ScalarsEnums["EnterpriseMembersCanMakePurchasesSettingValue"];
  /**
   * The setting value for whether members with admin permissions for repositories can update protected branches.
   */
  membersCanUpdateProtectedBranchesSetting: ScalarsEnums["EnterpriseEnabledDisabledSettingValue"];
  /**
   * A list of enterprise organizations configured with the provided members can update protected branches setting value.
   */
  membersCanUpdateProtectedBranchesSettingOrganizations: (args: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for organizations with this setting.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<OrganizationOrder>;
    /**
     * The setting value to find organizations for.
     */
    value: Scalars["Boolean"];
  }) => OrganizationConnection;
  /**
   * The setting value for whether members can view dependency insights.
   */
  membersCanViewDependencyInsightsSetting: ScalarsEnums["EnterpriseEnabledDisabledSettingValue"];
  /**
   * A list of enterprise organizations configured with the provided members can view dependency insights setting value.
   */
  membersCanViewDependencyInsightsSettingOrganizations: (args: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for organizations with this setting.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<OrganizationOrder>;
    /**
     * The setting value to find organizations for.
     */
    value: Scalars["Boolean"];
  }) => OrganizationConnection;
  /**
   * Indicates if email notification delivery for this enterprise is restricted to verified or approved domains.
   */
  notificationDeliveryRestrictionEnabledSetting: ScalarsEnums["NotificationRestrictionSettingValue"];
  /**
   * The OIDC Identity Provider for the enterprise.
   */
  oidcProvider?: Maybe<OIDCProvider>;
  /**
   * The setting value for whether organization projects are enabled for organizations in this enterprise.
   */
  organizationProjectsSetting: ScalarsEnums["EnterpriseEnabledDisabledSettingValue"];
  /**
   * A list of enterprise organizations configured with the provided organization projects setting value.
   */
  organizationProjectsSettingOrganizations: (args: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for organizations with this setting.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<OrganizationOrder>;
    /**
     * The setting value to find organizations for.
     */
    value: Scalars["Boolean"];
  }) => OrganizationConnection;
  /**
   * A list of outside collaborators across the repositories in the enterprise.
   */
  outsideCollaborators: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Only return outside collaborators with this two-factor authentication status.
     */
    hasTwoFactorEnabled?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * The login of one specific outside collaborator.
     */
    login?: Maybe<Scalars["String"]>;
    /**
     * Ordering options for outside collaborators returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<EnterpriseMemberOrder>;
    /**
     * Only return outside collaborators within the organizations with these logins
     */
    organizationLogins?: Maybe<Array<Scalars["String"]>>;
    /**
     * The search string to look for.
     */
    query?: Maybe<Scalars["String"]>;
    /**
     * Only return outside collaborators on repositories with this visibility.
     */
    visibility?: Maybe<RepositoryVisibility>;
  }) => EnterpriseOutsideCollaboratorConnection;
  /**
   * A list of pending administrator invitations for the enterprise.
   */
  pendingAdminInvitations: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for pending enterprise administrator invitations returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<EnterpriseAdministratorInvitationOrder>;
    /**
     * The search string to look for.
     */
    query?: Maybe<Scalars["String"]>;
    /**
     * The role to filter by.
     */
    role?: Maybe<EnterpriseAdministratorRole>;
  }) => EnterpriseAdministratorInvitationConnection;
  /**
   * A list of pending collaborator invitations across the repositories in the enterprise.
   */
  pendingCollaboratorInvitations: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for pending repository collaborator invitations returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<RepositoryInvitationOrder>;
    /**
     * The search string to look for.
     */
    query?: Maybe<Scalars["String"]>;
  }) => RepositoryInvitationConnection;
  /**
   * A list of pending member invitations for organizations in the enterprise.
   */
  pendingMemberInvitations: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Only return invitations matching this invitation source
     */
    invitationSource?: Maybe<OrganizationInvitationSource>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Only return invitations within the organizations with these logins
     */
    organizationLogins?: Maybe<Array<Scalars["String"]>>;
    /**
     * The search string to look for.
     */
    query?: Maybe<Scalars["String"]>;
  }) => EnterprisePendingMemberInvitationConnection;
  /**
   * The setting value for whether repository projects are enabled in this enterprise.
   */
  repositoryProjectsSetting: ScalarsEnums["EnterpriseEnabledDisabledSettingValue"];
  /**
   * A list of enterprise organizations configured with the provided repository projects setting value.
   */
  repositoryProjectsSettingOrganizations: (args: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for organizations with this setting.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<OrganizationOrder>;
    /**
     * The setting value to find organizations for.
     */
    value: Scalars["Boolean"];
  }) => OrganizationConnection;
  /**
   * The SAML Identity Provider for the enterprise.
   */
  samlIdentityProvider?: Maybe<EnterpriseIdentityProvider>;
  /**
   * A list of enterprise organizations configured with the SAML single sign-on setting value.
   */
  samlIdentityProviderSettingOrganizations: (args: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for organizations with this setting.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<OrganizationOrder>;
    /**
     * The setting value to find organizations for.
     */
    value: IdentityProviderConfigurationState;
  }) => OrganizationConnection;
  /**
   * A list of members with a support entitlement.
   */
  supportEntitlements: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for support entitlement users returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<EnterpriseMemberOrder>;
  }) => EnterpriseMemberConnection;
  /**
   * The setting value for whether team discussions are enabled for organizations in this enterprise.
   */
  teamDiscussionsSetting: ScalarsEnums["EnterpriseEnabledDisabledSettingValue"];
  /**
   * A list of enterprise organizations configured with the provided team discussions setting value.
   */
  teamDiscussionsSettingOrganizations: (args: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for organizations with this setting.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<OrganizationOrder>;
    /**
     * The setting value to find organizations for.
     */
    value: Scalars["Boolean"];
  }) => OrganizationConnection;
  /**
   * The setting value for whether the enterprise requires two-factor authentication for its organizations and users.
   */
  twoFactorRequiredSetting: ScalarsEnums["EnterpriseEnabledSettingValue"];
  /**
   * A list of enterprise organizations configured with the two-factor authentication setting value.
   */
  twoFactorRequiredSettingOrganizations: (args: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for organizations with this setting.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<OrganizationOrder>;
    /**
     * The setting value to find organizations for.
     */
    value: Scalars["Boolean"];
  }) => OrganizationConnection;
}

/**
 * The connection type for OrganizationInvitation.
 */
export interface EnterprisePendingMemberInvitationConnection {
  __typename?: "EnterprisePendingMemberInvitationConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<EnterprisePendingMemberInvitationEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<OrganizationInvitation>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
  /**
   * Identifies the total count of unique users in the connection.
   */
  totalUniqueUserCount: ScalarsEnums["Int"];
}

/**
 * An invitation to be a member in an enterprise organization.
 */
export interface EnterprisePendingMemberInvitationEdge {
  __typename?: "EnterprisePendingMemberInvitationEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<OrganizationInvitation>;
}

/**
 * A subset of repository information queryable from an enterprise.
 */
export interface EnterpriseRepositoryInfo {
  __typename?: "EnterpriseRepositoryInfo";
  id: ScalarsEnums["ID"];
  /**
   * Identifies if the repository is private or internal.
   */
  isPrivate: ScalarsEnums["Boolean"];
  /**
   * The repository's name.
   */
  name: ScalarsEnums["String"];
  /**
   * The repository's name with owner.
   */
  nameWithOwner: ScalarsEnums["String"];
}

/**
 * The connection type for EnterpriseRepositoryInfo.
 */
export interface EnterpriseRepositoryInfoConnection {
  __typename?: "EnterpriseRepositoryInfoConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<EnterpriseRepositoryInfoEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<EnterpriseRepositoryInfo>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface EnterpriseRepositoryInfoEdge {
  __typename?: "EnterpriseRepositoryInfoEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<EnterpriseRepositoryInfo>;
}

/**
 * An Enterprise Server installation.
 */
export interface EnterpriseServerInstallation {
  __typename?: "EnterpriseServerInstallation";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The customer name to which the Enterprise Server installation belongs.
   */
  customerName: ScalarsEnums["String"];
  /**
   * The host name of the Enterprise Server installation.
   */
  hostName: ScalarsEnums["String"];
  id: ScalarsEnums["ID"];
  /**
   * Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect.
   */
  isConnected: ScalarsEnums["Boolean"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * User accounts on this Enterprise Server installation.
   */
  userAccounts: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for Enterprise Server user accounts returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<EnterpriseServerUserAccountOrder>;
  }) => EnterpriseServerUserAccountConnection;
  /**
   * User accounts uploads for the Enterprise Server installation.
   */
  userAccountsUploads: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for Enterprise Server user accounts uploads returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<EnterpriseServerUserAccountsUploadOrder>;
  }) => EnterpriseServerUserAccountsUploadConnection;
}

/**
 * The connection type for EnterpriseServerInstallation.
 */
export interface EnterpriseServerInstallationConnection {
  __typename?: "EnterpriseServerInstallationConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<EnterpriseServerInstallationEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<EnterpriseServerInstallation>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface EnterpriseServerInstallationEdge {
  __typename?: "EnterpriseServerInstallationEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<EnterpriseServerInstallation>;
}

/**
 * The connection type for EnterpriseServerInstallation.
 */
export interface EnterpriseServerInstallationMembershipConnection {
  __typename?: "EnterpriseServerInstallationMembershipConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<EnterpriseServerInstallationMembershipEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<EnterpriseServerInstallation>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An Enterprise Server installation that a user is a member of.
 */
export interface EnterpriseServerInstallationMembershipEdge {
  __typename?: "EnterpriseServerInstallationMembershipEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<EnterpriseServerInstallation>;
  /**
   * The role of the user in the enterprise membership.
   */
  role: ScalarsEnums["EnterpriseUserAccountMembershipRole"];
}

/**
 * A user account on an Enterprise Server installation.
 */
export interface EnterpriseServerUserAccount {
  __typename?: "EnterpriseServerUserAccount";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * User emails belonging to this user account.
   */
  emails: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for Enterprise Server user account emails returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"EMAIL"}`
     */
    orderBy?: Maybe<EnterpriseServerUserAccountEmailOrder>;
  }) => EnterpriseServerUserAccountEmailConnection;
  /**
   * The Enterprise Server installation on which this user account exists.
   */
  enterpriseServerInstallation: EnterpriseServerInstallation;
  id: ScalarsEnums["ID"];
  /**
   * Whether the user account is a site administrator on the Enterprise Server installation.
   */
  isSiteAdmin: ScalarsEnums["Boolean"];
  /**
   * The login of the user account on the Enterprise Server installation.
   */
  login: ScalarsEnums["String"];
  /**
   * The profile name of the user account on the Enterprise Server installation.
   */
  profileName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The date and time when the user account was created on the Enterprise Server installation.
   */
  remoteCreatedAt: ScalarsEnums["DateTime"];
  /**
   * The ID of the user account on the Enterprise Server installation.
   */
  remoteUserId: ScalarsEnums["Int"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * The connection type for EnterpriseServerUserAccount.
 */
export interface EnterpriseServerUserAccountConnection {
  __typename?: "EnterpriseServerUserAccountConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<EnterpriseServerUserAccountEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<EnterpriseServerUserAccount>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface EnterpriseServerUserAccountEdge {
  __typename?: "EnterpriseServerUserAccountEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<EnterpriseServerUserAccount>;
}

/**
 * An email belonging to a user account on an Enterprise Server installation.
 */
export interface EnterpriseServerUserAccountEmail {
  __typename?: "EnterpriseServerUserAccountEmail";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The email address.
   */
  email: ScalarsEnums["String"];
  id: ScalarsEnums["ID"];
  /**
   * Indicates whether this is the primary email of the associated user account.
   */
  isPrimary: ScalarsEnums["Boolean"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The user account to which the email belongs.
   */
  userAccount: EnterpriseServerUserAccount;
}

/**
 * The connection type for EnterpriseServerUserAccountEmail.
 */
export interface EnterpriseServerUserAccountEmailConnection {
  __typename?: "EnterpriseServerUserAccountEmailConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<EnterpriseServerUserAccountEmailEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<EnterpriseServerUserAccountEmail>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface EnterpriseServerUserAccountEmailEdge {
  __typename?: "EnterpriseServerUserAccountEmailEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<EnterpriseServerUserAccountEmail>;
}

/**
 * A user accounts upload from an Enterprise Server installation.
 */
export interface EnterpriseServerUserAccountsUpload {
  __typename?: "EnterpriseServerUserAccountsUpload";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The enterprise to which this upload belongs.
   */
  enterprise: Enterprise;
  /**
   * The Enterprise Server installation for which this upload was generated.
   */
  enterpriseServerInstallation: EnterpriseServerInstallation;
  id: ScalarsEnums["ID"];
  /**
   * The name of the file uploaded.
   */
  name: ScalarsEnums["String"];
  /**
   * The synchronization state of the upload
   */
  syncState: ScalarsEnums["EnterpriseServerUserAccountsUploadSyncState"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * The connection type for EnterpriseServerUserAccountsUpload.
 */
export interface EnterpriseServerUserAccountsUploadConnection {
  __typename?: "EnterpriseServerUserAccountsUploadConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<EnterpriseServerUserAccountsUploadEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<EnterpriseServerUserAccountsUpload>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface EnterpriseServerUserAccountsUploadEdge {
  __typename?: "EnterpriseServerUserAccountsUploadEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<EnterpriseServerUserAccountsUpload>;
}

/**
 * An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
 */
export interface EnterpriseUserAccount {
  __typename?: "EnterpriseUserAccount";
  /**
   * A URL pointing to the enterprise user account's public avatar.
   */
  avatarUrl: (args?: {
    /**
     * The size of the resulting square image.
     */
    size?: Maybe<Scalars["Int"]>;
  }) => ScalarsEnums["URI"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The enterprise in which this user account exists.
   */
  enterprise: Enterprise;
  /**
   * A list of Enterprise Server installations this user is a member of.
   */
  enterpriseInstallations: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for installations returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"HOST_NAME"}`
     */
    orderBy?: Maybe<EnterpriseServerInstallationOrder>;
    /**
     * The search string to look for.
     */
    query?: Maybe<Scalars["String"]>;
    /**
     * The role of the user in the installation.
     */
    role?: Maybe<EnterpriseUserAccountMembershipRole>;
  }) => EnterpriseServerInstallationMembershipConnection;
  id: ScalarsEnums["ID"];
  /**
   * An identifier for the enterprise user account, a login or email address
   */
  login: ScalarsEnums["String"];
  /**
   * The name of the enterprise user account
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * A list of enterprise organizations this user is a member of.
   */
  organizations: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for organizations returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<OrganizationOrder>;
    /**
     * The search string to look for.
     */
    query?: Maybe<Scalars["String"]>;
    /**
     * The role of the user in the enterprise organization.
     */
    role?: Maybe<EnterpriseUserAccountMembershipRole>;
  }) => EnterpriseOrganizationMembershipConnection;
  /**
   * The HTTP path for this user.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this user.
   */
  url: ScalarsEnums["URI"];
  /**
   * The user within the enterprise.
   */
  user?: Maybe<User>;
}

/**
 * An environment.
 */
export interface Environment {
  __typename?: "Environment";
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
  /**
   * The name of the environment
   */
  name: ScalarsEnums["String"];
  /**
   * The protection rules defined for this environment
   */
  protectionRules: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => DeploymentProtectionRuleConnection;
}

/**
 * The connection type for Environment.
 */
export interface EnvironmentConnection {
  __typename?: "EnvironmentConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<EnvironmentEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Environment>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface EnvironmentEdge {
  __typename?: "EnvironmentEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Environment>;
}

/**
 * An external identity provisioned by SAML SSO or SCIM. If SAML is configured on the organization, the external identity is visible to (1) organization owners, (2) organization owners' personal access tokens (classic) with read:org or admin:org scope, (3) GitHub App with an installation token with read or write access to members. If SAML is configured on the enterprise, the external identity is visible to (1) enterprise owners, (2) enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope.
 */
export interface ExternalIdentity {
  __typename?: "ExternalIdentity";
  /**
   * The GUID for this identity
   */
  guid: ScalarsEnums["String"];
  id: ScalarsEnums["ID"];
  /**
   * Organization invitation for this SCIM-provisioned external identity
   */
  organizationInvitation?: Maybe<OrganizationInvitation>;
  /**
   * SAML Identity attributes
   */
  samlIdentity?: Maybe<ExternalIdentitySamlAttributes>;
  /**
   * SCIM Identity attributes
   */
  scimIdentity?: Maybe<ExternalIdentityScimAttributes>;
  /**
   * User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
   */
  user?: Maybe<User>;
}

/**
 * An attribute for the External Identity attributes collection
 */
export interface ExternalIdentityAttribute {
  __typename?: "ExternalIdentityAttribute";
  /**
   * The attribute metadata as JSON
   */
  metadata?: Maybe<ScalarsEnums["String"]>;
  /**
   * The attribute name
   */
  name: ScalarsEnums["String"];
  /**
   * The attribute value
   */
  value: ScalarsEnums["String"];
}

/**
 * The connection type for ExternalIdentity.
 */
export interface ExternalIdentityConnection {
  __typename?: "ExternalIdentityConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ExternalIdentityEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<ExternalIdentity>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface ExternalIdentityEdge {
  __typename?: "ExternalIdentityEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<ExternalIdentity>;
}

/**
 * SAML attributes for the External Identity
 */
export interface ExternalIdentitySamlAttributes {
  __typename?: "ExternalIdentitySamlAttributes";
  /**
   * SAML Identity attributes
   */
  attributes: Array<ExternalIdentityAttribute>;
  /**
   * The emails associated with the SAML identity
   */
  emails?: Maybe<Array<UserEmailMetadata>>;
  /**
   * Family name of the SAML identity
   */
  familyName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Given name of the SAML identity
   */
  givenName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The groups linked to this identity in IDP
   */
  groups?: Maybe<Array<ScalarsEnums["String"]>>;
  /**
   * The NameID of the SAML identity
   */
  nameId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The userName of the SAML identity
   */
  username?: Maybe<ScalarsEnums["String"]>;
}

/**
 * SCIM attributes for the External Identity
 */
export interface ExternalIdentityScimAttributes {
  __typename?: "ExternalIdentityScimAttributes";
  /**
   * The emails associated with the SCIM identity
   */
  emails?: Maybe<Array<UserEmailMetadata>>;
  /**
   * Family name of the SCIM identity
   */
  familyName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Given name of the SCIM identity
   */
  givenName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The groups linked to this identity in IDP
   */
  groups?: Maybe<Array<ScalarsEnums["String"]>>;
  /**
   * The userName of the SCIM identity
   */
  username?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of FollowOrganization
 */
export interface FollowOrganizationPayload {
  __typename?: "FollowOrganizationPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The organization that was followed.
   */
  organization?: Maybe<Organization>;
}

/**
 * Autogenerated return type of FollowUser
 */
export interface FollowUserPayload {
  __typename?: "FollowUserPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The user that was followed.
   */
  user?: Maybe<User>;
}

/**
 * The connection type for User.
 */
export interface FollowerConnection {
  __typename?: "FollowerConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<User>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * The connection type for User.
 */
export interface FollowingConnection {
  __typename?: "FollowingConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<User>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * A funding platform link for a repository.
 */
export interface FundingLink {
  __typename?: "FundingLink";
  /**
   * The funding platform this link is for.
   */
  platform: ScalarsEnums["FundingPlatform"];
  /**
   * The configured URL for this funding link.
   */
  url: ScalarsEnums["URI"];
}

/**
 * A generic hovercard context with a message and icon
 */
export interface GenericHovercardContext {
  __typename?: "GenericHovercardContext";
  /**
   * A string describing this context
   */
  message: ScalarsEnums["String"];
  /**
   * An octicon to accompany this context
   */
  octicon: ScalarsEnums["String"];
}

/**
 * A Gist.
 */
export interface Gist {
  __typename?: "Gist";
  /**
   * A list of comments associated with the gist
   */
  comments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => GistCommentConnection;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The gist description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The files in this gist.
   */
  files: (args?: {
    /**
     * The maximum number of files to return.
     * @defaultValue `10`
     */
    limit?: Maybe<Scalars["Int"]>;
    /**
     * The oid of the files to return
     */
    oid?: Maybe<Scalars["GitObjectID"]>;
  }) => Maybe<Array<Maybe<GistFile>>>;
  /**
   * A list of forks associated with the gist
   */
  forks: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for gists returned from the connection
     */
    orderBy?: Maybe<GistOrder>;
  }) => GistConnection;
  id: ScalarsEnums["ID"];
  /**
   * Identifies if the gist is a fork.
   */
  isFork: ScalarsEnums["Boolean"];
  /**
   * Whether the gist is public or not.
   */
  isPublic: ScalarsEnums["Boolean"];
  /**
   * The gist name.
   */
  name: ScalarsEnums["String"];
  /**
   * The gist owner.
   */
  owner?: Maybe<RepositoryOwner>;
  /**
   * Identifies when the gist was last pushed to.
   */
  pushedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The HTML path to this resource.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Returns a count of how many stargazers there are on this object
   */
  stargazerCount: ScalarsEnums["Int"];
  /**
   * A list of users who have starred this starrable.
   */
  stargazers: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Order for connection
     */
    orderBy?: Maybe<StarOrder>;
  }) => StargazerConnection;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this Gist.
   */
  url: ScalarsEnums["URI"];
  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: ScalarsEnums["Boolean"];
}

/**
 * Represents a comment on an Gist.
 */
export interface GistComment {
  __typename?: "GistComment";
  /**
   * The actor who authored the comment.
   */
  author?: Maybe<Actor>;
  /**
   * Author's association with the gist.
   */
  authorAssociation: ScalarsEnums["CommentAuthorAssociation"];
  /**
   * Identifies the comment body.
   */
  body: ScalarsEnums["String"];
  /**
   * The body rendered to HTML.
   */
  bodyHTML: ScalarsEnums["HTML"];
  /**
   * The body rendered to text.
   */
  bodyText: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: ScalarsEnums["Boolean"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The actor who edited the comment.
   */
  editor?: Maybe<Actor>;
  /**
   * The associated gist.
   */
  gist: Gist;
  id: ScalarsEnums["ID"];
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: ScalarsEnums["Boolean"];
  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: ScalarsEnums["Boolean"];
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
   */
  minimizedReason?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * A list of edits to this content.
   */
  userContentEdits: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<UserContentEditConnection>;
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: ScalarsEnums["Boolean"];
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<ScalarsEnums["CommentCannotUpdateReason"]>;
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: ScalarsEnums["Boolean"];
}

/**
 * The connection type for GistComment.
 */
export interface GistCommentConnection {
  __typename?: "GistCommentConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<GistCommentEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<GistComment>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface GistCommentEdge {
  __typename?: "GistCommentEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<GistComment>;
}

/**
 * The connection type for Gist.
 */
export interface GistConnection {
  __typename?: "GistConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<GistEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Gist>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface GistEdge {
  __typename?: "GistEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Gist>;
}

/**
 * A file in a gist.
 */
export interface GistFile {
  __typename?: "GistFile";
  /**
   * The file name encoded to remove characters that are invalid in URL paths.
   */
  encodedName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The gist file encoding.
   */
  encoding?: Maybe<ScalarsEnums["String"]>;
  /**
   * The file extension from the file name.
   */
  extension?: Maybe<ScalarsEnums["String"]>;
  /**
   * Indicates if this file is an image.
   */
  isImage: ScalarsEnums["Boolean"];
  /**
   * Whether the file's contents were truncated.
   */
  isTruncated: ScalarsEnums["Boolean"];
  /**
   * The programming language this file is written in.
   */
  language?: Maybe<Language>;
  /**
   * The gist file name.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * The gist file size in bytes.
   */
  size?: Maybe<ScalarsEnums["Int"]>;
  /**
   * UTF8 text data or null if the file is binary
   */
  text: (args?: {
    /**
     * Optionally truncate the returned file to this length.
     */
    truncate?: Maybe<Scalars["Int"]>;
  }) => Maybe<ScalarsEnums["String"]>;
}

/**
 * Represents an actor in a Git commit (ie. an author or committer).
 */
export interface GitActor {
  __typename?: "GitActor";
  /**
   * A URL pointing to the author's public avatar.
   */
  avatarUrl: (args?: {
    /**
     * The size of the resulting square image.
     */
    size?: Maybe<Scalars["Int"]>;
  }) => ScalarsEnums["URI"];
  /**
   * The timestamp of the Git action (authoring or committing).
   */
  date?: Maybe<ScalarsEnums["GitTimestamp"]>;
  /**
   * The email in the Git commit.
   */
  email?: Maybe<ScalarsEnums["String"]>;
  /**
   * The name in the Git commit.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * The GitHub user corresponding to the email field. Null if no such user exists.
   */
  user?: Maybe<User>;
}

/**
 * The connection type for GitActor.
 */
export interface GitActorConnection {
  __typename?: "GitActorConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<GitActorEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<GitActor>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface GitActorEdge {
  __typename?: "GitActorEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<GitActor>;
}

/**
 * Represents information about the GitHub instance.
 */
export interface GitHubMetadata {
  __typename?: "GitHubMetadata";
  /**
   * Returns a String that's a SHA of `github-services`
   */
  gitHubServicesSha: ScalarsEnums["GitObjectID"];
  /**
   * IP addresses that users connect to for git operations
   */
  gitIpAddresses?: Maybe<Array<ScalarsEnums["String"]>>;
  /**
   * IP addresses that GitHub Enterprise Importer uses for outbound connections
   */
  githubEnterpriseImporterIpAddresses?: Maybe<Array<ScalarsEnums["String"]>>;
  /**
   * IP addresses that service hooks are sent from
   */
  hookIpAddresses?: Maybe<Array<ScalarsEnums["String"]>>;
  /**
   * IP addresses that the importer connects from
   */
  importerIpAddresses?: Maybe<Array<ScalarsEnums["String"]>>;
  /**
   * Whether or not users are verified
   */
  isPasswordAuthenticationVerifiable: ScalarsEnums["Boolean"];
  /**
   * IP addresses for GitHub Pages' A records
   */
  pagesIpAddresses?: Maybe<Array<ScalarsEnums["String"]>>;
}

/**
 * Represents a Git object.
 */
export interface GitObject {
  __typename?: "Blob" | "Commit" | "Tag" | "Tree";
  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: ScalarsEnums["String"];
  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this Git object
   */
  commitUrl: ScalarsEnums["URI"];
  id: ScalarsEnums["ID"];
  /**
   * The Git object ID
   */
  oid: ScalarsEnums["GitObjectID"];
  /**
   * The Repository the Git object belongs to
   */
  repository: Repository;
  $on: $GitObject;
}

/**
 * Information about a signature (GPG or S/MIME) on a Commit or Tag.
 */
export interface GitSignature {
  __typename?:
    | "GpgSignature"
    | "SmimeSignature"
    | "SshSignature"
    | "UnknownSignature";
  /**
   * Email used to sign this object.
   */
  email: ScalarsEnums["String"];
  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: ScalarsEnums["Boolean"];
  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: ScalarsEnums["String"];
  /**
   * ASCII-armored signature header from object.
   */
  signature: ScalarsEnums["String"];
  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer?: Maybe<User>;
  /**
   * The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: ScalarsEnums["GitSignatureState"];
  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: ScalarsEnums["Boolean"];
  $on: $GitSignature;
}

/**
 * Represents a GPG signature on a Commit or Tag.
 */
export interface GpgSignature {
  __typename?: "GpgSignature";
  /**
   * Email used to sign this object.
   */
  email: ScalarsEnums["String"];
  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: ScalarsEnums["Boolean"];
  /**
   * Hex-encoded ID of the key that signed this object.
   */
  keyId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: ScalarsEnums["String"];
  /**
   * ASCII-armored signature header from object.
   */
  signature: ScalarsEnums["String"];
  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer?: Maybe<User>;
  /**
   * The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: ScalarsEnums["GitSignatureState"];
  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: ScalarsEnums["Boolean"];
}

/**
 * Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole
 */
export interface GrantEnterpriseOrganizationsMigratorRolePayload {
  __typename?: "GrantEnterpriseOrganizationsMigratorRolePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The organizations that had the migrator role applied to for the given user.
   */
  organizations: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<OrganizationConnection>;
}

/**
 * Autogenerated return type of GrantMigratorRole
 */
export interface GrantMigratorRolePayload {
  __typename?: "GrantMigratorRolePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Did the operation succeed?
   */
  success?: Maybe<ScalarsEnums["Boolean"]>;
}

/**
 * Represents a 'head_ref_deleted' event on a given pull request.
 */
export interface HeadRefDeletedEvent {
  __typename?: "HeadRefDeletedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the Ref associated with the `head_ref_deleted` event.
   */
  headRef?: Maybe<Ref>;
  /**
   * Identifies the name of the Ref associated with the `head_ref_deleted` event.
   */
  headRefName: ScalarsEnums["String"];
  id: ScalarsEnums["ID"];
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
}

/**
 * Represents a 'head_ref_force_pushed' event on a given pull request.
 */
export interface HeadRefForcePushedEvent {
  __typename?: "HeadRefForcePushedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the after commit SHA for the 'head_ref_force_pushed' event.
   */
  afterCommit?: Maybe<Commit>;
  /**
   * Identifies the before commit SHA for the 'head_ref_force_pushed' event.
   */
  beforeCommit?: Maybe<Commit>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
  /**
   * Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.
   */
  ref?: Maybe<Ref>;
}

/**
 * Represents a 'head_ref_restored' event on a given pull request.
 */
export interface HeadRefRestoredEvent {
  __typename?: "HeadRefRestoredEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
}

/**
 * Detail needed to display a hovercard for a user
 */
export interface Hovercard {
  __typename?: "Hovercard";
  /**
   * Each of the contexts for this hovercard
   */
  contexts: Array<HovercardContext>;
}

/**
 * An individual line of a hovercard
 */
export interface HovercardContext {
  __typename?:
    | "GenericHovercardContext"
    | "OrganizationTeamsHovercardContext"
    | "OrganizationsHovercardContext"
    | "ReviewStatusHovercardContext"
    | "ViewerHovercardContext";
  /**
   * A string describing this context
   */
  message: ScalarsEnums["String"];
  /**
   * An octicon to accompany this context
   */
  octicon: ScalarsEnums["String"];
  $on: $HovercardContext;
}

/**
 * Autogenerated return type of InviteEnterpriseAdmin
 */
export interface InviteEnterpriseAdminPayload {
  __typename?: "InviteEnterpriseAdminPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The created enterprise administrator invitation.
   */
  invitation?: Maybe<EnterpriseAdministratorInvitation>;
}

/**
 * An IP address or range of addresses that is allowed to access an owner's resources.
 */
export interface IpAllowListEntry {
  __typename?: "IpAllowListEntry";
  /**
   * A single IP address or range of IP addresses in CIDR notation.
   */
  allowListValue: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Whether the entry is currently active.
   */
  isActive: ScalarsEnums["Boolean"];
  /**
   * The name of the IP allow list entry.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * The owner of the IP allow list entry.
   */
  owner: IpAllowListOwner;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * The connection type for IpAllowListEntry.
 */
export interface IpAllowListEntryConnection {
  __typename?: "IpAllowListEntryConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<IpAllowListEntryEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<IpAllowListEntry>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface IpAllowListEntryEdge {
  __typename?: "IpAllowListEntryEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<IpAllowListEntry>;
}

/**
 * Types that can own an IP allow list.
 */
export interface IpAllowListOwner {
  __typename?: "App" | "Enterprise" | "Organization";
  $on: $IpAllowListOwner;
}

/**
 * An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
 */
export interface Issue {
  __typename?: "Issue";
  /**
   * Reason that the conversation was locked.
   */
  activeLockReason?: Maybe<ScalarsEnums["LockReason"]>;
  /**
   * A list of Users assigned to this object.
   */
  assignees: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => UserConnection;
  /**
   * The actor who authored the comment.
   */
  author?: Maybe<Actor>;
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: ScalarsEnums["CommentAuthorAssociation"];
  /**
   * Identifies the body of the issue.
   */
  body: ScalarsEnums["String"];
  /**
   * The body rendered to HTML.
   */
  bodyHTML: ScalarsEnums["HTML"];
  /**
   * The http path for this issue body
   */
  bodyResourcePath: ScalarsEnums["URI"];
  /**
   * Identifies the body of the issue rendered to text.
   */
  bodyText: ScalarsEnums["String"];
  /**
   * The http URL for this issue body
   */
  bodyUrl: ScalarsEnums["URI"];
  /**
   * Indicates if the object is closed (definition of closed may depend on type)
   */
  closed: ScalarsEnums["Boolean"];
  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * A list of comments associated with the Issue.
   */
  comments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for issue comments returned from the connection.
     */
    orderBy?: Maybe<IssueCommentOrder>;
  }) => IssueCommentConnection;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: ScalarsEnums["Boolean"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The actor who edited the comment.
   */
  editor?: Maybe<Actor>;
  /**
   * Identifies the primary key from the database as a BigInt.
   */
  fullDatabaseId?: Maybe<ScalarsEnums["BigInt"]>;
  /**
   * The hovercard information for this issue
   */
  hovercard: (args?: {
    /**
     * Whether or not to include notification contexts
     * @defaultValue `true`
     */
    includeNotificationContexts?: Maybe<Scalars["Boolean"]>;
  }) => Hovercard;
  id: ScalarsEnums["ID"];
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: ScalarsEnums["Boolean"];
  /**
   * Indicates whether or not this issue is currently pinned to the repository issues list
   */
  isPinned?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Is this issue read by the viewer
   */
  isReadByViewer?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * A list of labels associated with the object.
   */
  labels: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for labels returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<LabelOrder>;
  }) => Maybe<LabelConnection>;
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Branches linked to this issue.
   */
  linkedBranches: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => LinkedBranchConnection;
  /**
   * `true` if the object is locked
   */
  locked: ScalarsEnums["Boolean"];
  /**
   * Identifies the milestone associated with the issue.
   */
  milestone?: Maybe<Milestone>;
  /**
   * Identifies the issue number.
   */
  number: ScalarsEnums["Int"];
  /**
   * A list of Users that are participating in the Issue conversation.
   */
  participants: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => UserConnection;
  /**
   * List of project cards associated with this issue.
   */
  projectCards: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * A list of archived states to filter the cards by
     * @defaultValue `["ARCHIVED","NOT_ARCHIVED"]`
     */
    archivedStates?: Maybe<Array<Maybe<ProjectCardArchivedState>>>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => ProjectCardConnection;
  /**
   * List of project items associated with this issue.
   */
  projectItems: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Include archived items.
     * @defaultValue `true`
     */
    includeArchived?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => ProjectV2ItemConnection;
  /**
   * Find a project by number.
   */
  projectV2: (args: {
    /**
     * The project number.
     */
    number: Scalars["Int"];
  }) => Maybe<ProjectV2>;
  /**
   * A list of projects under the owner.
   */
  projectsV2: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * How to order the returned projects.
     * @defaultValue `{"direction":"DESC","field":"NUMBER"}`
     */
    orderBy?: Maybe<ProjectV2Order>;
    /**
     * A project to search for under the the owner.
     */
    query?: Maybe<Scalars["String"]>;
  }) => ProjectV2Connection;
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Maybe<Array<ReactionGroup>>;
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Allows filtering Reactions by emoji.
     */
    content?: Maybe<ReactionContent>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Allows specifying the order in which reactions are returned.
     */
    orderBy?: Maybe<ReactionOrder>;
  }) => ReactionConnection;
  /**
   * The repository associated with this node.
   */
  repository: Repository;
  /**
   * The HTTP path for this issue
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Identifies the state of the issue.
   */
  state: ScalarsEnums["IssueState"];
  /**
   * Identifies the reason for the issue state.
   */
  stateReason?: Maybe<ScalarsEnums["IssueStateReason"]>;
  /**
   * A list of events, comments, commits, etc. associated with the issue.
   * @deprecated `timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.
   */
  timeline: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Allows filtering timeline events by a `since` timestamp.
     */
    since?: Maybe<Scalars["DateTime"]>;
  }) => IssueTimelineConnection;
  /**
   * A list of events, comments, commits, etc. associated with the issue.
   */
  timelineItems: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Filter timeline items by type.
     */
    itemTypes?: Maybe<Array<IssueTimelineItemsItemType>>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter timeline items by a `since` timestamp.
     */
    since?: Maybe<Scalars["DateTime"]>;
    /**
     * Skips the first _n_ elements in the list.
     */
    skip?: Maybe<Scalars["Int"]>;
  }) => IssueTimelineItemsConnection;
  /**
   * Identifies the issue title.
   */
  title: ScalarsEnums["String"];
  /**
   * Identifies the issue title rendered to HTML.
   */
  titleHTML: ScalarsEnums["String"];
  /**
   * A list of issues that track this issue
   */
  trackedInIssues: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => IssueConnection;
  /**
   * A list of issues tracked inside the current issue
   */
  trackedIssues: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => IssueConnection;
  /**
   * The number of tracked issues for this issue
   */
  trackedIssuesCount: (args?: {
    /**
     * Limit the count to tracked issues with the specified states.
     */
    states?: Maybe<Array<Maybe<TrackedIssueStates>>>;
  }) => ScalarsEnums["Int"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this issue
   */
  url: ScalarsEnums["URI"];
  /**
   * A list of edits to this content.
   */
  userContentEdits: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<UserContentEditConnection>;
  /**
   * Indicates if the object can be closed by the viewer.
   */
  viewerCanClose: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: ScalarsEnums["Boolean"];
  /**
   * Can user react to this subject
   */
  viewerCanReact: ScalarsEnums["Boolean"];
  /**
   * Indicates if the object can be reopened by the viewer.
   */
  viewerCanReopen: ScalarsEnums["Boolean"];
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: ScalarsEnums["Boolean"];
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<ScalarsEnums["CommentCannotUpdateReason"]>;
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: ScalarsEnums["Boolean"];
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: Maybe<ScalarsEnums["SubscriptionState"]>;
  /**
   * Identifies the viewer's thread subscription form action.
   */
  viewerThreadSubscriptionFormAction?: Maybe<
    ScalarsEnums["ThreadSubscriptionFormAction"]
  >;
  /**
   * Identifies the viewer's thread subscription status.
   */
  viewerThreadSubscriptionStatus?: Maybe<
    ScalarsEnums["ThreadSubscriptionState"]
  >;
}

/**
 * Represents a comment on an Issue.
 */
export interface IssueComment {
  __typename?: "IssueComment";
  /**
   * The actor who authored the comment.
   */
  author?: Maybe<Actor>;
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: ScalarsEnums["CommentAuthorAssociation"];
  /**
   * The body as Markdown.
   */
  body: ScalarsEnums["String"];
  /**
   * The body rendered to HTML.
   */
  bodyHTML: ScalarsEnums["HTML"];
  /**
   * The body rendered to text.
   */
  bodyText: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: ScalarsEnums["Boolean"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The actor who edited the comment.
   */
  editor?: Maybe<Actor>;
  /**
   * Identifies the primary key from the database as a BigInt.
   */
  fullDatabaseId?: Maybe<ScalarsEnums["BigInt"]>;
  id: ScalarsEnums["ID"];
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: ScalarsEnums["Boolean"];
  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: ScalarsEnums["Boolean"];
  /**
   * Identifies the issue associated with the comment.
   */
  issue: Issue;
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
   */
  minimizedReason?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Returns the pull request associated with the comment, if this comment was made on a
   * pull request.
   */
  pullRequest?: Maybe<PullRequest>;
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Maybe<Array<ReactionGroup>>;
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Allows filtering Reactions by emoji.
     */
    content?: Maybe<ReactionContent>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Allows specifying the order in which reactions are returned.
     */
    orderBy?: Maybe<ReactionOrder>;
  }) => ReactionConnection;
  /**
   * The repository associated with this node.
   */
  repository: Repository;
  /**
   * The HTTP path for this issue comment
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this issue comment
   */
  url: ScalarsEnums["URI"];
  /**
   * A list of edits to this content.
   */
  userContentEdits: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<UserContentEditConnection>;
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: ScalarsEnums["Boolean"];
  /**
   * Can user react to this subject
   */
  viewerCanReact: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: ScalarsEnums["Boolean"];
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<ScalarsEnums["CommentCannotUpdateReason"]>;
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: ScalarsEnums["Boolean"];
}

/**
 * The connection type for IssueComment.
 */
export interface IssueCommentConnection {
  __typename?: "IssueCommentConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<IssueCommentEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<IssueComment>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface IssueCommentEdge {
  __typename?: "IssueCommentEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<IssueComment>;
}

/**
 * The connection type for Issue.
 */
export interface IssueConnection {
  __typename?: "IssueConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<IssueEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Issue>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * This aggregates issues opened by a user within one repository.
 */
export interface IssueContributionsByRepository {
  __typename?: "IssueContributionsByRepository";
  /**
   * The issue contributions.
   */
  contributions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for contributions returned from the connection.
     * @defaultValue `{"direction":"DESC"}`
     */
    orderBy?: Maybe<ContributionOrder>;
  }) => CreatedIssueContributionConnection;
  /**
   * The repository in which the issues were opened.
   */
  repository: Repository;
}

/**
 * An edge in a connection.
 */
export interface IssueEdge {
  __typename?: "IssueEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Issue>;
}

/**
 * Used for return value of Repository.issueOrPullRequest.
 */
export interface IssueOrPullRequest {
  __typename?: "Issue" | "PullRequest";
  $on: $IssueOrPullRequest;
}

/**
 * A repository issue template.
 */
export interface IssueTemplate {
  __typename?: "IssueTemplate";
  /**
   * The template purpose.
   */
  about?: Maybe<ScalarsEnums["String"]>;
  /**
   * The suggested assignees.
   */
  assignees: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => UserConnection;
  /**
   * The suggested issue body.
   */
  body?: Maybe<ScalarsEnums["String"]>;
  /**
   * The template filename.
   */
  filename: ScalarsEnums["String"];
  /**
   * The suggested issue labels
   */
  labels: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for labels returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<LabelOrder>;
  }) => Maybe<LabelConnection>;
  /**
   * The template name.
   */
  name: ScalarsEnums["String"];
  /**
   * The suggested issue title.
   */
  title?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The connection type for IssueTimelineItem.
 */
export interface IssueTimelineConnection {
  __typename?: "IssueTimelineConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<IssueTimelineItemEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<IssueTimelineItem>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An item in an issue timeline
 */
export interface IssueTimelineItem {
  __typename?:
    | "AssignedEvent"
    | "ClosedEvent"
    | "Commit"
    | "CrossReferencedEvent"
    | "DemilestonedEvent"
    | "IssueComment"
    | "LabeledEvent"
    | "LockedEvent"
    | "MilestonedEvent"
    | "ReferencedEvent"
    | "RenamedTitleEvent"
    | "ReopenedEvent"
    | "SubscribedEvent"
    | "TransferredEvent"
    | "UnassignedEvent"
    | "UnlabeledEvent"
    | "UnlockedEvent"
    | "UnsubscribedEvent"
    | "UserBlockedEvent";
  $on: $IssueTimelineItem;
}

/**
 * An edge in a connection.
 */
export interface IssueTimelineItemEdge {
  __typename?: "IssueTimelineItemEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<IssueTimelineItem>;
}

/**
 * An item in an issue timeline
 */
export interface IssueTimelineItems {
  __typename?:
    | "AddedToProjectEvent"
    | "AssignedEvent"
    | "ClosedEvent"
    | "CommentDeletedEvent"
    | "ConnectedEvent"
    | "ConvertedNoteToIssueEvent"
    | "ConvertedToDiscussionEvent"
    | "CrossReferencedEvent"
    | "DemilestonedEvent"
    | "DisconnectedEvent"
    | "IssueComment"
    | "LabeledEvent"
    | "LockedEvent"
    | "MarkedAsDuplicateEvent"
    | "MentionedEvent"
    | "MilestonedEvent"
    | "MovedColumnsInProjectEvent"
    | "PinnedEvent"
    | "ReferencedEvent"
    | "RemovedFromProjectEvent"
    | "RenamedTitleEvent"
    | "ReopenedEvent"
    | "SubscribedEvent"
    | "TransferredEvent"
    | "UnassignedEvent"
    | "UnlabeledEvent"
    | "UnlockedEvent"
    | "UnmarkedAsDuplicateEvent"
    | "UnpinnedEvent"
    | "UnsubscribedEvent"
    | "UserBlockedEvent";
  $on: $IssueTimelineItems;
}

/**
 * The connection type for IssueTimelineItems.
 */
export interface IssueTimelineItemsConnection {
  __typename?: "IssueTimelineItemsConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<IssueTimelineItemsEdge>>>;
  /**
   * Identifies the count of items after applying `before` and `after` filters.
   */
  filteredCount: ScalarsEnums["Int"];
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<IssueTimelineItems>>>;
  /**
   * Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
   */
  pageCount: ScalarsEnums["Int"];
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
  /**
   * Identifies the date and time when the timeline was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * An edge in a connection.
 */
export interface IssueTimelineItemsEdge {
  __typename?: "IssueTimelineItemsEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<IssueTimelineItems>;
}

/**
 * Represents a user signing up for a GitHub account.
 */
export interface JoinedGitHubContribution {
  __typename?: "JoinedGitHubContribution";
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: ScalarsEnums["Boolean"];
  /**
   * When this contribution was made.
   */
  occurredAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this contribution.
   */
  url: ScalarsEnums["URI"];
  /**
   * The user who made this contribution.
   */
  user: User;
}

/**
 * A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
 */
export interface Label {
  __typename?: "Label";
  /**
   * Identifies the label color.
   */
  color: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the label was created.
   */
  createdAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * A brief description of this label.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  id: ScalarsEnums["ID"];
  /**
   * Indicates whether or not this is a default label.
   */
  isDefault: ScalarsEnums["Boolean"];
  /**
   * A list of issues associated with this label.
   */
  issues: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Filtering options for issues returned from the connection.
     */
    filterBy?: Maybe<IssueFilters>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * A list of label names to filter the pull requests by.
     */
    labels?: Maybe<Array<Scalars["String"]>>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for issues returned from the connection.
     */
    orderBy?: Maybe<IssueOrder>;
    /**
     * A list of states to filter the issues by.
     */
    states?: Maybe<Array<IssueState>>;
  }) => IssueConnection;
  /**
   * Identifies the label name.
   */
  name: ScalarsEnums["String"];
  /**
   * A list of pull requests associated with this label.
   */
  pullRequests: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * The base ref name to filter the pull requests by.
     */
    baseRefName?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The head ref name to filter the pull requests by.
     */
    headRefName?: Maybe<Scalars["String"]>;
    /**
     * A list of label names to filter the pull requests by.
     */
    labels?: Maybe<Array<Scalars["String"]>>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for pull requests returned from the connection.
     */
    orderBy?: Maybe<IssueOrder>;
    /**
     * A list of states to filter the pull requests by.
     */
    states?: Maybe<Array<PullRequestState>>;
  }) => PullRequestConnection;
  /**
   * The repository associated with this label.
   */
  repository: Repository;
  /**
   * The HTTP path for this label.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Identifies the date and time when the label was last updated.
   */
  updatedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The HTTP URL for this label.
   */
  url: ScalarsEnums["URI"];
}

/**
 * The connection type for Label.
 */
export interface LabelConnection {
  __typename?: "LabelConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<LabelEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Label>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface LabelEdge {
  __typename?: "LabelEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Label>;
}

/**
 * An object that can have labels assigned to it.
 */
export interface Labelable {
  __typename?: "Discussion" | "Issue" | "PullRequest";
  /**
   * A list of labels associated with the object.
   */
  labels: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for labels returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<LabelOrder>;
  }) => Maybe<LabelConnection>;
  $on: $Labelable;
}

/**
 * Represents a 'labeled' event on a given issue or pull request.
 */
export interface LabeledEvent {
  __typename?: "LabeledEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Identifies the label associated with the 'labeled' event.
   */
  label: Label;
  /**
   * Identifies the `Labelable` associated with the event.
   */
  labelable: Labelable;
}

/**
 * Represents a given language found in repositories.
 */
export interface Language {
  __typename?: "Language";
  /**
   * The color defined for the current language.
   */
  color?: Maybe<ScalarsEnums["String"]>;
  id: ScalarsEnums["ID"];
  /**
   * The name of the current language.
   */
  name: ScalarsEnums["String"];
}

/**
 * A list of languages associated with the parent.
 */
export interface LanguageConnection {
  __typename?: "LanguageConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<LanguageEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Language>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
  /**
   * The total size in bytes of files written in that language.
   */
  totalSize: ScalarsEnums["Int"];
}

/**
 * Represents the language of a repository.
 */
export interface LanguageEdge {
  __typename?: "LanguageEdge";
  cursor: ScalarsEnums["String"];
  node: Language;
  /**
   * The number of bytes of code written in the language.
   */
  size: ScalarsEnums["Int"];
}

/**
 * A repository's open source license
 */
export interface License {
  __typename?: "License";
  /**
   * The full text of the license
   */
  body: ScalarsEnums["String"];
  /**
   * The conditions set by the license
   */
  conditions: Array<Maybe<LicenseRule>>;
  /**
   * A human-readable description of the license
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether the license should be featured
   */
  featured: ScalarsEnums["Boolean"];
  /**
   * Whether the license should be displayed in license pickers
   */
  hidden: ScalarsEnums["Boolean"];
  id: ScalarsEnums["ID"];
  /**
   * Instructions on how to implement the license
   */
  implementation?: Maybe<ScalarsEnums["String"]>;
  /**
   * The lowercased SPDX ID of the license
   */
  key: ScalarsEnums["String"];
  /**
   * The limitations set by the license
   */
  limitations: Array<Maybe<LicenseRule>>;
  /**
   * The license full name specified by <https://spdx.org/licenses>
   */
  name: ScalarsEnums["String"];
  /**
   * Customary short name if applicable (e.g, GPLv3)
   */
  nickname?: Maybe<ScalarsEnums["String"]>;
  /**
   * The permissions set by the license
   */
  permissions: Array<Maybe<LicenseRule>>;
  /**
   * Whether the license is a pseudo-license placeholder (e.g., other, no-license)
   */
  pseudoLicense: ScalarsEnums["Boolean"];
  /**
   * Short identifier specified by <https://spdx.org/licenses>
   */
  spdxId?: Maybe<ScalarsEnums["String"]>;
  /**
   * URL to the license on <https://choosealicense.com>
   */
  url?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Describes a License's conditions, permissions, and limitations
 */
export interface LicenseRule {
  __typename?: "LicenseRule";
  /**
   * A description of the rule
   */
  description: ScalarsEnums["String"];
  /**
   * The machine-readable rule key
   */
  key: ScalarsEnums["String"];
  /**
   * The human-readable rule label
   */
  label: ScalarsEnums["String"];
}

/**
 * Autogenerated return type of LinkProjectV2ToRepository
 */
export interface LinkProjectV2ToRepositoryPayload {
  __typename?: "LinkProjectV2ToRepositoryPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The repository the project is linked to.
   */
  repository?: Maybe<Repository>;
}

/**
 * Autogenerated return type of LinkProjectV2ToTeam
 */
export interface LinkProjectV2ToTeamPayload {
  __typename?: "LinkProjectV2ToTeamPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The team the project is linked to
   */
  team?: Maybe<Team>;
}

/**
 * Autogenerated return type of LinkRepositoryToProject
 */
export interface LinkRepositoryToProjectPayload {
  __typename?: "LinkRepositoryToProjectPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The linked Project.
   */
  project?: Maybe<Project>;
  /**
   * The linked Repository.
   */
  repository?: Maybe<Repository>;
}

/**
 * A branch linked to an issue.
 */
export interface LinkedBranch {
  __typename?: "LinkedBranch";
  id: ScalarsEnums["ID"];
  /**
   * The branch's ref.
   */
  ref?: Maybe<Ref>;
}

/**
 * The connection type for LinkedBranch.
 */
export interface LinkedBranchConnection {
  __typename?: "LinkedBranchConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<LinkedBranchEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<LinkedBranch>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface LinkedBranchEdge {
  __typename?: "LinkedBranchEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<LinkedBranch>;
}

/**
 * Autogenerated return type of LockLockable
 */
export interface LockLockablePayload {
  __typename?: "LockLockablePayload";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item that was locked.
   */
  lockedRecord?: Maybe<Lockable>;
}

/**
 * An object that can be locked.
 */
export interface Lockable {
  __typename?: "Discussion" | "Issue" | "PullRequest";
  /**
   * Reason that the conversation was locked.
   */
  activeLockReason?: Maybe<ScalarsEnums["LockReason"]>;
  /**
   * `true` if the object is locked
   */
  locked: ScalarsEnums["Boolean"];
  $on: $Lockable;
}

/**
 * Represents a 'locked' event on a given issue or pull request.
 */
export interface LockedEvent {
  __typename?: "LockedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Reason that the conversation was locked (optional).
   */
  lockReason?: Maybe<ScalarsEnums["LockReason"]>;
  /**
   * Object that was locked.
   */
  lockable: Lockable;
}

/**
 * A placeholder user for attribution of imported data on GitHub.
 */
export interface Mannequin {
  __typename?: "Mannequin";
  /**
   * A URL pointing to the GitHub App's public avatar.
   */
  avatarUrl: (args?: {
    /**
     * The size of the resulting square image.
     */
    size?: Maybe<Scalars["Int"]>;
  }) => ScalarsEnums["URI"];
  /**
   * The user that has claimed the data attributed to this mannequin.
   */
  claimant?: Maybe<User>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The mannequin's email on the source instance.
   */
  email?: Maybe<ScalarsEnums["String"]>;
  id: ScalarsEnums["ID"];
  /**
   * The username of the actor.
   */
  login: ScalarsEnums["String"];
  /**
   * The HTML path to this resource.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The URL to this resource.
   */
  url: ScalarsEnums["URI"];
}

/**
 * The connection type for Mannequin.
 */
export interface MannequinConnection {
  __typename?: "MannequinConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<MannequinEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Mannequin>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * Represents a mannequin.
 */
export interface MannequinEdge {
  __typename?: "MannequinEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Mannequin>;
}

/**
 * Autogenerated return type of MarkDiscussionCommentAsAnswer
 */
export interface MarkDiscussionCommentAsAnswerPayload {
  __typename?: "MarkDiscussionCommentAsAnswerPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The discussion that includes the chosen comment.
   */
  discussion?: Maybe<Discussion>;
}

/**
 * Autogenerated return type of MarkFileAsViewed
 */
export interface MarkFileAsViewedPayload {
  __typename?: "MarkFileAsViewedPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated pull request.
   */
  pullRequest?: Maybe<PullRequest>;
}

/**
 * Autogenerated return type of MarkNotificationAsDone
 */
export interface MarkNotificationAsDonePayload {
  __typename?: "MarkNotificationAsDonePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Did the operation succeed?
   */
  success?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The user that the notification belongs to.
   */
  viewer?: Maybe<User>;
}

/**
 * Autogenerated return type of MarkNotificationAsRead
 */
export interface MarkNotificationAsReadPayload {
  __typename?: "MarkNotificationAsReadPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Did the operation succeed?
   */
  success?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The user that the notification belongs to.
   */
  viewer?: Maybe<User>;
}

/**
 * Autogenerated return type of MarkNotificationAsUndone
 */
export interface MarkNotificationAsUndonePayload {
  __typename?: "MarkNotificationAsUndonePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Did the operation succeed?
   */
  success?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The user that the notification belongs to.
   */
  viewer?: Maybe<User>;
}

/**
 * Autogenerated return type of MarkNotificationAsUnread
 */
export interface MarkNotificationAsUnreadPayload {
  __typename?: "MarkNotificationAsUnreadPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Did the operation succeed?
   */
  success?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The user that the notification belongs to.
   */
  viewer?: Maybe<User>;
}

/**
 * Autogenerated return type of MarkNotificationSubjectAsRead
 */
export interface MarkNotificationSubjectAsReadPayload {
  __typename?: "MarkNotificationSubjectAsReadPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Did the operation succeed?
   */
  success?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The user that the saved notification belongs to.
   */
  viewer?: Maybe<User>;
}

/**
 * Autogenerated return type of MarkNotificationsAsDone
 */
export interface MarkNotificationsAsDonePayload {
  __typename?: "MarkNotificationsAsDonePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Did the operation succeed?
   */
  success?: Maybe<ScalarsEnums["Boolean"]>;
}

/**
 * Autogenerated return type of MarkNotificationsAsRead
 */
export interface MarkNotificationsAsReadPayload {
  __typename?: "MarkNotificationsAsReadPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Did the operation succeed?
   */
  success?: Maybe<ScalarsEnums["Boolean"]>;
}

/**
 * Autogenerated return type of MarkNotificationsAsUndone
 */
export interface MarkNotificationsAsUndonePayload {
  __typename?: "MarkNotificationsAsUndonePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Did the operation succeed?
   */
  success?: Maybe<ScalarsEnums["Boolean"]>;
}

/**
 * Autogenerated return type of MarkNotificationsAsUnread
 */
export interface MarkNotificationsAsUnreadPayload {
  __typename?: "MarkNotificationsAsUnreadPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Did the operation succeed?
   */
  success?: Maybe<ScalarsEnums["Boolean"]>;
}

/**
 * Autogenerated return type of MarkProjectV2AsTemplate
 */
export interface MarkProjectV2AsTemplatePayload {
  __typename?: "MarkProjectV2AsTemplatePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The project.
   */
  projectV2?: Maybe<ProjectV2>;
}

/**
 * Autogenerated return type of MarkPullRequestReadyForReview
 */
export interface MarkPullRequestReadyForReviewPayload {
  __typename?: "MarkPullRequestReadyForReviewPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The pull request that is ready for review.
   */
  pullRequest?: Maybe<PullRequest>;
}

/**
 * Represents a 'marked_as_duplicate' event on a given issue or pull request.
 */
export interface MarkedAsDuplicateEvent {
  __typename?: "MarkedAsDuplicateEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * The authoritative issue or pull request which has been duplicated by another.
   */
  canonical?: Maybe<IssueOrPullRequest>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The issue or pull request which has been marked as a duplicate of another.
   */
  duplicate?: Maybe<IssueOrPullRequest>;
  id: ScalarsEnums["ID"];
  /**
   * Canonical and duplicate belong to different repositories.
   */
  isCrossRepository: ScalarsEnums["Boolean"];
}

/**
 * A public description of a Marketplace category.
 */
export interface MarketplaceCategory {
  __typename?: "MarketplaceCategory";
  /**
   * The category's description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The technical description of how apps listed in this category work with GitHub.
   */
  howItWorks?: Maybe<ScalarsEnums["String"]>;
  id: ScalarsEnums["ID"];
  /**
   * The category's name.
   */
  name: ScalarsEnums["String"];
  /**
   * How many Marketplace listings have this as their primary category.
   */
  primaryListingCount: ScalarsEnums["Int"];
  /**
   * The HTTP path for this Marketplace category.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * How many Marketplace listings have this as their secondary category.
   */
  secondaryListingCount: ScalarsEnums["Int"];
  /**
   * The short name of the category used in its URL.
   */
  slug: ScalarsEnums["String"];
  /**
   * The HTTP URL for this Marketplace category.
   */
  url: ScalarsEnums["URI"];
}

/**
 * A listing in the GitHub integration marketplace.
 */
export interface MarketplaceListing {
  __typename?: "MarketplaceListing";
  /**
   * The GitHub App this listing represents.
   */
  app?: Maybe<App>;
  /**
   * URL to the listing owner's company site.
   */
  companyUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP path for configuring access to the listing's integration or OAuth app
   */
  configurationResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for configuring access to the listing's integration or OAuth app
   */
  configurationUrl: ScalarsEnums["URI"];
  /**
   * URL to the listing's documentation.
   */
  documentationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The listing's detailed description.
   */
  extendedDescription?: Maybe<ScalarsEnums["String"]>;
  /**
   * The listing's detailed description rendered to HTML.
   */
  extendedDescriptionHTML: ScalarsEnums["HTML"];
  /**
   * The listing's introductory description.
   */
  fullDescription: ScalarsEnums["String"];
  /**
   * The listing's introductory description rendered to HTML.
   */
  fullDescriptionHTML: ScalarsEnums["HTML"];
  /**
   * Does this listing have any plans with a free trial?
   */
  hasPublishedFreeTrialPlans: ScalarsEnums["Boolean"];
  /**
   * Does this listing have a terms of service link?
   */
  hasTermsOfService: ScalarsEnums["Boolean"];
  /**
   * Whether the creator of the app is a verified org
   */
  hasVerifiedOwner: ScalarsEnums["Boolean"];
  /**
   * A technical description of how this app works with GitHub.
   */
  howItWorks?: Maybe<ScalarsEnums["String"]>;
  /**
   * The listing's technical description rendered to HTML.
   */
  howItWorksHTML: ScalarsEnums["HTML"];
  id: ScalarsEnums["ID"];
  /**
   * URL to install the product to the viewer's account or organization.
   */
  installationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * Whether this listing's app has been installed for the current viewer
   */
  installedForViewer: ScalarsEnums["Boolean"];
  /**
   * Whether this listing has been removed from the Marketplace.
   */
  isArchived: ScalarsEnums["Boolean"];
  /**
   * Whether this listing is still an editable draft that has not been submitted for review and is not publicly visible in the Marketplace.
   */
  isDraft: ScalarsEnums["Boolean"];
  /**
   * Whether the product this listing represents is available as part of a paid plan.
   */
  isPaid: ScalarsEnums["Boolean"];
  /**
   * Whether this listing has been approved for display in the Marketplace.
   */
  isPublic: ScalarsEnums["Boolean"];
  /**
   * Whether this listing has been rejected by GitHub for display in the Marketplace.
   */
  isRejected: ScalarsEnums["Boolean"];
  /**
   * Whether this listing has been approved for unverified display in the Marketplace.
   */
  isUnverified: ScalarsEnums["Boolean"];
  /**
   * Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace.
   */
  isUnverifiedPending: ScalarsEnums["Boolean"];
  /**
   * Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
   */
  isVerificationPendingFromDraft: ScalarsEnums["Boolean"];
  /**
   * Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
   */
  isVerificationPendingFromUnverified: ScalarsEnums["Boolean"];
  /**
   * Whether this listing has been approved for verified display in the Marketplace.
   */
  isVerified: ScalarsEnums["Boolean"];
  /**
   * The hex color code, without the leading '#', for the logo background.
   */
  logoBackgroundColor: ScalarsEnums["String"];
  /**
   * URL for the listing's logo image.
   */
  logoUrl: (args?: {
    /**
     * The size in pixels of the resulting square image.
     * @defaultValue `400`
     */
    size?: Maybe<Scalars["Int"]>;
  }) => Maybe<ScalarsEnums["URI"]>;
  /**
   * The listing's full name.
   */
  name: ScalarsEnums["String"];
  /**
   * The listing's very short description without a trailing period or ampersands.
   */
  normalizedShortDescription: ScalarsEnums["String"];
  /**
   * URL to the listing's detailed pricing.
   */
  pricingUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The category that best describes the listing.
   */
  primaryCategory: MarketplaceCategory;
  /**
   * URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL.
   */
  privacyPolicyUrl: ScalarsEnums["URI"];
  /**
   * The HTTP path for the Marketplace listing.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The URLs for the listing's screenshots.
   */
  screenshotUrls: Array<Maybe<ScalarsEnums["String"]>>;
  /**
   * An alternate category that describes the listing.
   */
  secondaryCategory?: Maybe<MarketplaceCategory>;
  /**
   * The listing's very short description.
   */
  shortDescription: ScalarsEnums["String"];
  /**
   * The short name of the listing used in its URL.
   */
  slug: ScalarsEnums["String"];
  /**
   * URL to the listing's status page.
   */
  statusUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * An email address for support for this listing's app.
   */
  supportEmail?: Maybe<ScalarsEnums["String"]>;
  /**
   * Either a URL or an email address for support for this listing's app, may return an empty string for listings that do not require a support URL.
   */
  supportUrl: ScalarsEnums["URI"];
  /**
   * URL to the listing's terms of service.
   */
  termsOfServiceUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the Marketplace listing.
   */
  url: ScalarsEnums["URI"];
  /**
   * Can the current viewer add plans for this Marketplace listing.
   */
  viewerCanAddPlans: ScalarsEnums["Boolean"];
  /**
   * Can the current viewer approve this Marketplace listing.
   */
  viewerCanApprove: ScalarsEnums["Boolean"];
  /**
   * Can the current viewer delist this Marketplace listing.
   */
  viewerCanDelist: ScalarsEnums["Boolean"];
  /**
   * Can the current viewer edit this Marketplace listing.
   */
  viewerCanEdit: ScalarsEnums["Boolean"];
  /**
   * Can the current viewer edit the primary and secondary category of this
   * Marketplace listing.
   */
  viewerCanEditCategories: ScalarsEnums["Boolean"];
  /**
   * Can the current viewer edit the plans for this Marketplace listing.
   */
  viewerCanEditPlans: ScalarsEnums["Boolean"];
  /**
   * Can the current viewer return this Marketplace listing to draft state
   * so it becomes editable again.
   */
  viewerCanRedraft: ScalarsEnums["Boolean"];
  /**
   * Can the current viewer reject this Marketplace listing by returning it to
   * an editable draft state or rejecting it entirely.
   */
  viewerCanReject: ScalarsEnums["Boolean"];
  /**
   * Can the current viewer request this listing be reviewed for display in
   * the Marketplace as verified.
   */
  viewerCanRequestApproval: ScalarsEnums["Boolean"];
  /**
   * Indicates whether the current user has an active subscription to this Marketplace listing.
   */
  viewerHasPurchased: ScalarsEnums["Boolean"];
  /**
   * Indicates if the current user has purchased a subscription to this Marketplace listing
   * for all of the organizations the user owns.
   */
  viewerHasPurchasedForAllOrganizations: ScalarsEnums["Boolean"];
  /**
   * Does the current viewer role allow them to administer this Marketplace listing.
   */
  viewerIsListingAdmin: ScalarsEnums["Boolean"];
}

/**
 * Look up Marketplace Listings
 */
export interface MarketplaceListingConnection {
  __typename?: "MarketplaceListingConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<MarketplaceListingEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<MarketplaceListing>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface MarketplaceListingEdge {
  __typename?: "MarketplaceListingEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<MarketplaceListing>;
}

/**
 * Entities that have members who can set status messages.
 */
export interface MemberStatusable {
  __typename?: "Organization" | "Team";
  /**
   * Get the status messages members of this entity have set that are either public or visible only to the organization.
   */
  memberStatuses: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for user statuses returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"UPDATED_AT"}`
     */
    orderBy?: Maybe<UserStatusOrder>;
  }) => UserStatusConnection;
  $on: $MemberStatusable;
}

/**
 * Audit log entry for a members_can_delete_repos.clear event.
 */
export interface MembersCanDeleteReposClearAuditEntry {
  __typename?: "MembersCanDeleteReposClearAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The slug of the enterprise.
   */
  enterpriseSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl?: Maybe<ScalarsEnums["URI"]>;
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a members_can_delete_repos.disable event.
 */
export interface MembersCanDeleteReposDisableAuditEntry {
  __typename?: "MembersCanDeleteReposDisableAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The slug of the enterprise.
   */
  enterpriseSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl?: Maybe<ScalarsEnums["URI"]>;
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a members_can_delete_repos.enable event.
 */
export interface MembersCanDeleteReposEnableAuditEntry {
  __typename?: "MembersCanDeleteReposEnableAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The slug of the enterprise.
   */
  enterpriseSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl?: Maybe<ScalarsEnums["URI"]>;
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Represents a 'mentioned' event on a given issue or pull request.
 */
export interface MentionedEvent {
  __typename?: "MentionedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
}

/**
 * Autogenerated return type of MergeBranch
 */
export interface MergeBranchPayload {
  __typename?: "MergeBranchPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The resulting merge Commit.
   */
  mergeCommit?: Maybe<Commit>;
}

/**
 * Autogenerated return type of MergePullRequest
 */
export interface MergePullRequestPayload {
  __typename?: "MergePullRequestPayload";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The pull request that was merged.
   */
  pullRequest?: Maybe<PullRequest>;
}

/**
 * The queue of pull request entries to be merged into a protected branch in a repository.
 */
export interface MergeQueue {
  __typename?: "MergeQueue";
  /**
   * The configuration for this merge queue
   */
  configuration?: Maybe<MergeQueueConfiguration>;
  /**
   * The entries in the queue
   */
  entries: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<MergeQueueEntryConnection>;
  id: ScalarsEnums["ID"];
  /**
   * The estimated time in seconds until a newly added entry would be merged
   */
  nextEntryEstimatedTimeToMerge?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The repository this merge queue belongs to
   */
  repository?: Maybe<Repository>;
  /**
   * The HTTP path for this merge queue
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this merge queue
   */
  url: ScalarsEnums["URI"];
}

/**
 * Configuration for a MergeQueue
 */
export interface MergeQueueConfiguration {
  __typename?: "MergeQueueConfiguration";
  /**
   * The amount of time in minutes to wait for a check response before considering it a failure.
   */
  checkResponseTimeout?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The maximum number of entries to build at once.
   */
  maximumEntriesToBuild?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The maximum number of entries to merge at once.
   */
  maximumEntriesToMerge?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The merge method to use for this queue.
   */
  mergeMethod?: Maybe<ScalarsEnums["PullRequestMergeMethod"]>;
  /**
   * The strategy to use when merging entries.
   */
  mergingStrategy?: Maybe<ScalarsEnums["MergeQueueMergingStrategy"]>;
  /**
   * The minimum number of entries required to merge at once.
   */
  minimumEntriesToMerge?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The amount of time in minutes to wait before ignoring the minumum number of entries in the queue requirement and merging a collection of entries
   */
  minimumEntriesToMergeWaitTime?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * Entries in a MergeQueue
 */
export interface MergeQueueEntry {
  __typename?: "MergeQueueEntry";
  /**
   * The base commit for this entry
   */
  baseCommit?: Maybe<Commit>;
  /**
   * The date and time this entry was added to the merge queue
   */
  enqueuedAt: ScalarsEnums["DateTime"];
  /**
   * The actor that enqueued this entry
   */
  enqueuer: Actor;
  /**
   * The estimated time in seconds until this entry will be merged
   */
  estimatedTimeToMerge?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The head commit for this entry
   */
  headCommit?: Maybe<Commit>;
  id: ScalarsEnums["ID"];
  /**
   * Whether this pull request should jump the queue
   */
  jump: ScalarsEnums["Boolean"];
  /**
   * The merge queue that this entry belongs to
   */
  mergeQueue?: Maybe<MergeQueue>;
  /**
   * The position of this entry in the queue
   */
  position: ScalarsEnums["Int"];
  /**
   * The pull request that will be added to a merge group
   */
  pullRequest?: Maybe<PullRequest>;
  /**
   * Does this pull request need to be deployed on its own
   */
  solo: ScalarsEnums["Boolean"];
  /**
   * The state of this entry in the queue
   */
  state: ScalarsEnums["MergeQueueEntryState"];
}

/**
 * The connection type for MergeQueueEntry.
 */
export interface MergeQueueEntryConnection {
  __typename?: "MergeQueueEntryConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<MergeQueueEntryEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<MergeQueueEntry>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface MergeQueueEntryEdge {
  __typename?: "MergeQueueEntryEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<MergeQueueEntry>;
}

/**
 * Represents a 'merged' event on a given pull request.
 */
export interface MergedEvent {
  __typename?: "MergedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the commit associated with the `merge` event.
   */
  commit?: Maybe<Commit>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Identifies the Ref associated with the `merge` event.
   */
  mergeRef?: Maybe<Ref>;
  /**
   * Identifies the name of the Ref associated with the `merge` event.
   */
  mergeRefName: ScalarsEnums["String"];
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
  /**
   * The HTTP path for this merged event.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this merged event.
   */
  url: ScalarsEnums["URI"];
}

/**
 * Represents a GitHub Enterprise Importer (GEI) migration.
 */
export interface Migration {
  __typename?: "RepositoryMigration";
  /**
   * The migration flag to continue on error.
   */
  continueOnError: ScalarsEnums["Boolean"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The reason the migration failed.
   */
  failureReason?: Maybe<ScalarsEnums["String"]>;
  id: ScalarsEnums["ID"];
  /**
   * The URL for the migration log (expires 1 day after migration completes).
   */
  migrationLogUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The migration source.
   */
  migrationSource: MigrationSource;
  /**
   * The target repository name.
   */
  repositoryName: ScalarsEnums["String"];
  /**
   * The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
   */
  sourceUrl: ScalarsEnums["URI"];
  /**
   * The migration state.
   */
  state: ScalarsEnums["MigrationState"];
  /**
   * The number of warnings encountered for this migration. To review the warnings, check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
   */
  warningsCount: ScalarsEnums["Int"];
  $on: $Migration;
}

/**
 * A GitHub Enterprise Importer (GEI) migration source.
 */
export interface MigrationSource {
  __typename?: "MigrationSource";
  id: ScalarsEnums["ID"];
  /**
   * The migration source name.
   */
  name: ScalarsEnums["String"];
  /**
   * The migration source type.
   */
  type: ScalarsEnums["MigrationSourceType"];
  /**
   * The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
   */
  url: ScalarsEnums["URI"];
}

/**
 * Represents a Milestone object on a given repository.
 */
export interface Milestone {
  __typename?: "Milestone";
  /**
   * Indicates if the object is closed (definition of closed may depend on type)
   */
  closed: ScalarsEnums["Boolean"];
  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the actor who created the milestone.
   */
  creator?: Maybe<Actor>;
  /**
   * Identifies the description of the milestone.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies the due date of the milestone.
   */
  dueOn?: Maybe<ScalarsEnums["DateTime"]>;
  id: ScalarsEnums["ID"];
  /**
   * A list of issues associated with the milestone.
   */
  issues: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Filtering options for issues returned from the connection.
     */
    filterBy?: Maybe<IssueFilters>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * A list of label names to filter the pull requests by.
     */
    labels?: Maybe<Array<Scalars["String"]>>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for issues returned from the connection.
     */
    orderBy?: Maybe<IssueOrder>;
    /**
     * A list of states to filter the issues by.
     */
    states?: Maybe<Array<IssueState>>;
  }) => IssueConnection;
  /**
   * Identifies the number of the milestone.
   */
  number: ScalarsEnums["Int"];
  /**
   * Identifies the percentage complete for the milestone
   */
  progressPercentage: ScalarsEnums["Float"];
  /**
   * A list of pull requests associated with the milestone.
   */
  pullRequests: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * The base ref name to filter the pull requests by.
     */
    baseRefName?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The head ref name to filter the pull requests by.
     */
    headRefName?: Maybe<Scalars["String"]>;
    /**
     * A list of label names to filter the pull requests by.
     */
    labels?: Maybe<Array<Scalars["String"]>>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for pull requests returned from the connection.
     */
    orderBy?: Maybe<IssueOrder>;
    /**
     * A list of states to filter the pull requests by.
     */
    states?: Maybe<Array<PullRequestState>>;
  }) => PullRequestConnection;
  /**
   * The repository associated with this milestone.
   */
  repository: Repository;
  /**
   * The HTTP path for this milestone
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Identifies the state of the milestone.
   */
  state: ScalarsEnums["MilestoneState"];
  /**
   * Identifies the title of the milestone.
   */
  title: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this milestone
   */
  url: ScalarsEnums["URI"];
  /**
   * Indicates if the object can be closed by the viewer.
   */
  viewerCanClose: ScalarsEnums["Boolean"];
  /**
   * Indicates if the object can be reopened by the viewer.
   */
  viewerCanReopen: ScalarsEnums["Boolean"];
}

/**
 * The connection type for Milestone.
 */
export interface MilestoneConnection {
  __typename?: "MilestoneConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<MilestoneEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Milestone>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface MilestoneEdge {
  __typename?: "MilestoneEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Milestone>;
}

/**
 * Types that can be inside a Milestone.
 */
export interface MilestoneItem {
  __typename?: "Issue" | "PullRequest";
  $on: $MilestoneItem;
}

/**
 * Represents a 'milestoned' event on a given issue or pull request.
 */
export interface MilestonedEvent {
  __typename?: "MilestonedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Identifies the milestone title associated with the 'milestoned' event.
   */
  milestoneTitle: ScalarsEnums["String"];
  /**
   * Object referenced by event.
   */
  subject: MilestoneItem;
}

/**
 * Entities that can be minimized.
 */
export interface Minimizable {
  __typename?:
    | "CommitComment"
    | "DiscussionComment"
    | "GistComment"
    | "IssueComment"
    | "PullRequestReview"
    | "PullRequestReviewComment";
  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: ScalarsEnums["Boolean"];
  /**
   * Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
   */
  minimizedReason?: Maybe<ScalarsEnums["String"]>;
  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: ScalarsEnums["Boolean"];
  $on: $Minimizable;
}

/**
 * Autogenerated return type of MinimizeComment
 */
export interface MinimizeCommentPayload {
  __typename?: "MinimizeCommentPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The comment that was minimized.
   */
  minimizedComment?: Maybe<Minimizable>;
}

/**
 * Autogenerated return type of MoveProjectCard
 */
export interface MoveProjectCardPayload {
  __typename?: "MoveProjectCardPayload";
  /**
   * The new edge of the moved card.
   */
  cardEdge?: Maybe<ProjectCardEdge>;
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of MoveProjectColumn
 */
export interface MoveProjectColumnPayload {
  __typename?: "MoveProjectColumnPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The new edge of the moved column.
   */
  columnEdge?: Maybe<ProjectColumnEdge>;
}

/**
 * Represents a 'moved_columns_in_project' event on a given issue or pull request.
 */
export interface MovedColumnsInProjectEvent {
  __typename?: "MovedColumnsInProjectEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
}

/**
 * An object with an ID.
 */
export interface Node {
  __typename?:
    | "AddedToMergeQueueEvent"
    | "AddedToProjectEvent"
    | "App"
    | "AssignedEvent"
    | "AutoMergeDisabledEvent"
    | "AutoMergeEnabledEvent"
    | "AutoRebaseEnabledEvent"
    | "AutoSquashEnabledEvent"
    | "AutomaticBaseChangeFailedEvent"
    | "AutomaticBaseChangeSucceededEvent"
    | "BaseRefChangedEvent"
    | "BaseRefDeletedEvent"
    | "BaseRefForcePushedEvent"
    | "Blob"
    | "Bot"
    | "BranchProtectionRule"
    | "BypassForcePushAllowance"
    | "BypassPullRequestAllowance"
    | "CWE"
    | "CheckRun"
    | "CheckSuite"
    | "ClosedEvent"
    | "CodeOfConduct"
    | "CommentDeletedEvent"
    | "Commit"
    | "CommitComment"
    | "CommitCommentThread"
    | "Comparison"
    | "ConnectedEvent"
    | "ConvertToDraftEvent"
    | "ConvertedNoteToIssueEvent"
    | "ConvertedToDiscussionEvent"
    | "CrossReferencedEvent"
    | "DemilestonedEvent"
    | "DeployKey"
    | "DeployedEvent"
    | "Deployment"
    | "DeploymentEnvironmentChangedEvent"
    | "DeploymentReview"
    | "DeploymentStatus"
    | "DisconnectedEvent"
    | "Discussion"
    | "DiscussionCategory"
    | "DiscussionComment"
    | "DiscussionPoll"
    | "DiscussionPollOption"
    | "DraftIssue"
    | "Enterprise"
    | "EnterpriseAdministratorInvitation"
    | "EnterpriseIdentityProvider"
    | "EnterpriseRepositoryInfo"
    | "EnterpriseServerInstallation"
    | "EnterpriseServerUserAccount"
    | "EnterpriseServerUserAccountEmail"
    | "EnterpriseServerUserAccountsUpload"
    | "EnterpriseUserAccount"
    | "Environment"
    | "ExternalIdentity"
    | "Gist"
    | "GistComment"
    | "HeadRefDeletedEvent"
    | "HeadRefForcePushedEvent"
    | "HeadRefRestoredEvent"
    | "IpAllowListEntry"
    | "Issue"
    | "IssueComment"
    | "Label"
    | "LabeledEvent"
    | "Language"
    | "License"
    | "LinkedBranch"
    | "LockedEvent"
    | "Mannequin"
    | "MarkedAsDuplicateEvent"
    | "MarketplaceCategory"
    | "MarketplaceListing"
    | "MembersCanDeleteReposClearAuditEntry"
    | "MembersCanDeleteReposDisableAuditEntry"
    | "MembersCanDeleteReposEnableAuditEntry"
    | "MentionedEvent"
    | "MergeQueue"
    | "MergeQueueEntry"
    | "MergedEvent"
    | "MigrationSource"
    | "Milestone"
    | "MilestonedEvent"
    | "MovedColumnsInProjectEvent"
    | "NotificationThread"
    | "OIDCProvider"
    | "OauthApplicationCreateAuditEntry"
    | "OrgAddBillingManagerAuditEntry"
    | "OrgAddMemberAuditEntry"
    | "OrgBlockUserAuditEntry"
    | "OrgConfigDisableCollaboratorsOnlyAuditEntry"
    | "OrgConfigEnableCollaboratorsOnlyAuditEntry"
    | "OrgCreateAuditEntry"
    | "OrgDisableOauthAppRestrictionsAuditEntry"
    | "OrgDisableSamlAuditEntry"
    | "OrgDisableTwoFactorRequirementAuditEntry"
    | "OrgEnableOauthAppRestrictionsAuditEntry"
    | "OrgEnableSamlAuditEntry"
    | "OrgEnableTwoFactorRequirementAuditEntry"
    | "OrgInviteMemberAuditEntry"
    | "OrgInviteToBusinessAuditEntry"
    | "OrgOauthAppAccessApprovedAuditEntry"
    | "OrgOauthAppAccessBlockedAuditEntry"
    | "OrgOauthAppAccessDeniedAuditEntry"
    | "OrgOauthAppAccessRequestedAuditEntry"
    | "OrgOauthAppAccessUnblockedAuditEntry"
    | "OrgRemoveBillingManagerAuditEntry"
    | "OrgRemoveMemberAuditEntry"
    | "OrgRemoveOutsideCollaboratorAuditEntry"
    | "OrgRestoreMemberAuditEntry"
    | "OrgUnblockUserAuditEntry"
    | "OrgUpdateDefaultRepositoryPermissionAuditEntry"
    | "OrgUpdateMemberAuditEntry"
    | "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
    | "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
    | "Organization"
    | "OrganizationIdentityProvider"
    | "OrganizationInvitation"
    | "OrganizationMigration"
    | "Package"
    | "PackageFile"
    | "PackageTag"
    | "PackageVersion"
    | "PinnedDiscussion"
    | "PinnedEvent"
    | "PinnedIssue"
    | "PrivateRepositoryForkingDisableAuditEntry"
    | "PrivateRepositoryForkingEnableAuditEntry"
    | "Project"
    | "ProjectCard"
    | "ProjectColumn"
    | "ProjectV2"
    | "ProjectV2Field"
    | "ProjectV2Item"
    | "ProjectV2ItemFieldDateValue"
    | "ProjectV2ItemFieldIterationValue"
    | "ProjectV2ItemFieldNumberValue"
    | "ProjectV2ItemFieldSingleSelectValue"
    | "ProjectV2ItemFieldTextValue"
    | "ProjectV2IterationField"
    | "ProjectV2SingleSelectField"
    | "ProjectV2View"
    | "ProjectV2Workflow"
    | "PublicKey"
    | "PullRequest"
    | "PullRequestCommit"
    | "PullRequestCommitCommentThread"
    | "PullRequestReview"
    | "PullRequestReviewComment"
    | "PullRequestReviewThread"
    | "PullRequestThread"
    | "Push"
    | "PushAllowance"
    | "Reaction"
    | "ReadyForReviewEvent"
    | "Ref"
    | "ReferencedEvent"
    | "Release"
    | "ReleaseAsset"
    | "RemovedFromMergeQueueEvent"
    | "RemovedFromProjectEvent"
    | "RenamedTitleEvent"
    | "ReopenedEvent"
    | "RepoAccessAuditEntry"
    | "RepoAddMemberAuditEntry"
    | "RepoAddTopicAuditEntry"
    | "RepoArchivedAuditEntry"
    | "RepoChangeMergeSettingAuditEntry"
    | "RepoConfigDisableAnonymousGitAccessAuditEntry"
    | "RepoConfigDisableCollaboratorsOnlyAuditEntry"
    | "RepoConfigDisableContributorsOnlyAuditEntry"
    | "RepoConfigDisableSockpuppetDisallowedAuditEntry"
    | "RepoConfigEnableAnonymousGitAccessAuditEntry"
    | "RepoConfigEnableCollaboratorsOnlyAuditEntry"
    | "RepoConfigEnableContributorsOnlyAuditEntry"
    | "RepoConfigEnableSockpuppetDisallowedAuditEntry"
    | "RepoConfigLockAnonymousGitAccessAuditEntry"
    | "RepoConfigUnlockAnonymousGitAccessAuditEntry"
    | "RepoCreateAuditEntry"
    | "RepoDestroyAuditEntry"
    | "RepoRemoveMemberAuditEntry"
    | "RepoRemoveTopicAuditEntry"
    | "Repository"
    | "RepositoryDependabotAlertsThread"
    | "RepositoryInvitation"
    | "RepositoryMigration"
    | "RepositoryRule"
    | "RepositoryRuleset"
    | "RepositoryRulesetBypassActor"
    | "RepositoryTopic"
    | "RepositoryVisibilityChangeDisableAuditEntry"
    | "RepositoryVisibilityChangeEnableAuditEntry"
    | "RepositoryVulnerabilityAlert"
    | "ReviewDismissalAllowance"
    | "ReviewDismissedEvent"
    | "ReviewRequest"
    | "ReviewRequestRemovedEvent"
    | "ReviewRequestedEvent"
    | "SavedReply"
    | "SecurityAdvisory"
    | "SponsorsActivity"
    | "SponsorsListing"
    | "SponsorsListingFeaturedItem"
    | "SponsorsTier"
    | "Sponsorship"
    | "SponsorshipNewsletter"
    | "Status"
    | "StatusCheckRollup"
    | "StatusContext"
    | "SubscribedEvent"
    | "Tag"
    | "Team"
    | "TeamAddMemberAuditEntry"
    | "TeamAddRepositoryAuditEntry"
    | "TeamChangeParentTeamAuditEntry"
    | "TeamDiscussion"
    | "TeamDiscussionComment"
    | "TeamRemoveMemberAuditEntry"
    | "TeamRemoveRepositoryAuditEntry"
    | "Topic"
    | "TransferredEvent"
    | "Tree"
    | "UnassignedEvent"
    | "UnlabeledEvent"
    | "UnlockedEvent"
    | "UnmarkedAsDuplicateEvent"
    | "UnpinnedEvent"
    | "UnsubscribedEvent"
    | "User"
    | "UserBlockedEvent"
    | "UserContentEdit"
    | "UserStatus"
    | "VerifiableDomain"
    | "Workflow"
    | "WorkflowRun"
    | "WorkflowRunFile";
  /**
   * ID of the object.
   */
  id: ScalarsEnums["ID"];
  $on: $Node;
}

/**
 * Represents a notification thread for the viewer.
 */
export interface NotificationThread {
  __typename?: "NotificationThread";
  id: ScalarsEnums["ID"];
  /**
   * Archived state of the notification.
   */
  isArchived: ScalarsEnums["Boolean"];
  /**
   * Done state of the notification.
   */
  isDone: ScalarsEnums["Boolean"];
  /**
   * Whether a notification has been saved
   */
  isSaved: ScalarsEnums["Boolean"];
  /**
   * Whether a notification has been starred
   */
  isStarred: ScalarsEnums["Boolean"];
  /**
   * Unread state of the notification.
   */
  isUnread: ScalarsEnums["Boolean"];
  /**
   * The last time that notifications were read for this thread.
   */
  lastReadAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The last time that notifications were updated for this thread.
   */
  lastSummarizedAt: ScalarsEnums["DateTime"];
  /**
   * The last time that a notification was received on this thread for the current user
   */
  lastUpdatedAt: ScalarsEnums["DateTime"];
  /**
   * The notification's list.
   */
  list: NotificationsList;
  /**
   * The notification's list id
   */
  listId: ScalarsEnums["String"];
  /**
   * The notification's list type
   */
  listType: ScalarsEnums["String"];
  /**
   * The oldest unread author internal anchor
   */
  oldestUnreadItemAnchor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The reason a notification was received.
   */
  reason?: Maybe<ScalarsEnums["NotificationReason"]>;
  /**
   * The last 3 recent participants.
   */
  recentParticipants: Array<User>;
  /**
   * The notification's subject.
   */
  subject: NotificationsSubject;
  /**
   * Subscription status for the thread
   */
  subscriptionStatus: ScalarsEnums["NotificationThreadSubscriptionState"];
  /**
   * The notification's rollup summary id
   */
  summaryId: ScalarsEnums["String"];
  /**
   * The author of the item being used to summarize the thread.
   */
  summaryItemAuthor?: Maybe<User>;
  /**
   * The body text of the item being used to summarize the thread.
   */
  summaryItemBody?: Maybe<ScalarsEnums["String"]>;
  /**
   * The notification's thread id
   */
  threadId: ScalarsEnums["String"];
  /**
   * The notification's thread type
   */
  threadType: ScalarsEnums["String"];
  /**
   * The notification's title
   */
  title: ScalarsEnums["String"];
  /**
   * The number of unread items.
   */
  unreadItemsCount: ScalarsEnums["Int"];
  /**
   * The HTTP URL for the notification thread's subject
   */
  url: ScalarsEnums["URI"];
}

/**
 * A list of notification threads.
 */
export interface NotificationThreadConnection {
  __typename?: "NotificationThreadConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<NotificationThreadEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<NotificationThread>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface NotificationThreadEdge {
  __typename?: "NotificationThreadEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<NotificationThread>;
}

/**
 * The parent object that the notification thread's subject belongs to.
 */
export interface NotificationsList {
  __typename?: "Organization" | "Repository" | "Team" | "User";
  $on: $NotificationsList;
}

/**
 * The notification's subject.
 */
export interface NotificationsSubject {
  __typename?:
    | "CheckSuite"
    | "Commit"
    | "Discussion"
    | "Gist"
    | "Issue"
    | "PullRequest"
    | "Release"
    | "RepositoryDependabotAlertsThread"
    | "RepositoryInvitation"
    | "RepositoryVulnerabilityAlert"
    | "SecurityAdvisory"
    | "TeamDiscussion"
    | "WorkflowRun";
  $on: $NotificationsSubject;
}

/**
 * An OIDC identity provider configured to provision identities for an enterprise. Visible to enterprise owners or enterprise owners' personal access tokens (classic) with read:enterprise or admin:enterprise scope.
 */
export interface OIDCProvider {
  __typename?: "OIDCProvider";
  /**
   * The enterprise this identity provider belongs to.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * ExternalIdentities provisioned by this identity provider.
   */
  externalIdentities: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter to external identities with the users login
     */
    login?: Maybe<Scalars["String"]>;
    /**
     * Filter to external identities with valid org membership only
     */
    membersOnly?: Maybe<Scalars["Boolean"]>;
    /**
     * Filter to external identities with the users userName/NameID attribute
     */
    userName?: Maybe<Scalars["String"]>;
  }) => ExternalIdentityConnection;
  id: ScalarsEnums["ID"];
  /**
   * The OIDC identity provider type
   */
  providerType: ScalarsEnums["OIDCProviderType"];
  /**
   * The id of the tenant this provider is attached to
   */
  tenantId: ScalarsEnums["String"];
}

/**
 * Metadata for an audit entry with action oauth_application.*
 */
export interface OauthApplicationAuditEntryData {
  __typename?:
    | "OauthApplicationCreateAuditEntry"
    | "OrgOauthAppAccessApprovedAuditEntry"
    | "OrgOauthAppAccessBlockedAuditEntry"
    | "OrgOauthAppAccessDeniedAuditEntry"
    | "OrgOauthAppAccessRequestedAuditEntry"
    | "OrgOauthAppAccessUnblockedAuditEntry";
  /**
   * The name of the OAuth application.
   */
  oauthApplicationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the OAuth application
   */
  oauthApplicationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the OAuth application
   */
  oauthApplicationUrl?: Maybe<ScalarsEnums["URI"]>;
  $on: $OauthApplicationAuditEntryData;
}

/**
 * Audit log entry for a oauth_application.create event.
 */
export interface OauthApplicationCreateAuditEntry {
  __typename?: "OauthApplicationCreateAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The application URL of the OAuth application.
   */
  applicationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The callback URL of the OAuth application.
   */
  callbackUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The name of the OAuth application.
   */
  oauthApplicationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the OAuth application
   */
  oauthApplicationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the OAuth application
   */
  oauthApplicationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The rate limit of the OAuth application.
   */
  rateLimit?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The state of the OAuth application.
   */
  state?: Maybe<ScalarsEnums["OauthApplicationCreateAuditEntryState"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.add_billing_manager
 */
export interface OrgAddBillingManagerAuditEntry {
  __typename?: "OrgAddBillingManagerAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The email address used to invite a billing manager for the organization.
   */
  invitationEmail?: Maybe<ScalarsEnums["String"]>;
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.add_member
 */
export interface OrgAddMemberAuditEntry {
  __typename?: "OrgAddMemberAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The permission level of the member added to the organization.
   */
  permission?: Maybe<ScalarsEnums["OrgAddMemberAuditEntryPermission"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.block_user
 */
export interface OrgBlockUserAuditEntry {
  __typename?: "OrgBlockUserAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The blocked user.
   */
  blockedUser?: Maybe<User>;
  /**
   * The username of the blocked user.
   */
  blockedUserName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the blocked user.
   */
  blockedUserResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the blocked user.
   */
  blockedUserUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.config.disable_collaborators_only event.
 */
export interface OrgConfigDisableCollaboratorsOnlyAuditEntry {
  __typename?: "OrgConfigDisableCollaboratorsOnlyAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.config.enable_collaborators_only event.
 */
export interface OrgConfigEnableCollaboratorsOnlyAuditEntry {
  __typename?: "OrgConfigEnableCollaboratorsOnlyAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.create event.
 */
export interface OrgCreateAuditEntry {
  __typename?: "OrgCreateAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The billing plan for the Organization.
   */
  billingPlan?: Maybe<ScalarsEnums["OrgCreateAuditEntryBillingPlan"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.disable_oauth_app_restrictions event.
 */
export interface OrgDisableOauthAppRestrictionsAuditEntry {
  __typename?: "OrgDisableOauthAppRestrictionsAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.disable_saml event.
 */
export interface OrgDisableSamlAuditEntry {
  __typename?: "OrgDisableSamlAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  /**
   * The SAML provider's digest algorithm URL.
   */
  digestMethodUrl?: Maybe<ScalarsEnums["URI"]>;
  id: ScalarsEnums["ID"];
  /**
   * The SAML provider's issuer URL.
   */
  issuerUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The SAML provider's signature algorithm URL.
   */
  signatureMethodUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The SAML provider's single sign-on URL.
   */
  singleSignOnUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.disable_two_factor_requirement event.
 */
export interface OrgDisableTwoFactorRequirementAuditEntry {
  __typename?: "OrgDisableTwoFactorRequirementAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.enable_oauth_app_restrictions event.
 */
export interface OrgEnableOauthAppRestrictionsAuditEntry {
  __typename?: "OrgEnableOauthAppRestrictionsAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.enable_saml event.
 */
export interface OrgEnableSamlAuditEntry {
  __typename?: "OrgEnableSamlAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  /**
   * The SAML provider's digest algorithm URL.
   */
  digestMethodUrl?: Maybe<ScalarsEnums["URI"]>;
  id: ScalarsEnums["ID"];
  /**
   * The SAML provider's issuer URL.
   */
  issuerUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The SAML provider's signature algorithm URL.
   */
  signatureMethodUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The SAML provider's single sign-on URL.
   */
  singleSignOnUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.enable_two_factor_requirement event.
 */
export interface OrgEnableTwoFactorRequirementAuditEntry {
  __typename?: "OrgEnableTwoFactorRequirementAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.invite_member event.
 */
export interface OrgInviteMemberAuditEntry {
  __typename?: "OrgInviteMemberAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  /**
   * The email address of the organization invitation.
   */
  email?: Maybe<ScalarsEnums["String"]>;
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The organization invitation.
   */
  organizationInvitation?: Maybe<OrganizationInvitation>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.invite_to_business event.
 */
export interface OrgInviteToBusinessAuditEntry {
  __typename?: "OrgInviteToBusinessAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The slug of the enterprise.
   */
  enterpriseSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl?: Maybe<ScalarsEnums["URI"]>;
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.oauth_app_access_approved event.
 */
export interface OrgOauthAppAccessApprovedAuditEntry {
  __typename?: "OrgOauthAppAccessApprovedAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The name of the OAuth application.
   */
  oauthApplicationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the OAuth application
   */
  oauthApplicationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the OAuth application
   */
  oauthApplicationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.oauth_app_access_blocked event.
 */
export interface OrgOauthAppAccessBlockedAuditEntry {
  __typename?: "OrgOauthAppAccessBlockedAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The name of the OAuth application.
   */
  oauthApplicationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the OAuth application
   */
  oauthApplicationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the OAuth application
   */
  oauthApplicationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.oauth_app_access_denied event.
 */
export interface OrgOauthAppAccessDeniedAuditEntry {
  __typename?: "OrgOauthAppAccessDeniedAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The name of the OAuth application.
   */
  oauthApplicationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the OAuth application
   */
  oauthApplicationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the OAuth application
   */
  oauthApplicationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.oauth_app_access_requested event.
 */
export interface OrgOauthAppAccessRequestedAuditEntry {
  __typename?: "OrgOauthAppAccessRequestedAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The name of the OAuth application.
   */
  oauthApplicationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the OAuth application
   */
  oauthApplicationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the OAuth application
   */
  oauthApplicationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.oauth_app_access_unblocked event.
 */
export interface OrgOauthAppAccessUnblockedAuditEntry {
  __typename?: "OrgOauthAppAccessUnblockedAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The name of the OAuth application.
   */
  oauthApplicationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the OAuth application
   */
  oauthApplicationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the OAuth application
   */
  oauthApplicationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.remove_billing_manager event.
 */
export interface OrgRemoveBillingManagerAuditEntry {
  __typename?: "OrgRemoveBillingManagerAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The reason for the billing manager being removed.
   */
  reason?: Maybe<ScalarsEnums["OrgRemoveBillingManagerAuditEntryReason"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.remove_member event.
 */
export interface OrgRemoveMemberAuditEntry {
  __typename?: "OrgRemoveMemberAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The types of membership the member has with the organization.
   */
  membershipTypes?: Maybe<
    Array<ScalarsEnums["OrgRemoveMemberAuditEntryMembershipType"]>
  >;
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The reason for the member being removed.
   */
  reason?: Maybe<ScalarsEnums["OrgRemoveMemberAuditEntryReason"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.remove_outside_collaborator event.
 */
export interface OrgRemoveOutsideCollaboratorAuditEntry {
  __typename?: "OrgRemoveOutsideCollaboratorAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The types of membership the outside collaborator has with the organization.
   */
  membershipTypes?: Maybe<
    Array<ScalarsEnums["OrgRemoveOutsideCollaboratorAuditEntryMembershipType"]>
  >;
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The reason for the outside collaborator being removed from the Organization.
   */
  reason?: Maybe<ScalarsEnums["OrgRemoveOutsideCollaboratorAuditEntryReason"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.restore_member event.
 */
export interface OrgRestoreMemberAuditEntry {
  __typename?: "OrgRestoreMemberAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The number of custom email routings for the restored member.
   */
  restoredCustomEmailRoutingsCount?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of issue assignments for the restored member.
   */
  restoredIssueAssignmentsCount?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Restored organization membership objects.
   */
  restoredMemberships?: Maybe<Array<OrgRestoreMemberAuditEntryMembership>>;
  /**
   * The number of restored memberships.
   */
  restoredMembershipsCount?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of repositories of the restored member.
   */
  restoredRepositoriesCount?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of starred repositories for the restored member.
   */
  restoredRepositoryStarsCount?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of watched repositories for the restored member.
   */
  restoredRepositoryWatchesCount?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Types of memberships that can be restored for an Organization member.
 */
export interface OrgRestoreMemberAuditEntryMembership {
  __typename?:
    | "OrgRestoreMemberMembershipOrganizationAuditEntryData"
    | "OrgRestoreMemberMembershipRepositoryAuditEntryData"
    | "OrgRestoreMemberMembershipTeamAuditEntryData";
  $on: $OrgRestoreMemberAuditEntryMembership;
}

/**
 * Metadata for an organization membership for org.restore_member actions
 */
export interface OrgRestoreMemberMembershipOrganizationAuditEntryData {
  __typename?: "OrgRestoreMemberMembershipOrganizationAuditEntryData";
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Metadata for a repository membership for org.restore_member actions
 */
export interface OrgRestoreMemberMembershipRepositoryAuditEntryData {
  __typename?: "OrgRestoreMemberMembershipRepositoryAuditEntryData";
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Metadata for a team membership for org.restore_member actions
 */
export interface OrgRestoreMemberMembershipTeamAuditEntryData {
  __typename?: "OrgRestoreMemberMembershipTeamAuditEntryData";
  /**
   * The team associated with the action
   */
  team?: Maybe<Team>;
  /**
   * The name of the team
   */
  teamName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for this team
   */
  teamResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for this team
   */
  teamUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.unblock_user
 */
export interface OrgUnblockUserAuditEntry {
  __typename?: "OrgUnblockUserAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user being unblocked by the organization.
   */
  blockedUser?: Maybe<User>;
  /**
   * The username of the blocked user.
   */
  blockedUserName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the blocked user.
   */
  blockedUserResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the blocked user.
   */
  blockedUserUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.update_default_repository_permission
 */
export interface OrgUpdateDefaultRepositoryPermissionAuditEntry {
  __typename?: "OrgUpdateDefaultRepositoryPermissionAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The new base repository permission level for the organization.
   */
  permission?: Maybe<
    ScalarsEnums["OrgUpdateDefaultRepositoryPermissionAuditEntryPermission"]
  >;
  /**
   * The former base repository permission level for the organization.
   */
  permissionWas?: Maybe<
    ScalarsEnums["OrgUpdateDefaultRepositoryPermissionAuditEntryPermission"]
  >;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.update_member event.
 */
export interface OrgUpdateMemberAuditEntry {
  __typename?: "OrgUpdateMemberAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The new member permission level for the organization.
   */
  permission?: Maybe<ScalarsEnums["OrgUpdateMemberAuditEntryPermission"]>;
  /**
   * The former member permission level for the organization.
   */
  permissionWas?: Maybe<ScalarsEnums["OrgUpdateMemberAuditEntryPermission"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a org.update_member_repository_creation_permission event.
 */
export interface OrgUpdateMemberRepositoryCreationPermissionAuditEntry {
  __typename?: "OrgUpdateMemberRepositoryCreationPermissionAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * Can members create repositories in the organization.
   */
  canCreateRepositories?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The permission for visibility level of repositories for this organization.
   */
  visibility?: Maybe<
    ScalarsEnums["OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility"]
  >;
}

/**
 * Audit log entry for a org.update_member_repository_invitation_permission event.
 */
export interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntry {
  __typename?: "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * Can outside collaborators be invited to repositories in the organization.
   */
  canInviteOutsideCollaboratorsToRepositories?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * An account on GitHub, with one or more owners, that has repositories, members and teams.
 */
export interface Organization {
  __typename?: "Organization";
  /**
   * The text of the announcement
   */
  announcement?: Maybe<ScalarsEnums["String"]>;
  /**
   * The expiration date of the announcement, if any
   */
  announcementExpiresAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Whether the announcement can be dismissed by the user
   */
  announcementUserDismissible?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determine if this repository owner has any items that can be pinned to their profile.
   */
  anyPinnableItems: (args?: {
    /**
     * Filter to only a particular kind of pinnable item.
     */
    type?: Maybe<PinnableItemType>;
  }) => ScalarsEnums["Boolean"];
  /**
   * Identifies the date and time when the organization was archived.
   */
  archivedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Audit log entries of the organization
   */
  auditLog: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for the returned audit log entries.
     * @defaultValue `{"direction":"DESC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<AuditLogOrder>;
    /**
     * The query string to filter audit entries
     */
    query?: Maybe<Scalars["String"]>;
  }) => OrganizationAuditEntryConnection;
  /**
   * A URL pointing to the organization's public avatar.
   */
  avatarUrl: (args?: {
    /**
     * The size of the resulting square image.
     */
    size?: Maybe<Scalars["Int"]>;
  }) => ScalarsEnums["URI"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The organization's public profile description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The organization's public profile description rendered to HTML.
   */
  descriptionHTML?: Maybe<ScalarsEnums["String"]>;
  /**
   * A list of domains owned by the organization.
   */
  domains: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Filter by if the domain is approved.
     */
    isApproved?: Maybe<Scalars["Boolean"]>;
    /**
     * Filter by if the domain is verified.
     */
    isVerified?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for verifiable domains returned.
     * @defaultValue `{"direction":"ASC","field":"DOMAIN"}`
     */
    orderBy?: Maybe<VerifiableDomainOrder>;
  }) => Maybe<VerifiableDomainConnection>;
  /**
   * The organization's public email.
   */
  email?: Maybe<ScalarsEnums["String"]>;
  /**
   * A list of owners of the organization's enterprise account.
   */
  enterpriseOwners: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for enterprise owners returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<OrgEnterpriseOwnerOrder>;
    /**
     * The organization role to filter by.
     */
    organizationRole?: Maybe<RoleInOrganization>;
    /**
     * The search string to look for.
     */
    query?: Maybe<Scalars["String"]>;
  }) => OrganizationEnterpriseOwnerConnection;
  /**
   * The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
   */
  estimatedNextSponsorsPayoutInCents: ScalarsEnums["Int"];
  /**
   * True if this user/organization has a GitHub Sponsors listing.
   */
  hasSponsorsListing: ScalarsEnums["Boolean"];
  id: ScalarsEnums["ID"];
  /**
   * The interaction ability settings for this organization.
   */
  interactionAbility?: Maybe<RepositoryInteractionAbility>;
  /**
   * The setting value for whether the organization has an IP allow list enabled.
   */
  ipAllowListEnabledSetting: ScalarsEnums["IpAllowListEnabledSettingValue"];
  /**
   * The IP addresses that are allowed to access resources owned by the organization.
   */
  ipAllowListEntries: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for IP allow list entries returned.
     * @defaultValue `{"direction":"ASC","field":"ALLOW_LIST_VALUE"}`
     */
    orderBy?: Maybe<IpAllowListEntryOrder>;
  }) => IpAllowListEntryConnection;
  /**
   * The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled.
   */
  ipAllowListForInstalledAppsEnabledSetting: ScalarsEnums["IpAllowListForInstalledAppsEnabledSettingValue"];
  /**
   * Whether the given account is sponsoring this user/organization.
   */
  isSponsoredBy: (args: {
    /**
     * The target account's login.
     */
    accountLogin: Scalars["String"];
  }) => ScalarsEnums["Boolean"];
  /**
   * True if the viewer is sponsored by this user/organization.
   */
  isSponsoringViewer: ScalarsEnums["Boolean"];
  /**
   * Whether the organization has verified its profile email and website.
   */
  isVerified: ScalarsEnums["Boolean"];
  /**
   * Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
   */
  itemShowcase: ProfileItemShowcase;
  /**
   * The organization's public profile location.
   */
  location?: Maybe<ScalarsEnums["String"]>;
  /**
   * The organization's login name.
   */
  login: ScalarsEnums["String"];
  /**
   * A list of all mannequins for this organization.
   */
  mannequins: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter mannequins by login.
     */
    login?: Maybe<Scalars["String"]>;
    /**
     * Ordering options for mannequins returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<MannequinOrder>;
  }) => MannequinConnection;
  /**
   * Get the status messages members of this entity have set that are either public or visible only to the organization.
   */
  memberStatuses: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for user statuses returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"UPDATED_AT"}`
     */
    orderBy?: Maybe<UserStatusOrder>;
  }) => UserStatusConnection;
  /**
   * Members can fork private repositories in this organization
   */
  membersCanForkPrivateRepositories: ScalarsEnums["Boolean"];
  /**
   * A list of users who are members of this organization.
   */
  membersWithRole: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => OrganizationMemberConnection;
  /**
   * The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
   */
  monthlyEstimatedSponsorsIncomeInCents: ScalarsEnums["Int"];
  /**
   * The organization's public profile name.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path creating a new team
   */
  newTeamResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL creating a new team
   */
  newTeamUrl: ScalarsEnums["URI"];
  /**
   * Indicates if email notification delivery for this organization is restricted to verified or approved domains.
   */
  notificationDeliveryRestrictionEnabledSetting: ScalarsEnums["NotificationRestrictionSettingValue"];
  /**
   * The billing email for the organization.
   */
  organizationBillingEmail?: Maybe<ScalarsEnums["String"]>;
  /**
   * A list of packages under the owner.
   */
  packages: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Find packages by their names.
     */
    names?: Maybe<Array<Maybe<Scalars["String"]>>>;
    /**
     * Ordering of the returned packages.
     * @defaultValue `{"direction":"DESC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<PackageOrder>;
    /**
     * Filter registry package by type.
     */
    packageType?: Maybe<PackageType>;
    /**
     * Find packages in a repository by ID.
     */
    repositoryId?: Maybe<Scalars["ID"]>;
  }) => PackageConnection;
  /**
   * A list of users who have been invited to join this organization.
   */
  pendingMembers: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => UserConnection;
  /**
   * A list of repositories and gists this profile owner can pin to their profile.
   */
  pinnableItems: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter the types of pinnable items that are returned.
     */
    types?: Maybe<Array<PinnableItemType>>;
  }) => PinnableItemConnection;
  /**
   * A list of repositories and gists this profile owner has pinned to their profile
   */
  pinnedItems: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter the types of pinned items that are returned.
     */
    types?: Maybe<Array<PinnableItemType>>;
  }) => PinnableItemConnection;
  /**
   * Returns how many more items this profile owner can pin to their profile.
   */
  pinnedItemsRemaining: ScalarsEnums["Int"];
  /**
   * Find project by number.
   */
  project: (args: {
    /**
     * The project number to find.
     */
    number: Scalars["Int"];
  }) => Maybe<Project>;
  /**
   * Find a project by number.
   */
  projectV2: (args: {
    /**
     * The project number.
     */
    number: Scalars["Int"];
  }) => Maybe<ProjectV2>;
  /**
   * A list of projects under the owner.
   */
  projects: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for projects returned from the connection
     */
    orderBy?: Maybe<ProjectOrder>;
    /**
     * Query to search projects by, currently only searching by name.
     */
    search?: Maybe<Scalars["String"]>;
    /**
     * A list of states to filter the projects by.
     */
    states?: Maybe<Array<ProjectState>>;
  }) => ProjectConnection;
  /**
   * The HTTP path listing organization's projects
   */
  projectsResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL listing organization's projects
   */
  projectsUrl: ScalarsEnums["URI"];
  /**
   * A list of projects under the owner.
   */
  projectsV2: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * How to order the returned projects.
     * @defaultValue `{"direction":"DESC","field":"NUMBER"}`
     */
    orderBy?: Maybe<ProjectV2Order>;
    /**
     * A project to search for under the the owner.
     */
    query?: Maybe<Scalars["String"]>;
  }) => ProjectV2Connection;
  /**
   * Recent projects that this user has modified in the context of the owner.
   */
  recentProjects: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => ProjectV2Connection;
  /**
   * A list of repositories that the user owns.
   */
  repositories: (args?: {
    /**
     * Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
     */
    affiliations?: Maybe<Array<Maybe<RepositoryAffiliation>>>;
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * If non-null, filters repositories according to whether they have issues enabled
     */
    hasIssuesEnabled?: Maybe<Scalars["Boolean"]>;
    /**
     * If non-null, filters repositories according to whether they are archived and not maintained
     */
    isArchived?: Maybe<Scalars["Boolean"]>;
    /**
     * If non-null, filters repositories according to whether they are forks of another repository
     */
    isFork?: Maybe<Scalars["Boolean"]>;
    /**
     * If non-null, filters repositories according to whether they have been locked
     */
    isLocked?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for repositories returned from the connection
     */
    orderBy?: Maybe<RepositoryOrder>;
    /**
     * Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
     * @defaultValue `["OWNER","COLLABORATOR"]`
     */
    ownerAffiliations?: Maybe<Array<Maybe<RepositoryAffiliation>>>;
    /**
     * If non-null, filters repositories according to privacy
     */
    privacy?: Maybe<RepositoryPrivacy>;
  }) => RepositoryConnection;
  /**
   * Find Repository.
   */
  repository: (args: {
    /**
     * Follow repository renames. If disabled, a repository referenced by its old name will return an error.
     * @defaultValue `true`
     */
    followRenames?: Maybe<Scalars["Boolean"]>;
    /**
     * Name of Repository to find.
     */
    name: Scalars["String"];
  }) => Maybe<Repository>;
  /**
   * Discussion comments this user has authored.
   */
  repositoryDiscussionComments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter discussion comments to only those that were marked as the answer
     * @defaultValue `false`
     */
    onlyAnswers?: Maybe<Scalars["Boolean"]>;
    /**
     * Filter discussion comments to only those in a specific repository.
     */
    repositoryId?: Maybe<Scalars["ID"]>;
  }) => DiscussionCommentConnection;
  /**
   * Discussions this user has started.
   */
  repositoryDiscussions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions.
     */
    answered?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for discussions returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<DiscussionOrder>;
    /**
     * Filter discussions to only those in a specific repository.
     */
    repositoryId?: Maybe<Scalars["ID"]>;
    /**
     * A list of states to filter the discussions by.
     * @defaultValue `[]`
     */
    states?: Maybe<Array<DiscussionState>>;
  }) => DiscussionConnection;
  /**
   * A list of all repository migrations for this organization.
   */
  repositoryMigrations: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for repository migrations returned.
     * @defaultValue `{"direction":"ASC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<RepositoryMigrationOrder>;
    /**
     * Filter repository migrations by repository name.
     */
    repositoryName?: Maybe<Scalars["String"]>;
    /**
     * Filter repository migrations by state.
     */
    state?: Maybe<MigrationState>;
  }) => RepositoryMigrationConnection;
  /**
   * When true the organization requires all members, billing managers, and outside collaborators to enable two-factor authentication.
   */
  requiresTwoFactorAuthentication?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The HTTP path for this organization.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Returns a single ruleset from the current organization by ID.
   */
  ruleset: (args: {
    /**
     * The ID of the ruleset to be returned.
     */
    databaseId: Scalars["Int"];
  }) => Maybe<RepositoryRuleset>;
  /**
   * A list of rulesets for this organization.
   */
  rulesets: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Return rulesets configured at higher levels that apply to this organization
     * @defaultValue `true`
     */
    includeParents?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<RepositoryRulesetConnection>;
  /**
   * The Organization's SAML identity provider. Visible to (1) organization owners, (2) organization owners' personal access tokens (classic) with read:org or admin:org scope, (3) GitHub App with an installation token with read or write access to members.
   */
  samlIdentityProvider?: Maybe<OrganizationIdentityProvider>;
  /**
   * List of users and organizations this entity is sponsoring.
   */
  sponsoring: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for the users and organizations returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"RELEVANCE"}`
     */
    orderBy?: Maybe<SponsorOrder>;
  }) => SponsorConnection;
  /**
   * List of sponsors for this user or organization.
   */
  sponsors: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for sponsors returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"RELEVANCE"}`
     */
    orderBy?: Maybe<SponsorOrder>;
    /**
     * If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see.
     */
    tierId?: Maybe<Scalars["ID"]>;
  }) => SponsorConnection;
  /**
   * Events involving this sponsorable, such as new sponsorships.
   */
  sponsorsActivities: (args?: {
    /**
     * Filter activities to only the specified actions.
     * @defaultValue `[]`
     */
    actions?: Maybe<Array<SponsorsActivityAction>>;
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Whether to include those events where this sponsorable acted as the sponsor. Defaults to only including events where this sponsorable was the recipient of a sponsorship.
     * @defaultValue `false`
     */
    includeAsSponsor?: Maybe<Scalars["Boolean"]>;
    /**
     * Whether or not to include private activities in the result set. Defaults to including public and private activities.
     * @defaultValue `true`
     */
    includePrivate?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for activity returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"TIMESTAMP"}`
     */
    orderBy?: Maybe<SponsorsActivityOrder>;
    /**
     * Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. Will be ignored if `since` or `until` is given.
     * @defaultValue `"MONTH"`
     */
    period?: Maybe<SponsorsActivityPeriod>;
    /**
     * Filter activities to those that occurred on or after this time.
     */
    since?: Maybe<Scalars["DateTime"]>;
    /**
     * Filter activities to those that occurred before this time.
     */
    until?: Maybe<Scalars["DateTime"]>;
  }) => SponsorsActivityConnection;
  /**
   * The GitHub Sponsors listing for this user or organization.
   */
  sponsorsListing?: Maybe<SponsorsListing>;
  /**
   * The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
   */
  sponsorshipForViewerAsSponsor: (args?: {
    /**
     * Whether to return the sponsorship only if it's still active. Pass false to get the viewer's sponsorship back even if it has been cancelled.
     * @defaultValue `true`
     */
    activeOnly?: Maybe<Scalars["Boolean"]>;
  }) => Maybe<Sponsorship>;
  /**
   * The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
   */
  sponsorshipForViewerAsSponsorable: (args?: {
    /**
     * Whether to return the sponsorship only if it's still active. Pass false to get the sponsorship back even if it has been cancelled.
     * @defaultValue `true`
     */
    activeOnly?: Maybe<Scalars["Boolean"]>;
  }) => Maybe<Sponsorship>;
  /**
   * List of sponsorship updates sent from this sponsorable to sponsors.
   */
  sponsorshipNewsletters: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for sponsorship updates returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<SponsorshipNewsletterOrder>;
  }) => SponsorshipNewsletterConnection;
  /**
   * The sponsorships where this user or organization is the maintainer receiving the funds.
   */
  sponsorshipsAsMaintainer: (args?: {
    /**
     * Whether to include only sponsorships that are active right now, versus all sponsorships this maintainer has ever received.
     * @defaultValue `true`
     */
    activeOnly?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Whether or not to include private sponsorships in the result set
     * @defaultValue `false`
     */
    includePrivate?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
     */
    orderBy?: Maybe<SponsorshipOrder>;
  }) => SponsorshipConnection;
  /**
   * The sponsorships where this user or organization is the funder.
   */
  sponsorshipsAsSponsor: (args?: {
    /**
     * Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
     * @defaultValue `true`
     */
    activeOnly?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter sponsorships returned to those for the specified maintainers. That is, the recipient of the sponsorship is a user or organization with one of the given logins.
     */
    maintainerLogins?: Maybe<Array<Scalars["String"]>>;
    /**
     * Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
     */
    orderBy?: Maybe<SponsorshipOrder>;
  }) => SponsorshipConnection;
  /**
   * Find an organization's team by its slug.
   */
  team: (args: {
    /**
     * The name or slug of the team to find.
     */
    slug: Scalars["String"];
  }) => Maybe<Team>;
  /**
   * A list of teams in this organization.
   */
  teams: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * If true, filters teams that are mapped to an LDAP Group (Enterprise only)
     */
    ldapMapped?: Maybe<Scalars["Boolean"]>;
    /**
     * If non-null, filters teams according to notification setting
     */
    notificationSetting?: Maybe<TeamNotificationSetting>;
    /**
     * Ordering options for teams returned from the connection
     */
    orderBy?: Maybe<TeamOrder>;
    /**
     * If non-null, filters teams according to privacy
     */
    privacy?: Maybe<TeamPrivacy>;
    /**
     * If non-null, filters teams with query on team name and team slug
     */
    query?: Maybe<Scalars["String"]>;
    /**
     * If non-null, filters teams according to whether the viewer is an admin or member on team
     */
    role?: Maybe<TeamRole>;
    /**
     * If true, restrict to only root teams
     * @defaultValue `false`
     */
    rootTeamsOnly?: Maybe<Scalars["Boolean"]>;
    /**
     * User logins to filter by
     */
    userLogins?: Maybe<Array<Scalars["String"]>>;
  }) => TeamConnection;
  /**
   * The HTTP path listing organization's teams
   */
  teamsResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL listing organization's teams
   */
  teamsUrl: ScalarsEnums["URI"];
  /**
   * The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has spent on GitHub to fund sponsorships. Only returns a value when viewed by the user themselves or by a user who can manage sponsorships for the requested organization.
   */
  totalSponsorshipAmountAsSponsorInCents: (args?: {
    /**
     * Filter payments to those that occurred on or after this time.
     */
    since?: Maybe<Scalars["DateTime"]>;
    /**
     * Filter payments to those made to the users or organizations with the specified usernames.
     * @defaultValue `[]`
     */
    sponsorableLogins?: Maybe<Array<Scalars["String"]>>;
    /**
     * Filter payments to those that occurred before this time.
     */
    until?: Maybe<Scalars["DateTime"]>;
  }) => Maybe<ScalarsEnums["Int"]>;
  /**
   * The organization's Twitter username.
   */
  twitterUsername?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this organization.
   */
  url: ScalarsEnums["URI"];
  /**
   * Organization is adminable by the viewer.
   */
  viewerCanAdminister: ScalarsEnums["Boolean"];
  /**
   * Can the viewer pin repositories and gists to the profile?
   */
  viewerCanChangePinnedItems: ScalarsEnums["Boolean"];
  /**
   * Can the current viewer create new projects on this owner.
   */
  viewerCanCreateProjects: ScalarsEnums["Boolean"];
  /**
   * Viewer can create repositories on this organization
   */
  viewerCanCreateRepositories: ScalarsEnums["Boolean"];
  /**
   * Viewer can create teams on this organization.
   */
  viewerCanCreateTeams: ScalarsEnums["Boolean"];
  /**
   * Whether or not the viewer is able to sponsor this user/organization.
   */
  viewerCanSponsor: ScalarsEnums["Boolean"];
  /**
   * Viewer is an active member of this organization.
   */
  viewerIsAMember: ScalarsEnums["Boolean"];
  /**
   * Whether or not this Organization is followed by the viewer.
   */
  viewerIsFollowing: ScalarsEnums["Boolean"];
  /**
   * True if the viewer is sponsoring this user/organization.
   */
  viewerIsSponsoring: ScalarsEnums["Boolean"];
  /**
   * Whether contributors are required to sign off on web-based commits for repositories in this organization.
   */
  webCommitSignoffRequired: ScalarsEnums["Boolean"];
  /**
   * The organization's public profile URL.
   */
  websiteUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * An audit entry in an organization audit log.
 */
export interface OrganizationAuditEntry {
  __typename?:
    | "MembersCanDeleteReposClearAuditEntry"
    | "MembersCanDeleteReposDisableAuditEntry"
    | "MembersCanDeleteReposEnableAuditEntry"
    | "OauthApplicationCreateAuditEntry"
    | "OrgAddBillingManagerAuditEntry"
    | "OrgAddMemberAuditEntry"
    | "OrgBlockUserAuditEntry"
    | "OrgConfigDisableCollaboratorsOnlyAuditEntry"
    | "OrgConfigEnableCollaboratorsOnlyAuditEntry"
    | "OrgCreateAuditEntry"
    | "OrgDisableOauthAppRestrictionsAuditEntry"
    | "OrgDisableSamlAuditEntry"
    | "OrgDisableTwoFactorRequirementAuditEntry"
    | "OrgEnableOauthAppRestrictionsAuditEntry"
    | "OrgEnableSamlAuditEntry"
    | "OrgEnableTwoFactorRequirementAuditEntry"
    | "OrgInviteMemberAuditEntry"
    | "OrgInviteToBusinessAuditEntry"
    | "OrgOauthAppAccessApprovedAuditEntry"
    | "OrgOauthAppAccessBlockedAuditEntry"
    | "OrgOauthAppAccessDeniedAuditEntry"
    | "OrgOauthAppAccessRequestedAuditEntry"
    | "OrgOauthAppAccessUnblockedAuditEntry"
    | "OrgRemoveBillingManagerAuditEntry"
    | "OrgRemoveMemberAuditEntry"
    | "OrgRemoveOutsideCollaboratorAuditEntry"
    | "OrgRestoreMemberAuditEntry"
    | "OrgUnblockUserAuditEntry"
    | "OrgUpdateDefaultRepositoryPermissionAuditEntry"
    | "OrgUpdateMemberAuditEntry"
    | "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
    | "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
    | "PrivateRepositoryForkingDisableAuditEntry"
    | "PrivateRepositoryForkingEnableAuditEntry"
    | "RepoAccessAuditEntry"
    | "RepoAddMemberAuditEntry"
    | "RepoAddTopicAuditEntry"
    | "RepoArchivedAuditEntry"
    | "RepoChangeMergeSettingAuditEntry"
    | "RepoConfigDisableAnonymousGitAccessAuditEntry"
    | "RepoConfigDisableCollaboratorsOnlyAuditEntry"
    | "RepoConfigDisableContributorsOnlyAuditEntry"
    | "RepoConfigDisableSockpuppetDisallowedAuditEntry"
    | "RepoConfigEnableAnonymousGitAccessAuditEntry"
    | "RepoConfigEnableCollaboratorsOnlyAuditEntry"
    | "RepoConfigEnableContributorsOnlyAuditEntry"
    | "RepoConfigEnableSockpuppetDisallowedAuditEntry"
    | "RepoConfigLockAnonymousGitAccessAuditEntry"
    | "RepoConfigUnlockAnonymousGitAccessAuditEntry"
    | "RepoCreateAuditEntry"
    | "RepoDestroyAuditEntry"
    | "RepoRemoveMemberAuditEntry"
    | "RepoRemoveTopicAuditEntry"
    | "RepositoryVisibilityChangeDisableAuditEntry"
    | "RepositoryVisibilityChangeEnableAuditEntry"
    | "TeamAddMemberAuditEntry"
    | "TeamAddRepositoryAuditEntry"
    | "TeamChangeParentTeamAuditEntry"
    | "TeamRemoveMemberAuditEntry"
    | "TeamRemoveRepositoryAuditEntry";
  $on: $OrganizationAuditEntry;
}

/**
 * The connection type for OrganizationAuditEntry.
 */
export interface OrganizationAuditEntryConnection {
  __typename?: "OrganizationAuditEntryConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<OrganizationAuditEntryEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<OrganizationAuditEntry>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * Metadata for an audit entry with action org.*
 */
export interface OrganizationAuditEntryData {
  __typename?:
    | "MembersCanDeleteReposClearAuditEntry"
    | "MembersCanDeleteReposDisableAuditEntry"
    | "MembersCanDeleteReposEnableAuditEntry"
    | "OauthApplicationCreateAuditEntry"
    | "OrgAddBillingManagerAuditEntry"
    | "OrgAddMemberAuditEntry"
    | "OrgBlockUserAuditEntry"
    | "OrgConfigDisableCollaboratorsOnlyAuditEntry"
    | "OrgConfigEnableCollaboratorsOnlyAuditEntry"
    | "OrgCreateAuditEntry"
    | "OrgDisableOauthAppRestrictionsAuditEntry"
    | "OrgDisableSamlAuditEntry"
    | "OrgDisableTwoFactorRequirementAuditEntry"
    | "OrgEnableOauthAppRestrictionsAuditEntry"
    | "OrgEnableSamlAuditEntry"
    | "OrgEnableTwoFactorRequirementAuditEntry"
    | "OrgInviteMemberAuditEntry"
    | "OrgInviteToBusinessAuditEntry"
    | "OrgOauthAppAccessApprovedAuditEntry"
    | "OrgOauthAppAccessBlockedAuditEntry"
    | "OrgOauthAppAccessDeniedAuditEntry"
    | "OrgOauthAppAccessRequestedAuditEntry"
    | "OrgOauthAppAccessUnblockedAuditEntry"
    | "OrgRemoveBillingManagerAuditEntry"
    | "OrgRemoveMemberAuditEntry"
    | "OrgRemoveOutsideCollaboratorAuditEntry"
    | "OrgRestoreMemberAuditEntry"
    | "OrgRestoreMemberMembershipOrganizationAuditEntryData"
    | "OrgUnblockUserAuditEntry"
    | "OrgUpdateDefaultRepositoryPermissionAuditEntry"
    | "OrgUpdateMemberAuditEntry"
    | "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
    | "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
    | "PrivateRepositoryForkingDisableAuditEntry"
    | "PrivateRepositoryForkingEnableAuditEntry"
    | "RepoAccessAuditEntry"
    | "RepoAddMemberAuditEntry"
    | "RepoAddTopicAuditEntry"
    | "RepoArchivedAuditEntry"
    | "RepoChangeMergeSettingAuditEntry"
    | "RepoConfigDisableAnonymousGitAccessAuditEntry"
    | "RepoConfigDisableCollaboratorsOnlyAuditEntry"
    | "RepoConfigDisableContributorsOnlyAuditEntry"
    | "RepoConfigDisableSockpuppetDisallowedAuditEntry"
    | "RepoConfigEnableAnonymousGitAccessAuditEntry"
    | "RepoConfigEnableCollaboratorsOnlyAuditEntry"
    | "RepoConfigEnableContributorsOnlyAuditEntry"
    | "RepoConfigEnableSockpuppetDisallowedAuditEntry"
    | "RepoConfigLockAnonymousGitAccessAuditEntry"
    | "RepoConfigUnlockAnonymousGitAccessAuditEntry"
    | "RepoCreateAuditEntry"
    | "RepoDestroyAuditEntry"
    | "RepoRemoveMemberAuditEntry"
    | "RepoRemoveTopicAuditEntry"
    | "RepositoryVisibilityChangeDisableAuditEntry"
    | "RepositoryVisibilityChangeEnableAuditEntry"
    | "TeamAddMemberAuditEntry"
    | "TeamAddRepositoryAuditEntry"
    | "TeamChangeParentTeamAuditEntry"
    | "TeamRemoveMemberAuditEntry"
    | "TeamRemoveRepositoryAuditEntry";
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  $on: $OrganizationAuditEntryData;
}

/**
 * An edge in a connection.
 */
export interface OrganizationAuditEntryEdge {
  __typename?: "OrganizationAuditEntryEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<OrganizationAuditEntry>;
}

/**
 * A list of organizations managed by an enterprise.
 */
export interface OrganizationConnection {
  __typename?: "OrganizationConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<OrganizationEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Organization>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface OrganizationEdge {
  __typename?: "OrganizationEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Organization>;
}

/**
 * The connection type for User.
 */
export interface OrganizationEnterpriseOwnerConnection {
  __typename?: "OrganizationEnterpriseOwnerConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<OrganizationEnterpriseOwnerEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<User>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An enterprise owner in the context of an organization that is part of the enterprise.
 */
export interface OrganizationEnterpriseOwnerEdge {
  __typename?: "OrganizationEnterpriseOwnerEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<User>;
  /**
   * The role of the owner with respect to the organization.
   */
  organizationRole: ScalarsEnums["RoleInOrganization"];
}

/**
 * An Identity Provider configured to provision SAML and SCIM identities for Organizations. Visible to (1) organization owners, (2) organization owners' personal access tokens (classic) with read:org or admin:org scope, (3) GitHub App with an installation token with read or write access to members.
 */
export interface OrganizationIdentityProvider {
  __typename?: "OrganizationIdentityProvider";
  /**
   * The digest algorithm used to sign SAML requests for the Identity Provider.
   */
  digestMethod?: Maybe<ScalarsEnums["URI"]>;
  /**
   * External Identities provisioned by this Identity Provider
   */
  externalIdentities: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter to external identities with the users login
     */
    login?: Maybe<Scalars["String"]>;
    /**
     * Filter to external identities with valid org membership only
     */
    membersOnly?: Maybe<Scalars["Boolean"]>;
    /**
     * Filter to external identities with the users userName/NameID attribute
     */
    userName?: Maybe<Scalars["String"]>;
  }) => ExternalIdentityConnection;
  id: ScalarsEnums["ID"];
  /**
   * The x509 certificate used by the Identity Provider to sign assertions and responses.
   */
  idpCertificate?: Maybe<ScalarsEnums["X509Certificate"]>;
  /**
   * The Issuer Entity ID for the SAML Identity Provider
   */
  issuer?: Maybe<ScalarsEnums["String"]>;
  /**
   * Organization this Identity Provider belongs to
   */
  organization?: Maybe<Organization>;
  /**
   * The signature algorithm used to sign SAML requests for the Identity Provider.
   */
  signatureMethod?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The URL endpoint for the Identity Provider's SAML SSO.
   */
  ssoUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * An Invitation for a user to an organization.
 */
export interface OrganizationInvitation {
  __typename?: "OrganizationInvitation";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The email address of the user invited to the organization.
   */
  email?: Maybe<ScalarsEnums["String"]>;
  id: ScalarsEnums["ID"];
  /**
   * The source of the invitation.
   */
  invitationSource: ScalarsEnums["OrganizationInvitationSource"];
  /**
   * The type of invitation that was sent (e.g. email, user).
   */
  invitationType: ScalarsEnums["OrganizationInvitationType"];
  /**
   * The user who was invited to the organization.
   */
  invitee?: Maybe<User>;
  /**
   * The user who created the invitation.
   */
  inviter: User;
  /**
   * The organization the invite is for
   */
  organization: Organization;
  /**
   * The user's pending role in the organization (e.g. member, owner).
   */
  role: ScalarsEnums["OrganizationInvitationRole"];
}

/**
 * The connection type for OrganizationInvitation.
 */
export interface OrganizationInvitationConnection {
  __typename?: "OrganizationInvitationConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<OrganizationInvitationEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<OrganizationInvitation>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface OrganizationInvitationEdge {
  __typename?: "OrganizationInvitationEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<OrganizationInvitation>;
}

/**
 * The connection type for User.
 */
export interface OrganizationMemberConnection {
  __typename?: "OrganizationMemberConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<OrganizationMemberEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<User>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * Represents a user within an organization.
 */
export interface OrganizationMemberEdge {
  __typename?: "OrganizationMemberEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer.
   */
  hasTwoFactorEnabled?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<User>;
  /**
   * The role this user has in the organization.
   */
  role?: Maybe<ScalarsEnums["OrganizationMemberRole"]>;
}

/**
 * A GitHub Enterprise Importer (GEI) organization migration.
 */
export interface OrganizationMigration {
  __typename?: "OrganizationMigration";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The reason the organization migration failed.
   */
  failureReason?: Maybe<ScalarsEnums["String"]>;
  id: ScalarsEnums["ID"];
  /**
   * The remaining amount of repos to be migrated.
   */
  remainingRepositoriesCount?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The name of the source organization to be migrated.
   */
  sourceOrgName: ScalarsEnums["String"];
  /**
   * The URL of the source organization to migrate.
   */
  sourceOrgUrl: ScalarsEnums["URI"];
  /**
   * The migration state.
   */
  state: ScalarsEnums["OrganizationMigrationState"];
  /**
   * The name of the target organization.
   */
  targetOrgName: ScalarsEnums["String"];
  /**
   * The total amount of repositories to be migrated.
   */
  totalRepositoriesCount?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * Used for argument of CreateProjectV2 mutation.
 */
export interface OrganizationOrUser {
  __typename?: "Organization" | "User";
  $on: $OrganizationOrUser;
}

/**
 * An organization teams hovercard context
 */
export interface OrganizationTeamsHovercardContext {
  __typename?: "OrganizationTeamsHovercardContext";
  /**
   * A string describing this context
   */
  message: ScalarsEnums["String"];
  /**
   * An octicon to accompany this context
   */
  octicon: ScalarsEnums["String"];
  /**
   * Teams in this organization the user is a member of that are relevant
   */
  relevantTeams: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => TeamConnection;
  /**
   * The path for the full team list for this user
   */
  teamsResourcePath: ScalarsEnums["URI"];
  /**
   * The URL for the full team list for this user
   */
  teamsUrl: ScalarsEnums["URI"];
  /**
   * The total number of teams the user is on in the organization
   */
  totalTeamCount: ScalarsEnums["Int"];
}

/**
 * An organization list hovercard context
 */
export interface OrganizationsHovercardContext {
  __typename?: "OrganizationsHovercardContext";
  /**
   * A string describing this context
   */
  message: ScalarsEnums["String"];
  /**
   * An octicon to accompany this context
   */
  octicon: ScalarsEnums["String"];
  /**
   * Organizations this user is a member of that are relevant
   */
  relevantOrganizations: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for the User's organizations.
     */
    orderBy?: Maybe<OrganizationOrder>;
  }) => OrganizationConnection;
  /**
   * The total number of organizations this user is in
   */
  totalOrganizationCount: ScalarsEnums["Int"];
}

/**
 * Information for an uploaded package.
 */
export interface Package {
  __typename?: "Package";
  id: ScalarsEnums["ID"];
  /**
   * Find the latest version for the package.
   */
  latestVersion?: Maybe<PackageVersion>;
  /**
   * Identifies the name of the package.
   */
  name: ScalarsEnums["String"];
  /**
   * Identifies the type of the package.
   */
  packageType: ScalarsEnums["PackageType"];
  /**
   * The repository this package belongs to.
   */
  repository?: Maybe<Repository>;
  /**
   * Statistics about package activity.
   */
  statistics?: Maybe<PackageStatistics>;
  /**
   * Find package version by version string.
   */
  version: (args: {
    /**
     * The package version.
     */
    version: Scalars["String"];
  }) => Maybe<PackageVersion>;
  /**
   * list of versions for this package
   */
  versions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering of the returned packages.
     * @defaultValue `{"direction":"DESC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<PackageVersionOrder>;
  }) => PackageVersionConnection;
}

/**
 * The connection type for Package.
 */
export interface PackageConnection {
  __typename?: "PackageConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<PackageEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Package>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface PackageEdge {
  __typename?: "PackageEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Package>;
}

/**
 * A file in a package version.
 */
export interface PackageFile {
  __typename?: "PackageFile";
  id: ScalarsEnums["ID"];
  /**
   * MD5 hash of the file.
   */
  md5?: Maybe<ScalarsEnums["String"]>;
  /**
   * Name of the file.
   */
  name: ScalarsEnums["String"];
  /**
   * The package version this file belongs to.
   */
  packageVersion?: Maybe<PackageVersion>;
  /**
   * SHA1 hash of the file.
   */
  sha1?: Maybe<ScalarsEnums["String"]>;
  /**
   * SHA256 hash of the file.
   */
  sha256?: Maybe<ScalarsEnums["String"]>;
  /**
   * Size of the file in bytes.
   */
  size?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * URL to download the asset.
   */
  url?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * The connection type for PackageFile.
 */
export interface PackageFileConnection {
  __typename?: "PackageFileConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<PackageFileEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<PackageFile>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface PackageFileEdge {
  __typename?: "PackageFileEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<PackageFile>;
}

/**
 * Represents an owner of a package.
 */
export interface PackageOwner {
  __typename?: "Organization" | "Repository" | "User";
  id: ScalarsEnums["ID"];
  /**
   * A list of packages under the owner.
   */
  packages: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Find packages by their names.
     */
    names?: Maybe<Array<Maybe<Scalars["String"]>>>;
    /**
     * Ordering of the returned packages.
     * @defaultValue `{"direction":"DESC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<PackageOrder>;
    /**
     * Filter registry package by type.
     */
    packageType?: Maybe<PackageType>;
    /**
     * Find packages in a repository by ID.
     */
    repositoryId?: Maybe<Scalars["ID"]>;
  }) => PackageConnection;
  $on: $PackageOwner;
}

/**
 * Represents a object that contains package activity statistics such as downloads.
 */
export interface PackageStatistics {
  __typename?: "PackageStatistics";
  /**
   * Number of times the package was downloaded since it was created.
   */
  downloadsTotalCount: ScalarsEnums["Int"];
}

/**
 * A version tag contains the mapping between a tag name and a version.
 */
export interface PackageTag {
  __typename?: "PackageTag";
  id: ScalarsEnums["ID"];
  /**
   * Identifies the tag name of the version.
   */
  name: ScalarsEnums["String"];
  /**
   * Version that the tag is associated with.
   */
  version?: Maybe<PackageVersion>;
}

/**
 * Information about a specific package version.
 */
export interface PackageVersion {
  __typename?: "PackageVersion";
  /**
   * List of files associated with this package version
   */
  files: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering of the returned package files.
     * @defaultValue `{"direction":"ASC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<PackageFileOrder>;
  }) => PackageFileConnection;
  id: ScalarsEnums["ID"];
  /**
   * The package associated with this version.
   */
  package?: Maybe<Package>;
  /**
   * The platform this version was built for.
   */
  platform?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether or not this version is a pre-release.
   */
  preRelease: ScalarsEnums["Boolean"];
  /**
   * The README of this package version.
   */
  readme?: Maybe<ScalarsEnums["String"]>;
  /**
   * The release associated with this package version.
   */
  release?: Maybe<Release>;
  /**
   * Statistics about package activity.
   */
  statistics?: Maybe<PackageVersionStatistics>;
  /**
   * The package version summary.
   */
  summary?: Maybe<ScalarsEnums["String"]>;
  /**
   * The version string.
   */
  version: ScalarsEnums["String"];
}

/**
 * The connection type for PackageVersion.
 */
export interface PackageVersionConnection {
  __typename?: "PackageVersionConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<PackageVersionEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<PackageVersion>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface PackageVersionEdge {
  __typename?: "PackageVersionEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<PackageVersion>;
}

/**
 * Represents a object that contains package version activity statistics such as downloads.
 */
export interface PackageVersionStatistics {
  __typename?: "PackageVersionStatistics";
  /**
   * Number of times the package was downloaded since it was created.
   */
  downloadsTotalCount: ScalarsEnums["Int"];
}

/**
 * Information about pagination in a connection.
 */
export interface PageInfo {
  __typename?: "PageInfo";
  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * When paginating forwards, are there more items?
   */
  hasNextPage: ScalarsEnums["Boolean"];
  /**
   * When paginating backwards, are there more items?
   */
  hasPreviousPage: ScalarsEnums["Boolean"];
  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Types that can grant permissions on a repository to a user
 */
export interface PermissionGranter {
  __typename?: "Organization" | "Repository" | "Team";
  $on: $PermissionGranter;
}

/**
 * A level of permission and source for a user's access to a repository.
 */
export interface PermissionSource {
  __typename?: "PermissionSource";
  /**
   * The organization the repository belongs to.
   */
  organization: Organization;
  /**
   * The level of access this source has granted to the user.
   */
  permission: ScalarsEnums["DefaultRepositoryPermissionField"];
  /**
   * The name of the role this source has granted to the user.
   */
  roleName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The source of this permission.
   */
  source: PermissionGranter;
}

/**
 * Autogenerated return type of PinIssue
 */
export interface PinIssuePayload {
  __typename?: "PinIssuePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The issue that was pinned
   */
  issue?: Maybe<Issue>;
}

/**
 * Types that can be pinned to a profile page.
 */
export interface PinnableItem {
  __typename?: "Gist" | "Repository";
  $on: $PinnableItem;
}

/**
 * The connection type for PinnableItem.
 */
export interface PinnableItemConnection {
  __typename?: "PinnableItemConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<PinnableItemEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<PinnableItem>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface PinnableItemEdge {
  __typename?: "PinnableItemEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<PinnableItem>;
}

/**
 * A Pinned Discussion is a discussion pinned to a repository's index page.
 */
export interface PinnedDiscussion {
  __typename?: "PinnedDiscussion";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The discussion that was pinned.
   */
  discussion: Discussion;
  /**
   * Color stops of the chosen gradient
   */
  gradientStopColors: Array<ScalarsEnums["String"]>;
  id: ScalarsEnums["ID"];
  /**
   * Background texture pattern
   */
  pattern: ScalarsEnums["PinnedDiscussionPattern"];
  /**
   * The actor that pinned this discussion.
   */
  pinnedBy: Actor;
  /**
   * Preconfigured background gradient option
   */
  preconfiguredGradient?: Maybe<ScalarsEnums["PinnedDiscussionGradient"]>;
  /**
   * The repository associated with this node.
   */
  repository: Repository;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * The connection type for PinnedDiscussion.
 */
export interface PinnedDiscussionConnection {
  __typename?: "PinnedDiscussionConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<PinnedDiscussionEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<PinnedDiscussion>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface PinnedDiscussionEdge {
  __typename?: "PinnedDiscussionEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<PinnedDiscussion>;
}

/**
 * Represents a 'pinned' event on a given issue or pull request.
 */
export interface PinnedEvent {
  __typename?: "PinnedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Identifies the issue associated with the event.
   */
  issue: Issue;
}

/**
 * A Pinned Issue is a issue pinned to a repository's index page.
 */
export interface PinnedIssue {
  __typename?: "PinnedIssue";
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Identifies the primary key from the database as a BigInt.
   */
  fullDatabaseId?: Maybe<ScalarsEnums["BigInt"]>;
  id: ScalarsEnums["ID"];
  /**
   * The issue that was pinned.
   */
  issue: Issue;
  /**
   * The actor that pinned this issue.
   */
  pinnedBy: Actor;
  /**
   * The repository that this issue was pinned to.
   */
  repository: Repository;
}

/**
 * The connection type for PinnedIssue.
 */
export interface PinnedIssueConnection {
  __typename?: "PinnedIssueConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<PinnedIssueEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<PinnedIssue>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface PinnedIssueEdge {
  __typename?: "PinnedIssueEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<PinnedIssue>;
}

/**
 * Audit log entry for a private_repository_forking.disable event.
 */
export interface PrivateRepositoryForkingDisableAuditEntry {
  __typename?: "PrivateRepositoryForkingDisableAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The slug of the enterprise.
   */
  enterpriseSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl?: Maybe<ScalarsEnums["URI"]>;
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a private_repository_forking.enable event.
 */
export interface PrivateRepositoryForkingEnableAuditEntry {
  __typename?: "PrivateRepositoryForkingEnableAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The slug of the enterprise.
   */
  enterpriseSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl?: Maybe<ScalarsEnums["URI"]>;
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * A curatable list of repositories relating to a repository owner, which defaults to showing the most popular repositories they own.
 */
export interface ProfileItemShowcase {
  __typename?: "ProfileItemShowcase";
  /**
   * Whether or not the owner has pinned any repositories or gists.
   */
  hasPinnedItems: ScalarsEnums["Boolean"];
  /**
   * The repositories and gists in the showcase. If the profile owner has any pinned items, those will be returned. Otherwise, the profile owner's popular repositories will be returned.
   */
  items: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => PinnableItemConnection;
}

/**
 * Represents any entity on GitHub that has a profile page.
 */
export interface ProfileOwner {
  __typename?: "Organization" | "User";
  /**
   * Determine if this repository owner has any items that can be pinned to their profile.
   */
  anyPinnableItems: (args?: {
    /**
     * Filter to only a particular kind of pinnable item.
     */
    type?: Maybe<PinnableItemType>;
  }) => ScalarsEnums["Boolean"];
  /**
   * The public profile email.
   */
  email?: Maybe<ScalarsEnums["String"]>;
  id: ScalarsEnums["ID"];
  /**
   * Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
   */
  itemShowcase: ProfileItemShowcase;
  /**
   * The public profile location.
   */
  location?: Maybe<ScalarsEnums["String"]>;
  /**
   * The username used to login.
   */
  login: ScalarsEnums["String"];
  /**
   * The public profile name.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * A list of repositories and gists this profile owner can pin to their profile.
   */
  pinnableItems: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter the types of pinnable items that are returned.
     */
    types?: Maybe<Array<PinnableItemType>>;
  }) => PinnableItemConnection;
  /**
   * A list of repositories and gists this profile owner has pinned to their profile
   */
  pinnedItems: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter the types of pinned items that are returned.
     */
    types?: Maybe<Array<PinnableItemType>>;
  }) => PinnableItemConnection;
  /**
   * Returns how many more items this profile owner can pin to their profile.
   */
  pinnedItemsRemaining: ScalarsEnums["Int"];
  /**
   * Can the viewer pin repositories and gists to the profile?
   */
  viewerCanChangePinnedItems: ScalarsEnums["Boolean"];
  /**
   * The public profile website URL.
   */
  websiteUrl?: Maybe<ScalarsEnums["URI"]>;
  $on: $ProfileOwner;
}

/**
 * Projects manage issues, pull requests and notes within a project owner.
 */
export interface Project {
  __typename?: "Project";
  /**
   * The project's description body.
   */
  body?: Maybe<ScalarsEnums["String"]>;
  /**
   * The projects description body rendered to HTML.
   */
  bodyHTML: ScalarsEnums["HTML"];
  /**
   * Indicates if the object is closed (definition of closed may depend on type)
   */
  closed: ScalarsEnums["Boolean"];
  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * List of columns in the project
   */
  columns: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => ProjectColumnConnection;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The actor who originally created the project.
   */
  creator?: Maybe<Actor>;
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
  /**
   * The project's name.
   */
  name: ScalarsEnums["String"];
  /**
   * The project's number.
   */
  number: ScalarsEnums["Int"];
  /**
   * The project's owner. Currently limited to repositories, organizations, and users.
   */
  owner: ProjectOwner;
  /**
   * List of pending cards in this project
   */
  pendingCards: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * A list of archived states to filter the cards by
     * @defaultValue `["ARCHIVED","NOT_ARCHIVED"]`
     */
    archivedStates?: Maybe<Array<Maybe<ProjectCardArchivedState>>>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => ProjectCardConnection;
  /**
   * Project progress details.
   */
  progress: ProjectProgress;
  /**
   * The HTTP path for this project
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Whether the project is open or closed.
   */
  state: ScalarsEnums["ProjectState"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this project
   */
  url: ScalarsEnums["URI"];
  /**
   * Indicates if the object can be closed by the viewer.
   */
  viewerCanClose: ScalarsEnums["Boolean"];
  /**
   * Indicates if the object can be reopened by the viewer.
   */
  viewerCanReopen: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: ScalarsEnums["Boolean"];
}

/**
 * A card in a project.
 */
export interface ProjectCard {
  __typename?: "ProjectCard";
  /**
   * The project column this card is associated under. A card may only belong to one
   * project column at a time. The column field will be null if the card is created
   * in a pending state and has yet to be associated with a column. Once cards are
   * associated with a column, they will not become pending in the future.
   */
  column?: Maybe<ProjectColumn>;
  /**
   * The card content item
   */
  content?: Maybe<ProjectCardItem>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The actor who created this card
   */
  creator?: Maybe<Actor>;
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
  /**
   * Whether the card is archived
   */
  isArchived: ScalarsEnums["Boolean"];
  /**
   * The card note
   */
  note?: Maybe<ScalarsEnums["String"]>;
  /**
   * The project that contains this card.
   */
  project: Project;
  /**
   * The HTTP path for this card
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The state of ProjectCard
   */
  state?: Maybe<ScalarsEnums["ProjectCardState"]>;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this card
   */
  url: ScalarsEnums["URI"];
}

/**
 * The connection type for ProjectCard.
 */
export interface ProjectCardConnection {
  __typename?: "ProjectCardConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ProjectCardEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<ProjectCard>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface ProjectCardEdge {
  __typename?: "ProjectCardEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<ProjectCard>;
}

/**
 * Types that can be inside Project Cards.
 */
export interface ProjectCardItem {
  __typename?: "Issue" | "PullRequest";
  $on: $ProjectCardItem;
}

/**
 * A column inside a project.
 */
export interface ProjectColumn {
  __typename?: "ProjectColumn";
  /**
   * List of cards in the column
   */
  cards: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * A list of archived states to filter the cards by
     * @defaultValue `["ARCHIVED","NOT_ARCHIVED"]`
     */
    archivedStates?: Maybe<Array<Maybe<ProjectCardArchivedState>>>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => ProjectCardConnection;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
  /**
   * The project column's name.
   */
  name: ScalarsEnums["String"];
  /**
   * The project that contains this column.
   */
  project: Project;
  /**
   * The semantic purpose of the column
   */
  purpose?: Maybe<ScalarsEnums["ProjectColumnPurpose"]>;
  /**
   * The HTTP path for this project column
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this project column
   */
  url: ScalarsEnums["URI"];
}

/**
 * The connection type for ProjectColumn.
 */
export interface ProjectColumnConnection {
  __typename?: "ProjectColumnConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ProjectColumnEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<ProjectColumn>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface ProjectColumnEdge {
  __typename?: "ProjectColumnEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<ProjectColumn>;
}

/**
 * A list of projects associated with the owner.
 */
export interface ProjectConnection {
  __typename?: "ProjectConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ProjectEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Project>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface ProjectEdge {
  __typename?: "ProjectEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Project>;
}

/**
 * Represents an owner of a Project.
 */
export interface ProjectOwner {
  __typename?: "Organization" | "Repository" | "User";
  id: ScalarsEnums["ID"];
  /**
   * Find project by number.
   */
  project: (args: {
    /**
     * The project number to find.
     */
    number: Scalars["Int"];
  }) => Maybe<Project>;
  /**
   * A list of projects under the owner.
   */
  projects: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for projects returned from the connection
     */
    orderBy?: Maybe<ProjectOrder>;
    /**
     * Query to search projects by, currently only searching by name.
     */
    search?: Maybe<Scalars["String"]>;
    /**
     * A list of states to filter the projects by.
     */
    states?: Maybe<Array<ProjectState>>;
  }) => ProjectConnection;
  /**
   * The HTTP path listing owners projects
   */
  projectsResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL listing owners projects
   */
  projectsUrl: ScalarsEnums["URI"];
  /**
   * Can the current viewer create new projects on this owner.
   */
  viewerCanCreateProjects: ScalarsEnums["Boolean"];
  $on: $ProjectOwner;
}

/**
 * Project progress stats.
 */
export interface ProjectProgress {
  __typename?: "ProjectProgress";
  /**
   * The number of done cards.
   */
  doneCount: ScalarsEnums["Int"];
  /**
   * The percentage of done cards.
   */
  donePercentage: ScalarsEnums["Float"];
  /**
   * Whether progress tracking is enabled and cards with purpose exist for this project
   */
  enabled: ScalarsEnums["Boolean"];
  /**
   * The number of in-progress cards.
   */
  inProgressCount: ScalarsEnums["Int"];
  /**
   * The percentage of in-progress cards.
   */
  inProgressPercentage: ScalarsEnums["Float"];
  /**
   * The number of to do cards.
   */
  todoCount: ScalarsEnums["Int"];
  /**
   * The percentage of to do cards.
   */
  todoPercentage: ScalarsEnums["Float"];
}

/**
 * New projects that manage issues, pull requests and drafts using tables and boards.
 */
export interface ProjectV2 {
  __typename?: "ProjectV2";
  /**
   * Returns true if the project is closed.
   */
  closed: ScalarsEnums["Boolean"];
  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The actor who originally created the project.
   */
  creator?: Maybe<Actor>;
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * A field of the project
   */
  field: (args: {
    /**
     * The name of the field
     */
    name: Scalars["String"];
  }) => Maybe<ProjectV2FieldConfiguration>;
  /**
   * List of fields and their constraints in the project
   */
  fields: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for project v2 fields returned from the connection
     * @defaultValue `{"direction":"ASC","field":"POSITION"}`
     */
    orderBy?: Maybe<ProjectV2FieldOrder>;
  }) => ProjectV2FieldConfigurationConnection;
  id: ScalarsEnums["ID"];
  /**
   * List of items in the project
   */
  items: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for project v2 items returned from the connection
     * @defaultValue `{"direction":"ASC","field":"POSITION"}`
     */
    orderBy?: Maybe<ProjectV2ItemOrder>;
  }) => ProjectV2ItemConnection;
  /**
   * The project's number.
   */
  number: ScalarsEnums["Int"];
  /**
   * The project's owner. Currently limited to organizations and users.
   */
  owner: ProjectV2Owner;
  /**
   * Returns true if the project is public.
   */
  public: ScalarsEnums["Boolean"];
  /**
   * The project's readme.
   */
  readme?: Maybe<ScalarsEnums["String"]>;
  /**
   * The repositories the project is linked to.
   */
  repositories: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for repositories returned from the connection
     * @defaultValue `{"direction":"DESC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<RepositoryOrder>;
  }) => RepositoryConnection;
  /**
   * The HTTP path for this project
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The project's short description.
   */
  shortDescription?: Maybe<ScalarsEnums["String"]>;
  /**
   * The teams the project is linked to.
   */
  teams: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for teams returned from this connection.
     * @defaultValue `{"direction":"ASC","field":"NAME"}`
     */
    orderBy?: Maybe<TeamOrder>;
  }) => TeamConnection;
  /**
   * Returns true if this project is a template.
   */
  template: ScalarsEnums["Boolean"];
  /**
   * The project's name.
   */
  title: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this project
   */
  url: ScalarsEnums["URI"];
  /**
   * A view of the project
   */
  view: (args: {
    /**
     * The number of a view belonging to the project
     */
    number: Scalars["Int"];
  }) => Maybe<ProjectV2View>;
  /**
   * Indicates if the object can be closed by the viewer.
   */
  viewerCanClose: ScalarsEnums["Boolean"];
  /**
   * Indicates if the object can be reopened by the viewer.
   */
  viewerCanReopen: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: ScalarsEnums["Boolean"];
  /**
   * List of views in the project
   */
  views: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for project v2 views returned from the connection
     * @defaultValue `{"direction":"ASC","field":"POSITION"}`
     */
    orderBy?: Maybe<ProjectV2ViewOrder>;
  }) => ProjectV2ViewConnection;
  /**
   * A workflow of the project
   */
  workflow: (args: {
    /**
     * The number of a workflow belonging to the project
     */
    number: Scalars["Int"];
  }) => Maybe<ProjectV2Workflow>;
  /**
   * List of the workflows in the project
   */
  workflows: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for project v2 workflows returned from the connection
     * @defaultValue `{"direction":"ASC","field":"NAME"}`
     */
    orderBy?: Maybe<ProjectV2WorkflowOrder>;
  }) => ProjectV2WorkflowConnection;
}

/**
 * Possible collaborators for a project.
 */
export interface ProjectV2Actor {
  __typename?: "Team" | "User";
  $on: $ProjectV2Actor;
}

/**
 * The connection type for ProjectV2Actor.
 */
export interface ProjectV2ActorConnection {
  __typename?: "ProjectV2ActorConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ProjectV2ActorEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<ProjectV2Actor>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface ProjectV2ActorEdge {
  __typename?: "ProjectV2ActorEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<ProjectV2Actor>;
}

/**
 * The connection type for ProjectV2.
 */
export interface ProjectV2Connection {
  __typename?: "ProjectV2Connection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ProjectV2Edge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<ProjectV2>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface ProjectV2Edge {
  __typename?: "ProjectV2Edge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<ProjectV2>;
}

/**
 * A field inside a project.
 */
export interface ProjectV2Field {
  __typename?: "ProjectV2Field";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The field's type.
   */
  dataType: ScalarsEnums["ProjectV2FieldType"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
  /**
   * The project field's name.
   */
  name: ScalarsEnums["String"];
  /**
   * The project that contains this field.
   */
  project: ProjectV2;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * Common fields across different project field types
 */
export interface ProjectV2FieldCommon {
  __typename?:
    | "ProjectV2Field"
    | "ProjectV2IterationField"
    | "ProjectV2SingleSelectField";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The field's type.
   */
  dataType: ScalarsEnums["ProjectV2FieldType"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
  /**
   * The project field's name.
   */
  name: ScalarsEnums["String"];
  /**
   * The project that contains this field.
   */
  project: ProjectV2;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  $on: $ProjectV2FieldCommon;
}

/**
 * Configurations for project fields.
 */
export interface ProjectV2FieldConfiguration {
  __typename?:
    | "ProjectV2Field"
    | "ProjectV2IterationField"
    | "ProjectV2SingleSelectField";
  $on: $ProjectV2FieldConfiguration;
}

/**
 * The connection type for ProjectV2FieldConfiguration.
 */
export interface ProjectV2FieldConfigurationConnection {
  __typename?: "ProjectV2FieldConfigurationConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ProjectV2FieldConfigurationEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<ProjectV2FieldConfiguration>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface ProjectV2FieldConfigurationEdge {
  __typename?: "ProjectV2FieldConfigurationEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<ProjectV2FieldConfiguration>;
}

/**
 * The connection type for ProjectV2Field.
 */
export interface ProjectV2FieldConnection {
  __typename?: "ProjectV2FieldConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ProjectV2FieldEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<ProjectV2Field>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface ProjectV2FieldEdge {
  __typename?: "ProjectV2FieldEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<ProjectV2Field>;
}

/**
 * An item within a Project.
 */
export interface ProjectV2Item {
  __typename?: "ProjectV2Item";
  /**
   * The content of the referenced draft issue, issue, or pull request
   */
  content?: Maybe<ProjectV2ItemContent>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The actor who created the item.
   */
  creator?: Maybe<Actor>;
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The field value of the first project field which matches the 'name' argument that is set on the item.
   */
  fieldValueByName: (args: {
    /**
     * The name of the field to return the field value of
     */
    name: Scalars["String"];
  }) => Maybe<ProjectV2ItemFieldValue>;
  /**
   * The field values that are set on the item.
   */
  fieldValues: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for project v2 item field values returned from the connection
     * @defaultValue `{"direction":"ASC","field":"POSITION"}`
     */
    orderBy?: Maybe<ProjectV2ItemFieldValueOrder>;
  }) => ProjectV2ItemFieldValueConnection;
  id: ScalarsEnums["ID"];
  /**
   * Whether the item is archived.
   */
  isArchived: ScalarsEnums["Boolean"];
  /**
   * The project that contains this item.
   */
  project: ProjectV2;
  /**
   * The type of the item.
   */
  type: ScalarsEnums["ProjectV2ItemType"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * The connection type for ProjectV2Item.
 */
export interface ProjectV2ItemConnection {
  __typename?: "ProjectV2ItemConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ProjectV2ItemEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<ProjectV2Item>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * Types that can be inside Project Items.
 */
export interface ProjectV2ItemContent {
  __typename?: "DraftIssue" | "Issue" | "PullRequest";
  $on: $ProjectV2ItemContent;
}

/**
 * An edge in a connection.
 */
export interface ProjectV2ItemEdge {
  __typename?: "ProjectV2ItemEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<ProjectV2Item>;
}

/**
 * The value of a date field in a Project item.
 */
export interface ProjectV2ItemFieldDateValue {
  __typename?: "ProjectV2ItemFieldDateValue";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The actor who created the item.
   */
  creator?: Maybe<Actor>;
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Date value for the field
   */
  date?: Maybe<ScalarsEnums["Date"]>;
  /**
   * The project field that contains this value.
   */
  field: ProjectV2FieldConfiguration;
  id: ScalarsEnums["ID"];
  /**
   * The project item that contains this value.
   */
  item: ProjectV2Item;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * The value of an iteration field in a Project item.
 */
export interface ProjectV2ItemFieldIterationValue {
  __typename?: "ProjectV2ItemFieldIterationValue";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The actor who created the item.
   */
  creator?: Maybe<Actor>;
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The duration of the iteration in days.
   */
  duration: ScalarsEnums["Int"];
  /**
   * The project field that contains this value.
   */
  field: ProjectV2FieldConfiguration;
  id: ScalarsEnums["ID"];
  /**
   * The project item that contains this value.
   */
  item: ProjectV2Item;
  /**
   * The ID of the iteration.
   */
  iterationId: ScalarsEnums["String"];
  /**
   * The start date of the iteration.
   */
  startDate: ScalarsEnums["Date"];
  /**
   * The title of the iteration.
   */
  title: ScalarsEnums["String"];
  /**
   * The title of the iteration, with HTML.
   */
  titleHTML: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * The value of the labels field in a Project item.
 */
export interface ProjectV2ItemFieldLabelValue {
  __typename?: "ProjectV2ItemFieldLabelValue";
  /**
   * The field that contains this value.
   */
  field: ProjectV2FieldConfiguration;
  /**
   * Labels value of a field
   */
  labels: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<LabelConnection>;
}

/**
 * The value of a milestone field in a Project item.
 */
export interface ProjectV2ItemFieldMilestoneValue {
  __typename?: "ProjectV2ItemFieldMilestoneValue";
  /**
   * The field that contains this value.
   */
  field: ProjectV2FieldConfiguration;
  /**
   * Milestone value of a field
   */
  milestone?: Maybe<Milestone>;
}

/**
 * The value of a number field in a Project item.
 */
export interface ProjectV2ItemFieldNumberValue {
  __typename?: "ProjectV2ItemFieldNumberValue";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The actor who created the item.
   */
  creator?: Maybe<Actor>;
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The project field that contains this value.
   */
  field: ProjectV2FieldConfiguration;
  id: ScalarsEnums["ID"];
  /**
   * The project item that contains this value.
   */
  item: ProjectV2Item;
  /**
   * Number as a float(8)
   */
  number?: Maybe<ScalarsEnums["Float"]>;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * The value of a pull request field in a Project item.
 */
export interface ProjectV2ItemFieldPullRequestValue {
  __typename?: "ProjectV2ItemFieldPullRequestValue";
  /**
   * The field that contains this value.
   */
  field: ProjectV2FieldConfiguration;
  /**
   * The pull requests for this field
   */
  pullRequests: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for pull requests.
     * @defaultValue `{"direction":"ASC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<PullRequestOrder>;
  }) => Maybe<PullRequestConnection>;
}

/**
 * The value of a repository field in a Project item.
 */
export interface ProjectV2ItemFieldRepositoryValue {
  __typename?: "ProjectV2ItemFieldRepositoryValue";
  /**
   * The field that contains this value.
   */
  field: ProjectV2FieldConfiguration;
  /**
   * The repository for this field.
   */
  repository?: Maybe<Repository>;
}

/**
 * The value of a reviewers field in a Project item.
 */
export interface ProjectV2ItemFieldReviewerValue {
  __typename?: "ProjectV2ItemFieldReviewerValue";
  /**
   * The field that contains this value.
   */
  field: ProjectV2FieldConfiguration;
  /**
   * The reviewers for this field.
   */
  reviewers: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<RequestedReviewerConnection>;
}

/**
 * The value of a single select field in a Project item.
 */
export interface ProjectV2ItemFieldSingleSelectValue {
  __typename?: "ProjectV2ItemFieldSingleSelectValue";
  /**
   * The color applied to the selected single-select option.
   */
  color: ScalarsEnums["ProjectV2SingleSelectFieldOptionColor"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The actor who created the item.
   */
  creator?: Maybe<Actor>;
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * A plain-text description of the selected single-select option, such as what the option means.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The description of the selected single-select option, including HTML tags.
   */
  descriptionHTML?: Maybe<ScalarsEnums["String"]>;
  /**
   * The project field that contains this value.
   */
  field: ProjectV2FieldConfiguration;
  id: ScalarsEnums["ID"];
  /**
   * The project item that contains this value.
   */
  item: ProjectV2Item;
  /**
   * The name of the selected single select option.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * The html name of the selected single select option.
   */
  nameHTML?: Maybe<ScalarsEnums["String"]>;
  /**
   * The id of the selected single select option.
   */
  optionId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * The value of a text field in a Project item.
 */
export interface ProjectV2ItemFieldTextValue {
  __typename?: "ProjectV2ItemFieldTextValue";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The actor who created the item.
   */
  creator?: Maybe<Actor>;
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The project field that contains this value.
   */
  field: ProjectV2FieldConfiguration;
  id: ScalarsEnums["ID"];
  /**
   * The project item that contains this value.
   */
  item: ProjectV2Item;
  /**
   * Text value of a field
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * The value of a user field in a Project item.
 */
export interface ProjectV2ItemFieldUserValue {
  __typename?: "ProjectV2ItemFieldUserValue";
  /**
   * The field that contains this value.
   */
  field: ProjectV2FieldConfiguration;
  /**
   * The users for this field
   */
  users: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<UserConnection>;
}

/**
 * Project field values
 */
export interface ProjectV2ItemFieldValue {
  __typename?:
    | "ProjectV2ItemFieldDateValue"
    | "ProjectV2ItemFieldIterationValue"
    | "ProjectV2ItemFieldLabelValue"
    | "ProjectV2ItemFieldMilestoneValue"
    | "ProjectV2ItemFieldNumberValue"
    | "ProjectV2ItemFieldPullRequestValue"
    | "ProjectV2ItemFieldRepositoryValue"
    | "ProjectV2ItemFieldReviewerValue"
    | "ProjectV2ItemFieldSingleSelectValue"
    | "ProjectV2ItemFieldTextValue"
    | "ProjectV2ItemFieldUserValue";
  $on: $ProjectV2ItemFieldValue;
}

/**
 * Common fields across different project field value types
 */
export interface ProjectV2ItemFieldValueCommon {
  __typename?:
    | "ProjectV2ItemFieldDateValue"
    | "ProjectV2ItemFieldIterationValue"
    | "ProjectV2ItemFieldNumberValue"
    | "ProjectV2ItemFieldSingleSelectValue"
    | "ProjectV2ItemFieldTextValue";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The actor who created the item.
   */
  creator?: Maybe<Actor>;
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The project field that contains this value.
   */
  field: ProjectV2FieldConfiguration;
  id: ScalarsEnums["ID"];
  /**
   * The project item that contains this value.
   */
  item: ProjectV2Item;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  $on: $ProjectV2ItemFieldValueCommon;
}

/**
 * The connection type for ProjectV2ItemFieldValue.
 */
export interface ProjectV2ItemFieldValueConnection {
  __typename?: "ProjectV2ItemFieldValueConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ProjectV2ItemFieldValueEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<ProjectV2ItemFieldValue>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface ProjectV2ItemFieldValueEdge {
  __typename?: "ProjectV2ItemFieldValueEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<ProjectV2ItemFieldValue>;
}

/**
 * An iteration field inside a project.
 */
export interface ProjectV2IterationField {
  __typename?: "ProjectV2IterationField";
  /**
   * Iteration configuration settings
   */
  configuration: ProjectV2IterationFieldConfiguration;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The field's type.
   */
  dataType: ScalarsEnums["ProjectV2FieldType"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
  /**
   * The project field's name.
   */
  name: ScalarsEnums["String"];
  /**
   * The project that contains this field.
   */
  project: ProjectV2;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * Iteration field configuration for a project.
 */
export interface ProjectV2IterationFieldConfiguration {
  __typename?: "ProjectV2IterationFieldConfiguration";
  /**
   * The iteration's completed iterations
   */
  completedIterations: Array<ProjectV2IterationFieldIteration>;
  /**
   * The iteration's duration in days
   */
  duration: ScalarsEnums["Int"];
  /**
   * The iteration's iterations
   */
  iterations: Array<ProjectV2IterationFieldIteration>;
  /**
   * The iteration's start day of the week
   */
  startDay: ScalarsEnums["Int"];
}

/**
 * Iteration field iteration settings for a project.
 */
export interface ProjectV2IterationFieldIteration {
  __typename?: "ProjectV2IterationFieldIteration";
  /**
   * The iteration's duration in days
   */
  duration: ScalarsEnums["Int"];
  /**
   * The iteration's ID.
   */
  id: ScalarsEnums["String"];
  /**
   * The iteration's start date
   */
  startDate: ScalarsEnums["Date"];
  /**
   * The iteration's title.
   */
  title: ScalarsEnums["String"];
  /**
   * The iteration's html title.
   */
  titleHTML: ScalarsEnums["String"];
}

/**
 * Represents an owner of a project (beta).
 */
export interface ProjectV2Owner {
  __typename?: "Issue" | "Organization" | "PullRequest" | "User";
  id: ScalarsEnums["ID"];
  /**
   * Find a project by number.
   */
  projectV2: (args: {
    /**
     * The project number.
     */
    number: Scalars["Int"];
  }) => Maybe<ProjectV2>;
  /**
   * A list of projects under the owner.
   */
  projectsV2: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * How to order the returned projects.
     * @defaultValue `{"direction":"DESC","field":"NUMBER"}`
     */
    orderBy?: Maybe<ProjectV2Order>;
    /**
     * A project to search for under the the owner.
     */
    query?: Maybe<Scalars["String"]>;
  }) => ProjectV2Connection;
  $on: $ProjectV2Owner;
}

/**
 * Recent projects for the owner.
 */
export interface ProjectV2Recent {
  __typename?: "Organization" | "Repository" | "User";
  /**
   * Recent projects that this user has modified in the context of the owner.
   */
  recentProjects: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => ProjectV2Connection;
  $on: $ProjectV2Recent;
}

/**
 * A single select field inside a project.
 */
export interface ProjectV2SingleSelectField {
  __typename?: "ProjectV2SingleSelectField";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The field's type.
   */
  dataType: ScalarsEnums["ProjectV2FieldType"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
  /**
   * The project field's name.
   */
  name: ScalarsEnums["String"];
  /**
   * Options for the single select field
   */
  options: (args?: {
    /**
     * Filter returned options to only those matching these names, case insensitive.
     */
    names?: Maybe<Array<Scalars["String"]>>;
  }) => Array<ProjectV2SingleSelectFieldOption>;
  /**
   * The project that contains this field.
   */
  project: ProjectV2;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * Single select field option for a configuration for a project.
 */
export interface ProjectV2SingleSelectFieldOption {
  __typename?: "ProjectV2SingleSelectFieldOption";
  /**
   * The option's display color.
   */
  color: ScalarsEnums["ProjectV2SingleSelectFieldOptionColor"];
  /**
   * The option's plain-text description.
   */
  description: ScalarsEnums["String"];
  /**
   * The option's description, possibly containing HTML.
   */
  descriptionHTML: ScalarsEnums["String"];
  /**
   * The option's ID.
   */
  id: ScalarsEnums["String"];
  /**
   * The option's name.
   */
  name: ScalarsEnums["String"];
  /**
   * The option's html name.
   */
  nameHTML: ScalarsEnums["String"];
}

/**
 * Represents a sort by field and direction.
 */
export interface ProjectV2SortBy {
  __typename?: "ProjectV2SortBy";
  /**
   * The direction of the sorting. Possible values are ASC and DESC.
   */
  direction: ScalarsEnums["OrderDirection"];
  /**
   * The field by which items are sorted.
   */
  field: ProjectV2Field;
}

/**
 * The connection type for ProjectV2SortBy.
 */
export interface ProjectV2SortByConnection {
  __typename?: "ProjectV2SortByConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ProjectV2SortByEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<ProjectV2SortBy>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface ProjectV2SortByEdge {
  __typename?: "ProjectV2SortByEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<ProjectV2SortBy>;
}

/**
 * Represents a sort by field and direction.
 */
export interface ProjectV2SortByField {
  __typename?: "ProjectV2SortByField";
  /**
   * The direction of the sorting. Possible values are ASC and DESC.
   */
  direction: ScalarsEnums["OrderDirection"];
  /**
   * The field by which items are sorted.
   */
  field: ProjectV2FieldConfiguration;
}

/**
 * The connection type for ProjectV2SortByField.
 */
export interface ProjectV2SortByFieldConnection {
  __typename?: "ProjectV2SortByFieldConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ProjectV2SortByFieldEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<ProjectV2SortByField>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface ProjectV2SortByFieldEdge {
  __typename?: "ProjectV2SortByFieldEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<ProjectV2SortByField>;
}

/**
 * A view within a ProjectV2.
 */
export interface ProjectV2View {
  __typename?: "ProjectV2View";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The view's visible fields.
   */
  fields: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for the project v2 fields returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"POSITION"}`
     */
    orderBy?: Maybe<ProjectV2FieldOrder>;
  }) => Maybe<ProjectV2FieldConfigurationConnection>;
  /**
   * The project view's filter.
   */
  filter?: Maybe<ScalarsEnums["String"]>;
  /**
   * The view's group-by field.
   * @deprecated The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.
   */
  groupBy: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for the project v2 fields returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"POSITION"}`
     */
    orderBy?: Maybe<ProjectV2FieldOrder>;
  }) => Maybe<ProjectV2FieldConnection>;
  /**
   * The view's group-by field.
   */
  groupByFields: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for the project v2 fields returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"POSITION"}`
     */
    orderBy?: Maybe<ProjectV2FieldOrder>;
  }) => Maybe<ProjectV2FieldConfigurationConnection>;
  id: ScalarsEnums["ID"];
  /**
   * The project view's layout.
   */
  layout: ScalarsEnums["ProjectV2ViewLayout"];
  /**
   * The project view's name.
   */
  name: ScalarsEnums["String"];
  /**
   * The project view's number.
   */
  number: ScalarsEnums["Int"];
  /**
   * The project that contains this view.
   */
  project: ProjectV2;
  /**
   * The view's sort-by config.
   * @deprecated The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.
   */
  sortBy: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ProjectV2SortByConnection>;
  /**
   * The view's sort-by config.
   */
  sortByFields: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ProjectV2SortByFieldConnection>;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The view's vertical-group-by field.
   * @deprecated The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.
   */
  verticalGroupBy: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for the project v2 fields returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"POSITION"}`
     */
    orderBy?: Maybe<ProjectV2FieldOrder>;
  }) => Maybe<ProjectV2FieldConnection>;
  /**
   * The view's vertical-group-by field.
   */
  verticalGroupByFields: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for the project v2 fields returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"POSITION"}`
     */
    orderBy?: Maybe<ProjectV2FieldOrder>;
  }) => Maybe<ProjectV2FieldConfigurationConnection>;
  /**
   * The view's visible fields.
   * @deprecated The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC.
   */
  visibleFields: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for the project v2 fields returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"POSITION"}`
     */
    orderBy?: Maybe<ProjectV2FieldOrder>;
  }) => Maybe<ProjectV2FieldConnection>;
}

/**
 * The connection type for ProjectV2View.
 */
export interface ProjectV2ViewConnection {
  __typename?: "ProjectV2ViewConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ProjectV2ViewEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<ProjectV2View>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface ProjectV2ViewEdge {
  __typename?: "ProjectV2ViewEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<ProjectV2View>;
}

/**
 * A workflow inside a project.
 */
export interface ProjectV2Workflow {
  __typename?: "ProjectV2Workflow";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The workflows' enabled state.
   */
  enabled: ScalarsEnums["Boolean"];
  id: ScalarsEnums["ID"];
  /**
   * The workflows' name.
   */
  name: ScalarsEnums["String"];
  /**
   * The workflows' number.
   */
  number: ScalarsEnums["Int"];
  /**
   * The project that contains this workflow.
   */
  project: ProjectV2;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * The connection type for ProjectV2Workflow.
 */
export interface ProjectV2WorkflowConnection {
  __typename?: "ProjectV2WorkflowConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ProjectV2WorkflowEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<ProjectV2Workflow>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface ProjectV2WorkflowEdge {
  __typename?: "ProjectV2WorkflowEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<ProjectV2Workflow>;
}

/**
 * A user's public key.
 */
export interface PublicKey {
  __typename?: "PublicKey";
  /**
   * The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
   */
  accessedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Identifies the date and time when the key was created. Keys created before March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
   */
  createdAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The fingerprint for this PublicKey.
   */
  fingerprint: ScalarsEnums["String"];
  id: ScalarsEnums["ID"];
  /**
   * Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
   */
  isReadOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The public key string.
   */
  key: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the key was updated. Keys created before March 5th, 2014 may have inaccurate values. Values will be null for keys not owned by the user.
   */
  updatedAt?: Maybe<ScalarsEnums["DateTime"]>;
}

/**
 * The connection type for PublicKey.
 */
export interface PublicKeyConnection {
  __typename?: "PublicKeyConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<PublicKeyEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<PublicKey>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface PublicKeyEdge {
  __typename?: "PublicKeyEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<PublicKey>;
}

/**
 * Autogenerated return type of PublishSponsorsTier
 */
export interface PublishSponsorsTierPayload {
  __typename?: "PublishSponsorsTierPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The tier that was published.
   */
  sponsorsTier?: Maybe<SponsorsTier>;
}

/**
 * A repository pull request.
 */
export interface PullRequest {
  __typename?: "PullRequest";
  /**
   * Reason that the conversation was locked.
   */
  activeLockReason?: Maybe<ScalarsEnums["LockReason"]>;
  /**
   * The number of additions in this pull request.
   */
  additions: ScalarsEnums["Int"];
  /**
   * A list of Users assigned to this object.
   */
  assignees: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => UserConnection;
  /**
   * The actor who authored the comment.
   */
  author?: Maybe<Actor>;
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: ScalarsEnums["CommentAuthorAssociation"];
  /**
   * Returns the auto-merge request object if one exists for this pull request.
   */
  autoMergeRequest?: Maybe<AutoMergeRequest>;
  /**
   * Identifies the base Ref associated with the pull request.
   */
  baseRef?: Maybe<Ref>;
  /**
   * Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
   */
  baseRefName: ScalarsEnums["String"];
  /**
   * Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
   */
  baseRefOid: ScalarsEnums["GitObjectID"];
  /**
   * The repository associated with this pull request's base Ref.
   */
  baseRepository?: Maybe<Repository>;
  /**
   * The body as Markdown.
   */
  body: ScalarsEnums["String"];
  /**
   * The body rendered to HTML.
   */
  bodyHTML: ScalarsEnums["HTML"];
  /**
   * The body rendered to text.
   */
  bodyText: ScalarsEnums["String"];
  /**
   * The number of changed files in this pull request.
   */
  changedFiles: ScalarsEnums["Int"];
  /**
   * The HTTP path for the checks of this pull request.
   */
  checksResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for the checks of this pull request.
   */
  checksUrl: ScalarsEnums["URI"];
  /**
   * `true` if the pull request is closed
   */
  closed: ScalarsEnums["Boolean"];
  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * List of issues that were may be closed by this pull request
   */
  closingIssuesReferences: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for issues returned from the connection
     */
    orderBy?: Maybe<IssueOrder>;
    /**
     * Return only manually linked Issues
     * @defaultValue `false`
     */
    userLinkedOnly?: Maybe<Scalars["Boolean"]>;
  }) => Maybe<IssueConnection>;
  /**
   * A list of comments associated with the pull request.
   */
  comments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for issue comments returned from the connection.
     */
    orderBy?: Maybe<IssueCommentOrder>;
  }) => IssueCommentConnection;
  /**
   * A list of commits present in this pull request's head branch not present in the base branch.
   */
  commits: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => PullRequestCommitConnection;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: ScalarsEnums["Boolean"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of deletions in this pull request.
   */
  deletions: ScalarsEnums["Int"];
  /**
   * The actor who edited this pull request's body.
   */
  editor?: Maybe<Actor>;
  /**
   * Lists the files changed within this pull request.
   */
  files: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<PullRequestChangedFileConnection>;
  /**
   * Identifies the head Ref associated with the pull request.
   */
  headRef?: Maybe<Ref>;
  /**
   * Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
   */
  headRefName: ScalarsEnums["String"];
  /**
   * Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
   */
  headRefOid: ScalarsEnums["GitObjectID"];
  /**
   * The repository associated with this pull request's head Ref.
   */
  headRepository?: Maybe<Repository>;
  /**
   * The owner of the repository associated with this pull request's head Ref.
   */
  headRepositoryOwner?: Maybe<RepositoryOwner>;
  /**
   * The hovercard information for this issue
   */
  hovercard: (args?: {
    /**
     * Whether or not to include notification contexts
     * @defaultValue `true`
     */
    includeNotificationContexts?: Maybe<Scalars["Boolean"]>;
  }) => Hovercard;
  id: ScalarsEnums["ID"];
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: ScalarsEnums["Boolean"];
  /**
   * The head and base repositories are different.
   */
  isCrossRepository: ScalarsEnums["Boolean"];
  /**
   * Identifies if the pull request is a draft.
   */
  isDraft: ScalarsEnums["Boolean"];
  /**
   * Is this pull request read by the viewer
   */
  isReadByViewer?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * A list of labels associated with the object.
   */
  labels: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for labels returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<LabelOrder>;
  }) => Maybe<LabelConnection>;
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * A list of latest reviews per user associated with the pull request.
   */
  latestOpinionatedReviews: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Only return reviews from user who have write access to the repository
     * @defaultValue `false`
     */
    writersOnly?: Maybe<Scalars["Boolean"]>;
  }) => Maybe<PullRequestReviewConnection>;
  /**
   * A list of latest reviews per user associated with the pull request that are not also pending review.
   */
  latestReviews: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<PullRequestReviewConnection>;
  /**
   * `true` if the pull request is locked
   */
  locked: ScalarsEnums["Boolean"];
  /**
   * Indicates whether maintainers can modify the pull request.
   */
  maintainerCanModify: ScalarsEnums["Boolean"];
  /**
   * The commit that was created when this pull request was merged.
   */
  mergeCommit?: Maybe<Commit>;
  /**
   * The merge queue entry of the pull request in the base branch's merge queue
   */
  mergeQueueEntry?: Maybe<MergeQueueEntry>;
  /**
   * Whether or not the pull request can be merged based on the existence of merge conflicts.
   */
  mergeable: ScalarsEnums["MergeableState"];
  /**
   * Whether or not the pull request was merged.
   */
  merged: ScalarsEnums["Boolean"];
  /**
   * The date and time that the pull request was merged.
   */
  mergedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The actor who merged the pull request.
   */
  mergedBy?: Maybe<Actor>;
  /**
   * Identifies the milestone associated with the pull request.
   */
  milestone?: Maybe<Milestone>;
  /**
   * Identifies the pull request number.
   */
  number: ScalarsEnums["Int"];
  /**
   * A list of Users that are participating in the Pull Request conversation.
   */
  participants: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => UserConnection;
  /**
   * The permalink to the pull request.
   */
  permalink: ScalarsEnums["URI"];
  /**
   * The commit that GitHub automatically generated to test if this pull request could be merged. This field will not return a value if the pull request is merged, or if the test merge commit is still being generated. See the `mergeable` field for more details on the mergeability of the pull request.
   */
  potentialMergeCommit?: Maybe<Commit>;
  /**
   * List of project cards associated with this pull request.
   */
  projectCards: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * A list of archived states to filter the cards by
     * @defaultValue `["ARCHIVED","NOT_ARCHIVED"]`
     */
    archivedStates?: Maybe<Array<Maybe<ProjectCardArchivedState>>>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => ProjectCardConnection;
  /**
   * List of project items associated with this pull request.
   */
  projectItems: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Include archived items.
     * @defaultValue `true`
     */
    includeArchived?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => ProjectV2ItemConnection;
  /**
   * Find a project by number.
   */
  projectV2: (args: {
    /**
     * The project number.
     */
    number: Scalars["Int"];
  }) => Maybe<ProjectV2>;
  /**
   * A list of projects under the owner.
   */
  projectsV2: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * How to order the returned projects.
     * @defaultValue `{"direction":"DESC","field":"NUMBER"}`
     */
    orderBy?: Maybe<ProjectV2Order>;
    /**
     * A project to search for under the the owner.
     */
    query?: Maybe<Scalars["String"]>;
  }) => ProjectV2Connection;
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Maybe<Array<ReactionGroup>>;
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Allows filtering Reactions by emoji.
     */
    content?: Maybe<ReactionContent>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Allows specifying the order in which reactions are returned.
     */
    orderBy?: Maybe<ReactionOrder>;
  }) => ReactionConnection;
  /**
   * The repository associated with this node.
   */
  repository: Repository;
  /**
   * The HTTP path for this pull request.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP path for reverting this pull request.
   */
  revertResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for reverting this pull request.
   */
  revertUrl: ScalarsEnums["URI"];
  /**
   * The current status of this pull request with respect to code review.
   */
  reviewDecision?: Maybe<ScalarsEnums["PullRequestReviewDecision"]>;
  /**
   * A list of review requests associated with the pull request.
   */
  reviewRequests: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ReviewRequestConnection>;
  /**
   * The list of all review threads for this pull request.
   */
  reviewThreads: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => PullRequestReviewThreadConnection;
  /**
   * A list of reviews associated with the pull request.
   */
  reviews: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Filter by author of the review.
     */
    author?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * A list of states to filter the reviews.
     */
    states?: Maybe<Array<PullRequestReviewState>>;
  }) => Maybe<PullRequestReviewConnection>;
  /**
   * Identifies the state of the pull request.
   */
  state: ScalarsEnums["PullRequestState"];
  /**
   * A list of reviewer suggestions based on commit history and past review comments.
   */
  suggestedReviewers: Array<Maybe<SuggestedReviewer>>;
  /**
   * A list of events, comments, commits, etc. associated with the pull request.
   * @deprecated `timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.
   */
  timeline: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Allows filtering timeline events by a `since` timestamp.
     */
    since?: Maybe<Scalars["DateTime"]>;
  }) => PullRequestTimelineConnection;
  /**
   * A list of events, comments, commits, etc. associated with the pull request.
   */
  timelineItems: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Filter timeline items by type.
     */
    itemTypes?: Maybe<Array<PullRequestTimelineItemsItemType>>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter timeline items by a `since` timestamp.
     */
    since?: Maybe<Scalars["DateTime"]>;
    /**
     * Skips the first _n_ elements in the list.
     */
    skip?: Maybe<Scalars["Int"]>;
  }) => PullRequestTimelineItemsConnection;
  /**
   * Identifies the pull request title.
   */
  title: ScalarsEnums["String"];
  /**
   * Identifies the pull request title rendered to HTML.
   */
  titleHTML: ScalarsEnums["HTML"];
  /**
   * Returns a count of how many comments this pull request has received.
   */
  totalCommentsCount?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this pull request.
   */
  url: ScalarsEnums["URI"];
  /**
   * A list of edits to this content.
   */
  userContentEdits: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<UserContentEditConnection>;
  /**
   * Whether or not the viewer can apply suggestion.
   */
  viewerCanApplySuggestion: ScalarsEnums["Boolean"];
  /**
   * Indicates if the object can be closed by the viewer.
   */
  viewerCanClose: ScalarsEnums["Boolean"];
  /**
   * Check if the viewer can restore the deleted head ref.
   */
  viewerCanDeleteHeadRef: ScalarsEnums["Boolean"];
  /**
   * Whether or not the viewer can disable auto-merge
   */
  viewerCanDisableAutoMerge: ScalarsEnums["Boolean"];
  /**
   * Can the viewer edit files within this pull request.
   */
  viewerCanEditFiles: ScalarsEnums["Boolean"];
  /**
   * Whether or not the viewer can enable auto-merge
   */
  viewerCanEnableAutoMerge: ScalarsEnums["Boolean"];
  /**
   * Indicates whether the viewer can bypass branch protections and merge the pull request immediately
   */
  viewerCanMergeAsAdmin: ScalarsEnums["Boolean"];
  /**
   * Can user react to this subject
   */
  viewerCanReact: ScalarsEnums["Boolean"];
  /**
   * Indicates if the object can be reopened by the viewer.
   */
  viewerCanReopen: ScalarsEnums["Boolean"];
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: ScalarsEnums["Boolean"];
  /**
   * Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
   * If the head ref is up to date or unable to be updated by this user, this will return false.
   */
  viewerCanUpdateBranch: ScalarsEnums["Boolean"];
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<ScalarsEnums["CommentCannotUpdateReason"]>;
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: ScalarsEnums["Boolean"];
  /**
   * The latest review given from the viewer.
   */
  viewerLatestReview?: Maybe<PullRequestReview>;
  /**
   * The person who has requested the viewer for review on this pull request.
   */
  viewerLatestReviewRequest?: Maybe<ReviewRequest>;
  /**
   * The merge body text for the viewer and method.
   */
  viewerMergeBodyText: (args?: {
    /**
     * The merge method for the message.
     */
    mergeType?: Maybe<PullRequestMergeMethod>;
  }) => ScalarsEnums["String"];
  /**
   * The merge headline text for the viewer and method.
   */
  viewerMergeHeadlineText: (args?: {
    /**
     * The merge method for the message.
     */
    mergeType?: Maybe<PullRequestMergeMethod>;
  }) => ScalarsEnums["String"];
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: Maybe<ScalarsEnums["SubscriptionState"]>;
}

/**
 * A file changed in a pull request.
 */
export interface PullRequestChangedFile {
  __typename?: "PullRequestChangedFile";
  /**
   * The number of additions to the file.
   */
  additions: ScalarsEnums["Int"];
  /**
   * How the file was changed in this PullRequest
   */
  changeType: ScalarsEnums["PatchStatus"];
  /**
   * The number of deletions to the file.
   */
  deletions: ScalarsEnums["Int"];
  /**
   * The path of the file.
   */
  path: ScalarsEnums["String"];
  /**
   * The state of the file for the viewer.
   */
  viewerViewedState: ScalarsEnums["FileViewedState"];
}

/**
 * The connection type for PullRequestChangedFile.
 */
export interface PullRequestChangedFileConnection {
  __typename?: "PullRequestChangedFileConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<PullRequestChangedFileEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<PullRequestChangedFile>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface PullRequestChangedFileEdge {
  __typename?: "PullRequestChangedFileEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<PullRequestChangedFile>;
}

/**
 * Represents a Git commit part of a pull request.
 */
export interface PullRequestCommit {
  __typename?: "PullRequestCommit";
  /**
   * The Git commit object
   */
  commit: Commit;
  id: ScalarsEnums["ID"];
  /**
   * The pull request this commit belongs to
   */
  pullRequest: PullRequest;
  /**
   * The HTTP path for this pull request commit
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this pull request commit
   */
  url: ScalarsEnums["URI"];
}

/**
 * Represents a commit comment thread part of a pull request.
 */
export interface PullRequestCommitCommentThread {
  __typename?: "PullRequestCommitCommentThread";
  /**
   * The comments that exist in this thread.
   */
  comments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => CommitCommentConnection;
  /**
   * The commit the comments were made on.
   */
  commit: Commit;
  id: ScalarsEnums["ID"];
  /**
   * The file the comments were made on.
   */
  path?: Maybe<ScalarsEnums["String"]>;
  /**
   * The position in the diff for the commit that the comment was made on.
   */
  position?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The pull request this commit comment thread belongs to
   */
  pullRequest: PullRequest;
  /**
   * The repository associated with this node.
   */
  repository: Repository;
}

/**
 * The connection type for PullRequestCommit.
 */
export interface PullRequestCommitConnection {
  __typename?: "PullRequestCommitConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<PullRequestCommitEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<PullRequestCommit>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface PullRequestCommitEdge {
  __typename?: "PullRequestCommitEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<PullRequestCommit>;
}

/**
 * The connection type for PullRequest.
 */
export interface PullRequestConnection {
  __typename?: "PullRequestConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<PullRequestEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<PullRequest>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * This aggregates pull requests opened by a user within one repository.
 */
export interface PullRequestContributionsByRepository {
  __typename?: "PullRequestContributionsByRepository";
  /**
   * The pull request contributions.
   */
  contributions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for contributions returned from the connection.
     * @defaultValue `{"direction":"DESC"}`
     */
    orderBy?: Maybe<ContributionOrder>;
  }) => CreatedPullRequestContributionConnection;
  /**
   * The repository in which the pull requests were opened.
   */
  repository: Repository;
}

/**
 * An edge in a connection.
 */
export interface PullRequestEdge {
  __typename?: "PullRequestEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<PullRequest>;
}

/**
 * Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
 */
export interface PullRequestParameters {
  __typename?: "PullRequestParameters";
  /**
   * New, reviewable commits pushed will dismiss previous pull request review approvals.
   */
  dismissStaleReviewsOnPush: ScalarsEnums["Boolean"];
  /**
   * Require an approving review in pull requests that modify files that have a designated code owner.
   */
  requireCodeOwnerReview: ScalarsEnums["Boolean"];
  /**
   * Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
   */
  requireLastPushApproval: ScalarsEnums["Boolean"];
  /**
   * The number of approving reviews that are required before a pull request can be merged.
   */
  requiredApprovingReviewCount: ScalarsEnums["Int"];
  /**
   * All conversations on code must be resolved before a pull request can be merged.
   */
  requiredReviewThreadResolution: ScalarsEnums["Boolean"];
}

/**
 * A review object for a given pull request.
 */
export interface PullRequestReview {
  __typename?: "PullRequestReview";
  /**
   * The actor who authored the comment.
   */
  author?: Maybe<Actor>;
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: ScalarsEnums["CommentAuthorAssociation"];
  /**
   * Indicates whether the author of this review has push access to the repository.
   */
  authorCanPushToRepository: ScalarsEnums["Boolean"];
  /**
   * Identifies the pull request review body.
   */
  body: ScalarsEnums["String"];
  /**
   * The body rendered to HTML.
   */
  bodyHTML: ScalarsEnums["HTML"];
  /**
   * The body of this review rendered as plain text.
   */
  bodyText: ScalarsEnums["String"];
  /**
   * A list of review comments for the current pull request review.
   */
  comments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => PullRequestReviewCommentConnection;
  /**
   * Identifies the commit associated with this pull request review.
   */
  commit?: Maybe<Commit>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: ScalarsEnums["Boolean"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The actor who edited the comment.
   */
  editor?: Maybe<Actor>;
  id: ScalarsEnums["ID"];
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: ScalarsEnums["Boolean"];
  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: ScalarsEnums["Boolean"];
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
   */
  minimizedReason?: Maybe<ScalarsEnums["String"]>;
  /**
   * A list of teams that this review was made on behalf of.
   */
  onBehalfOf: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => TeamConnection;
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Identifies the pull request associated with this pull request review.
   */
  pullRequest: PullRequest;
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Maybe<Array<ReactionGroup>>;
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Allows filtering Reactions by emoji.
     */
    content?: Maybe<ReactionContent>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Allows specifying the order in which reactions are returned.
     */
    orderBy?: Maybe<ReactionOrder>;
  }) => ReactionConnection;
  /**
   * The repository associated with this node.
   */
  repository: Repository;
  /**
   * The HTTP path permalink for this PullRequestReview.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Identifies the current state of the pull request review.
   */
  state: ScalarsEnums["PullRequestReviewState"];
  /**
   * Identifies when the Pull Request Review was submitted
   */
  submittedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL permalink for this PullRequestReview.
   */
  url: ScalarsEnums["URI"];
  /**
   * A list of edits to this content.
   */
  userContentEdits: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<UserContentEditConnection>;
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: ScalarsEnums["Boolean"];
  /**
   * Can user react to this subject
   */
  viewerCanReact: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: ScalarsEnums["Boolean"];
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<ScalarsEnums["CommentCannotUpdateReason"]>;
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: ScalarsEnums["Boolean"];
}

/**
 * A review comment associated with a given repository pull request.
 */
export interface PullRequestReviewComment {
  __typename?: "PullRequestReviewComment";
  /**
   * The actor who authored the comment.
   */
  author?: Maybe<Actor>;
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: ScalarsEnums["CommentAuthorAssociation"];
  /**
   * The comment body of this review comment.
   */
  body: ScalarsEnums["String"];
  /**
   * The body rendered to HTML.
   */
  bodyHTML: ScalarsEnums["HTML"];
  /**
   * The comment body of this review comment rendered as plain text.
   */
  bodyText: ScalarsEnums["String"];
  /**
   * Identifies the commit associated with the comment.
   */
  commit?: Maybe<Commit>;
  /**
   * Identifies when the comment was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: ScalarsEnums["Boolean"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The diff hunk to which the comment applies.
   */
  diffHunk: ScalarsEnums["String"];
  /**
   * Identifies when the comment was created in a draft state.
   */
  draftedAt: ScalarsEnums["DateTime"];
  /**
   * The actor who edited the comment.
   */
  editor?: Maybe<Actor>;
  id: ScalarsEnums["ID"];
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: ScalarsEnums["Boolean"];
  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: ScalarsEnums["Boolean"];
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The end line number on the file to which the comment applies
   */
  line?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
   */
  minimizedReason?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies the original commit associated with the comment.
   */
  originalCommit?: Maybe<Commit>;
  /**
   * The end line number on the file to which the comment applied when it was first created
   */
  originalLine?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The original line index in the diff to which the comment applies.
   * @deprecated We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.
   */
  originalPosition: ScalarsEnums["Int"];
  /**
   * The start line number on the file to which the comment applied when it was first created
   */
  originalStartLine?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Identifies when the comment body is outdated
   */
  outdated: ScalarsEnums["Boolean"];
  /**
   * The path to which the comment applies.
   */
  path: ScalarsEnums["String"];
  /**
   * The line index in the diff to which the comment applies.
   * @deprecated We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC.
   */
  position?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The pull request associated with this review comment.
   */
  pullRequest: PullRequest;
  /**
   * The pull request review associated with this review comment.
   */
  pullRequestReview?: Maybe<PullRequestReview>;
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Maybe<Array<ReactionGroup>>;
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Allows filtering Reactions by emoji.
     */
    content?: Maybe<ReactionContent>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Allows specifying the order in which reactions are returned.
     */
    orderBy?: Maybe<ReactionOrder>;
  }) => ReactionConnection;
  /**
   * The comment this is a reply to.
   */
  replyTo?: Maybe<PullRequestReviewComment>;
  /**
   * The repository associated with this node.
   */
  repository: Repository;
  /**
   * The HTTP path permalink for this review comment.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The start line number on the file to which the comment applies
   */
  startLine?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Identifies the state of the comment.
   */
  state: ScalarsEnums["PullRequestReviewCommentState"];
  /**
   * The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
   */
  subjectType: ScalarsEnums["PullRequestReviewThreadSubjectType"];
  /**
   * Identifies when the comment was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL permalink for this review comment.
   */
  url: ScalarsEnums["URI"];
  /**
   * A list of edits to this content.
   */
  userContentEdits: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<UserContentEditConnection>;
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: ScalarsEnums["Boolean"];
  /**
   * Can user react to this subject
   */
  viewerCanReact: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: ScalarsEnums["Boolean"];
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<ScalarsEnums["CommentCannotUpdateReason"]>;
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: ScalarsEnums["Boolean"];
}

/**
 * The connection type for PullRequestReviewComment.
 */
export interface PullRequestReviewCommentConnection {
  __typename?: "PullRequestReviewCommentConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<PullRequestReviewCommentEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<PullRequestReviewComment>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface PullRequestReviewCommentEdge {
  __typename?: "PullRequestReviewCommentEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<PullRequestReviewComment>;
}

/**
 * The connection type for PullRequestReview.
 */
export interface PullRequestReviewConnection {
  __typename?: "PullRequestReviewConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<PullRequestReviewEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<PullRequestReview>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * This aggregates pull request reviews made by a user within one repository.
 */
export interface PullRequestReviewContributionsByRepository {
  __typename?: "PullRequestReviewContributionsByRepository";
  /**
   * The pull request review contributions.
   */
  contributions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for contributions returned from the connection.
     * @defaultValue `{"direction":"DESC"}`
     */
    orderBy?: Maybe<ContributionOrder>;
  }) => CreatedPullRequestReviewContributionConnection;
  /**
   * The repository in which the pull request reviews were made.
   */
  repository: Repository;
}

/**
 * An edge in a connection.
 */
export interface PullRequestReviewEdge {
  __typename?: "PullRequestReviewEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<PullRequestReview>;
}

/**
 * A threaded list of comments for a given pull request.
 */
export interface PullRequestReviewThread {
  __typename?: "PullRequestReviewThread";
  /**
   * A list of pull request comments associated with the thread.
   */
  comments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Skips the first _n_ elements in the list.
     */
    skip?: Maybe<Scalars["Int"]>;
  }) => PullRequestReviewCommentConnection;
  /**
   * The side of the diff on which this thread was placed.
   */
  diffSide: ScalarsEnums["DiffSide"];
  id: ScalarsEnums["ID"];
  /**
   * Whether or not the thread has been collapsed (resolved)
   */
  isCollapsed: ScalarsEnums["Boolean"];
  /**
   * Indicates whether this thread was outdated by newer changes.
   */
  isOutdated: ScalarsEnums["Boolean"];
  /**
   * Whether this thread has been resolved
   */
  isResolved: ScalarsEnums["Boolean"];
  /**
   * The line in the file to which this thread refers
   */
  line?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The original line in the file to which this thread refers.
   */
  originalLine?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The original start line in the file to which this thread refers (multi-line only).
   */
  originalStartLine?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Identifies the file path of this thread.
   */
  path: ScalarsEnums["String"];
  /**
   * Identifies the pull request associated with this thread.
   */
  pullRequest: PullRequest;
  /**
   * Identifies the repository associated with this thread.
   */
  repository: Repository;
  /**
   * The user who resolved this thread
   */
  resolvedBy?: Maybe<User>;
  /**
   * The side of the diff that the first line of the thread starts on (multi-line only)
   */
  startDiffSide?: Maybe<ScalarsEnums["DiffSide"]>;
  /**
   * The start line in the file to which this thread refers (multi-line only)
   */
  startLine?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
   */
  subjectType: ScalarsEnums["PullRequestReviewThreadSubjectType"];
  /**
   * Indicates whether the current viewer can reply to this thread.
   */
  viewerCanReply: ScalarsEnums["Boolean"];
  /**
   * Whether or not the viewer can resolve this thread
   */
  viewerCanResolve: ScalarsEnums["Boolean"];
  /**
   * Whether or not the viewer can unresolve this thread
   */
  viewerCanUnresolve: ScalarsEnums["Boolean"];
}

/**
 * Review comment threads for a pull request review.
 */
export interface PullRequestReviewThreadConnection {
  __typename?: "PullRequestReviewThreadConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<PullRequestReviewThreadEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<PullRequestReviewThread>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface PullRequestReviewThreadEdge {
  __typename?: "PullRequestReviewThreadEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<PullRequestReviewThread>;
}

/**
 * Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
 */
export interface PullRequestRevisionMarker {
  __typename?: "PullRequestRevisionMarker";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The last commit the viewer has seen.
   */
  lastSeenCommit: Commit;
  /**
   * The pull request to which the marker belongs.
   */
  pullRequest: PullRequest;
}

/**
 * A repository pull request template.
 */
export interface PullRequestTemplate {
  __typename?: "PullRequestTemplate";
  /**
   * The body of the template
   */
  body?: Maybe<ScalarsEnums["String"]>;
  /**
   * The filename of the template
   */
  filename?: Maybe<ScalarsEnums["String"]>;
  /**
   * The repository the template belongs to
   */
  repository: Repository;
}

/**
 * A threaded list of comments for a given pull request.
 */
export interface PullRequestThread {
  __typename?: "PullRequestThread";
  /**
   * A list of pull request comments associated with the thread.
   */
  comments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Skips the first _n_ elements in the list.
     */
    skip?: Maybe<Scalars["Int"]>;
  }) => PullRequestReviewCommentConnection;
  /**
   * The side of the diff on which this thread was placed.
   */
  diffSide: ScalarsEnums["DiffSide"];
  id: ScalarsEnums["ID"];
  /**
   * Whether or not the thread has been collapsed (resolved)
   */
  isCollapsed: ScalarsEnums["Boolean"];
  /**
   * Indicates whether this thread was outdated by newer changes.
   */
  isOutdated: ScalarsEnums["Boolean"];
  /**
   * Whether this thread has been resolved
   */
  isResolved: ScalarsEnums["Boolean"];
  /**
   * The line in the file to which this thread refers
   */
  line?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Identifies the file path of this thread.
   */
  path: ScalarsEnums["String"];
  /**
   * Identifies the pull request associated with this thread.
   */
  pullRequest: PullRequest;
  /**
   * Identifies the repository associated with this thread.
   */
  repository: Repository;
  /**
   * The user who resolved this thread
   */
  resolvedBy?: Maybe<User>;
  /**
   * The side of the diff that the first line of the thread starts on (multi-line only)
   */
  startDiffSide?: Maybe<ScalarsEnums["DiffSide"]>;
  /**
   * The line of the first file diff in the thread.
   */
  startLine?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
   */
  subjectType: ScalarsEnums["PullRequestReviewThreadSubjectType"];
  /**
   * Indicates whether the current viewer can reply to this thread.
   */
  viewerCanReply: ScalarsEnums["Boolean"];
  /**
   * Whether or not the viewer can resolve this thread
   */
  viewerCanResolve: ScalarsEnums["Boolean"];
  /**
   * Whether or not the viewer can unresolve this thread
   */
  viewerCanUnresolve: ScalarsEnums["Boolean"];
}

/**
 * The connection type for PullRequestTimelineItem.
 */
export interface PullRequestTimelineConnection {
  __typename?: "PullRequestTimelineConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<PullRequestTimelineItemEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<PullRequestTimelineItem>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An item in a pull request timeline
 */
export interface PullRequestTimelineItem {
  __typename?:
    | "AssignedEvent"
    | "BaseRefDeletedEvent"
    | "BaseRefForcePushedEvent"
    | "ClosedEvent"
    | "Commit"
    | "CommitCommentThread"
    | "CrossReferencedEvent"
    | "DemilestonedEvent"
    | "DeployedEvent"
    | "DeploymentEnvironmentChangedEvent"
    | "HeadRefDeletedEvent"
    | "HeadRefForcePushedEvent"
    | "HeadRefRestoredEvent"
    | "IssueComment"
    | "LabeledEvent"
    | "LockedEvent"
    | "MergedEvent"
    | "MilestonedEvent"
    | "PullRequestReview"
    | "PullRequestReviewComment"
    | "PullRequestReviewThread"
    | "ReferencedEvent"
    | "RenamedTitleEvent"
    | "ReopenedEvent"
    | "ReviewDismissedEvent"
    | "ReviewRequestRemovedEvent"
    | "ReviewRequestedEvent"
    | "SubscribedEvent"
    | "UnassignedEvent"
    | "UnlabeledEvent"
    | "UnlockedEvent"
    | "UnsubscribedEvent"
    | "UserBlockedEvent";
  $on: $PullRequestTimelineItem;
}

/**
 * An edge in a connection.
 */
export interface PullRequestTimelineItemEdge {
  __typename?: "PullRequestTimelineItemEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<PullRequestTimelineItem>;
}

/**
 * An item in a pull request timeline
 */
export interface PullRequestTimelineItems {
  __typename?:
    | "AddedToMergeQueueEvent"
    | "AddedToProjectEvent"
    | "AssignedEvent"
    | "AutoMergeDisabledEvent"
    | "AutoMergeEnabledEvent"
    | "AutoRebaseEnabledEvent"
    | "AutoSquashEnabledEvent"
    | "AutomaticBaseChangeFailedEvent"
    | "AutomaticBaseChangeSucceededEvent"
    | "BaseRefChangedEvent"
    | "BaseRefDeletedEvent"
    | "BaseRefForcePushedEvent"
    | "ClosedEvent"
    | "CommentDeletedEvent"
    | "ConnectedEvent"
    | "ConvertToDraftEvent"
    | "ConvertedNoteToIssueEvent"
    | "ConvertedToDiscussionEvent"
    | "CrossReferencedEvent"
    | "DemilestonedEvent"
    | "DeployedEvent"
    | "DeploymentEnvironmentChangedEvent"
    | "DisconnectedEvent"
    | "HeadRefDeletedEvent"
    | "HeadRefForcePushedEvent"
    | "HeadRefRestoredEvent"
    | "IssueComment"
    | "LabeledEvent"
    | "LockedEvent"
    | "MarkedAsDuplicateEvent"
    | "MentionedEvent"
    | "MergedEvent"
    | "MilestonedEvent"
    | "MovedColumnsInProjectEvent"
    | "PinnedEvent"
    | "PullRequestCommit"
    | "PullRequestCommitCommentThread"
    | "PullRequestReview"
    | "PullRequestReviewThread"
    | "PullRequestRevisionMarker"
    | "ReadyForReviewEvent"
    | "ReferencedEvent"
    | "RemovedFromMergeQueueEvent"
    | "RemovedFromProjectEvent"
    | "RenamedTitleEvent"
    | "ReopenedEvent"
    | "ReviewDismissedEvent"
    | "ReviewRequestRemovedEvent"
    | "ReviewRequestedEvent"
    | "SubscribedEvent"
    | "TransferredEvent"
    | "UnassignedEvent"
    | "UnlabeledEvent"
    | "UnlockedEvent"
    | "UnmarkedAsDuplicateEvent"
    | "UnpinnedEvent"
    | "UnsubscribedEvent"
    | "UserBlockedEvent";
  $on: $PullRequestTimelineItems;
}

/**
 * The connection type for PullRequestTimelineItems.
 */
export interface PullRequestTimelineItemsConnection {
  __typename?: "PullRequestTimelineItemsConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<PullRequestTimelineItemsEdge>>>;
  /**
   * Identifies the count of items after applying `before` and `after` filters.
   */
  filteredCount: ScalarsEnums["Int"];
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<PullRequestTimelineItems>>>;
  /**
   * Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
   */
  pageCount: ScalarsEnums["Int"];
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
  /**
   * Identifies the date and time when the timeline was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * An edge in a connection.
 */
export interface PullRequestTimelineItemsEdge {
  __typename?: "PullRequestTimelineItemsEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<PullRequestTimelineItems>;
}

/**
 * A Git push.
 */
export interface Push {
  __typename?: "Push";
  id: ScalarsEnums["ID"];
  /**
   * The SHA after the push
   */
  nextSha?: Maybe<ScalarsEnums["GitObjectID"]>;
  /**
   * The permalink for this push.
   */
  permalink: ScalarsEnums["URI"];
  /**
   * The SHA before the push
   */
  previousSha?: Maybe<ScalarsEnums["GitObjectID"]>;
  /**
   * The actor who pushed
   */
  pusher: Actor;
  /**
   * The repository that was pushed to
   */
  repository: Repository;
}

/**
 * A team, user, or app who has the ability to push to a protected branch.
 */
export interface PushAllowance {
  __typename?: "PushAllowance";
  /**
   * The actor that can push.
   */
  actor?: Maybe<PushAllowanceActor>;
  /**
   * Identifies the branch protection rule associated with the allowed user, team, or app.
   */
  branchProtectionRule?: Maybe<BranchProtectionRule>;
  id: ScalarsEnums["ID"];
}

/**
 * Types that can be an actor.
 */
export interface PushAllowanceActor {
  __typename?: "App" | "Team" | "User";
  $on: $PushAllowanceActor;
}

/**
 * The connection type for PushAllowance.
 */
export interface PushAllowanceConnection {
  __typename?: "PushAllowanceConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<PushAllowanceEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<PushAllowance>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface PushAllowanceEdge {
  __typename?: "PushAllowanceEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<PushAllowance>;
}

/**
 * Represents the client's rate limit.
 */
export interface RateLimit {
  __typename?: "RateLimit";
  /**
   * The point cost for the current query counting against the rate limit.
   */
  cost: ScalarsEnums["Int"];
  /**
   * The maximum number of points the client is permitted to consume in a 60 minute window.
   */
  limit: ScalarsEnums["Int"];
  /**
   * The maximum number of nodes this query may return
   */
  nodeCount: ScalarsEnums["Int"];
  /**
   * The number of points remaining in the current rate limit window.
   */
  remaining: ScalarsEnums["Int"];
  /**
   * The time at which the current rate limit window resets in UTC epoch seconds.
   */
  resetAt: ScalarsEnums["DateTime"];
  /**
   * The number of points used in the current rate limit window.
   */
  used: ScalarsEnums["Int"];
}

/**
 * Represents a subject that can be reacted on.
 */
export interface Reactable {
  __typename?:
    | "CommitComment"
    | "Discussion"
    | "DiscussionComment"
    | "Issue"
    | "IssueComment"
    | "PullRequest"
    | "PullRequestReview"
    | "PullRequestReviewComment"
    | "Release"
    | "TeamDiscussion"
    | "TeamDiscussionComment";
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Maybe<Array<ReactionGroup>>;
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Allows filtering Reactions by emoji.
     */
    content?: Maybe<ReactionContent>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Allows specifying the order in which reactions are returned.
     */
    orderBy?: Maybe<ReactionOrder>;
  }) => ReactionConnection;
  /**
   * Can user react to this subject
   */
  viewerCanReact: ScalarsEnums["Boolean"];
  $on: $Reactable;
}

/**
 * The connection type for User.
 */
export interface ReactingUserConnection {
  __typename?: "ReactingUserConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ReactingUserEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<User>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * Represents a user that's made a reaction.
 */
export interface ReactingUserEdge {
  __typename?: "ReactingUserEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  node: User;
  /**
   * The moment when the user made the reaction.
   */
  reactedAt: ScalarsEnums["DateTime"];
}

/**
 * An emoji reaction to a particular piece of content.
 */
export interface Reaction {
  __typename?: "Reaction";
  /**
   * Identifies the emoji reaction.
   */
  content: ScalarsEnums["ReactionContent"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
  /**
   * The reactable piece of content
   */
  reactable: Reactable;
  /**
   * Identifies the user who created this reaction.
   */
  user?: Maybe<User>;
}

/**
 * A list of reactions that have been left on the subject.
 */
export interface ReactionConnection {
  __typename?: "ReactionConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ReactionEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Reaction>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
  /**
   * Whether or not the authenticated user has left a reaction on the subject.
   */
  viewerHasReacted: ScalarsEnums["Boolean"];
}

/**
 * An edge in a connection.
 */
export interface ReactionEdge {
  __typename?: "ReactionEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Reaction>;
}

/**
 * A group of emoji reactions to a particular piece of content.
 */
export interface ReactionGroup {
  __typename?: "ReactionGroup";
  /**
   * Identifies the emoji reaction.
   */
  content: ScalarsEnums["ReactionContent"];
  /**
   * Identifies when the reaction was created.
   */
  createdAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Reactors to the reaction subject with the emotion represented by this reaction group.
   */
  reactors: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => ReactorConnection;
  /**
   * The subject that was reacted to.
   */
  subject: Reactable;
  /**
   * Users who have reacted to the reaction subject with the emotion represented by this reaction group
   * @deprecated Reactors can now be mannequins, bots, and organizations. Use the `reactors` field instead. Removal on 2021-10-01 UTC.
   */
  users: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => ReactingUserConnection;
  /**
   * Whether or not the authenticated user has left a reaction on the subject.
   */
  viewerHasReacted: ScalarsEnums["Boolean"];
}

/**
 * Types that can be assigned to reactions.
 */
export interface Reactor {
  __typename?: "Bot" | "Mannequin" | "Organization" | "User";
  $on: $Reactor;
}

/**
 * The connection type for Reactor.
 */
export interface ReactorConnection {
  __typename?: "ReactorConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ReactorEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Reactor>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * Represents an author of a reaction.
 */
export interface ReactorEdge {
  __typename?: "ReactorEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The author of the reaction.
   */
  node: Reactor;
  /**
   * The moment when the user made the reaction.
   */
  reactedAt: ScalarsEnums["DateTime"];
}

/**
 * Represents a 'ready_for_review' event on a given pull request.
 */
export interface ReadyForReviewEvent {
  __typename?: "ReadyForReviewEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
  /**
   * The HTTP path for this ready for review event.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this ready for review event.
   */
  url: ScalarsEnums["URI"];
}

/**
 * Represents a Git reference.
 */
export interface Ref {
  __typename?: "Ref";
  /**
   * A list of pull requests with this ref as the head ref.
   */
  associatedPullRequests: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * The base ref name to filter the pull requests by.
     */
    baseRefName?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The head ref name to filter the pull requests by.
     */
    headRefName?: Maybe<Scalars["String"]>;
    /**
     * A list of label names to filter the pull requests by.
     */
    labels?: Maybe<Array<Scalars["String"]>>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for pull requests returned from the connection.
     */
    orderBy?: Maybe<IssueOrder>;
    /**
     * A list of states to filter the pull requests by.
     */
    states?: Maybe<Array<PullRequestState>>;
  }) => PullRequestConnection;
  /**
   * Branch protection rules for this ref
   */
  branchProtectionRule?: Maybe<BranchProtectionRule>;
  /**
   * Compares the current ref as a base ref to another head ref, if the comparison can be made.
   */
  compare: (args: {
    /**
     * The head ref to compare against.
     */
    headRef: Scalars["String"];
  }) => Maybe<Comparison>;
  id: ScalarsEnums["ID"];
  /**
   * The ref name.
   */
  name: ScalarsEnums["String"];
  /**
   * The ref's prefix, such as `refs/heads/` or `refs/tags/`.
   */
  prefix: ScalarsEnums["String"];
  /**
   * Branch protection rules that are viewable by non-admins
   */
  refUpdateRule?: Maybe<RefUpdateRule>;
  /**
   * The repository the ref belongs to.
   */
  repository: Repository;
  /**
   * The object the ref points to. Returns null when object does not exist.
   */
  target?: Maybe<GitObject>;
}

/**
 * The connection type for Ref.
 */
export interface RefConnection {
  __typename?: "RefConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<RefEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Ref>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface RefEdge {
  __typename?: "RefEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Ref>;
}

/**
 * Parameters to be used for the ref_name condition
 */
export interface RefNameConditionTarget {
  __typename?: "RefNameConditionTarget";
  /**
   * Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
   */
  exclude: Array<ScalarsEnums["String"]>;
  /**
   * Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
   */
  include: Array<ScalarsEnums["String"]>;
}

/**
 * A ref update rules for a viewer.
 */
export interface RefUpdateRule {
  __typename?: "RefUpdateRule";
  /**
   * Can this branch be deleted.
   */
  allowsDeletions: ScalarsEnums["Boolean"];
  /**
   * Are force pushes allowed on this branch.
   */
  allowsForcePushes: ScalarsEnums["Boolean"];
  /**
   * Can matching branches be created.
   */
  blocksCreations: ScalarsEnums["Boolean"];
  /**
   * Identifies the protection rule pattern.
   */
  pattern: ScalarsEnums["String"];
  /**
   * Number of approving reviews required to update matching branches.
   */
  requiredApprovingReviewCount?: Maybe<ScalarsEnums["Int"]>;
  /**
   * List of required status check contexts that must pass for commits to be accepted to matching branches.
   */
  requiredStatusCheckContexts?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * Are reviews from code owners required to update matching branches.
   */
  requiresCodeOwnerReviews: ScalarsEnums["Boolean"];
  /**
   * Are conversations required to be resolved before merging.
   */
  requiresConversationResolution: ScalarsEnums["Boolean"];
  /**
   * Are merge commits prohibited from being pushed to this branch.
   */
  requiresLinearHistory: ScalarsEnums["Boolean"];
  /**
   * Are commits required to be signed.
   */
  requiresSignatures: ScalarsEnums["Boolean"];
  /**
   * Is the viewer allowed to dismiss reviews.
   */
  viewerAllowedToDismissReviews: ScalarsEnums["Boolean"];
  /**
   * Can the viewer push to the branch
   */
  viewerCanPush: ScalarsEnums["Boolean"];
}

/**
 * Represents a 'referenced' event on a given `ReferencedSubject`.
 */
export interface ReferencedEvent {
  __typename?: "ReferencedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the commit associated with the 'referenced' event.
   */
  commit?: Maybe<Commit>;
  /**
   * Identifies the repository associated with the 'referenced' event.
   */
  commitRepository: Repository;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Reference originated in a different repository.
   */
  isCrossRepository: ScalarsEnums["Boolean"];
  /**
   * Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
   */
  isDirectReference: ScalarsEnums["Boolean"];
  /**
   * Object referenced by event.
   */
  subject: ReferencedSubject;
}

/**
 * Any referencable object
 */
export interface ReferencedSubject {
  __typename?: "Issue" | "PullRequest";
  $on: $ReferencedSubject;
}

/**
 * Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes
 */
export interface RegenerateEnterpriseIdentityProviderRecoveryCodesPayload {
  __typename?: "RegenerateEnterpriseIdentityProviderRecoveryCodesPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The identity provider for the enterprise.
   */
  identityProvider?: Maybe<EnterpriseIdentityProvider>;
}

/**
 * Autogenerated return type of RegenerateVerifiableDomainToken
 */
export interface RegenerateVerifiableDomainTokenPayload {
  __typename?: "RegenerateVerifiableDomainTokenPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The verification token that was generated.
   */
  verificationToken?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of RejectDeployments
 */
export interface RejectDeploymentsPayload {
  __typename?: "RejectDeploymentsPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The affected deployments.
   */
  deployments?: Maybe<Array<Deployment>>;
}

/**
 * A release contains the content for a release.
 */
export interface Release {
  __typename?: "Release";
  /**
   * The author of the release
   */
  author?: Maybe<User>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The description of the release.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The description of this release rendered to HTML.
   */
  descriptionHTML?: Maybe<ScalarsEnums["HTML"]>;
  id: ScalarsEnums["ID"];
  /**
   * Whether or not the release is a draft
   */
  isDraft: ScalarsEnums["Boolean"];
  /**
   * Whether or not the release is the latest releast
   */
  isLatest: ScalarsEnums["Boolean"];
  /**
   * Whether or not the release is a prerelease
   */
  isPrerelease: ScalarsEnums["Boolean"];
  /**
   * A list of users mentioned in the release description
   */
  mentions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<UserConnection>;
  /**
   * The title of the release.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies the date and time when the release was created.
   */
  publishedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Maybe<Array<ReactionGroup>>;
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Allows filtering Reactions by emoji.
     */
    content?: Maybe<ReactionContent>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Allows specifying the order in which reactions are returned.
     */
    orderBy?: Maybe<ReactionOrder>;
  }) => ReactionConnection;
  /**
   * List of releases assets which are dependent on this release.
   */
  releaseAssets: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * A list of names to filter the assets by.
     */
    name?: Maybe<Scalars["String"]>;
  }) => ReleaseAssetConnection;
  /**
   * The repository that the release belongs to.
   */
  repository: Repository;
  /**
   * The HTTP path for this issue
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * A description of the release, rendered to HTML without any links in it.
   */
  shortDescriptionHTML: (args?: {
    /**
     * How many characters to return.
     * @defaultValue `200`
     */
    limit?: Maybe<Scalars["Int"]>;
  }) => Maybe<ScalarsEnums["HTML"]>;
  /**
   * The Git tag the release points to
   */
  tag?: Maybe<Ref>;
  /**
   * The tag commit for this release.
   */
  tagCommit?: Maybe<Commit>;
  /**
   * The name of the release's Git tag
   */
  tagName: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this issue
   */
  url: ScalarsEnums["URI"];
  /**
   * Can user react to this subject
   */
  viewerCanReact: ScalarsEnums["Boolean"];
}

/**
 * A release asset contains the content for a release asset.
 */
export interface ReleaseAsset {
  __typename?: "ReleaseAsset";
  /**
   * The asset's content-type
   */
  contentType: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The number of times this asset was downloaded
   */
  downloadCount: ScalarsEnums["Int"];
  /**
   * Identifies the URL where you can download the release asset via the browser.
   */
  downloadUrl: ScalarsEnums["URI"];
  id: ScalarsEnums["ID"];
  /**
   * Identifies the title of the release asset.
   */
  name: ScalarsEnums["String"];
  /**
   * Release that the asset is associated with
   */
  release?: Maybe<Release>;
  /**
   * The size (in bytes) of the asset
   */
  size: ScalarsEnums["Int"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The user that performed the upload
   */
  uploadedBy: User;
  /**
   * Identifies the URL of the release asset.
   */
  url: ScalarsEnums["URI"];
}

/**
 * The connection type for ReleaseAsset.
 */
export interface ReleaseAssetConnection {
  __typename?: "ReleaseAssetConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ReleaseAssetEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<ReleaseAsset>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface ReleaseAssetEdge {
  __typename?: "ReleaseAssetEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<ReleaseAsset>;
}

/**
 * The connection type for Release.
 */
export interface ReleaseConnection {
  __typename?: "ReleaseConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ReleaseEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Release>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface ReleaseEdge {
  __typename?: "ReleaseEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Release>;
}

/**
 * Autogenerated return type of RemoveAssigneesFromAssignable
 */
export interface RemoveAssigneesFromAssignablePayload {
  __typename?: "RemoveAssigneesFromAssignablePayload";
  /**
   * The item that was unassigned.
   */
  assignable?: Maybe<Assignable>;
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of RemoveEnterpriseAdmin
 */
export interface RemoveEnterpriseAdminPayload {
  __typename?: "RemoveEnterpriseAdminPayload";
  /**
   * The user who was removed as an administrator.
   */
  admin?: Maybe<User>;
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated enterprise.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * A message confirming the result of removing an administrator.
   */
  message?: Maybe<ScalarsEnums["String"]>;
  /**
   * The viewer performing the mutation.
   */
  viewer?: Maybe<User>;
}

/**
 * Autogenerated return type of RemoveEnterpriseIdentityProvider
 */
export interface RemoveEnterpriseIdentityProviderPayload {
  __typename?: "RemoveEnterpriseIdentityProviderPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The identity provider that was removed from the enterprise.
   */
  identityProvider?: Maybe<EnterpriseIdentityProvider>;
}

/**
 * Autogenerated return type of RemoveEnterpriseMember
 */
export interface RemoveEnterpriseMemberPayload {
  __typename?: "RemoveEnterpriseMemberPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated enterprise.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * The user that was removed from the enterprise.
   */
  user?: Maybe<User>;
  /**
   * The viewer performing the mutation.
   */
  viewer?: Maybe<User>;
}

/**
 * Autogenerated return type of RemoveEnterpriseOrganization
 */
export interface RemoveEnterpriseOrganizationPayload {
  __typename?: "RemoveEnterpriseOrganizationPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated enterprise.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * The organization that was removed from the enterprise.
   */
  organization?: Maybe<Organization>;
  /**
   * The viewer performing the mutation.
   */
  viewer?: Maybe<User>;
}

/**
 * Autogenerated return type of RemoveEnterpriseSupportEntitlement
 */
export interface RemoveEnterpriseSupportEntitlementPayload {
  __typename?: "RemoveEnterpriseSupportEntitlementPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * A message confirming the result of removing the support entitlement.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of RemoveLabelsFromLabelable
 */
export interface RemoveLabelsFromLabelablePayload {
  __typename?: "RemoveLabelsFromLabelablePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Labelable the labels were removed from.
   */
  labelable?: Maybe<Labelable>;
}

/**
 * Autogenerated return type of RemoveOutsideCollaborator
 */
export interface RemoveOutsideCollaboratorPayload {
  __typename?: "RemoveOutsideCollaboratorPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The user that was removed as an outside collaborator.
   */
  removedUser?: Maybe<User>;
}

/**
 * Autogenerated return type of RemoveReaction
 */
export interface RemoveReactionPayload {
  __typename?: "RemoveReactionPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The reaction object.
   */
  reaction?: Maybe<Reaction>;
  /**
   * The reaction groups for the subject.
   */
  reactionGroups?: Maybe<Array<ReactionGroup>>;
  /**
   * The reactable subject.
   */
  subject?: Maybe<Reactable>;
}

/**
 * Autogenerated return type of RemoveStar
 */
export interface RemoveStarPayload {
  __typename?: "RemoveStarPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The starrable.
   */
  starrable?: Maybe<Starrable>;
}

/**
 * Autogenerated return type of RemoveUpvote
 */
export interface RemoveUpvotePayload {
  __typename?: "RemoveUpvotePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The votable subject.
   */
  subject?: Maybe<Votable>;
}

/**
 * Represents a 'removed_from_merge_queue' event on a given pull request.
 */
export interface RemovedFromMergeQueueEvent {
  __typename?: "RemovedFromMergeQueueEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the before commit SHA for the 'removed_from_merge_queue' event.
   */
  beforeCommit?: Maybe<Commit>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The user who removed this Pull Request from the merge queue
   */
  enqueuer?: Maybe<User>;
  id: ScalarsEnums["ID"];
  /**
   * The merge queue where this pull request was removed from.
   */
  mergeQueue?: Maybe<MergeQueue>;
  /**
   * PullRequest referenced by event.
   */
  pullRequest?: Maybe<PullRequest>;
  /**
   * The reason this pull request was removed from the queue.
   */
  reason?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Represents a 'removed_from_project' event on a given issue or pull request.
 */
export interface RemovedFromProjectEvent {
  __typename?: "RemovedFromProjectEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
}

/**
 * Represents a 'renamed' event on a given issue or pull request
 */
export interface RenamedTitleEvent {
  __typename?: "RenamedTitleEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the current title of the issue or pull request.
   */
  currentTitle: ScalarsEnums["String"];
  id: ScalarsEnums["ID"];
  /**
   * Identifies the previous title of the issue or pull request.
   */
  previousTitle: ScalarsEnums["String"];
  /**
   * Subject that was renamed.
   */
  subject: RenamedTitleSubject;
}

/**
 * An object which has a renamable title
 */
export interface RenamedTitleSubject {
  __typename?: "Issue" | "PullRequest";
  $on: $RenamedTitleSubject;
}

/**
 * Autogenerated return type of ReopenDiscussion
 */
export interface ReopenDiscussionPayload {
  __typename?: "ReopenDiscussionPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The discussion that was reopened.
   */
  discussion?: Maybe<Discussion>;
}

/**
 * Autogenerated return type of ReopenIssue
 */
export interface ReopenIssuePayload {
  __typename?: "ReopenIssuePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The issue that was opened.
   */
  issue?: Maybe<Issue>;
}

/**
 * Autogenerated return type of ReopenPullRequest
 */
export interface ReopenPullRequestPayload {
  __typename?: "ReopenPullRequestPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The pull request that was reopened.
   */
  pullRequest?: Maybe<PullRequest>;
}

/**
 * Represents a 'reopened' event on any `Closable`.
 */
export interface ReopenedEvent {
  __typename?: "ReopenedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Object that was reopened.
   */
  closable: Closable;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The reason the issue state was changed to open.
   */
  stateReason?: Maybe<ScalarsEnums["IssueStateReason"]>;
}

/**
 * Audit log entry for a repo.access event.
 */
export interface RepoAccessAuditEntry {
  __typename?: "RepoAccessAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The visibility of the repository
   */
  visibility?: Maybe<ScalarsEnums["RepoAccessAuditEntryVisibility"]>;
}

/**
 * Audit log entry for a repo.add_member event.
 */
export interface RepoAddMemberAuditEntry {
  __typename?: "RepoAddMemberAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The visibility of the repository
   */
  visibility?: Maybe<ScalarsEnums["RepoAddMemberAuditEntryVisibility"]>;
}

/**
 * Audit log entry for a repo.add_topic event.
 */
export interface RepoAddTopicAuditEntry {
  __typename?: "RepoAddTopicAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The name of the topic added to the repository
   */
  topic?: Maybe<Topic>;
  /**
   * The name of the topic added to the repository
   */
  topicName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a repo.archived event.
 */
export interface RepoArchivedAuditEntry {
  __typename?: "RepoArchivedAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The visibility of the repository
   */
  visibility?: Maybe<ScalarsEnums["RepoArchivedAuditEntryVisibility"]>;
}

/**
 * Audit log entry for a repo.change_merge_setting event.
 */
export interface RepoChangeMergeSettingAuditEntry {
  __typename?: "RepoChangeMergeSettingAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Whether the change was to enable (true) or disable (false) the merge type
   */
  isEnabled?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The merge method affected by the change
   */
  mergeType?: Maybe<ScalarsEnums["RepoChangeMergeSettingAuditEntryMergeType"]>;
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a repo.config.disable_anonymous_git_access event.
 */
export interface RepoConfigDisableAnonymousGitAccessAuditEntry {
  __typename?: "RepoConfigDisableAnonymousGitAccessAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a repo.config.disable_collaborators_only event.
 */
export interface RepoConfigDisableCollaboratorsOnlyAuditEntry {
  __typename?: "RepoConfigDisableCollaboratorsOnlyAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a repo.config.disable_contributors_only event.
 */
export interface RepoConfigDisableContributorsOnlyAuditEntry {
  __typename?: "RepoConfigDisableContributorsOnlyAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a repo.config.disable_sockpuppet_disallowed event.
 */
export interface RepoConfigDisableSockpuppetDisallowedAuditEntry {
  __typename?: "RepoConfigDisableSockpuppetDisallowedAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a repo.config.enable_anonymous_git_access event.
 */
export interface RepoConfigEnableAnonymousGitAccessAuditEntry {
  __typename?: "RepoConfigEnableAnonymousGitAccessAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a repo.config.enable_collaborators_only event.
 */
export interface RepoConfigEnableCollaboratorsOnlyAuditEntry {
  __typename?: "RepoConfigEnableCollaboratorsOnlyAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a repo.config.enable_contributors_only event.
 */
export interface RepoConfigEnableContributorsOnlyAuditEntry {
  __typename?: "RepoConfigEnableContributorsOnlyAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a repo.config.enable_sockpuppet_disallowed event.
 */
export interface RepoConfigEnableSockpuppetDisallowedAuditEntry {
  __typename?: "RepoConfigEnableSockpuppetDisallowedAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a repo.config.lock_anonymous_git_access event.
 */
export interface RepoConfigLockAnonymousGitAccessAuditEntry {
  __typename?: "RepoConfigLockAnonymousGitAccessAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a repo.config.unlock_anonymous_git_access event.
 */
export interface RepoConfigUnlockAnonymousGitAccessAuditEntry {
  __typename?: "RepoConfigUnlockAnonymousGitAccessAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a repo.create event.
 */
export interface RepoCreateAuditEntry {
  __typename?: "RepoCreateAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  /**
   * The name of the parent repository for this forked repository.
   */
  forkParentName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The name of the root repository for this network.
   */
  forkSourceName?: Maybe<ScalarsEnums["String"]>;
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The visibility of the repository
   */
  visibility?: Maybe<ScalarsEnums["RepoCreateAuditEntryVisibility"]>;
}

/**
 * Audit log entry for a repo.destroy event.
 */
export interface RepoDestroyAuditEntry {
  __typename?: "RepoDestroyAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The visibility of the repository
   */
  visibility?: Maybe<ScalarsEnums["RepoDestroyAuditEntryVisibility"]>;
}

/**
 * Audit log entry for a repo.remove_member event.
 */
export interface RepoRemoveMemberAuditEntry {
  __typename?: "RepoRemoveMemberAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The visibility of the repository
   */
  visibility?: Maybe<ScalarsEnums["RepoRemoveMemberAuditEntryVisibility"]>;
}

/**
 * Audit log entry for a repo.remove_topic event.
 */
export interface RepoRemoveTopicAuditEntry {
  __typename?: "RepoRemoveTopicAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The name of the topic added to the repository
   */
  topic?: Maybe<Topic>;
  /**
   * The name of the topic added to the repository
   */
  topicName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * A repository contains the content for a project.
 */
export interface Repository {
  __typename?: "Repository";
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   */
  allowUpdateBranch: ScalarsEnums["Boolean"];
  /**
   * Identifies the date and time when the repository was archived.
   */
  archivedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * A list of users that can be assigned to issues in this repository.
   */
  assignableUsers: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filters users with query on user name and login.
     */
    query?: Maybe<Scalars["String"]>;
  }) => UserConnection;
  /**
   * Whether or not Auto-merge can be enabled on pull requests in this repository.
   */
  autoMergeAllowed: ScalarsEnums["Boolean"];
  /**
   * A list of branch protection rules for this repository.
   */
  branchProtectionRules: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => BranchProtectionRuleConnection;
  /**
   * Returns the code of conduct for this repository
   */
  codeOfConduct?: Maybe<CodeOfConduct>;
  /**
   * Information extracted from the repository's `CODEOWNERS` file.
   */
  codeowners: (args?: {
    /**
     * The ref name used to return the associated `CODEOWNERS` file.
     */
    refName?: Maybe<Scalars["String"]>;
  }) => Maybe<RepositoryCodeowners>;
  /**
   * A list of collaborators associated with the repository.
   */
  collaborators: (args?: {
    /**
     * Collaborators affiliation level with a repository.
     */
    affiliation?: Maybe<CollaboratorAffiliation>;
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * The login of one specific collaborator.
     */
    login?: Maybe<Scalars["String"]>;
    /**
     * Filters users with query on user name and login
     */
    query?: Maybe<Scalars["String"]>;
  }) => Maybe<RepositoryCollaboratorConnection>;
  /**
   * A list of commit comments associated with the repository.
   */
  commitComments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => CommitCommentConnection;
  /**
   * Returns a list of contact links associated to the repository
   */
  contactLinks?: Maybe<Array<RepositoryContactLink>>;
  /**
   * Returns the contributing guidelines for this repository.
   */
  contributingGuidelines?: Maybe<ContributingGuidelines>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The Ref associated with the repository's default branch.
   */
  defaultBranchRef?: Maybe<Ref>;
  /**
   * Whether or not branches are automatically deleted when merged in this repository.
   */
  deleteBranchOnMerge: ScalarsEnums["Boolean"];
  /**
   * A list of deploy keys that are on this repository.
   */
  deployKeys: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => DeployKeyConnection;
  /**
   * Deployments associated with the repository
   */
  deployments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Environments to list deployments for
     */
    environments?: Maybe<Array<Scalars["String"]>>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for deployments returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<DeploymentOrder>;
  }) => DeploymentConnection;
  /**
   * The description of the repository.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The description of the repository rendered to HTML.
   */
  descriptionHTML: ScalarsEnums["HTML"];
  /**
   * Returns a single discussion from the current repository by number.
   */
  discussion: (args: {
    /**
     * The number for the discussion to be returned.
     */
    number: Scalars["Int"];
  }) => Maybe<Discussion>;
  /**
   * A list of discussion categories that are available in the repository.
   */
  discussionCategories: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Filter by categories that are assignable by the viewer.
     * @defaultValue `false`
     */
    filterByAssignable?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => DiscussionCategoryConnection;
  /**
   * A discussion category by slug.
   */
  discussionCategory: (args: {
    /**
     * The slug of the discussion category to be returned.
     */
    slug: Scalars["String"];
  }) => Maybe<DiscussionCategory>;
  /**
   * A list of discussions that have been opened in the repository.
   */
  discussions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Only show answered or unanswered discussions
     */
    answered?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Only include discussions that belong to the category with this ID.
     */
    categoryId?: Maybe<Scalars["ID"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for discussions returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"UPDATED_AT"}`
     */
    orderBy?: Maybe<DiscussionOrder>;
    /**
     * A list of states to filter the discussions by.
     * @defaultValue `[]`
     */
    states?: Maybe<Array<DiscussionState>>;
  }) => DiscussionConnection;
  /**
   * The number of kilobytes this repository occupies on disk.
   */
  diskUsage?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Returns a single active environment from the current repository by name.
   */
  environment: (args: {
    /**
     * The name of the environment to be returned.
     */
    name: Scalars["String"];
  }) => Maybe<Environment>;
  /**
   * A list of environments that are in this repository.
   */
  environments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for the environments
     * @defaultValue `{"direction":"ASC","field":"NAME"}`
     */
    orderBy?: Maybe<Environments>;
  }) => EnvironmentConnection;
  /**
   * Returns how many forks there are of this repository in the whole network.
   */
  forkCount: ScalarsEnums["Int"];
  /**
   * Whether this repository allows forks.
   */
  forkingAllowed: ScalarsEnums["Boolean"];
  /**
   * A list of direct forked repositories.
   */
  forks: (args?: {
    /**
     * Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
     */
    affiliations?: Maybe<Array<Maybe<RepositoryAffiliation>>>;
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * If non-null, filters repositories according to whether they have issues enabled
     */
    hasIssuesEnabled?: Maybe<Scalars["Boolean"]>;
    /**
     * If non-null, filters repositories according to whether they have been locked
     */
    isLocked?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for repositories returned from the connection
     */
    orderBy?: Maybe<RepositoryOrder>;
    /**
     * Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
     * @defaultValue `["OWNER","COLLABORATOR"]`
     */
    ownerAffiliations?: Maybe<Array<Maybe<RepositoryAffiliation>>>;
    /**
     * If non-null, filters repositories according to privacy
     */
    privacy?: Maybe<RepositoryPrivacy>;
  }) => RepositoryConnection;
  /**
   * The funding links for this repository
   */
  fundingLinks: Array<FundingLink>;
  /**
   * Indicates if the repository has the Discussions feature enabled.
   */
  hasDiscussionsEnabled: ScalarsEnums["Boolean"];
  /**
   * Indicates if the repository has issues feature enabled.
   */
  hasIssuesEnabled: ScalarsEnums["Boolean"];
  /**
   * Indicates if the repository has the Projects feature enabled.
   */
  hasProjectsEnabled: ScalarsEnums["Boolean"];
  /**
   * Whether vulnerability alerts are enabled for the repository.
   */
  hasVulnerabilityAlertsEnabled: ScalarsEnums["Boolean"];
  /**
   * Indicates if the repository has wiki feature enabled.
   */
  hasWikiEnabled: ScalarsEnums["Boolean"];
  /**
   * The repository's URL.
   */
  homepageUrl?: Maybe<ScalarsEnums["URI"]>;
  id: ScalarsEnums["ID"];
  /**
   * The interaction ability settings for this repository.
   */
  interactionAbility?: Maybe<RepositoryInteractionAbility>;
  /**
   * Indicates if the repository is unmaintained.
   */
  isArchived: ScalarsEnums["Boolean"];
  /**
   * Returns true if blank issue creation is allowed
   */
  isBlankIssuesEnabled: ScalarsEnums["Boolean"];
  /**
   * Returns whether or not this repository disabled.
   */
  isDisabled: ScalarsEnums["Boolean"];
  /**
   * Returns whether or not this repository is empty.
   */
  isEmpty: ScalarsEnums["Boolean"];
  /**
   * Identifies if the repository is a fork.
   */
  isFork: ScalarsEnums["Boolean"];
  /**
   * Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
   */
  isInOrganization: ScalarsEnums["Boolean"];
  /**
   * Indicates if the repository has been locked or not.
   */
  isLocked: ScalarsEnums["Boolean"];
  /**
   * Identifies if the repository is a mirror.
   */
  isMirror: ScalarsEnums["Boolean"];
  /**
   * Identifies if the repository is private or internal.
   */
  isPrivate: ScalarsEnums["Boolean"];
  /**
   * Returns true if this repository has a security policy
   */
  isSecurityPolicyEnabled?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Identifies if the repository is a template that can be used to generate new repositories.
   */
  isTemplate: ScalarsEnums["Boolean"];
  /**
   * Is this repository a user configuration repository?
   */
  isUserConfigurationRepository: ScalarsEnums["Boolean"];
  /**
   * Returns a single issue from the current repository by number.
   */
  issue: (args: {
    /**
     * The number for the issue to be returned.
     */
    number: Scalars["Int"];
  }) => Maybe<Issue>;
  /**
   * Returns a single issue-like object from the current repository by number.
   */
  issueOrPullRequest: (args: {
    /**
     * The number for the issue to be returned.
     */
    number: Scalars["Int"];
  }) => Maybe<IssueOrPullRequest>;
  /**
   * Returns a list of issue templates associated to the repository
   */
  issueTemplates?: Maybe<Array<IssueTemplate>>;
  /**
   * A list of issues that have been opened in the repository.
   */
  issues: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Filtering options for issues returned from the connection.
     */
    filterBy?: Maybe<IssueFilters>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * A list of label names to filter the pull requests by.
     */
    labels?: Maybe<Array<Scalars["String"]>>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for issues returned from the connection.
     */
    orderBy?: Maybe<IssueOrder>;
    /**
     * A list of states to filter the issues by.
     */
    states?: Maybe<Array<IssueState>>;
  }) => IssueConnection;
  /**
   * Returns a single label by name
   */
  label: (args: {
    /**
     * Label name
     */
    name: Scalars["String"];
  }) => Maybe<Label>;
  /**
   * A list of labels associated with the repository.
   */
  labels: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for labels returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<LabelOrder>;
    /**
     * If provided, searches labels by name and description.
     */
    query?: Maybe<Scalars["String"]>;
  }) => Maybe<LabelConnection>;
  /**
   * A list containing a breakdown of the language composition of the repository.
   */
  languages: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Order for connection
     */
    orderBy?: Maybe<LanguageOrder>;
  }) => Maybe<LanguageConnection>;
  /**
   * Get the latest release for the repository if one exists.
   */
  latestRelease?: Maybe<Release>;
  /**
   * The license associated with the repository
   */
  licenseInfo?: Maybe<License>;
  /**
   * The reason the repository has been locked.
   */
  lockReason?: Maybe<ScalarsEnums["RepositoryLockReason"]>;
  /**
   * A list of Users that can be mentioned in the context of the repository.
   */
  mentionableUsers: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filters users with query on user name and login
     */
    query?: Maybe<Scalars["String"]>;
  }) => UserConnection;
  /**
   * Whether or not PRs are merged with a merge commit on this repository.
   */
  mergeCommitAllowed: ScalarsEnums["Boolean"];
  /**
   * How the default commit message will be generated when merging a pull request.
   */
  mergeCommitMessage: ScalarsEnums["MergeCommitMessage"];
  /**
   * How the default commit title will be generated when merging a pull request.
   */
  mergeCommitTitle: ScalarsEnums["MergeCommitTitle"];
  /**
   * The merge queue for a specified branch, otherwise the default branch if not provided.
   */
  mergeQueue: (args?: {
    /**
     * The name of the branch to get the merge queue for. Case sensitive.
     */
    branch?: Maybe<Scalars["String"]>;
  }) => Maybe<MergeQueue>;
  /**
   * Returns a single milestone from the current repository by number.
   */
  milestone: (args: {
    /**
     * The number for the milestone to be returned.
     */
    number: Scalars["Int"];
  }) => Maybe<Milestone>;
  /**
   * A list of milestones associated with the repository.
   */
  milestones: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for milestones.
     */
    orderBy?: Maybe<MilestoneOrder>;
    /**
     * Filters milestones with a query on the title
     */
    query?: Maybe<Scalars["String"]>;
    /**
     * Filter by the state of the milestones.
     */
    states?: Maybe<Array<MilestoneState>>;
  }) => Maybe<MilestoneConnection>;
  /**
   * The repository's original mirror URL.
   */
  mirrorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The name of the repository.
   */
  name: ScalarsEnums["String"];
  /**
   * The repository's name with owner.
   */
  nameWithOwner: ScalarsEnums["String"];
  /**
   * A Git object in the repository
   */
  object: (args?: {
    /**
     * A Git revision expression suitable for rev-parse
     */
    expression?: Maybe<Scalars["String"]>;
    /**
     * The Git object ID
     */
    oid?: Maybe<Scalars["GitObjectID"]>;
  }) => Maybe<GitObject>;
  /**
   * The image used to represent this repository in Open Graph data.
   */
  openGraphImageUrl: ScalarsEnums["URI"];
  /**
   * The User owner of the repository.
   */
  owner: RepositoryOwner;
  /**
   * A list of packages under the owner.
   */
  packages: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Find packages by their names.
     */
    names?: Maybe<Array<Maybe<Scalars["String"]>>>;
    /**
     * Ordering of the returned packages.
     * @defaultValue `{"direction":"DESC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<PackageOrder>;
    /**
     * Filter registry package by type.
     */
    packageType?: Maybe<PackageType>;
    /**
     * Find packages in a repository by ID.
     */
    repositoryId?: Maybe<Scalars["ID"]>;
  }) => PackageConnection;
  /**
   * The repository parent, if this is a fork.
   */
  parent?: Maybe<Repository>;
  /**
   * A list of discussions that have been pinned in this repository.
   */
  pinnedDiscussions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => PinnedDiscussionConnection;
  /**
   * A list of pinned issues for this repository.
   */
  pinnedIssues: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<PinnedIssueConnection>;
  /**
   * The primary language of the repository's code.
   */
  primaryLanguage?: Maybe<Language>;
  /**
   * Find project by number.
   */
  project: (args: {
    /**
     * The project number to find.
     */
    number: Scalars["Int"];
  }) => Maybe<Project>;
  /**
   * Finds and returns the Project according to the provided Project number.
   */
  projectV2: (args: {
    /**
     * The Project number.
     */
    number: Scalars["Int"];
  }) => Maybe<ProjectV2>;
  /**
   * A list of projects under the owner.
   */
  projects: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for projects returned from the connection
     */
    orderBy?: Maybe<ProjectOrder>;
    /**
     * Query to search projects by, currently only searching by name.
     */
    search?: Maybe<Scalars["String"]>;
    /**
     * A list of states to filter the projects by.
     */
    states?: Maybe<Array<ProjectState>>;
  }) => ProjectConnection;
  /**
   * The HTTP path listing the repository's projects
   */
  projectsResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL listing the repository's projects
   */
  projectsUrl: ScalarsEnums["URI"];
  /**
   * List of projects linked to this repository.
   */
  projectsV2: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * How to order the returned projects.
     * @defaultValue `{"direction":"DESC","field":"NUMBER"}`
     */
    orderBy?: Maybe<ProjectV2Order>;
    /**
     * A project to search for linked to the repo.
     */
    query?: Maybe<Scalars["String"]>;
  }) => ProjectV2Connection;
  /**
   * Returns a single pull request from the current repository by number.
   */
  pullRequest: (args: {
    /**
     * The number for the pull request to be returned.
     */
    number: Scalars["Int"];
  }) => Maybe<PullRequest>;
  /**
   * Returns a list of pull request templates associated to the repository
   */
  pullRequestTemplates?: Maybe<Array<PullRequestTemplate>>;
  /**
   * A list of pull requests that have been opened in the repository.
   */
  pullRequests: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * The base ref name to filter the pull requests by.
     */
    baseRefName?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The head ref name to filter the pull requests by.
     */
    headRefName?: Maybe<Scalars["String"]>;
    /**
     * A list of label names to filter the pull requests by.
     */
    labels?: Maybe<Array<Scalars["String"]>>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for pull requests returned from the connection.
     */
    orderBy?: Maybe<IssueOrder>;
    /**
     * A list of states to filter the pull requests by.
     */
    states?: Maybe<Array<PullRequestState>>;
  }) => PullRequestConnection;
  /**
   * Identifies the date and time when the repository was last pushed to.
   */
  pushedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Whether or not rebase-merging is enabled on this repository.
   */
  rebaseMergeAllowed: ScalarsEnums["Boolean"];
  /**
   * Recent projects that this user has modified in the context of the owner.
   */
  recentProjects: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => ProjectV2Connection;
  /**
   * Fetch a given ref from the repository
   */
  ref: (args: {
    /**
     * The ref to retrieve. Fully qualified matches are checked in order (`refs/heads/master`) before falling back onto checks for short name matches (`master`).
     */
    qualifiedName: Scalars["String"];
  }) => Maybe<Ref>;
  /**
   * Fetch a list of refs from the repository
   */
  refs: (args: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * DEPRECATED: use orderBy. The ordering direction.
     */
    direction?: Maybe<OrderDirection>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for refs returned from the connection.
     */
    orderBy?: Maybe<RefOrder>;
    /**
     * Filters refs with query on name
     */
    query?: Maybe<Scalars["String"]>;
    /**
     * A ref name prefix like `refs/heads/`, `refs/tags/`, etc.
     */
    refPrefix: Scalars["String"];
  }) => Maybe<RefConnection>;
  /**
   * Lookup a single release given various criteria.
   */
  release: (args: {
    /**
     * The name of the Tag the Release was created from
     */
    tagName: Scalars["String"];
  }) => Maybe<Release>;
  /**
   * List of releases which are dependent on this repository.
   */
  releases: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Order for connection
     */
    orderBy?: Maybe<ReleaseOrder>;
  }) => ReleaseConnection;
  /**
   * A list of applied repository-topic associations for this repository.
   */
  repositoryTopics: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => RepositoryTopicConnection;
  /**
   * The HTTP path for this repository
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Returns a single ruleset from the current repository by ID.
   */
  ruleset: (args: {
    /**
     * The ID of the ruleset to be returned.
     */
    databaseId: Scalars["Int"];
    /**
     * Include rulesets configured at higher levels that apply to this repository
     * @defaultValue `true`
     */
    includeParents?: Maybe<Scalars["Boolean"]>;
  }) => Maybe<RepositoryRuleset>;
  /**
   * A list of rulesets for this repository.
   */
  rulesets: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Return rulesets configured at higher levels that apply to this repository
     * @defaultValue `true`
     */
    includeParents?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<RepositoryRulesetConnection>;
  /**
   * The security policy URL.
   */
  securityPolicyUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * A description of the repository, rendered to HTML without any links in it.
   */
  shortDescriptionHTML: (args?: {
    /**
     * How many characters to return.
     * @defaultValue `200`
     */
    limit?: Maybe<Scalars["Int"]>;
  }) => ScalarsEnums["HTML"];
  /**
   * Whether or not squash-merging is enabled on this repository.
   */
  squashMergeAllowed: ScalarsEnums["Boolean"];
  /**
   * How the default commit message will be generated when squash merging a pull request.
   */
  squashMergeCommitMessage: ScalarsEnums["SquashMergeCommitMessage"];
  /**
   * How the default commit title will be generated when squash merging a pull request.
   */
  squashMergeCommitTitle: ScalarsEnums["SquashMergeCommitTitle"];
  /**
   * Whether a squash merge commit can use the pull request title as default.
   * @deprecated `squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC.
   */
  squashPrTitleUsedAsDefault: ScalarsEnums["Boolean"];
  /**
   * The SSH URL to clone this repository
   */
  sshUrl: ScalarsEnums["GitSSHRemote"];
  /**
   * Returns a count of how many stargazers there are on this object
   */
  stargazerCount: ScalarsEnums["Int"];
  /**
   * A list of users who have starred this starrable.
   */
  stargazers: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Order for connection
     */
    orderBy?: Maybe<StarOrder>;
  }) => StargazerConnection;
  /**
   * Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit.
   */
  submodules: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => SubmoduleConnection;
  /**
   * Temporary authentication token for cloning this repository.
   */
  tempCloneToken?: Maybe<ScalarsEnums["String"]>;
  /**
   * The repository from which this repository was generated, if any.
   */
  templateRepository?: Maybe<Repository>;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this repository
   */
  url: ScalarsEnums["URI"];
  /**
   * Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
   */
  usesCustomOpenGraphImage: ScalarsEnums["Boolean"];
  /**
   * Indicates whether the viewer has admin permissions on this repository.
   */
  viewerCanAdminister: ScalarsEnums["Boolean"];
  /**
   * Can the current viewer create new projects on this owner.
   */
  viewerCanCreateProjects: ScalarsEnums["Boolean"];
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: ScalarsEnums["Boolean"];
  /**
   * Indicates whether the viewer can update the topics of this repository.
   */
  viewerCanUpdateTopics: ScalarsEnums["Boolean"];
  /**
   * The last commit email for the viewer.
   */
  viewerDefaultCommitEmail?: Maybe<ScalarsEnums["String"]>;
  /**
   * The last used merge method by the viewer or the default for the repository.
   */
  viewerDefaultMergeMethod: ScalarsEnums["PullRequestMergeMethod"];
  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: ScalarsEnums["Boolean"];
  /**
   * The users permission level on the repository. Will return null if authenticated as an GitHub App.
   */
  viewerPermission?: Maybe<ScalarsEnums["RepositoryPermission"]>;
  /**
   * A list of emails this viewer can commit with.
   */
  viewerPossibleCommitEmails?: Maybe<Array<ScalarsEnums["String"]>>;
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: Maybe<ScalarsEnums["SubscriptionState"]>;
  /**
   * Indicates the repository's visibility level.
   */
  visibility: ScalarsEnums["RepositoryVisibility"];
  /**
   * Returns a single vulnerability alert from the current repository by number.
   */
  vulnerabilityAlert: (args: {
    /**
     * The number for the vulnerability alert to be returned.
     */
    number: Scalars["Int"];
  }) => Maybe<RepositoryVulnerabilityAlert>;
  /**
   * A list of vulnerability alerts that are on this repository.
   */
  vulnerabilityAlerts: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Filter by the scope of the alert's dependency
     */
    dependencyScopes?: Maybe<
      Array<RepositoryVulnerabilityAlertDependencyScope>
    >;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter by the state of the alert
     */
    states?: Maybe<Array<RepositoryVulnerabilityAlertState>>;
  }) => Maybe<RepositoryVulnerabilityAlertConnection>;
  /**
   * A list of users watching the repository.
   */
  watchers: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => UserConnection;
  /**
   * Whether contributors are required to sign off on web-based commits in this repository.
   */
  webCommitSignoffRequired: ScalarsEnums["Boolean"];
}

/**
 * Metadata for an audit entry with action repo.*
 */
export interface RepositoryAuditEntryData {
  __typename?:
    | "OrgRestoreMemberMembershipRepositoryAuditEntryData"
    | "PrivateRepositoryForkingDisableAuditEntry"
    | "PrivateRepositoryForkingEnableAuditEntry"
    | "RepoAccessAuditEntry"
    | "RepoAddMemberAuditEntry"
    | "RepoAddTopicAuditEntry"
    | "RepoArchivedAuditEntry"
    | "RepoChangeMergeSettingAuditEntry"
    | "RepoConfigDisableAnonymousGitAccessAuditEntry"
    | "RepoConfigDisableCollaboratorsOnlyAuditEntry"
    | "RepoConfigDisableContributorsOnlyAuditEntry"
    | "RepoConfigDisableSockpuppetDisallowedAuditEntry"
    | "RepoConfigEnableAnonymousGitAccessAuditEntry"
    | "RepoConfigEnableCollaboratorsOnlyAuditEntry"
    | "RepoConfigEnableContributorsOnlyAuditEntry"
    | "RepoConfigEnableSockpuppetDisallowedAuditEntry"
    | "RepoConfigLockAnonymousGitAccessAuditEntry"
    | "RepoConfigUnlockAnonymousGitAccessAuditEntry"
    | "RepoCreateAuditEntry"
    | "RepoDestroyAuditEntry"
    | "RepoRemoveMemberAuditEntry"
    | "RepoRemoveTopicAuditEntry"
    | "TeamAddRepositoryAuditEntry"
    | "TeamRemoveRepositoryAuditEntry";
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  $on: $RepositoryAuditEntryData;
}

/**
 * Information extracted from a repository's `CODEOWNERS` file.
 */
export interface RepositoryCodeowners {
  __typename?: "RepositoryCodeowners";
  /**
   * Any problems that were encountered while parsing the `CODEOWNERS` file.
   */
  errors: Array<RepositoryCodeownersError>;
}

/**
 * An error in a `CODEOWNERS` file.
 */
export interface RepositoryCodeownersError {
  __typename?: "RepositoryCodeownersError";
  /**
   * The column number where the error occurs.
   */
  column: ScalarsEnums["Int"];
  /**
   * A short string describing the type of error.
   */
  kind: ScalarsEnums["String"];
  /**
   * The line number where the error occurs.
   */
  line: ScalarsEnums["Int"];
  /**
   * A complete description of the error, combining information from other fields.
   */
  message: ScalarsEnums["String"];
  /**
   * The path to the file when the error occurs.
   */
  path: ScalarsEnums["String"];
  /**
   * The content of the line where the error occurs.
   */
  source: ScalarsEnums["String"];
  /**
   * A suggestion of how to fix the error.
   */
  suggestion?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The connection type for User.
 */
export interface RepositoryCollaboratorConnection {
  __typename?: "RepositoryCollaboratorConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<RepositoryCollaboratorEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<User>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * Represents a user who is a collaborator of a repository.
 */
export interface RepositoryCollaboratorEdge {
  __typename?: "RepositoryCollaboratorEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  node: User;
  /**
   * The permission the user has on the repository.
   */
  permission: ScalarsEnums["RepositoryPermission"];
  /**
   * A list of sources for the user's access to the repository.
   */
  permissionSources?: Maybe<Array<PermissionSource>>;
}

/**
 * A list of repositories owned by the subject.
 */
export interface RepositoryConnection {
  __typename?: "RepositoryConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<RepositoryEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Repository>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
  /**
   * The total size in kilobytes of all repositories in the connection. Value will never be larger than max 32-bit signed integer.
   */
  totalDiskUsage: ScalarsEnums["Int"];
}

/**
 * A repository contact link.
 */
export interface RepositoryContactLink {
  __typename?: "RepositoryContactLink";
  /**
   * The contact link purpose.
   */
  about: ScalarsEnums["String"];
  /**
   * The contact link name.
   */
  name: ScalarsEnums["String"];
  /**
   * The contact link URL.
   */
  url: ScalarsEnums["URI"];
}

/**
 * A wrapper on Repository used for Dependabot Alerts notifications.
 */
export interface RepositoryDependabotAlertsThread {
  __typename?: "RepositoryDependabotAlertsThread";
  id: ScalarsEnums["ID"];
  /**
   * The URL pointing to the repository's dependabot alerts page
   */
  notificationsPermalink?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with this node.
   */
  repository: Repository;
}

/**
 * Represents an author of discussions in repositories.
 */
export interface RepositoryDiscussionAuthor {
  __typename?: "Organization" | "User";
  /**
   * Discussions this user has started.
   */
  repositoryDiscussions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions.
     */
    answered?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for discussions returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<DiscussionOrder>;
    /**
     * Filter discussions to only those in a specific repository.
     */
    repositoryId?: Maybe<Scalars["ID"]>;
    /**
     * A list of states to filter the discussions by.
     * @defaultValue `[]`
     */
    states?: Maybe<Array<DiscussionState>>;
  }) => DiscussionConnection;
  $on: $RepositoryDiscussionAuthor;
}

/**
 * Represents an author of discussion comments in repositories.
 */
export interface RepositoryDiscussionCommentAuthor {
  __typename?: "Organization" | "User";
  /**
   * Discussion comments this user has authored.
   */
  repositoryDiscussionComments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter discussion comments to only those that were marked as the answer
     * @defaultValue `false`
     */
    onlyAnswers?: Maybe<Scalars["Boolean"]>;
    /**
     * Filter discussion comments to only those in a specific repository.
     */
    repositoryId?: Maybe<Scalars["ID"]>;
  }) => DiscussionCommentConnection;
  $on: $RepositoryDiscussionCommentAuthor;
}

/**
 * An edge in a connection.
 */
export interface RepositoryEdge {
  __typename?: "RepositoryEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Repository>;
}

/**
 * Parameters to be used for the repository_id condition
 */
export interface RepositoryIdConditionTarget {
  __typename?: "RepositoryIdConditionTarget";
  /**
   * One of these repo IDs must match the repo.
   */
  repositoryIds: Array<ScalarsEnums["ID"]>;
}

/**
 * A subset of repository info.
 */
export interface RepositoryInfo {
  __typename?: "Repository";
  /**
   * Identifies the date and time when the repository was archived.
   */
  archivedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The description of the repository.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The description of the repository rendered to HTML.
   */
  descriptionHTML: ScalarsEnums["HTML"];
  /**
   * Returns how many forks there are of this repository in the whole network.
   */
  forkCount: ScalarsEnums["Int"];
  /**
   * Indicates if the repository has the Discussions feature enabled.
   */
  hasDiscussionsEnabled: ScalarsEnums["Boolean"];
  /**
   * Indicates if the repository has issues feature enabled.
   */
  hasIssuesEnabled: ScalarsEnums["Boolean"];
  /**
   * Indicates if the repository has the Projects feature enabled.
   */
  hasProjectsEnabled: ScalarsEnums["Boolean"];
  /**
   * Indicates if the repository has wiki feature enabled.
   */
  hasWikiEnabled: ScalarsEnums["Boolean"];
  /**
   * The repository's URL.
   */
  homepageUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * Indicates if the repository is unmaintained.
   */
  isArchived: ScalarsEnums["Boolean"];
  /**
   * Identifies if the repository is a fork.
   */
  isFork: ScalarsEnums["Boolean"];
  /**
   * Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
   */
  isInOrganization: ScalarsEnums["Boolean"];
  /**
   * Indicates if the repository has been locked or not.
   */
  isLocked: ScalarsEnums["Boolean"];
  /**
   * Identifies if the repository is a mirror.
   */
  isMirror: ScalarsEnums["Boolean"];
  /**
   * Identifies if the repository is private or internal.
   */
  isPrivate: ScalarsEnums["Boolean"];
  /**
   * Identifies if the repository is a template that can be used to generate new repositories.
   */
  isTemplate: ScalarsEnums["Boolean"];
  /**
   * The license associated with the repository
   */
  licenseInfo?: Maybe<License>;
  /**
   * The reason the repository has been locked.
   */
  lockReason?: Maybe<ScalarsEnums["RepositoryLockReason"]>;
  /**
   * The repository's original mirror URL.
   */
  mirrorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The name of the repository.
   */
  name: ScalarsEnums["String"];
  /**
   * The repository's name with owner.
   */
  nameWithOwner: ScalarsEnums["String"];
  /**
   * The image used to represent this repository in Open Graph data.
   */
  openGraphImageUrl: ScalarsEnums["URI"];
  /**
   * The User owner of the repository.
   */
  owner: RepositoryOwner;
  /**
   * Identifies the date and time when the repository was last pushed to.
   */
  pushedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The HTTP path for this repository
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * A description of the repository, rendered to HTML without any links in it.
   */
  shortDescriptionHTML: (args?: {
    /**
     * How many characters to return.
     * @defaultValue `200`
     */
    limit?: Maybe<Scalars["Int"]>;
  }) => ScalarsEnums["HTML"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this repository
   */
  url: ScalarsEnums["URI"];
  /**
   * Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
   */
  usesCustomOpenGraphImage: ScalarsEnums["Boolean"];
  /**
   * Indicates the repository's visibility level.
   */
  visibility: ScalarsEnums["RepositoryVisibility"];
  $on: $RepositoryInfo;
}

/**
 * Repository interaction limit that applies to this object.
 */
export interface RepositoryInteractionAbility {
  __typename?: "RepositoryInteractionAbility";
  /**
   * The time the currently active limit expires.
   */
  expiresAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The current limit that is enabled on this object.
   */
  limit: ScalarsEnums["RepositoryInteractionLimit"];
  /**
   * The origin of the currently active interaction limit.
   */
  origin: ScalarsEnums["RepositoryInteractionLimitOrigin"];
}

/**
 * An invitation for a user to be added to a repository.
 */
export interface RepositoryInvitation {
  __typename?: "RepositoryInvitation";
  /**
   * The email address that received the invitation.
   */
  email?: Maybe<ScalarsEnums["String"]>;
  id: ScalarsEnums["ID"];
  /**
   * The user who received the invitation.
   */
  invitee?: Maybe<User>;
  /**
   * The user who created the invitation.
   */
  inviter: User;
  /**
   * The permalink for this repository invitation.
   */
  permalink: ScalarsEnums["URI"];
  /**
   * The permission granted on this repository by this invitation.
   */
  permission: ScalarsEnums["RepositoryPermission"];
  /**
   * The Repository the user is invited to.
   */
  repository?: Maybe<RepositoryInfo>;
}

/**
 * A list of repository invitations.
 */
export interface RepositoryInvitationConnection {
  __typename?: "RepositoryInvitationConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<RepositoryInvitationEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<RepositoryInvitation>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface RepositoryInvitationEdge {
  __typename?: "RepositoryInvitationEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<RepositoryInvitation>;
}

/**
 * A GitHub Enterprise Importer (GEI) repository migration.
 */
export interface RepositoryMigration {
  __typename?: "RepositoryMigration";
  /**
   * The migration flag to continue on error.
   */
  continueOnError: ScalarsEnums["Boolean"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The reason the migration failed.
   */
  failureReason?: Maybe<ScalarsEnums["String"]>;
  id: ScalarsEnums["ID"];
  /**
   * The URL for the migration log (expires 1 day after migration completes).
   */
  migrationLogUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The migration source.
   */
  migrationSource: MigrationSource;
  /**
   * The target repository name.
   */
  repositoryName: ScalarsEnums["String"];
  /**
   * The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
   */
  sourceUrl: ScalarsEnums["URI"];
  /**
   * The migration state.
   */
  state: ScalarsEnums["MigrationState"];
  /**
   * The number of warnings encountered for this migration. To review the warnings, check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
   */
  warningsCount: ScalarsEnums["Int"];
}

/**
 * The connection type for RepositoryMigration.
 */
export interface RepositoryMigrationConnection {
  __typename?: "RepositoryMigrationConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<RepositoryMigrationEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<RepositoryMigration>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * Represents a repository migration.
 */
export interface RepositoryMigrationEdge {
  __typename?: "RepositoryMigrationEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<RepositoryMigration>;
}

/**
 * Parameters to be used for the repository_name condition
 */
export interface RepositoryNameConditionTarget {
  __typename?: "RepositoryNameConditionTarget";
  /**
   * Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
   */
  exclude: Array<ScalarsEnums["String"]>;
  /**
   * Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
   */
  include: Array<ScalarsEnums["String"]>;
  /**
   * Target changes that match these patterns will be prevented except by those with bypass permissions.
   */
  protected: ScalarsEnums["Boolean"];
}

/**
 * Represents a object that belongs to a repository.
 */
export interface RepositoryNode {
  __typename?:
    | "CommitComment"
    | "CommitCommentThread"
    | "DependabotUpdate"
    | "Discussion"
    | "DiscussionCategory"
    | "Issue"
    | "IssueComment"
    | "PinnedDiscussion"
    | "PullRequest"
    | "PullRequestCommitCommentThread"
    | "PullRequestReview"
    | "PullRequestReviewComment"
    | "RepositoryDependabotAlertsThread"
    | "RepositoryVulnerabilityAlert";
  /**
   * The repository associated with this node.
   */
  repository: Repository;
  $on: $RepositoryNode;
}

/**
 * Represents an owner of a Repository.
 */
export interface RepositoryOwner {
  __typename?: "Organization" | "User";
  /**
   * A URL pointing to the owner's public avatar.
   */
  avatarUrl: (args?: {
    /**
     * The size of the resulting square image.
     */
    size?: Maybe<Scalars["Int"]>;
  }) => ScalarsEnums["URI"];
  id: ScalarsEnums["ID"];
  /**
   * The username used to login.
   */
  login: ScalarsEnums["String"];
  /**
   * A list of repositories that the user owns.
   */
  repositories: (args?: {
    /**
     * Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
     */
    affiliations?: Maybe<Array<Maybe<RepositoryAffiliation>>>;
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * If non-null, filters repositories according to whether they have issues enabled
     */
    hasIssuesEnabled?: Maybe<Scalars["Boolean"]>;
    /**
     * If non-null, filters repositories according to whether they are archived and not maintained
     */
    isArchived?: Maybe<Scalars["Boolean"]>;
    /**
     * If non-null, filters repositories according to whether they are forks of another repository
     */
    isFork?: Maybe<Scalars["Boolean"]>;
    /**
     * If non-null, filters repositories according to whether they have been locked
     */
    isLocked?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for repositories returned from the connection
     */
    orderBy?: Maybe<RepositoryOrder>;
    /**
     * Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
     * @defaultValue `["OWNER","COLLABORATOR"]`
     */
    ownerAffiliations?: Maybe<Array<Maybe<RepositoryAffiliation>>>;
    /**
     * If non-null, filters repositories according to privacy
     */
    privacy?: Maybe<RepositoryPrivacy>;
  }) => RepositoryConnection;
  /**
   * Find Repository.
   */
  repository: (args: {
    /**
     * Follow repository renames. If disabled, a repository referenced by its old name will return an error.
     * @defaultValue `true`
     */
    followRenames?: Maybe<Scalars["Boolean"]>;
    /**
     * Name of Repository to find.
     */
    name: Scalars["String"];
  }) => Maybe<Repository>;
  /**
   * The HTTP URL for the owner.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for the owner.
   */
  url: ScalarsEnums["URI"];
  $on: $RepositoryOwner;
}

/**
 * A repository rule.
 */
export interface RepositoryRule {
  __typename?: "RepositoryRule";
  id: ScalarsEnums["ID"];
  /**
   * The parameters for this rule.
   */
  parameters?: Maybe<RuleParameters>;
  /**
   * The repository ruleset associated with this rule configuration
   */
  repositoryRuleset?: Maybe<RepositoryRuleset>;
  /**
   * The type of rule.
   */
  type: ScalarsEnums["RepositoryRuleType"];
}

/**
 * Set of conditions that determine if a ruleset will evaluate
 */
export interface RepositoryRuleConditions {
  __typename?: "RepositoryRuleConditions";
  /**
   * Configuration for the ref_name condition
   */
  refName?: Maybe<RefNameConditionTarget>;
  /**
   * Configuration for the repository_id condition
   */
  repositoryId?: Maybe<RepositoryIdConditionTarget>;
  /**
   * Configuration for the repository_name condition
   */
  repositoryName?: Maybe<RepositoryNameConditionTarget>;
}

/**
 * The connection type for RepositoryRule.
 */
export interface RepositoryRuleConnection {
  __typename?: "RepositoryRuleConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<RepositoryRuleEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<RepositoryRule>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface RepositoryRuleEdge {
  __typename?: "RepositoryRuleEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<RepositoryRule>;
}

/**
 * A repository ruleset.
 */
export interface RepositoryRuleset {
  __typename?: "RepositoryRuleset";
  /**
   * The actors that can bypass this ruleset
   */
  bypassActors: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<RepositoryRulesetBypassActorConnection>;
  /**
   * The set of conditions that must evaluate to true for this ruleset to apply
   */
  conditions: RepositoryRuleConditions;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The enforcement level of this ruleset
   */
  enforcement: ScalarsEnums["RuleEnforcement"];
  id: ScalarsEnums["ID"];
  /**
   * Name of the ruleset.
   */
  name: ScalarsEnums["String"];
  /**
   * List of rules.
   */
  rules: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * The type of rule.
     */
    type?: Maybe<RepositoryRuleType>;
  }) => Maybe<RepositoryRuleConnection>;
  /**
   * Source of ruleset.
   */
  source: RuleSource;
  /**
   * Target of the ruleset.
   */
  target?: Maybe<ScalarsEnums["RepositoryRulesetTarget"]>;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * A team or app that has the ability to bypass a rules defined on a ruleset
 */
export interface RepositoryRulesetBypassActor {
  __typename?: "RepositoryRulesetBypassActor";
  /**
   * The actor that can bypass rules.
   */
  actor?: Maybe<BypassActor>;
  /**
   * The mode for the bypass actor
   */
  bypassMode?: Maybe<ScalarsEnums["RepositoryRulesetBypassActorBypassMode"]>;
  id: ScalarsEnums["ID"];
  /**
   * This actor represents the ability for an organization admin to bypass
   */
  organizationAdmin: ScalarsEnums["Boolean"];
  /**
   * If the actor is a repository role, the repository role's ID that can bypass
   */
  repositoryRoleDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * If the actor is a repository role, the repository role's name that can bypass
   */
  repositoryRoleName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies the ruleset associated with the allowed actor
   */
  repositoryRuleset?: Maybe<RepositoryRuleset>;
}

/**
 * The connection type for RepositoryRulesetBypassActor.
 */
export interface RepositoryRulesetBypassActorConnection {
  __typename?: "RepositoryRulesetBypassActorConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<RepositoryRulesetBypassActorEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<RepositoryRulesetBypassActor>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface RepositoryRulesetBypassActorEdge {
  __typename?: "RepositoryRulesetBypassActorEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<RepositoryRulesetBypassActor>;
}

/**
 * The connection type for RepositoryRuleset.
 */
export interface RepositoryRulesetConnection {
  __typename?: "RepositoryRulesetConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<RepositoryRulesetEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<RepositoryRuleset>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface RepositoryRulesetEdge {
  __typename?: "RepositoryRulesetEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<RepositoryRuleset>;
}

/**
 * A repository-topic connects a repository to a topic.
 */
export interface RepositoryTopic {
  __typename?: "RepositoryTopic";
  id: ScalarsEnums["ID"];
  /**
   * The HTTP path for this repository-topic.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The topic.
   */
  topic: Topic;
  /**
   * The HTTP URL for this repository-topic.
   */
  url: ScalarsEnums["URI"];
}

/**
 * The connection type for RepositoryTopic.
 */
export interface RepositoryTopicConnection {
  __typename?: "RepositoryTopicConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<RepositoryTopicEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<RepositoryTopic>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface RepositoryTopicEdge {
  __typename?: "RepositoryTopicEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<RepositoryTopic>;
}

/**
 * Audit log entry for a repository_visibility_change.disable event.
 */
export interface RepositoryVisibilityChangeDisableAuditEntry {
  __typename?: "RepositoryVisibilityChangeDisableAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The slug of the enterprise.
   */
  enterpriseSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl?: Maybe<ScalarsEnums["URI"]>;
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a repository_visibility_change.enable event.
 */
export interface RepositoryVisibilityChangeEnableAuditEntry {
  __typename?: "RepositoryVisibilityChangeEnableAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  /**
   * The HTTP path for this enterprise.
   */
  enterpriseResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The slug of the enterprise.
   */
  enterpriseSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP URL for this enterprise.
   */
  enterpriseUrl?: Maybe<ScalarsEnums["URI"]>;
  id: ScalarsEnums["ID"];
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * A Dependabot alert for a repository with a dependency affected by a security vulnerability.
 */
export interface RepositoryVulnerabilityAlert {
  __typename?: "RepositoryVulnerabilityAlert";
  /**
   * When was the alert auto-dismissed?
   */
  autoDismissedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * When was the alert created?
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The associated Dependabot update
   */
  dependabotUpdate?: Maybe<DependabotUpdate>;
  /**
   * The scope of an alert's dependency
   */
  dependencyScope?: Maybe<
    ScalarsEnums["RepositoryVulnerabilityAlertDependencyScope"]
  >;
  /**
   * Comment explaining the reason the alert was dismissed
   */
  dismissComment?: Maybe<ScalarsEnums["String"]>;
  /**
   * The reason the alert was dismissed
   */
  dismissReason?: Maybe<ScalarsEnums["String"]>;
  /**
   * When was the alert dismissed?
   */
  dismissedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The user who dismissed the alert
   */
  dismisser?: Maybe<User>;
  /**
   * When was the alert fixed?
   */
  fixedAt?: Maybe<ScalarsEnums["DateTime"]>;
  id: ScalarsEnums["ID"];
  /**
   * Identifies the alert number.
   */
  number: ScalarsEnums["Int"];
  /**
   * The associated repository
   */
  repository: Repository;
  /**
   * The associated security advisory
   */
  securityAdvisory?: Maybe<SecurityAdvisory>;
  /**
   * The associated security vulnerability
   */
  securityVulnerability?: Maybe<SecurityVulnerability>;
  /**
   * Identifies the state of the alert.
   */
  state: ScalarsEnums["RepositoryVulnerabilityAlertState"];
  /**
   * The vulnerable manifest filename
   */
  vulnerableManifestFilename: ScalarsEnums["String"];
  /**
   * The vulnerable manifest path
   */
  vulnerableManifestPath: ScalarsEnums["String"];
  /**
   * The vulnerable requirements
   */
  vulnerableRequirements?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The connection type for RepositoryVulnerabilityAlert.
 */
export interface RepositoryVulnerabilityAlertConnection {
  __typename?: "RepositoryVulnerabilityAlertConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<RepositoryVulnerabilityAlertEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<RepositoryVulnerabilityAlert>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface RepositoryVulnerabilityAlertEdge {
  __typename?: "RepositoryVulnerabilityAlertEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<RepositoryVulnerabilityAlert>;
}

/**
 * Autogenerated return type of RequestReviews
 */
export interface RequestReviewsPayload {
  __typename?: "RequestReviewsPayload";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The pull request that is getting requests.
   */
  pullRequest?: Maybe<PullRequest>;
  /**
   * The edge from the pull request to the requested reviewers.
   */
  requestedReviewersEdge?: Maybe<UserEdge>;
}

/**
 * Types that can be requested reviewers.
 */
export interface RequestedReviewer {
  __typename?: "Bot" | "Mannequin" | "Team" | "User";
  $on: $RequestedReviewer;
}

/**
 * The connection type for RequestedReviewer.
 */
export interface RequestedReviewerConnection {
  __typename?: "RequestedReviewerConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<RequestedReviewerEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<RequestedReviewer>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface RequestedReviewerEdge {
  __typename?: "RequestedReviewerEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<RequestedReviewer>;
}

/**
 * Represents a type that can be required by a pull request for merging.
 */
export interface RequirableByPullRequest {
  __typename?: "CheckRun" | "StatusContext";
  /**
   * Whether this is required to pass before merging for a specific pull request.
   */
  isRequired: (args?: {
    /**
     * The id of the pull request this is required for
     */
    pullRequestId?: Maybe<Scalars["ID"]>;
    /**
     * The number of the pull request this is required for
     */
    pullRequestNumber?: Maybe<Scalars["Int"]>;
  }) => ScalarsEnums["Boolean"];
  $on: $RequirableByPullRequest;
}

/**
 * Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
 */
export interface RequiredDeploymentsParameters {
  __typename?: "RequiredDeploymentsParameters";
  /**
   * The environments that must be successfully deployed to before branches can be merged.
   */
  requiredDeploymentEnvironments: Array<ScalarsEnums["String"]>;
}

/**
 * Represents a required status check for a protected branch, but not any specific run of that check.
 */
export interface RequiredStatusCheckDescription {
  __typename?: "RequiredStatusCheckDescription";
  /**
   * The App that must provide this status in order for it to be accepted.
   */
  app?: Maybe<App>;
  /**
   * The name of this status.
   */
  context: ScalarsEnums["String"];
}

/**
 * Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
 */
export interface RequiredStatusChecksParameters {
  __typename?: "RequiredStatusChecksParameters";
  /**
   * Status checks that are required.
   */
  requiredStatusChecks: Array<StatusCheckConfiguration>;
  /**
   * Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled.
   */
  strictRequiredStatusChecksPolicy: ScalarsEnums["Boolean"];
}

/**
 * Autogenerated return type of RerequestCheckSuite
 */
export interface RerequestCheckSuitePayload {
  __typename?: "RerequestCheckSuitePayload";
  /**
   * The requested check suite.
   */
  checkSuite?: Maybe<CheckSuite>;
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of ResolveReviewThread
 */
export interface ResolveReviewThreadPayload {
  __typename?: "ResolveReviewThreadPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The thread to resolve.
   */
  thread?: Maybe<PullRequestReviewThread>;
}

/**
 * Represents a private contribution a user made on GitHub.
 */
export interface RestrictedContribution {
  __typename?: "RestrictedContribution";
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: ScalarsEnums["Boolean"];
  /**
   * When this contribution was made.
   */
  occurredAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this contribution.
   */
  url: ScalarsEnums["URI"];
  /**
   * The user who made this contribution.
   */
  user: User;
}

/**
 * Autogenerated return type of RetireSponsorsTier
 */
export interface RetireSponsorsTierPayload {
  __typename?: "RetireSponsorsTierPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The tier that was retired.
   */
  sponsorsTier?: Maybe<SponsorsTier>;
}

/**
 * Autogenerated return type of RevertPullRequest
 */
export interface RevertPullRequestPayload {
  __typename?: "RevertPullRequestPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The pull request that was reverted.
   */
  pullRequest?: Maybe<PullRequest>;
  /**
   * The new pull request that reverts the input pull request.
   */
  revertPullRequest?: Maybe<PullRequest>;
}

/**
 * A user, team, or app who has the ability to dismiss a review on a protected branch.
 */
export interface ReviewDismissalAllowance {
  __typename?: "ReviewDismissalAllowance";
  /**
   * The actor that can dismiss.
   */
  actor?: Maybe<ReviewDismissalAllowanceActor>;
  /**
   * Identifies the branch protection rule associated with the allowed user, team, or app.
   */
  branchProtectionRule?: Maybe<BranchProtectionRule>;
  id: ScalarsEnums["ID"];
}

/**
 * Types that can be an actor.
 */
export interface ReviewDismissalAllowanceActor {
  __typename?: "App" | "Team" | "User";
  $on: $ReviewDismissalAllowanceActor;
}

/**
 * The connection type for ReviewDismissalAllowance.
 */
export interface ReviewDismissalAllowanceConnection {
  __typename?: "ReviewDismissalAllowanceConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ReviewDismissalAllowanceEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<ReviewDismissalAllowance>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface ReviewDismissalAllowanceEdge {
  __typename?: "ReviewDismissalAllowanceEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<ReviewDismissalAllowance>;
}

/**
 * Represents a 'review_dismissed' event on a given issue or pull request.
 */
export interface ReviewDismissedEvent {
  __typename?: "ReviewDismissedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Identifies the optional message associated with the 'review_dismissed' event.
   */
  dismissalMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies the optional message associated with the event, rendered to HTML.
   */
  dismissalMessageHTML?: Maybe<ScalarsEnums["String"]>;
  id: ScalarsEnums["ID"];
  /**
   * Identifies the previous state of the review with the 'review_dismissed' event.
   */
  previousReviewState: ScalarsEnums["PullRequestReviewState"];
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
  /**
   * Identifies the commit which caused the review to become stale.
   */
  pullRequestCommit?: Maybe<PullRequestCommit>;
  /**
   * The HTTP path for this review dismissed event.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Identifies the review associated with the 'review_dismissed' event.
   */
  review?: Maybe<PullRequestReview>;
  /**
   * The HTTP URL for this review dismissed event.
   */
  url: ScalarsEnums["URI"];
}

/**
 * A request for a user to review a pull request.
 */
export interface ReviewRequest {
  __typename?: "ReviewRequest";
  /**
   * Whether this request was created for a code owner
   */
  asCodeOwner: ScalarsEnums["Boolean"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
  /**
   * Identifies the pull request associated with this review request.
   */
  pullRequest: PullRequest;
  /**
   * The reviewer that is requested.
   */
  requestedReviewer?: Maybe<RequestedReviewer>;
}

/**
 * The connection type for ReviewRequest.
 */
export interface ReviewRequestConnection {
  __typename?: "ReviewRequestConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<ReviewRequestEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<ReviewRequest>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface ReviewRequestEdge {
  __typename?: "ReviewRequestEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<ReviewRequest>;
}

/**
 * Represents an 'review_request_removed' event on a given pull request.
 */
export interface ReviewRequestRemovedEvent {
  __typename?: "ReviewRequestRemovedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
  /**
   * Identifies the reviewer whose review request was removed.
   */
  requestedReviewer?: Maybe<RequestedReviewer>;
}

/**
 * Represents an 'review_requested' event on a given pull request.
 */
export interface ReviewRequestedEvent {
  __typename?: "ReviewRequestedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
  /**
   * Identifies the reviewer whose review was requested.
   */
  requestedReviewer?: Maybe<RequestedReviewer>;
}

/**
 * A hovercard context with a message describing the current code review state of the pull
 * request.
 */
export interface ReviewStatusHovercardContext {
  __typename?: "ReviewStatusHovercardContext";
  /**
   * A string describing this context
   */
  message: ScalarsEnums["String"];
  /**
   * An octicon to accompany this context
   */
  octicon: ScalarsEnums["String"];
  /**
   * The current status of the pull request with respect to code review.
   */
  reviewDecision?: Maybe<ScalarsEnums["PullRequestReviewDecision"]>;
}

/**
 * Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
 */
export interface RevokeEnterpriseOrganizationsMigratorRolePayload {
  __typename?: "RevokeEnterpriseOrganizationsMigratorRolePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The organizations that had the migrator role revoked for the given user.
   */
  organizations: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<OrganizationConnection>;
}

/**
 * Autogenerated return type of RevokeMigratorRole
 */
export interface RevokeMigratorRolePayload {
  __typename?: "RevokeMigratorRolePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Did the operation succeed?
   */
  success?: Maybe<ScalarsEnums["Boolean"]>;
}

/**
 * Types which can be parameters for `RepositoryRule` objects.
 */
export interface RuleParameters {
  __typename?:
    | "BranchNamePatternParameters"
    | "CommitAuthorEmailPatternParameters"
    | "CommitMessagePatternParameters"
    | "CommitterEmailPatternParameters"
    | "PullRequestParameters"
    | "RequiredDeploymentsParameters"
    | "RequiredStatusChecksParameters"
    | "TagNamePatternParameters"
    | "UpdateParameters"
    | "WorkflowsParameters";
  $on: $RuleParameters;
}

/**
 * Types which can have `RepositoryRule` objects.
 */
export interface RuleSource {
  __typename?: "Organization" | "Repository";
  $on: $RuleSource;
}

/**
 * A Saved Reply is text a user can use to reply quickly.
 */
export interface SavedReply {
  __typename?: "SavedReply";
  /**
   * The body of the saved reply.
   */
  body: ScalarsEnums["String"];
  /**
   * The saved reply body rendered to HTML.
   */
  bodyHTML: ScalarsEnums["HTML"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
  /**
   * The title of the saved reply.
   */
  title: ScalarsEnums["String"];
  /**
   * The user that saved this reply.
   */
  user?: Maybe<Actor>;
}

/**
 * The connection type for SavedReply.
 */
export interface SavedReplyConnection {
  __typename?: "SavedReplyConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<SavedReplyEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<SavedReply>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface SavedReplyEdge {
  __typename?: "SavedReplyEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<SavedReply>;
}

/**
 * The results of a search.
 */
export interface SearchResultItem {
  __typename?:
    | "App"
    | "Discussion"
    | "Issue"
    | "MarketplaceListing"
    | "Organization"
    | "PullRequest"
    | "Repository"
    | "User";
  $on: $SearchResultItem;
}

/**
 * A list of results that matched against a search query. Regardless of the number of matches, a maximum of 1,000 results will be available across all types, potentially split across many pages.
 */
export interface SearchResultItemConnection {
  __typename?: "SearchResultItemConnection";
  /**
   * The total number of pieces of code that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
   */
  codeCount: ScalarsEnums["Int"];
  /**
   * The total number of discussions that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
   */
  discussionCount: ScalarsEnums["Int"];
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<SearchResultItemEdge>>>;
  /**
   * The total number of issues that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
   */
  issueCount: ScalarsEnums["Int"];
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<SearchResultItem>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * The total number of repositories that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
   */
  repositoryCount: ScalarsEnums["Int"];
  /**
   * The total number of users that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
   */
  userCount: ScalarsEnums["Int"];
  /**
   * The total number of wiki pages that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
   */
  wikiCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface SearchResultItemEdge {
  __typename?: "SearchResultItemEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<SearchResultItem>;
  /**
   * Text matches on the result found.
   */
  textMatches?: Maybe<Array<Maybe<TextMatch>>>;
}

/**
 * A GitHub Security Advisory
 */
export interface SecurityAdvisory {
  __typename?: "SecurityAdvisory";
  /**
   * The classification of the advisory
   */
  classification: ScalarsEnums["SecurityAdvisoryClassification"];
  /**
   * The CVSS associated with this advisory
   */
  cvss: CVSS;
  /**
   * CWEs associated with this Advisory
   */
  cwes: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => CWEConnection;
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * This is a long plaintext description of the advisory
   */
  description: ScalarsEnums["String"];
  /**
   * The GitHub Security Advisory ID
   */
  ghsaId: ScalarsEnums["String"];
  id: ScalarsEnums["ID"];
  /**
   * A list of identifiers for this advisory
   */
  identifiers: Array<SecurityAdvisoryIdentifier>;
  /**
   * The permalink for the advisory's dependabot alerts page
   */
  notificationsPermalink?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The organization that originated the advisory
   */
  origin: ScalarsEnums["String"];
  /**
   * The permalink for the advisory
   */
  permalink?: Maybe<ScalarsEnums["URI"]>;
  /**
   * When the advisory was published
   */
  publishedAt: ScalarsEnums["DateTime"];
  /**
   * A list of references for this advisory
   */
  references: Array<SecurityAdvisoryReference>;
  /**
   * The severity of the advisory
   */
  severity: ScalarsEnums["SecurityAdvisorySeverity"];
  /**
   * A short plaintext summary of the advisory
   */
  summary: ScalarsEnums["String"];
  /**
   * When the advisory was last updated
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * Vulnerabilities associated with this Advisory
   */
  vulnerabilities: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * A list of advisory classifications to filter vulnerabilities by.
     */
    classifications?: Maybe<Array<SecurityAdvisoryClassification>>;
    /**
     * An ecosystem to filter vulnerabilities by.
     */
    ecosystem?: Maybe<SecurityAdvisoryEcosystem>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for the returned topics.
     * @defaultValue `{"direction":"DESC","field":"UPDATED_AT"}`
     */
    orderBy?: Maybe<SecurityVulnerabilityOrder>;
    /**
     * A package name to filter vulnerabilities by.
     */
    package?: Maybe<Scalars["String"]>;
    /**
     * A list of severities to filter vulnerabilities by.
     */
    severities?: Maybe<Array<SecurityAdvisorySeverity>>;
  }) => SecurityVulnerabilityConnection;
  /**
   * When the advisory was withdrawn, if it has been withdrawn
   */
  withdrawnAt?: Maybe<ScalarsEnums["DateTime"]>;
}

/**
 * The connection type for SecurityAdvisory.
 */
export interface SecurityAdvisoryConnection {
  __typename?: "SecurityAdvisoryConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<SecurityAdvisoryEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<SecurityAdvisory>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface SecurityAdvisoryEdge {
  __typename?: "SecurityAdvisoryEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<SecurityAdvisory>;
}

/**
 * A GitHub Security Advisory Identifier
 */
export interface SecurityAdvisoryIdentifier {
  __typename?: "SecurityAdvisoryIdentifier";
  /**
   * The identifier type, e.g. GHSA, CVE
   */
  type: ScalarsEnums["String"];
  /**
   * The identifier
   */
  value: ScalarsEnums["String"];
}

/**
 * An individual package
 */
export interface SecurityAdvisoryPackage {
  __typename?: "SecurityAdvisoryPackage";
  /**
   * The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
   */
  ecosystem: ScalarsEnums["SecurityAdvisoryEcosystem"];
  /**
   * The package name
   */
  name: ScalarsEnums["String"];
}

/**
 * An individual package version
 */
export interface SecurityAdvisoryPackageVersion {
  __typename?: "SecurityAdvisoryPackageVersion";
  /**
   * The package name or version
   */
  identifier: ScalarsEnums["String"];
}

/**
 * A GitHub Security Advisory Reference
 */
export interface SecurityAdvisoryReference {
  __typename?: "SecurityAdvisoryReference";
  /**
   * A publicly accessible reference
   */
  url: ScalarsEnums["URI"];
}

/**
 * An individual vulnerability within an Advisory
 */
export interface SecurityVulnerability {
  __typename?: "SecurityVulnerability";
  /**
   * The Advisory associated with this Vulnerability
   */
  advisory: SecurityAdvisory;
  /**
   * The first version containing a fix for the vulnerability
   */
  firstPatchedVersion?: Maybe<SecurityAdvisoryPackageVersion>;
  /**
   * A description of the vulnerable package
   */
  package: SecurityAdvisoryPackage;
  /**
   * The severity of the vulnerability within this package
   */
  severity: ScalarsEnums["SecurityAdvisorySeverity"];
  /**
   * When the vulnerability was last updated
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * A string that describes the vulnerable package versions.
   * This string follows a basic syntax with a few forms.
   * + `= 0.2.0` denotes a single vulnerable version.
   * + `<= 1.0.8` denotes a version range up to and including the specified version
   * + `< 0.1.11` denotes a version range up to, but excluding, the specified version
   * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
   * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
   */
  vulnerableVersionRange: ScalarsEnums["String"];
}

/**
 * The connection type for SecurityVulnerability.
 */
export interface SecurityVulnerabilityConnection {
  __typename?: "SecurityVulnerabilityConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<SecurityVulnerabilityEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<SecurityVulnerability>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface SecurityVulnerabilityEdge {
  __typename?: "SecurityVulnerabilityEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<SecurityVulnerability>;
}

/**
 * Autogenerated return type of SetEnterpriseIdentityProvider
 */
export interface SetEnterpriseIdentityProviderPayload {
  __typename?: "SetEnterpriseIdentityProviderPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The identity provider for the enterprise.
   */
  identityProvider?: Maybe<EnterpriseIdentityProvider>;
}

/**
 * Autogenerated return type of SetOrganizationInteractionLimit
 */
export interface SetOrganizationInteractionLimitPayload {
  __typename?: "SetOrganizationInteractionLimitPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The organization that the interaction limit was set for.
   */
  organization?: Maybe<Organization>;
}

/**
 * Autogenerated return type of SetRepositoryInteractionLimit
 */
export interface SetRepositoryInteractionLimitPayload {
  __typename?: "SetRepositoryInteractionLimitPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The repository that the interaction limit was set for.
   */
  repository?: Maybe<Repository>;
}

/**
 * Autogenerated return type of SetUserInteractionLimit
 */
export interface SetUserInteractionLimitPayload {
  __typename?: "SetUserInteractionLimitPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The user that the interaction limit was set for.
   */
  user?: Maybe<User>;
}

/**
 * Represents an S/MIME signature on a Commit or Tag.
 */
export interface SmimeSignature {
  __typename?: "SmimeSignature";
  /**
   * Email used to sign this object.
   */
  email: ScalarsEnums["String"];
  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: ScalarsEnums["Boolean"];
  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: ScalarsEnums["String"];
  /**
   * ASCII-armored signature header from object.
   */
  signature: ScalarsEnums["String"];
  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer?: Maybe<User>;
  /**
   * The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: ScalarsEnums["GitSignatureState"];
  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: ScalarsEnums["Boolean"];
}

/**
 * Social media profile associated with a user.
 */
export interface SocialAccount {
  __typename?: "SocialAccount";
  /**
   * Name of the social media account as it appears on the profile.
   */
  displayName: ScalarsEnums["String"];
  /**
   * Software or company that hosts the social media account.
   */
  provider: ScalarsEnums["SocialAccountProvider"];
  /**
   * URL of the social media account.
   */
  url: ScalarsEnums["URI"];
}

/**
 * The connection type for SocialAccount.
 */
export interface SocialAccountConnection {
  __typename?: "SocialAccountConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<SocialAccountEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<SocialAccount>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface SocialAccountEdge {
  __typename?: "SocialAccountEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<SocialAccount>;
}

/**
 * Entities that can sponsor others via GitHub Sponsors
 */
export interface Sponsor {
  __typename?: "Organization" | "User";
  $on: $Sponsor;
}

/**
 * The connection type for Sponsor.
 */
export interface SponsorConnection {
  __typename?: "SponsorConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<SponsorEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Sponsor>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * Represents a user or organization who is sponsoring someone in GitHub Sponsors.
 */
export interface SponsorEdge {
  __typename?: "SponsorEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Sponsor>;
}

/**
 * Entities that can sponsor or be sponsored through GitHub Sponsors.
 */
export interface Sponsorable {
  __typename?: "Organization" | "User";
  /**
   * The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
   */
  estimatedNextSponsorsPayoutInCents: ScalarsEnums["Int"];
  /**
   * True if this user/organization has a GitHub Sponsors listing.
   */
  hasSponsorsListing: ScalarsEnums["Boolean"];
  /**
   * Whether the given account is sponsoring this user/organization.
   */
  isSponsoredBy: (args: {
    /**
     * The target account's login.
     */
    accountLogin: Scalars["String"];
  }) => ScalarsEnums["Boolean"];
  /**
   * True if the viewer is sponsored by this user/organization.
   */
  isSponsoringViewer: ScalarsEnums["Boolean"];
  /**
   * The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
   */
  monthlyEstimatedSponsorsIncomeInCents: ScalarsEnums["Int"];
  /**
   * List of users and organizations this entity is sponsoring.
   */
  sponsoring: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for the users and organizations returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"RELEVANCE"}`
     */
    orderBy?: Maybe<SponsorOrder>;
  }) => SponsorConnection;
  /**
   * List of sponsors for this user or organization.
   */
  sponsors: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for sponsors returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"RELEVANCE"}`
     */
    orderBy?: Maybe<SponsorOrder>;
    /**
     * If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see.
     */
    tierId?: Maybe<Scalars["ID"]>;
  }) => SponsorConnection;
  /**
   * Events involving this sponsorable, such as new sponsorships.
   */
  sponsorsActivities: (args?: {
    /**
     * Filter activities to only the specified actions.
     * @defaultValue `[]`
     */
    actions?: Maybe<Array<SponsorsActivityAction>>;
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Whether to include those events where this sponsorable acted as the sponsor. Defaults to only including events where this sponsorable was the recipient of a sponsorship.
     * @defaultValue `false`
     */
    includeAsSponsor?: Maybe<Scalars["Boolean"]>;
    /**
     * Whether or not to include private activities in the result set. Defaults to including public and private activities.
     * @defaultValue `true`
     */
    includePrivate?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for activity returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"TIMESTAMP"}`
     */
    orderBy?: Maybe<SponsorsActivityOrder>;
    /**
     * Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. Will be ignored if `since` or `until` is given.
     * @defaultValue `"MONTH"`
     */
    period?: Maybe<SponsorsActivityPeriod>;
    /**
     * Filter activities to those that occurred on or after this time.
     */
    since?: Maybe<Scalars["DateTime"]>;
    /**
     * Filter activities to those that occurred before this time.
     */
    until?: Maybe<Scalars["DateTime"]>;
  }) => SponsorsActivityConnection;
  /**
   * The GitHub Sponsors listing for this user or organization.
   */
  sponsorsListing?: Maybe<SponsorsListing>;
  /**
   * The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
   */
  sponsorshipForViewerAsSponsor: (args?: {
    /**
     * Whether to return the sponsorship only if it's still active. Pass false to get the viewer's sponsorship back even if it has been cancelled.
     * @defaultValue `true`
     */
    activeOnly?: Maybe<Scalars["Boolean"]>;
  }) => Maybe<Sponsorship>;
  /**
   * The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
   */
  sponsorshipForViewerAsSponsorable: (args?: {
    /**
     * Whether to return the sponsorship only if it's still active. Pass false to get the sponsorship back even if it has been cancelled.
     * @defaultValue `true`
     */
    activeOnly?: Maybe<Scalars["Boolean"]>;
  }) => Maybe<Sponsorship>;
  /**
   * List of sponsorship updates sent from this sponsorable to sponsors.
   */
  sponsorshipNewsletters: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for sponsorship updates returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<SponsorshipNewsletterOrder>;
  }) => SponsorshipNewsletterConnection;
  /**
   * The sponsorships where this user or organization is the maintainer receiving the funds.
   */
  sponsorshipsAsMaintainer: (args?: {
    /**
     * Whether to include only sponsorships that are active right now, versus all sponsorships this maintainer has ever received.
     * @defaultValue `true`
     */
    activeOnly?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Whether or not to include private sponsorships in the result set
     * @defaultValue `false`
     */
    includePrivate?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
     */
    orderBy?: Maybe<SponsorshipOrder>;
  }) => SponsorshipConnection;
  /**
   * The sponsorships where this user or organization is the funder.
   */
  sponsorshipsAsSponsor: (args?: {
    /**
     * Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
     * @defaultValue `true`
     */
    activeOnly?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter sponsorships returned to those for the specified maintainers. That is, the recipient of the sponsorship is a user or organization with one of the given logins.
     */
    maintainerLogins?: Maybe<Array<Scalars["String"]>>;
    /**
     * Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
     */
    orderBy?: Maybe<SponsorshipOrder>;
  }) => SponsorshipConnection;
  /**
   * The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has spent on GitHub to fund sponsorships. Only returns a value when viewed by the user themselves or by a user who can manage sponsorships for the requested organization.
   */
  totalSponsorshipAmountAsSponsorInCents: (args?: {
    /**
     * Filter payments to those that occurred on or after this time.
     */
    since?: Maybe<Scalars["DateTime"]>;
    /**
     * Filter payments to those made to the users or organizations with the specified usernames.
     * @defaultValue `[]`
     */
    sponsorableLogins?: Maybe<Array<Scalars["String"]>>;
    /**
     * Filter payments to those that occurred before this time.
     */
    until?: Maybe<Scalars["DateTime"]>;
  }) => Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether or not the viewer is able to sponsor this user/organization.
   */
  viewerCanSponsor: ScalarsEnums["Boolean"];
  /**
   * True if the viewer is sponsoring this user/organization.
   */
  viewerIsSponsoring: ScalarsEnums["Boolean"];
  $on: $Sponsorable;
}

/**
 * Entities that can be sponsored via GitHub Sponsors
 */
export interface SponsorableItem {
  __typename?: "Organization" | "User";
  $on: $SponsorableItem;
}

/**
 * The connection type for SponsorableItem.
 */
export interface SponsorableItemConnection {
  __typename?: "SponsorableItemConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<SponsorableItemEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<SponsorableItem>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface SponsorableItemEdge {
  __typename?: "SponsorableItemEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<SponsorableItem>;
}

/**
 * An event related to sponsorship activity.
 */
export interface SponsorsActivity {
  __typename?: "SponsorsActivity";
  /**
   * What action this activity indicates took place.
   */
  action: ScalarsEnums["SponsorsActivityAction"];
  /**
   * The sponsor's current privacy level.
   */
  currentPrivacyLevel?: Maybe<ScalarsEnums["SponsorshipPrivacy"]>;
  id: ScalarsEnums["ID"];
  /**
   * The platform that was used to pay for the sponsorship.
   */
  paymentSource?: Maybe<ScalarsEnums["SponsorshipPaymentSource"]>;
  /**
   * The tier that the sponsorship used to use, for tier change events.
   */
  previousSponsorsTier?: Maybe<SponsorsTier>;
  /**
   * The user or organization who triggered this activity and was/is sponsoring the sponsorable.
   */
  sponsor?: Maybe<Sponsor>;
  /**
   * The user or organization that is being sponsored, the maintainer.
   */
  sponsorable: Sponsorable;
  /**
   * The associated sponsorship tier.
   */
  sponsorsTier?: Maybe<SponsorsTier>;
  /**
   * The timestamp of this event.
   */
  timestamp?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
   */
  viaBulkSponsorship: ScalarsEnums["Boolean"];
}

/**
 * The connection type for SponsorsActivity.
 */
export interface SponsorsActivityConnection {
  __typename?: "SponsorsActivityConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<SponsorsActivityEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<SponsorsActivity>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface SponsorsActivityEdge {
  __typename?: "SponsorsActivityEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<SponsorsActivity>;
}

/**
 * A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain.
 */
export interface SponsorsGoal {
  __typename?: "SponsorsGoal";
  /**
   * A description of the goal from the maintainer.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * What the objective of this goal is.
   */
  kind: ScalarsEnums["SponsorsGoalKind"];
  /**
   * The percentage representing how complete this goal is, between 0-100.
   */
  percentComplete: ScalarsEnums["Int"];
  /**
   * What the goal amount is. Represents an amount in USD for monthly sponsorship amount goals. Represents a count of unique sponsors for total sponsors count goals.
   */
  targetValue: ScalarsEnums["Int"];
  /**
   * A brief summary of the kind and target value of this goal.
   */
  title: ScalarsEnums["String"];
}

/**
 * A GitHub Sponsors listing.
 */
export interface SponsorsListing {
  __typename?: "SponsorsListing";
  /**
   * The current goal the maintainer is trying to reach with GitHub Sponsors, if any.
   */
  activeGoal?: Maybe<SponsorsGoal>;
  /**
   * The Stripe Connect account currently in use for payouts for this Sponsors listing, if any. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization.
   */
  activeStripeConnectAccount?: Maybe<StripeConnectAccount>;
  /**
   * The name of the country or region with the maintainer's bank account or fiscal host. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization.
   */
  billingCountryOrRegion?: Maybe<ScalarsEnums["String"]>;
  /**
   * The email address used by GitHub to contact the sponsorable about their GitHub Sponsors profile. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization.
   */
  contactEmailAddress?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP path for the Sponsors dashboard for this Sponsors listing.
   */
  dashboardResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for the Sponsors dashboard for this Sponsors listing.
   */
  dashboardUrl: ScalarsEnums["URI"];
  /**
   * The records featured on the GitHub Sponsors profile.
   */
  featuredItems: (args?: {
    /**
     * The types of featured items to return.
     * @defaultValue `["REPOSITORY","USER"]`
     */
    featureableTypes?: Maybe<Array<SponsorsListingFeaturedItemFeatureableType>>;
  }) => Array<SponsorsListingFeaturedItem>;
  /**
   * The fiscal host used for payments, if any. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization.
   */
  fiscalHost?: Maybe<Organization>;
  /**
   * The full description of the listing.
   */
  fullDescription: ScalarsEnums["String"];
  /**
   * The full description of the listing rendered to HTML.
   */
  fullDescriptionHTML: ScalarsEnums["HTML"];
  id: ScalarsEnums["ID"];
  /**
   * Whether this listing is publicly visible.
   */
  isPublic: ScalarsEnums["Boolean"];
  /**
   * The listing's full name.
   */
  name: ScalarsEnums["String"];
  /**
   * A future date on which this listing is eligible to receive a payout.
   */
  nextPayoutDate?: Maybe<ScalarsEnums["Date"]>;
  /**
   * The name of the country or region where the maintainer resides. Will only return a value when queried by the maintainer themselves, or by an admin of the sponsorable organization.
   */
  residenceCountryOrRegion?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for this Sponsors listing.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The short description of the listing.
   */
  shortDescription: ScalarsEnums["String"];
  /**
   * The short name of the listing.
   */
  slug: ScalarsEnums["String"];
  /**
   * The entity this listing represents who can be sponsored on GitHub Sponsors.
   */
  sponsorable: Sponsorable;
  /**
   * The tiers for this GitHub Sponsors profile.
   */
  tiers: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Whether to include tiers that aren't published. Only admins of the Sponsors listing can see draft tiers. Only admins of the Sponsors listing and viewers who are currently sponsoring on a retired tier can see those retired tiers. Defaults to including only published tiers, which are visible to anyone who can see the GitHub Sponsors profile.
     * @defaultValue `false`
     */
    includeUnpublished?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for Sponsors tiers returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"MONTHLY_PRICE_IN_CENTS"}`
     */
    orderBy?: Maybe<SponsorsTierOrder>;
  }) => Maybe<SponsorsTierConnection>;
  /**
   * The HTTP URL for this Sponsors listing.
   */
  url: ScalarsEnums["URI"];
}

/**
 * A record that can be featured on a GitHub Sponsors profile.
 */
export interface SponsorsListingFeatureableItem {
  __typename?: "Repository" | "User";
  $on: $SponsorsListingFeatureableItem;
}

/**
 * A record that is promoted on a GitHub Sponsors profile.
 */
export interface SponsorsListingFeaturedItem {
  __typename?: "SponsorsListingFeaturedItem";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Will either be a description from the sponsorable maintainer about why they featured this item, or the item's description itself, such as a user's bio from their GitHub profile page.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The record that is featured on the GitHub Sponsors profile.
   */
  featureable: SponsorsListingFeatureableItem;
  id: ScalarsEnums["ID"];
  /**
   * The position of this featured item on the GitHub Sponsors profile with a lower position indicating higher precedence. Starts at 1.
   */
  position: ScalarsEnums["Int"];
  /**
   * The GitHub Sponsors profile that features this record.
   */
  sponsorsListing: SponsorsListing;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * A GitHub Sponsors tier associated with a GitHub Sponsors listing.
 */
export interface SponsorsTier {
  __typename?: "SponsorsTier";
  /**
   * SponsorsTier information only visible to users that can administer the associated Sponsors listing.
   */
  adminInfo?: Maybe<SponsorsTierAdminInfo>;
  /**
   * Get a different tier for this tier's maintainer that is at the same frequency as this tier but with an equal or lesser cost. Returns the published tier with the monthly price closest to this tier's without going over.
   */
  closestLesserValueTier?: Maybe<SponsorsTier>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The description of the tier.
   */
  description: ScalarsEnums["String"];
  /**
   * The tier description rendered to HTML
   */
  descriptionHTML: ScalarsEnums["HTML"];
  id: ScalarsEnums["ID"];
  /**
   * Whether this tier was chosen at checkout time by the sponsor rather than defined ahead of time by the maintainer who manages the Sponsors listing.
   */
  isCustomAmount: ScalarsEnums["Boolean"];
  /**
   * Whether this tier is only for use with one-time sponsorships.
   */
  isOneTime: ScalarsEnums["Boolean"];
  /**
   * How much this tier costs per month in cents.
   */
  monthlyPriceInCents: ScalarsEnums["Int"];
  /**
   * How much this tier costs per month in USD.
   */
  monthlyPriceInDollars: ScalarsEnums["Int"];
  /**
   * The name of the tier.
   */
  name: ScalarsEnums["String"];
  /**
   * The sponsors listing that this tier belongs to.
   */
  sponsorsListing: SponsorsListing;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * SponsorsTier information only visible to users that can administer the associated Sponsors listing.
 */
export interface SponsorsTierAdminInfo {
  __typename?: "SponsorsTierAdminInfo";
  /**
   * Indicates whether this tier is still a work in progress by the sponsorable and not yet published to the associated GitHub Sponsors profile. Draft tiers cannot be used for new sponsorships and will not be in use on existing sponsorships. Draft tiers cannot be seen by anyone but the admins of the GitHub Sponsors profile.
   */
  isDraft: ScalarsEnums["Boolean"];
  /**
   * Indicates whether this tier is published to the associated GitHub Sponsors profile. Published tiers are visible to anyone who can see the GitHub Sponsors profile, and are available for use in sponsorships if the GitHub Sponsors profile is publicly visible.
   */
  isPublished: ScalarsEnums["Boolean"];
  /**
   * Indicates whether this tier has been retired from the associated GitHub Sponsors profile. Retired tiers are no longer shown on the GitHub Sponsors profile and cannot be chosen for new sponsorships. Existing sponsorships may still use retired tiers if the sponsor selected the tier before it was retired.
   */
  isRetired: ScalarsEnums["Boolean"];
  /**
   * The sponsorships using this tier.
   */
  sponsorships: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Whether or not to return private sponsorships using this tier. Defaults to only returning public sponsorships on this tier.
     * @defaultValue `false`
     */
    includePrivate?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
     */
    orderBy?: Maybe<SponsorshipOrder>;
  }) => SponsorshipConnection;
}

/**
 * The connection type for SponsorsTier.
 */
export interface SponsorsTierConnection {
  __typename?: "SponsorsTierConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<SponsorsTierEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<SponsorsTier>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface SponsorsTierEdge {
  __typename?: "SponsorsTierEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<SponsorsTier>;
}

/**
 * A sponsorship relationship between a sponsor and a maintainer
 */
export interface Sponsorship {
  __typename?: "Sponsorship";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Whether the sponsorship is active. False implies the sponsor is a past sponsor of the maintainer, while true implies they are a current sponsor.
   */
  isActive: ScalarsEnums["Boolean"];
  /**
   * Whether this sponsorship represents a one-time payment versus a recurring sponsorship.
   */
  isOneTimePayment: ScalarsEnums["Boolean"];
  /**
   * Whether the sponsor has chosen to receive sponsorship update emails sent from the sponsorable. Only returns a non-null value when the viewer has permission to know this.
   */
  isSponsorOptedIntoEmail?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The entity that is being sponsored
   * @deprecated `Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.
   */
  maintainer: User;
  /**
   * The platform that was most recently used to pay for the sponsorship.
   */
  paymentSource?: Maybe<ScalarsEnums["SponsorshipPaymentSource"]>;
  /**
   * The privacy level for this sponsorship.
   */
  privacyLevel: ScalarsEnums["SponsorshipPrivacy"];
  /**
   * The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
   * @deprecated `Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.
   */
  sponsor?: Maybe<User>;
  /**
   * The user or organization that is sponsoring, if you have permission to view them.
   */
  sponsorEntity?: Maybe<Sponsor>;
  /**
   * The entity that is being sponsored
   */
  sponsorable: Sponsorable;
  /**
   * The associated sponsorship tier
   */
  tier?: Maybe<SponsorsTier>;
  /**
   * Identifies the date and time when the current tier was chosen for this sponsorship.
   */
  tierSelectedAt?: Maybe<ScalarsEnums["DateTime"]>;
}

/**
 * The connection type for Sponsorship.
 */
export interface SponsorshipConnection {
  __typename?: "SponsorshipConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<SponsorshipEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Sponsorship>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
  /**
   * The total amount in cents of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships.
   */
  totalRecurringMonthlyPriceInCents: ScalarsEnums["Int"];
  /**
   * The total amount in USD of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships.
   */
  totalRecurringMonthlyPriceInDollars: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface SponsorshipEdge {
  __typename?: "SponsorshipEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Sponsorship>;
}

/**
 * An update sent to sponsors of a user or organization on GitHub Sponsors.
 */
export interface SponsorshipNewsletter {
  __typename?: "SponsorshipNewsletter";
  /**
   * The author of the newsletter.
   */
  author?: Maybe<User>;
  /**
   * The contents of the newsletter, the message the sponsorable wanted to give.
   */
  body: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Indicates if the newsletter has been made available to sponsors.
   */
  isPublished: ScalarsEnums["Boolean"];
  /**
   * The user or organization this newsletter is from.
   */
  sponsorable: Sponsorable;
  /**
   * The subject of the newsletter, what it's about.
   */
  subject: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * The connection type for SponsorshipNewsletter.
 */
export interface SponsorshipNewsletterConnection {
  __typename?: "SponsorshipNewsletterConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<SponsorshipNewsletterEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<SponsorshipNewsletter>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface SponsorshipNewsletterEdge {
  __typename?: "SponsorshipNewsletterEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<SponsorshipNewsletter>;
}

/**
 * Represents an SSH signature on a Commit or Tag.
 */
export interface SshSignature {
  __typename?: "SshSignature";
  /**
   * Email used to sign this object.
   */
  email: ScalarsEnums["String"];
  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: ScalarsEnums["Boolean"];
  /**
   * Hex-encoded fingerprint of the key that signed this object.
   */
  keyFingerprint?: Maybe<ScalarsEnums["String"]>;
  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: ScalarsEnums["String"];
  /**
   * ASCII-armored signature header from object.
   */
  signature: ScalarsEnums["String"];
  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer?: Maybe<User>;
  /**
   * The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: ScalarsEnums["GitSignatureState"];
  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: ScalarsEnums["Boolean"];
}

/**
 * The connection type for User.
 */
export interface StargazerConnection {
  __typename?: "StargazerConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<StargazerEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<User>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * Represents a user that's starred a repository.
 */
export interface StargazerEdge {
  __typename?: "StargazerEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  node: User;
  /**
   * Identifies when the item was starred.
   */
  starredAt: ScalarsEnums["DateTime"];
}

/**
 * Things that can be starred.
 */
export interface Starrable {
  __typename?: "Gist" | "Repository" | "Topic";
  id: ScalarsEnums["ID"];
  /**
   * Returns a count of how many stargazers there are on this object
   */
  stargazerCount: ScalarsEnums["Int"];
  /**
   * A list of users who have starred this starrable.
   */
  stargazers: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Order for connection
     */
    orderBy?: Maybe<StarOrder>;
  }) => StargazerConnection;
  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: ScalarsEnums["Boolean"];
  $on: $Starrable;
}

/**
 * The connection type for Repository.
 */
export interface StarredRepositoryConnection {
  __typename?: "StarredRepositoryConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<StarredRepositoryEdge>>>;
  /**
   * Is the list of stars for this user truncated? This is true for users that have many stars.
   */
  isOverLimit: ScalarsEnums["Boolean"];
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Repository>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * Represents a starred repository.
 */
export interface StarredRepositoryEdge {
  __typename?: "StarredRepositoryEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  node: Repository;
  /**
   * Identifies when the item was starred.
   */
  starredAt: ScalarsEnums["DateTime"];
}

/**
 * Autogenerated return type of StartOrganizationMigration
 */
export interface StartOrganizationMigrationPayload {
  __typename?: "StartOrganizationMigrationPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The new organization migration.
   */
  orgMigration?: Maybe<OrganizationMigration>;
}

/**
 * Autogenerated return type of StartRepositoryMigration
 */
export interface StartRepositoryMigrationPayload {
  __typename?: "StartRepositoryMigrationPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The new repository migration.
   */
  repositoryMigration?: Maybe<RepositoryMigration>;
}

/**
 * Represents a commit status.
 */
export interface Status {
  __typename?: "Status";
  /**
   * A list of status contexts and check runs for this commit.
   */
  combinedContexts: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => StatusCheckRollupContextConnection;
  /**
   * The commit this status is attached to.
   */
  commit?: Maybe<Commit>;
  /**
   * Looks up an individual status context by context name.
   */
  context: (args: {
    /**
     * The context name.
     */
    name: Scalars["String"];
  }) => Maybe<StatusContext>;
  /**
   * The individual status contexts for this commit.
   */
  contexts: Array<StatusContext>;
  id: ScalarsEnums["ID"];
  /**
   * The combined commit status.
   */
  state: ScalarsEnums["StatusState"];
}

/**
 * Required status check
 */
export interface StatusCheckConfiguration {
  __typename?: "StatusCheckConfiguration";
  /**
   * The status check context name that must be present on the commit.
   */
  context: ScalarsEnums["String"];
  /**
   * The optional integration ID that this status check must originate from.
   */
  integrationId?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * Represents the rollup for both the check runs and status for a commit.
 */
export interface StatusCheckRollup {
  __typename?: "StatusCheckRollup";
  /**
   * The commit the status and check runs are attached to.
   */
  commit?: Maybe<Commit>;
  /**
   * A list of status contexts and check runs for this commit.
   */
  contexts: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => StatusCheckRollupContextConnection;
  id: ScalarsEnums["ID"];
  /**
   * The combined status for the commit.
   */
  state: ScalarsEnums["StatusState"];
}

/**
 * Types that can be inside a StatusCheckRollup context.
 */
export interface StatusCheckRollupContext {
  __typename?: "CheckRun" | "StatusContext";
  $on: $StatusCheckRollupContext;
}

/**
 * The connection type for StatusCheckRollupContext.
 */
export interface StatusCheckRollupContextConnection {
  __typename?: "StatusCheckRollupContextConnection";
  /**
   * The number of check runs in this rollup.
   */
  checkRunCount: ScalarsEnums["Int"];
  /**
   * Counts of check runs by state.
   */
  checkRunCountsByState?: Maybe<Array<CheckRunStateCount>>;
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<StatusCheckRollupContextEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<StatusCheckRollupContext>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * The number of status contexts in this rollup.
   */
  statusContextCount: ScalarsEnums["Int"];
  /**
   * Counts of status contexts by state.
   */
  statusContextCountsByState?: Maybe<Array<StatusContextStateCount>>;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface StatusCheckRollupContextEdge {
  __typename?: "StatusCheckRollupContextEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<StatusCheckRollupContext>;
}

/**
 * Represents an individual commit status context
 */
export interface StatusContext {
  __typename?: "StatusContext";
  /**
   * The avatar of the OAuth application or the user that created the status
   */
  avatarUrl: (args?: {
    /**
     * The size of the resulting square image.
     * @defaultValue `40`
     */
    size?: Maybe<Scalars["Int"]>;
  }) => Maybe<ScalarsEnums["URI"]>;
  /**
   * This commit this status context is attached to.
   */
  commit?: Maybe<Commit>;
  /**
   * The name of this status context.
   */
  context: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The actor who created this status context.
   */
  creator?: Maybe<Actor>;
  /**
   * The description for this status context.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  id: ScalarsEnums["ID"];
  /**
   * Whether this is required to pass before merging for a specific pull request.
   */
  isRequired: (args?: {
    /**
     * The id of the pull request this is required for
     */
    pullRequestId?: Maybe<Scalars["ID"]>;
    /**
     * The number of the pull request this is required for
     */
    pullRequestNumber?: Maybe<Scalars["Int"]>;
  }) => ScalarsEnums["Boolean"];
  /**
   * The state of this status context.
   */
  state: ScalarsEnums["StatusState"];
  /**
   * The URL for this status context.
   */
  targetUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Represents a count of the state of a status context.
 */
export interface StatusContextStateCount {
  __typename?: "StatusContextStateCount";
  /**
   * The number of statuses with this state.
   */
  count: ScalarsEnums["Int"];
  /**
   * The state of a status context.
   */
  state: ScalarsEnums["StatusState"];
}

/**
 * A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors.
 */
export interface StripeConnectAccount {
  __typename?: "StripeConnectAccount";
  /**
   * The account number used to identify this Stripe Connect account.
   */
  accountId: ScalarsEnums["String"];
  /**
   * The name of the country or region of an external account, such as a bank account, tied to the Stripe Connect account. Will only return a value when queried by the maintainer of the associated GitHub Sponsors profile themselves, or by an admin of the sponsorable organization.
   */
  billingCountryOrRegion?: Maybe<ScalarsEnums["String"]>;
  /**
   * The name of the country or region of the Stripe Connect account. Will only return a value when queried by the maintainer of the associated GitHub Sponsors profile themselves, or by an admin of the sponsorable organization.
   */
  countryOrRegion?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether this Stripe Connect account is currently in use for the associated GitHub Sponsors profile.
   */
  isActive: ScalarsEnums["Boolean"];
  /**
   * The GitHub Sponsors profile associated with this Stripe Connect account.
   */
  sponsorsListing: SponsorsListing;
  /**
   * The URL to access this Stripe Connect account on Stripe's website.
   */
  stripeDashboardUrl: ScalarsEnums["URI"];
}

/**
 * Autogenerated return type of SubmitPullRequestReview
 */
export interface SubmitPullRequestReviewPayload {
  __typename?: "SubmitPullRequestReviewPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The submitted pull request review.
   */
  pullRequestReview?: Maybe<PullRequestReview>;
}

/**
 * A pointer to a repository at a specific revision embedded inside another repository.
 */
export interface Submodule {
  __typename?: "Submodule";
  /**
   * The branch of the upstream submodule for tracking updates
   */
  branch?: Maybe<ScalarsEnums["String"]>;
  /**
   * The git URL of the submodule repository
   */
  gitUrl: ScalarsEnums["URI"];
  /**
   * The name of the submodule in .gitmodules
   */
  name: ScalarsEnums["String"];
  /**
   * The name of the submodule in .gitmodules (Base64-encoded)
   */
  nameRaw: ScalarsEnums["Base64String"];
  /**
   * The path in the superproject that this submodule is located in
   */
  path: ScalarsEnums["String"];
  /**
   * The path in the superproject that this submodule is located in (Base64-encoded)
   */
  pathRaw: ScalarsEnums["Base64String"];
  /**
   * The commit revision of the subproject repository being tracked by the submodule
   */
  subprojectCommitOid?: Maybe<ScalarsEnums["GitObjectID"]>;
}

/**
 * The connection type for Submodule.
 */
export interface SubmoduleConnection {
  __typename?: "SubmoduleConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<SubmoduleEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Submodule>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface SubmoduleEdge {
  __typename?: "SubmoduleEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Submodule>;
}

/**
 * Entities that can be subscribed to for web and email notifications.
 */
export interface Subscribable {
  __typename?:
    | "Commit"
    | "Discussion"
    | "Issue"
    | "PullRequest"
    | "Repository"
    | "Team"
    | "TeamDiscussion";
  id: ScalarsEnums["ID"];
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: ScalarsEnums["Boolean"];
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: Maybe<ScalarsEnums["SubscriptionState"]>;
  $on: $Subscribable;
}

/**
 * Entities that can be subscribed to for web and email notifications.
 */
export interface SubscribableThread {
  __typename?: "Issue";
  id: ScalarsEnums["ID"];
  /**
   * Identifies the viewer's thread subscription form action.
   */
  viewerThreadSubscriptionFormAction?: Maybe<
    ScalarsEnums["ThreadSubscriptionFormAction"]
  >;
  /**
   * Identifies the viewer's thread subscription status.
   */
  viewerThreadSubscriptionStatus?: Maybe<
    ScalarsEnums["ThreadSubscriptionState"]
  >;
  $on: $SubscribableThread;
}

/**
 * Represents a 'subscribed' event on a given `Subscribable`.
 */
export interface SubscribedEvent {
  __typename?: "SubscribedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Object referenced by event.
   */
  subscribable: Subscribable;
}

/**
 * A suggestion to review a pull request based on a user's commit history and review comments.
 */
export interface SuggestedReviewer {
  __typename?: "SuggestedReviewer";
  /**
   * Is this suggestion based on past commits?
   */
  isAuthor: ScalarsEnums["Boolean"];
  /**
   * Is this suggestion based on past review comments?
   */
  isCommenter: ScalarsEnums["Boolean"];
  /**
   * Identifies the user suggested to review the pull request.
   */
  reviewer: User;
}

/**
 * Represents a Git tag.
 */
export interface Tag {
  __typename?: "Tag";
  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: ScalarsEnums["String"];
  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this Git object
   */
  commitUrl: ScalarsEnums["URI"];
  id: ScalarsEnums["ID"];
  /**
   * The Git tag message.
   */
  message?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Git tag name.
   */
  name: ScalarsEnums["String"];
  /**
   * The Git object ID
   */
  oid: ScalarsEnums["GitObjectID"];
  /**
   * The Repository the Git object belongs to
   */
  repository: Repository;
  /**
   * Details about the tag author.
   */
  tagger?: Maybe<GitActor>;
  /**
   * The Git object the tag points to.
   */
  target: GitObject;
}

/**
 * Parameters to be used for the tag_name_pattern rule
 */
export interface TagNamePatternParameters {
  __typename?: "TagNamePatternParameters";
  /**
   * How this rule will appear to users.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * If true, the rule will fail if the pattern matches.
   */
  negate: ScalarsEnums["Boolean"];
  /**
   * The operator to use for matching.
   */
  operator: ScalarsEnums["String"];
  /**
   * The pattern to match with.
   */
  pattern: ScalarsEnums["String"];
}

/**
 * A team of users in an organization.
 */
export interface Team {
  __typename?: "Team";
  /**
   * A list of teams that are ancestors of this team.
   */
  ancestors: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => TeamConnection;
  /**
   * A URL pointing to the team's avatar.
   */
  avatarUrl: (args?: {
    /**
     * The size in pixels of the resulting square image.
     * @defaultValue `400`
     */
    size?: Maybe<Scalars["Int"]>;
  }) => Maybe<ScalarsEnums["URI"]>;
  /**
   * List of child teams belonging to this team
   */
  childTeams: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Whether to list immediate child teams or all descendant child teams.
     * @defaultValue `true`
     */
    immediateOnly?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Order for connection
     */
    orderBy?: Maybe<TeamOrder>;
    /**
     * User logins to filter by
     */
    userLogins?: Maybe<Array<Scalars["String"]>>;
  }) => TeamConnection;
  /**
   * The slug corresponding to the organization and team.
   */
  combinedSlug: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The description of the team.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * Find a team discussion by its number.
   */
  discussion: (args: {
    /**
     * The sequence number of the discussion to find.
     */
    number: Scalars["Int"];
  }) => Maybe<TeamDiscussion>;
  /**
   * A list of team discussions.
   */
  discussions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * If provided, filters discussions according to whether or not they are pinned.
     */
    isPinned?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Order for connection
     */
    orderBy?: Maybe<TeamDiscussionOrder>;
  }) => TeamDiscussionConnection;
  /**
   * The HTTP path for team discussions
   */
  discussionsResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for team discussions
   */
  discussionsUrl: ScalarsEnums["URI"];
  /**
   * The HTTP path for editing this team
   */
  editTeamResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for editing this team
   */
  editTeamUrl: ScalarsEnums["URI"];
  id: ScalarsEnums["ID"];
  /**
   * A list of pending invitations for users to this team
   */
  invitations: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<OrganizationInvitationConnection>;
  /**
   * Get the status messages members of this entity have set that are either public or visible only to the organization.
   */
  memberStatuses: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for user statuses returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"UPDATED_AT"}`
     */
    orderBy?: Maybe<UserStatusOrder>;
  }) => UserStatusConnection;
  /**
   * A list of users who are members of this team.
   */
  members: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter by membership type
     * @defaultValue `"ALL"`
     */
    membership?: Maybe<TeamMembershipType>;
    /**
     * Order for the connection.
     */
    orderBy?: Maybe<TeamMemberOrder>;
    /**
     * The search string to look for.
     */
    query?: Maybe<Scalars["String"]>;
    /**
     * Filter by team member role
     */
    role?: Maybe<TeamMemberRole>;
  }) => TeamMemberConnection;
  /**
   * The HTTP path for the team' members
   */
  membersResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for the team' members
   */
  membersUrl: ScalarsEnums["URI"];
  /**
   * The name of the team.
   */
  name: ScalarsEnums["String"];
  /**
   * The HTTP path creating a new team
   */
  newTeamResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL creating a new team
   */
  newTeamUrl: ScalarsEnums["URI"];
  /**
   * The notification setting that the team has set.
   */
  notificationSetting: ScalarsEnums["TeamNotificationSetting"];
  /**
   * The organization that owns this team.
   */
  organization: Organization;
  /**
   * The parent team of the team.
   */
  parentTeam?: Maybe<Team>;
  /**
   * The level of privacy the team has.
   */
  privacy: ScalarsEnums["TeamPrivacy"];
  /**
   * Finds and returns the project according to the provided project number.
   */
  projectV2: (args: {
    /**
     * The Project number.
     */
    number: Scalars["Int"];
  }) => Maybe<ProjectV2>;
  /**
   * List of projects this team has collaborator access to.
   */
  projectsV2: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Filtering options for projects returned from this connection
     * @defaultValue `{}`
     */
    filterBy?: Maybe<ProjectV2Filters>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * How to order the returned projects.
     * @defaultValue `{"direction":"DESC","field":"NUMBER"}`
     */
    orderBy?: Maybe<ProjectV2Order>;
    /**
     * The query to search projects by.
     * @defaultValue `""`
     */
    query?: Maybe<Scalars["String"]>;
  }) => ProjectV2Connection;
  /**
   * A list of repositories this team has access to.
   */
  repositories: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Order for the connection.
     */
    orderBy?: Maybe<TeamRepositoryOrder>;
    /**
     * The search string to look for. Repositories will be returned where the name contains your search string.
     */
    query?: Maybe<Scalars["String"]>;
  }) => TeamRepositoryConnection;
  /**
   * The HTTP path for this team's repositories
   */
  repositoriesResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this team's repositories
   */
  repositoriesUrl: ScalarsEnums["URI"];
  /**
   * The HTTP path for this team
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The slug corresponding to the team.
   */
  slug: ScalarsEnums["String"];
  /**
   * The HTTP path for this team's teams
   */
  teamsResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this team's teams
   */
  teamsUrl: ScalarsEnums["URI"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this team
   */
  url: ScalarsEnums["URI"];
  /**
   * Team is adminable by the viewer.
   */
  viewerCanAdminister: ScalarsEnums["Boolean"];
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: ScalarsEnums["Boolean"];
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: Maybe<ScalarsEnums["SubscriptionState"]>;
}

/**
 * Audit log entry for a team.add_member event.
 */
export interface TeamAddMemberAuditEntry {
  __typename?: "TeamAddMemberAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The team associated with the action
   */
  team?: Maybe<Team>;
  /**
   * The name of the team
   */
  teamName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for this team
   */
  teamResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for this team
   */
  teamUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a team.add_repository event.
 */
export interface TeamAddRepositoryAuditEntry {
  __typename?: "TeamAddRepositoryAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The team associated with the action
   */
  team?: Maybe<Team>;
  /**
   * The name of the team
   */
  teamName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for this team
   */
  teamResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for this team
   */
  teamUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Metadata for an audit entry with action team.*
 */
export interface TeamAuditEntryData {
  __typename?:
    | "OrgRestoreMemberMembershipTeamAuditEntryData"
    | "TeamAddMemberAuditEntry"
    | "TeamAddRepositoryAuditEntry"
    | "TeamChangeParentTeamAuditEntry"
    | "TeamRemoveMemberAuditEntry"
    | "TeamRemoveRepositoryAuditEntry";
  /**
   * The team associated with the action
   */
  team?: Maybe<Team>;
  /**
   * The name of the team
   */
  teamName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for this team
   */
  teamResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for this team
   */
  teamUrl?: Maybe<ScalarsEnums["URI"]>;
  $on: $TeamAuditEntryData;
}

/**
 * Audit log entry for a team.change_parent_team event.
 */
export interface TeamChangeParentTeamAuditEntry {
  __typename?: "TeamChangeParentTeamAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The new parent team.
   */
  parentTeam?: Maybe<Team>;
  /**
   * The name of the new parent team
   */
  parentTeamName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The name of the former parent team
   */
  parentTeamNameWas?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the parent team
   */
  parentTeamResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the parent team
   */
  parentTeamUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The former parent team.
   */
  parentTeamWas?: Maybe<Team>;
  /**
   * The HTTP path for the previous parent team
   */
  parentTeamWasResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the previous parent team
   */
  parentTeamWasUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The team associated with the action
   */
  team?: Maybe<Team>;
  /**
   * The name of the team
   */
  teamName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for this team
   */
  teamResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for this team
   */
  teamUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * The connection type for Team.
 */
export interface TeamConnection {
  __typename?: "TeamConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<TeamEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Team>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * A team discussion.
 */
export interface TeamDiscussion {
  __typename?: "TeamDiscussion";
  /**
   * The actor who authored the comment.
   */
  author?: Maybe<Actor>;
  /**
   * Author's association with the discussion's team.
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  authorAssociation: ScalarsEnums["CommentAuthorAssociation"];
  /**
   * The body as Markdown.
   */
  body: ScalarsEnums["String"];
  /**
   * The body rendered to HTML.
   */
  bodyHTML: ScalarsEnums["HTML"];
  /**
   * The body rendered to text.
   */
  bodyText: ScalarsEnums["String"];
  /**
   * Identifies the discussion body hash.
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  bodyVersion: ScalarsEnums["String"];
  /**
   * A list of comments on this discussion.
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  comments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * When provided, filters the connection such that results begin with the comment with this number.
     */
    fromComment?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Order for connection
     */
    orderBy?: Maybe<TeamDiscussionCommentOrder>;
  }) => TeamDiscussionCommentConnection;
  /**
   * The HTTP path for discussion comments
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  commentsResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for discussion comments
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  commentsUrl: ScalarsEnums["URI"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: ScalarsEnums["Boolean"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The actor who edited the comment.
   */
  editor?: Maybe<Actor>;
  id: ScalarsEnums["ID"];
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: ScalarsEnums["Boolean"];
  /**
   * Whether or not the discussion is pinned.
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  isPinned: ScalarsEnums["Boolean"];
  /**
   * Whether or not the discussion is only visible to team members and org admins.
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  isPrivate: ScalarsEnums["Boolean"];
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Identifies the discussion within its team.
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  number: ScalarsEnums["Int"];
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Maybe<Array<ReactionGroup>>;
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Allows filtering Reactions by emoji.
     */
    content?: Maybe<ReactionContent>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Allows specifying the order in which reactions are returned.
     */
    orderBy?: Maybe<ReactionOrder>;
  }) => ReactionConnection;
  /**
   * The HTTP path for this discussion
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The team that defines the context of this discussion.
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  team: Team;
  /**
   * The title of the discussion
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  title: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this discussion
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  url: ScalarsEnums["URI"];
  /**
   * A list of edits to this content.
   */
  userContentEdits: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<UserContentEditConnection>;
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: ScalarsEnums["Boolean"];
  /**
   * Whether or not the current viewer can pin this discussion.
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  viewerCanPin: ScalarsEnums["Boolean"];
  /**
   * Can user react to this subject
   */
  viewerCanReact: ScalarsEnums["Boolean"];
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: ScalarsEnums["Boolean"];
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<ScalarsEnums["CommentCannotUpdateReason"]>;
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: ScalarsEnums["Boolean"];
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: Maybe<ScalarsEnums["SubscriptionState"]>;
}

/**
 * A comment on a team discussion.
 */
export interface TeamDiscussionComment {
  __typename?: "TeamDiscussionComment";
  /**
   * The actor who authored the comment.
   */
  author?: Maybe<Actor>;
  /**
   * Author's association with the comment's team.
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  authorAssociation: ScalarsEnums["CommentAuthorAssociation"];
  /**
   * The body as Markdown.
   */
  body: ScalarsEnums["String"];
  /**
   * The body rendered to HTML.
   */
  bodyHTML: ScalarsEnums["HTML"];
  /**
   * The body rendered to text.
   */
  bodyText: ScalarsEnums["String"];
  /**
   * The current version of the body content.
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  bodyVersion: ScalarsEnums["String"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: ScalarsEnums["Boolean"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The discussion this comment is about.
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  discussion: TeamDiscussion;
  /**
   * The actor who edited the comment.
   */
  editor?: Maybe<Actor>;
  id: ScalarsEnums["ID"];
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: ScalarsEnums["Boolean"];
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Identifies the comment number.
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  number: ScalarsEnums["Int"];
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Maybe<Array<ReactionGroup>>;
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Allows filtering Reactions by emoji.
     */
    content?: Maybe<ReactionContent>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Allows specifying the order in which reactions are returned.
     */
    orderBy?: Maybe<ReactionOrder>;
  }) => ReactionConnection;
  /**
   * The HTTP path for this comment
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this comment
   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.
   */
  url: ScalarsEnums["URI"];
  /**
   * A list of edits to this content.
   */
  userContentEdits: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<UserContentEditConnection>;
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: ScalarsEnums["Boolean"];
  /**
   * Can user react to this subject
   */
  viewerCanReact: ScalarsEnums["Boolean"];
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: ScalarsEnums["Boolean"];
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<ScalarsEnums["CommentCannotUpdateReason"]>;
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: ScalarsEnums["Boolean"];
}

/**
 * The connection type for TeamDiscussionComment.
 */
export interface TeamDiscussionCommentConnection {
  __typename?: "TeamDiscussionCommentConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<TeamDiscussionCommentEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<TeamDiscussionComment>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface TeamDiscussionCommentEdge {
  __typename?: "TeamDiscussionCommentEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<TeamDiscussionComment>;
}

/**
 * The connection type for TeamDiscussion.
 */
export interface TeamDiscussionConnection {
  __typename?: "TeamDiscussionConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<TeamDiscussionEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<TeamDiscussion>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface TeamDiscussionEdge {
  __typename?: "TeamDiscussionEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<TeamDiscussion>;
}

/**
 * An edge in a connection.
 */
export interface TeamEdge {
  __typename?: "TeamEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<Team>;
}

/**
 * The connection type for User.
 */
export interface TeamMemberConnection {
  __typename?: "TeamMemberConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<TeamMemberEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<User>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * Represents a user who is a member of a team.
 */
export interface TeamMemberEdge {
  __typename?: "TeamMemberEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The HTTP path to the organization's member access page.
   */
  memberAccessResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL to the organization's member access page.
   */
  memberAccessUrl: ScalarsEnums["URI"];
  node: User;
  /**
   * The role the member has on the team.
   */
  role: ScalarsEnums["TeamMemberRole"];
}

/**
 * Audit log entry for a team.remove_member event.
 */
export interface TeamRemoveMemberAuditEntry {
  __typename?: "TeamRemoveMemberAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The team associated with the action
   */
  team?: Maybe<Team>;
  /**
   * The name of the team
   */
  teamName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for this team
   */
  teamResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for this team
   */
  teamUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Audit log entry for a team.remove_repository event.
 */
export interface TeamRemoveRepositoryAuditEntry {
  __typename?: "TeamRemoveRepositoryAuditEntry";
  /**
   * The action name
   */
  action: ScalarsEnums["String"];
  /**
   * The user who initiated the action
   */
  actor?: Maybe<AuditEntryActor>;
  /**
   * The IP address of the actor
   */
  actorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * A readable representation of the actor's location
   */
  actorLocation?: Maybe<ActorLocation>;
  /**
   * The username of the user who initiated the action
   */
  actorLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the actor.
   */
  actorResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the actor.
   */
  actorUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The time the action was initiated
   */
  createdAt: ScalarsEnums["PreciseDateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Whether the team was mapped to an LDAP Group.
   */
  isLdapMapped?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The corresponding operation type for the action
   */
  operationType?: Maybe<ScalarsEnums["OperationType"]>;
  /**
   * The Organization associated with the Audit Entry.
   */
  organization?: Maybe<Organization>;
  /**
   * The name of the Organization.
   */
  organizationName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the organization
   */
  organizationResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the organization
   */
  organizationUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The repository associated with the action
   */
  repository?: Maybe<Repository>;
  /**
   * The name of the repository
   */
  repositoryName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the repository
   */
  repositoryResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the repository
   */
  repositoryUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The team associated with the action
   */
  team?: Maybe<Team>;
  /**
   * The name of the team
   */
  teamName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for this team
   */
  teamResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for this team
   */
  teamUrl?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The user affected by the action
   */
  user?: Maybe<User>;
  /**
   * For actions involving two users, the actor is the initiator and the user is the affected user.
   */
  userLogin?: Maybe<ScalarsEnums["String"]>;
  /**
   * The HTTP path for the user.
   */
  userResourcePath?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The HTTP URL for the user.
   */
  userUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * The connection type for Repository.
 */
export interface TeamRepositoryConnection {
  __typename?: "TeamRepositoryConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<TeamRepositoryEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<Repository>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * Represents a team repository.
 */
export interface TeamRepositoryEdge {
  __typename?: "TeamRepositoryEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  node: Repository;
  /**
   * The permission level the team has on the repository
   */
  permission: ScalarsEnums["RepositoryPermission"];
}

/**
 * A text match within a search result.
 */
export interface TextMatch {
  __typename?: "TextMatch";
  /**
   * The specific text fragment within the property matched on.
   */
  fragment: ScalarsEnums["String"];
  /**
   * Highlights within the matched fragment.
   */
  highlights: Array<TextMatchHighlight>;
  /**
   * The property matched on.
   */
  property: ScalarsEnums["String"];
}

/**
 * Represents a single highlight in a search result match.
 */
export interface TextMatchHighlight {
  __typename?: "TextMatchHighlight";
  /**
   * The indice in the fragment where the matched text begins.
   */
  beginIndice: ScalarsEnums["Int"];
  /**
   * The indice in the fragment where the matched text ends.
   */
  endIndice: ScalarsEnums["Int"];
  /**
   * The text matched.
   */
  text: ScalarsEnums["String"];
}

/**
 * A topic aggregates entities that are related to a subject.
 */
export interface Topic {
  __typename?: "Topic";
  id: ScalarsEnums["ID"];
  /**
   * The topic's name.
   */
  name: ScalarsEnums["String"];
  /**
   * A list of related topics, including aliases of this topic, sorted with the most relevant
   * first. Returns up to 10 Topics.
   */
  relatedTopics: (args?: {
    /**
     * How many topics to return.
     * @defaultValue `3`
     */
    first?: Maybe<Scalars["Int"]>;
  }) => Array<Topic>;
  /**
   * A list of repositories.
   */
  repositories: (args?: {
    /**
     * Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
     */
    affiliations?: Maybe<Array<Maybe<RepositoryAffiliation>>>;
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * If non-null, filters repositories according to whether they have issues enabled
     */
    hasIssuesEnabled?: Maybe<Scalars["Boolean"]>;
    /**
     * If non-null, filters repositories according to whether they have been locked
     */
    isLocked?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for repositories returned from the connection
     */
    orderBy?: Maybe<RepositoryOrder>;
    /**
     * Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
     * @defaultValue `["OWNER","COLLABORATOR"]`
     */
    ownerAffiliations?: Maybe<Array<Maybe<RepositoryAffiliation>>>;
    /**
     * If non-null, filters repositories according to privacy
     */
    privacy?: Maybe<RepositoryPrivacy>;
    /**
     * If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.
     * @defaultValue `false`
     */
    sponsorableOnly?: Maybe<Scalars["Boolean"]>;
  }) => RepositoryConnection;
  /**
   * Returns a count of how many stargazers there are on this object
   */
  stargazerCount: ScalarsEnums["Int"];
  /**
   * A list of users who have starred this starrable.
   */
  stargazers: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Order for connection
     */
    orderBy?: Maybe<StarOrder>;
  }) => StargazerConnection;
  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: ScalarsEnums["Boolean"];
}

/**
 * Metadata for an audit entry with a topic.
 */
export interface TopicAuditEntryData {
  __typename?: "RepoAddTopicAuditEntry" | "RepoRemoveTopicAuditEntry";
  /**
   * The name of the topic added to the repository
   */
  topic?: Maybe<Topic>;
  /**
   * The name of the topic added to the repository
   */
  topicName?: Maybe<ScalarsEnums["String"]>;
  $on: $TopicAuditEntryData;
}

/**
 * Autogenerated return type of TransferEnterpriseOrganization
 */
export interface TransferEnterpriseOrganizationPayload {
  __typename?: "TransferEnterpriseOrganizationPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The organization for which a transfer was initiated.
   */
  organization?: Maybe<Organization>;
}

/**
 * Autogenerated return type of TransferIssue
 */
export interface TransferIssuePayload {
  __typename?: "TransferIssuePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The issue that was transferred
   */
  issue?: Maybe<Issue>;
}

/**
 * Represents a 'transferred' event on a given issue or pull request.
 */
export interface TransferredEvent {
  __typename?: "TransferredEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The repository this came from
   */
  fromRepository?: Maybe<Repository>;
  id: ScalarsEnums["ID"];
  /**
   * Identifies the issue associated with the event.
   */
  issue: Issue;
}

/**
 * Represents a Git tree.
 */
export interface Tree {
  __typename?: "Tree";
  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: ScalarsEnums["String"];
  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL for this Git object
   */
  commitUrl: ScalarsEnums["URI"];
  /**
   * A list of tree entries.
   */
  entries?: Maybe<Array<TreeEntry>>;
  id: ScalarsEnums["ID"];
  /**
   * The Git object ID
   */
  oid: ScalarsEnums["GitObjectID"];
  /**
   * The Repository the Git object belongs to
   */
  repository: Repository;
}

/**
 * Represents a Git tree entry.
 */
export interface TreeEntry {
  __typename?: "TreeEntry";
  /**
   * The extension of the file
   */
  extension?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether or not this tree entry is generated
   */
  isGenerated: ScalarsEnums["Boolean"];
  /**
   * The programming language this file is written in.
   */
  language?: Maybe<Language>;
  /**
   * Number of lines in the file.
   */
  lineCount?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Entry file mode.
   */
  mode: ScalarsEnums["Int"];
  /**
   * Entry file name.
   */
  name: ScalarsEnums["String"];
  /**
   * Entry file name. (Base64-encoded)
   */
  nameRaw: ScalarsEnums["Base64String"];
  /**
   * Entry file object.
   */
  object?: Maybe<GitObject>;
  /**
   * Entry file Git object ID.
   */
  oid: ScalarsEnums["GitObjectID"];
  /**
   * The full path of the file.
   */
  path?: Maybe<ScalarsEnums["String"]>;
  /**
   * The full path of the file. (Base64-encoded)
   */
  pathRaw?: Maybe<ScalarsEnums["Base64String"]>;
  /**
   * The Repository the tree entry belongs to
   */
  repository: Repository;
  /**
   * Entry byte size
   */
  size: ScalarsEnums["Int"];
  /**
   * If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
   */
  submodule?: Maybe<Submodule>;
  /**
   * Entry file type.
   */
  type: ScalarsEnums["String"];
}

/**
 * Autogenerated return type of UnarchiveProjectV2Item
 */
export interface UnarchiveProjectV2ItemPayload {
  __typename?: "UnarchiveProjectV2ItemPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item unarchived from the project.
   */
  item?: Maybe<ProjectV2Item>;
}

/**
 * Autogenerated return type of UnarchiveRepository
 */
export interface UnarchiveRepositoryPayload {
  __typename?: "UnarchiveRepositoryPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The repository that was unarchived.
   */
  repository?: Maybe<Repository>;
}

/**
 * Represents an 'unassigned' event on any assignable object.
 */
export interface UnassignedEvent {
  __typename?: "UnassignedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the assignable associated with the event.
   */
  assignable: Assignable;
  /**
   * Identifies the user or mannequin that was unassigned.
   */
  assignee?: Maybe<Assignee>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Identifies the subject (user) who was unassigned.
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
   */
  user?: Maybe<User>;
}

/**
 * Autogenerated return type of UnfollowOrganization
 */
export interface UnfollowOrganizationPayload {
  __typename?: "UnfollowOrganizationPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The organization that was unfollowed.
   */
  organization?: Maybe<Organization>;
}

/**
 * Autogenerated return type of UnfollowUser
 */
export interface UnfollowUserPayload {
  __typename?: "UnfollowUserPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The user that was unfollowed.
   */
  user?: Maybe<User>;
}

/**
 * Represents a type that can be retrieved by a URL.
 */
export interface UniformResourceLocatable {
  __typename?:
    | "Bot"
    | "CheckRun"
    | "ClosedEvent"
    | "Commit"
    | "ConvertToDraftEvent"
    | "CrossReferencedEvent"
    | "Gist"
    | "Issue"
    | "Mannequin"
    | "MergedEvent"
    | "Milestone"
    | "Organization"
    | "PullRequest"
    | "PullRequestCommit"
    | "ReadyForReviewEvent"
    | "Release"
    | "Repository"
    | "RepositoryTopic"
    | "ReviewDismissedEvent"
    | "TeamDiscussion"
    | "TeamDiscussionComment"
    | "User"
    | "Workflow"
    | "WorkflowRun"
    | "WorkflowRunFile";
  /**
   * The HTML path to this resource.
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The URL to this resource.
   */
  url: ScalarsEnums["URI"];
  $on: $UniformResourceLocatable;
}

/**
 * Represents an unknown signature on a Commit or Tag.
 */
export interface UnknownSignature {
  __typename?: "UnknownSignature";
  /**
   * Email used to sign this object.
   */
  email: ScalarsEnums["String"];
  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: ScalarsEnums["Boolean"];
  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: ScalarsEnums["String"];
  /**
   * ASCII-armored signature header from object.
   */
  signature: ScalarsEnums["String"];
  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer?: Maybe<User>;
  /**
   * The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: ScalarsEnums["GitSignatureState"];
  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: ScalarsEnums["Boolean"];
}

/**
 * Represents an 'unlabeled' event on a given issue or pull request.
 */
export interface UnlabeledEvent {
  __typename?: "UnlabeledEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Identifies the label associated with the 'unlabeled' event.
   */
  label: Label;
  /**
   * Identifies the `Labelable` associated with the event.
   */
  labelable: Labelable;
}

/**
 * Autogenerated return type of UnlinkProjectV2FromRepository
 */
export interface UnlinkProjectV2FromRepositoryPayload {
  __typename?: "UnlinkProjectV2FromRepositoryPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The repository the project is no longer linked to.
   */
  repository?: Maybe<Repository>;
}

/**
 * Autogenerated return type of UnlinkProjectV2FromTeam
 */
export interface UnlinkProjectV2FromTeamPayload {
  __typename?: "UnlinkProjectV2FromTeamPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The team the project is unlinked from
   */
  team?: Maybe<Team>;
}

/**
 * Autogenerated return type of UnlinkRepositoryFromProject
 */
export interface UnlinkRepositoryFromProjectPayload {
  __typename?: "UnlinkRepositoryFromProjectPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The linked Project.
   */
  project?: Maybe<Project>;
  /**
   * The linked Repository.
   */
  repository?: Maybe<Repository>;
}

/**
 * Autogenerated return type of UnlockLockable
 */
export interface UnlockLockablePayload {
  __typename?: "UnlockLockablePayload";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item that was unlocked.
   */
  unlockedRecord?: Maybe<Lockable>;
}

/**
 * Represents an 'unlocked' event on a given issue or pull request.
 */
export interface UnlockedEvent {
  __typename?: "UnlockedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Object that was unlocked.
   */
  lockable: Lockable;
}

/**
 * Autogenerated return type of UnmarkDiscussionCommentAsAnswer
 */
export interface UnmarkDiscussionCommentAsAnswerPayload {
  __typename?: "UnmarkDiscussionCommentAsAnswerPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The discussion that includes the comment.
   */
  discussion?: Maybe<Discussion>;
}

/**
 * Autogenerated return type of UnmarkFileAsViewed
 */
export interface UnmarkFileAsViewedPayload {
  __typename?: "UnmarkFileAsViewedPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated pull request.
   */
  pullRequest?: Maybe<PullRequest>;
}

/**
 * Autogenerated return type of UnmarkIssueAsDuplicate
 */
export interface UnmarkIssueAsDuplicatePayload {
  __typename?: "UnmarkIssueAsDuplicatePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The issue or pull request that was marked as a duplicate.
   */
  duplicate?: Maybe<IssueOrPullRequest>;
}

/**
 * Autogenerated return type of UnmarkProjectV2AsTemplate
 */
export interface UnmarkProjectV2AsTemplatePayload {
  __typename?: "UnmarkProjectV2AsTemplatePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The project.
   */
  projectV2?: Maybe<ProjectV2>;
}

/**
 * Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
 */
export interface UnmarkedAsDuplicateEvent {
  __typename?: "UnmarkedAsDuplicateEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * The authoritative issue or pull request which has been duplicated by another.
   */
  canonical?: Maybe<IssueOrPullRequest>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * The issue or pull request which has been marked as a duplicate of another.
   */
  duplicate?: Maybe<IssueOrPullRequest>;
  id: ScalarsEnums["ID"];
  /**
   * Canonical and duplicate belong to different repositories.
   */
  isCrossRepository: ScalarsEnums["Boolean"];
}

/**
 * Autogenerated return type of UnminimizeComment
 */
export interface UnminimizeCommentPayload {
  __typename?: "UnminimizeCommentPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The comment that was unminimized.
   */
  unminimizedComment?: Maybe<Minimizable>;
}

/**
 * Autogenerated return type of UnpinIssue
 */
export interface UnpinIssuePayload {
  __typename?: "UnpinIssuePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The issue that was unpinned
   */
  issue?: Maybe<Issue>;
}

/**
 * Represents an 'unpinned' event on a given issue or pull request.
 */
export interface UnpinnedEvent {
  __typename?: "UnpinnedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Identifies the issue associated with the event.
   */
  issue: Issue;
}

/**
 * Autogenerated return type of UnresolveReviewThread
 */
export interface UnresolveReviewThreadPayload {
  __typename?: "UnresolveReviewThreadPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The thread to resolve.
   */
  thread?: Maybe<PullRequestReviewThread>;
}

/**
 * Represents an 'unsubscribed' event on a given `Subscribable`.
 */
export interface UnsubscribedEvent {
  __typename?: "UnsubscribedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * Object referenced by event.
   */
  subscribable: Subscribable;
}

/**
 * Entities that can be updated.
 */
export interface Updatable {
  __typename?:
    | "CommitComment"
    | "Discussion"
    | "DiscussionComment"
    | "GistComment"
    | "Issue"
    | "IssueComment"
    | "Project"
    | "ProjectV2"
    | "PullRequest"
    | "PullRequestReview"
    | "PullRequestReviewComment"
    | "TeamDiscussion"
    | "TeamDiscussionComment";
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: ScalarsEnums["Boolean"];
  $on: $Updatable;
}

/**
 * Comments that can be updated.
 */
export interface UpdatableComment {
  __typename?:
    | "CommitComment"
    | "DiscussionComment"
    | "GistComment"
    | "Issue"
    | "IssueComment"
    | "PullRequest"
    | "PullRequestReview"
    | "PullRequestReviewComment"
    | "TeamDiscussion"
    | "TeamDiscussionComment";
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<ScalarsEnums["CommentCannotUpdateReason"]>;
  $on: $UpdatableComment;
}

/**
 * Autogenerated return type of UpdateBranchProtectionRule
 */
export interface UpdateBranchProtectionRulePayload {
  __typename?: "UpdateBranchProtectionRulePayload";
  /**
   * The newly created BranchProtectionRule.
   */
  branchProtectionRule?: Maybe<BranchProtectionRule>;
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of UpdateCheckRun
 */
export interface UpdateCheckRunPayload {
  __typename?: "UpdateCheckRunPayload";
  /**
   * The updated check run.
   */
  checkRun?: Maybe<CheckRun>;
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of UpdateCheckSuitePreferences
 */
export interface UpdateCheckSuitePreferencesPayload {
  __typename?: "UpdateCheckSuitePreferencesPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated repository.
   */
  repository?: Maybe<Repository>;
}

/**
 * Autogenerated return type of UpdateDiscussionComment
 */
export interface UpdateDiscussionCommentPayload {
  __typename?: "UpdateDiscussionCommentPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The modified discussion comment.
   */
  comment?: Maybe<DiscussionComment>;
}

/**
 * Autogenerated return type of UpdateDiscussion
 */
export interface UpdateDiscussionPayload {
  __typename?: "UpdateDiscussionPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The modified discussion.
   */
  discussion?: Maybe<Discussion>;
}

/**
 * Autogenerated return type of UpdateEnterpriseAdministratorRole
 */
export interface UpdateEnterpriseAdministratorRolePayload {
  __typename?: "UpdateEnterpriseAdministratorRolePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * A message confirming the result of changing the administrator's role.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
 */
export interface UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload {
  __typename?: "UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The enterprise with the updated allow private repository forking setting.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * A message confirming the result of updating the allow private repository forking setting.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting
 */
export interface UpdateEnterpriseDefaultRepositoryPermissionSettingPayload {
  __typename?: "UpdateEnterpriseDefaultRepositoryPermissionSettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The enterprise with the updated base repository permission setting.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * A message confirming the result of updating the base repository permission setting.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
 */
export interface UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload {
  __typename?: "UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The enterprise with the updated members can change repository visibility setting.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * A message confirming the result of updating the members can change repository visibility setting.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
 */
export interface UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload {
  __typename?: "UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The enterprise with the updated members can create repositories setting.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * A message confirming the result of updating the members can create repositories setting.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting
 */
export interface UpdateEnterpriseMembersCanDeleteIssuesSettingPayload {
  __typename?: "UpdateEnterpriseMembersCanDeleteIssuesSettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The enterprise with the updated members can delete issues setting.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * A message confirming the result of updating the members can delete issues setting.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
 */
export interface UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload {
  __typename?: "UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The enterprise with the updated members can delete repositories setting.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * A message confirming the result of updating the members can delete repositories setting.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
 */
export interface UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload {
  __typename?: "UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The enterprise with the updated members can invite collaborators setting.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * A message confirming the result of updating the members can invite collaborators setting.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting
 */
export interface UpdateEnterpriseMembersCanMakePurchasesSettingPayload {
  __typename?: "UpdateEnterpriseMembersCanMakePurchasesSettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The enterprise with the updated members can make purchases setting.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * A message confirming the result of updating the members can make purchases setting.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
 */
export interface UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload {
  __typename?: "UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The enterprise with the updated members can update protected branches setting.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * A message confirming the result of updating the members can update protected branches setting.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
 */
export interface UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload {
  __typename?: "UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The enterprise with the updated members can view dependency insights setting.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * A message confirming the result of updating the members can view dependency insights setting.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting
 */
export interface UpdateEnterpriseOrganizationProjectsSettingPayload {
  __typename?: "UpdateEnterpriseOrganizationProjectsSettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The enterprise with the updated organization projects setting.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * A message confirming the result of updating the organization projects setting.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole
 */
export interface UpdateEnterpriseOwnerOrganizationRolePayload {
  __typename?: "UpdateEnterpriseOwnerOrganizationRolePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * A message confirming the result of changing the owner's organization role.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of UpdateEnterpriseProfile
 */
export interface UpdateEnterpriseProfilePayload {
  __typename?: "UpdateEnterpriseProfilePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated enterprise.
   */
  enterprise?: Maybe<Enterprise>;
}

/**
 * Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting
 */
export interface UpdateEnterpriseRepositoryProjectsSettingPayload {
  __typename?: "UpdateEnterpriseRepositoryProjectsSettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The enterprise with the updated repository projects setting.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * A message confirming the result of updating the repository projects setting.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting
 */
export interface UpdateEnterpriseTeamDiscussionsSettingPayload {
  __typename?: "UpdateEnterpriseTeamDiscussionsSettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The enterprise with the updated team discussions setting.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * A message confirming the result of updating the team discussions setting.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
 */
export interface UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload {
  __typename?: "UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The enterprise with the updated two factor authentication required setting.
   */
  enterprise?: Maybe<Enterprise>;
  /**
   * A message confirming the result of updating the two factor authentication required setting.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Autogenerated return type of UpdateEnvironment
 */
export interface UpdateEnvironmentPayload {
  __typename?: "UpdateEnvironmentPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated environment.
   */
  environment?: Maybe<Environment>;
}

/**
 * Autogenerated return type of UpdateIpAllowListEnabledSetting
 */
export interface UpdateIpAllowListEnabledSettingPayload {
  __typename?: "UpdateIpAllowListEnabledSettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The IP allow list owner on which the setting was updated.
   */
  owner?: Maybe<IpAllowListOwner>;
}

/**
 * Autogenerated return type of UpdateIpAllowListEntry
 */
export interface UpdateIpAllowListEntryPayload {
  __typename?: "UpdateIpAllowListEntryPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The IP allow list entry that was updated.
   */
  ipAllowListEntry?: Maybe<IpAllowListEntry>;
}

/**
 * Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting
 */
export interface UpdateIpAllowListForInstalledAppsEnabledSettingPayload {
  __typename?: "UpdateIpAllowListForInstalledAppsEnabledSettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The IP allow list owner on which the setting was updated.
   */
  owner?: Maybe<IpAllowListOwner>;
}

/**
 * Autogenerated return type of UpdateIssueComment
 */
export interface UpdateIssueCommentPayload {
  __typename?: "UpdateIssueCommentPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated comment.
   */
  issueComment?: Maybe<IssueComment>;
}

/**
 * Autogenerated return type of UpdateIssue
 */
export interface UpdateIssuePayload {
  __typename?: "UpdateIssuePayload";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The issue.
   */
  issue?: Maybe<Issue>;
}

/**
 * Autogenerated return type of UpdateNotificationRestrictionSetting
 */
export interface UpdateNotificationRestrictionSettingPayload {
  __typename?: "UpdateNotificationRestrictionSettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The owner on which the setting was updated.
   */
  owner?: Maybe<VerifiableDomainOwner>;
}

/**
 * Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting
 */
export interface UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload {
  __typename?: "UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * A message confirming the result of updating the allow private repository forking setting.
   */
  message?: Maybe<ScalarsEnums["String"]>;
  /**
   * The organization with the updated allow private repository forking setting.
   */
  organization?: Maybe<Organization>;
}

/**
 * Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
 */
export interface UpdateOrganizationWebCommitSignoffSettingPayload {
  __typename?: "UpdateOrganizationWebCommitSignoffSettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * A message confirming the result of updating the web commit signoff setting.
   */
  message?: Maybe<ScalarsEnums["String"]>;
  /**
   * The organization with the updated web commit signoff setting.
   */
  organization?: Maybe<Organization>;
}

/**
 * Only allow users with bypass permission to update matching refs.
 */
export interface UpdateParameters {
  __typename?: "UpdateParameters";
  /**
   * Branch can pull changes from its upstream repository
   */
  updateAllowsFetchAndMerge: ScalarsEnums["Boolean"];
}

/**
 * Autogenerated return type of UpdateProjectCard
 */
export interface UpdateProjectCardPayload {
  __typename?: "UpdateProjectCardPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated ProjectCard.
   */
  projectCard?: Maybe<ProjectCard>;
}

/**
 * Autogenerated return type of UpdateProjectColumn
 */
export interface UpdateProjectColumnPayload {
  __typename?: "UpdateProjectColumnPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated project column.
   */
  projectColumn?: Maybe<ProjectColumn>;
}

/**
 * Autogenerated return type of UpdateProject
 */
export interface UpdateProjectPayload {
  __typename?: "UpdateProjectPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated project.
   */
  project?: Maybe<Project>;
}

/**
 * Autogenerated return type of UpdateProjectV2Collaborators
 */
export interface UpdateProjectV2CollaboratorsPayload {
  __typename?: "UpdateProjectV2CollaboratorsPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The collaborators granted a role
   */
  collaborators: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ProjectV2ActorConnection>;
}

/**
 * Autogenerated return type of UpdateProjectV2DraftIssue
 */
export interface UpdateProjectV2DraftIssuePayload {
  __typename?: "UpdateProjectV2DraftIssuePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The draft issue updated in the project.
   */
  draftIssue?: Maybe<DraftIssue>;
}

/**
 * Autogenerated return type of UpdateProjectV2ItemFieldValue
 */
export interface UpdateProjectV2ItemFieldValuePayload {
  __typename?: "UpdateProjectV2ItemFieldValuePayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated item.
   */
  projectV2Item?: Maybe<ProjectV2Item>;
}

/**
 * Autogenerated return type of UpdateProjectV2ItemPosition
 */
export interface UpdateProjectV2ItemPositionPayload {
  __typename?: "UpdateProjectV2ItemPositionPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The items in the new order
   */
  items: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ProjectV2ItemConnection>;
}

/**
 * Autogenerated return type of UpdateProjectV2
 */
export interface UpdateProjectV2Payload {
  __typename?: "UpdateProjectV2Payload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated Project.
   */
  projectV2?: Maybe<ProjectV2>;
}

/**
 * Autogenerated return type of UpdatePullRequestBranch
 */
export interface UpdatePullRequestBranchPayload {
  __typename?: "UpdatePullRequestBranchPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated pull request.
   */
  pullRequest?: Maybe<PullRequest>;
}

/**
 * Autogenerated return type of UpdatePullRequest
 */
export interface UpdatePullRequestPayload {
  __typename?: "UpdatePullRequestPayload";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated pull request.
   */
  pullRequest?: Maybe<PullRequest>;
}

/**
 * Autogenerated return type of UpdatePullRequestReviewComment
 */
export interface UpdatePullRequestReviewCommentPayload {
  __typename?: "UpdatePullRequestReviewCommentPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated comment.
   */
  pullRequestReviewComment?: Maybe<PullRequestReviewComment>;
}

/**
 * Autogenerated return type of UpdatePullRequestReview
 */
export interface UpdatePullRequestReviewPayload {
  __typename?: "UpdatePullRequestReviewPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated pull request review.
   */
  pullRequestReview?: Maybe<PullRequestReview>;
}

/**
 * Autogenerated return type of UpdateRef
 */
export interface UpdateRefPayload {
  __typename?: "UpdateRefPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated Ref.
   */
  ref?: Maybe<Ref>;
}

/**
 * Autogenerated return type of UpdateRepository
 */
export interface UpdateRepositoryPayload {
  __typename?: "UpdateRepositoryPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated repository.
   */
  repository?: Maybe<Repository>;
}

/**
 * Autogenerated return type of UpdateRepositoryRuleset
 */
export interface UpdateRepositoryRulesetPayload {
  __typename?: "UpdateRepositoryRulesetPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The newly created Ruleset.
   */
  ruleset?: Maybe<RepositoryRuleset>;
}

/**
 * Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
 */
export interface UpdateRepositoryWebCommitSignoffSettingPayload {
  __typename?: "UpdateRepositoryWebCommitSignoffSettingPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * A message confirming the result of updating the web commit signoff setting.
   */
  message?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated repository.
   */
  repository?: Maybe<Repository>;
}

/**
 * Autogenerated return type of UpdateSponsorshipPreferences
 */
export interface UpdateSponsorshipPreferencesPayload {
  __typename?: "UpdateSponsorshipPreferencesPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The sponsorship that was updated.
   */
  sponsorship?: Maybe<Sponsorship>;
}

/**
 * Autogenerated return type of UpdateSubscription
 */
export interface UpdateSubscriptionPayload {
  __typename?: "UpdateSubscriptionPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The input subscribable entity.
   */
  subscribable?: Maybe<Subscribable>;
}

/**
 * Autogenerated return type of UpdateTeamDiscussionComment
 */
export interface UpdateTeamDiscussionCommentPayload {
  __typename?: "UpdateTeamDiscussionCommentPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated comment.
   */
  teamDiscussionComment?: Maybe<TeamDiscussionComment>;
}

/**
 * Autogenerated return type of UpdateTeamDiscussion
 */
export interface UpdateTeamDiscussionPayload {
  __typename?: "UpdateTeamDiscussionPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The updated discussion.
   */
  teamDiscussion?: Maybe<TeamDiscussion>;
}

/**
 * Autogenerated return type of UpdateTeamsRepository
 */
export interface UpdateTeamsRepositoryPayload {
  __typename?: "UpdateTeamsRepositoryPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The repository that was updated.
   */
  repository?: Maybe<Repository>;
  /**
   * The teams granted permission on the repository.
   */
  teams?: Maybe<Array<Team>>;
}

/**
 * Autogenerated return type of UpdateTopics
 */
export interface UpdateTopicsPayload {
  __typename?: "UpdateTopicsPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Names of the provided topics that are not valid.
   */
  invalidTopicNames?: Maybe<Array<ScalarsEnums["String"]>>;
  /**
   * The updated repository.
   */
  repository?: Maybe<Repository>;
}

/**
 * A user is an individual's account on GitHub that owns repositories and can make new content.
 */
export interface User {
  __typename?: "User";
  /**
   * Determine if this repository owner has any items that can be pinned to their profile.
   */
  anyPinnableItems: (args?: {
    /**
     * Filter to only a particular kind of pinnable item.
     */
    type?: Maybe<PinnableItemType>;
  }) => ScalarsEnums["Boolean"];
  /**
   * A URL pointing to the user's public avatar.
   */
  avatarUrl: (args?: {
    /**
     * The size of the resulting square image.
     */
    size?: Maybe<Scalars["Int"]>;
  }) => ScalarsEnums["URI"];
  /**
   * The user's public profile bio.
   */
  bio?: Maybe<ScalarsEnums["String"]>;
  /**
   * The user's public profile bio as HTML.
   */
  bioHTML: ScalarsEnums["HTML"];
  /**
   * Could this user receive email notifications, if the organization had notification restrictions enabled?
   */
  canReceiveOrganizationEmailsWhenNotificationsRestricted: (args: {
    /**
     * The login of the organization to check.
     */
    login: Scalars["String"];
  }) => ScalarsEnums["Boolean"];
  /**
   * A list of commit comments made by this user.
   */
  commitComments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => CommitCommentConnection;
  /**
   * The user's public profile company.
   */
  company?: Maybe<ScalarsEnums["String"]>;
  /**
   * The user's public profile company as HTML.
   */
  companyHTML: ScalarsEnums["HTML"];
  /**
   * The collection of contributions this user has made to different repositories.
   */
  contributionsCollection: (args?: {
    /**
     * Only contributions made at this time or later will be counted. If omitted, defaults to a year ago.
     */
    from?: Maybe<Scalars["DateTime"]>;
    /**
     * The ID of the organization used to filter contributions.
     */
    organizationID?: Maybe<Scalars["ID"]>;
    /**
     * Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument.
     */
    to?: Maybe<Scalars["DateTime"]>;
  }) => ContributionsCollection;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The user's publicly visible profile email.
   */
  email: ScalarsEnums["String"];
  /**
   * A list of enterprises that the user belongs to.
   */
  enterprises: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter enterprises returned based on the user's membership type.
     * @defaultValue `"ALL"`
     */
    membershipType?: Maybe<EnterpriseMembershipType>;
    /**
     * Ordering options for the User's enterprises.
     * @defaultValue `{"direction":"ASC","field":"NAME"}`
     */
    orderBy?: Maybe<EnterpriseOrder>;
  }) => Maybe<EnterpriseConnection>;
  /**
   * The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
   */
  estimatedNextSponsorsPayoutInCents: ScalarsEnums["Int"];
  /**
   * A list of users the given user is followed by.
   */
  followers: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => FollowerConnection;
  /**
   * A list of users the given user is following.
   */
  following: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => FollowingConnection;
  /**
   * Find gist by repo name.
   */
  gist: (args: {
    /**
     * The gist name to find.
     */
    name: Scalars["String"];
  }) => Maybe<Gist>;
  /**
   * A list of gist comments made by this user.
   */
  gistComments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => GistCommentConnection;
  /**
   * A list of the Gists the user has created.
   */
  gists: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for gists returned from the connection
     */
    orderBy?: Maybe<GistOrder>;
    /**
     * Filters Gists according to privacy.
     */
    privacy?: Maybe<GistPrivacy>;
  }) => GistConnection;
  /**
   * True if this user/organization has a GitHub Sponsors listing.
   */
  hasSponsorsListing: ScalarsEnums["Boolean"];
  /**
   * The hovercard information for this user in a given context
   */
  hovercard: (args?: {
    /**
     * The ID of the subject to get the hovercard in the context of
     */
    primarySubjectId?: Maybe<Scalars["ID"]>;
  }) => Hovercard;
  id: ScalarsEnums["ID"];
  /**
   * The interaction ability settings for this user.
   */
  interactionAbility?: Maybe<RepositoryInteractionAbility>;
  /**
   * Whether or not this user is a participant in the GitHub Security Bug Bounty.
   */
  isBountyHunter: ScalarsEnums["Boolean"];
  /**
   * Whether or not this user is a participant in the GitHub Campus Experts Program.
   */
  isCampusExpert: ScalarsEnums["Boolean"];
  /**
   * Whether or not this user is a GitHub Developer Program member.
   */
  isDeveloperProgramMember: ScalarsEnums["Boolean"];
  /**
   * Whether or not this user is a GitHub employee.
   */
  isEmployee: ScalarsEnums["Boolean"];
  /**
   * Whether or not this user is following the viewer. Inverse of viewerIsFollowing
   */
  isFollowingViewer: ScalarsEnums["Boolean"];
  /**
   * Whether or not this user is a member of the GitHub Stars Program.
   */
  isGitHubStar: ScalarsEnums["Boolean"];
  /**
   * Whether or not the user has marked themselves as for hire.
   */
  isHireable: ScalarsEnums["Boolean"];
  /**
   * Whether or not this user is a site administrator.
   */
  isSiteAdmin: ScalarsEnums["Boolean"];
  /**
   * Whether the given account is sponsoring this user/organization.
   */
  isSponsoredBy: (args: {
    /**
     * The target account's login.
     */
    accountLogin: Scalars["String"];
  }) => ScalarsEnums["Boolean"];
  /**
   * True if the viewer is sponsored by this user/organization.
   */
  isSponsoringViewer: ScalarsEnums["Boolean"];
  /**
   * Whether or not this user is the viewing user.
   */
  isViewer: ScalarsEnums["Boolean"];
  /**
   * A list of issue comments made by this user.
   */
  issueComments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for issue comments returned from the connection.
     */
    orderBy?: Maybe<IssueCommentOrder>;
  }) => IssueCommentConnection;
  /**
   * A list of issues associated with this user.
   */
  issues: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Filtering options for issues returned from the connection.
     */
    filterBy?: Maybe<IssueFilters>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * A list of label names to filter the pull requests by.
     */
    labels?: Maybe<Array<Scalars["String"]>>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for issues returned from the connection.
     */
    orderBy?: Maybe<IssueOrder>;
    /**
     * A list of states to filter the issues by.
     */
    states?: Maybe<Array<IssueState>>;
  }) => IssueConnection;
  /**
   * Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
   */
  itemShowcase: ProfileItemShowcase;
  /**
   * The user's public profile location.
   */
  location?: Maybe<ScalarsEnums["String"]>;
  /**
   * The username used to login.
   */
  login: ScalarsEnums["String"];
  /**
   * The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
   */
  monthlyEstimatedSponsorsIncomeInCents: ScalarsEnums["Int"];
  /**
   * The user's public profile name.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * A list of notification threads for the viewer. Returns an empty list for a user other than
   * the current viewer.
   *
   * Combining both filterBy and query arguments will result in an error.
   * Please favor using the query argument.
   */
  notificationThreads: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Filtering options for notifications. Will soon be deprecated.
     */
    filterBy?: Maybe<NotificationThreadFilters>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * The search string to look for. If no is:read, is:unread, or is:done qualifiers are included in the query, results will include read and unread notification threads by default.
     */
    query?: Maybe<Scalars["String"]>;
  }) => NotificationThreadConnection;
  /**
   * Find an organization by its login that the user belongs to.
   */
  organization: (args: {
    /**
     * The login of the organization to find.
     */
    login: Scalars["String"];
  }) => Maybe<Organization>;
  /**
   * Verified email addresses that match verified domains for a specified organization the user is a member of.
   */
  organizationVerifiedDomainEmails: (args: {
    /**
     * The login of the organization to match verified domains from.
     */
    login: Scalars["String"];
  }) => Array<ScalarsEnums["String"]>;
  /**
   * A list of organizations the user belongs to.
   */
  organizations: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for the User's organizations.
     */
    orderBy?: Maybe<OrganizationOrder>;
  }) => OrganizationConnection;
  /**
   * A list of packages under the owner.
   */
  packages: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Find packages by their names.
     */
    names?: Maybe<Array<Maybe<Scalars["String"]>>>;
    /**
     * Ordering of the returned packages.
     * @defaultValue `{"direction":"DESC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<PackageOrder>;
    /**
     * Filter registry package by type.
     */
    packageType?: Maybe<PackageType>;
    /**
     * Find packages in a repository by ID.
     */
    repositoryId?: Maybe<Scalars["ID"]>;
  }) => PackageConnection;
  /**
   * A list of repositories and gists this profile owner can pin to their profile.
   */
  pinnableItems: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter the types of pinnable items that are returned.
     */
    types?: Maybe<Array<PinnableItemType>>;
  }) => PinnableItemConnection;
  /**
   * A list of repositories and gists this profile owner has pinned to their profile
   */
  pinnedItems: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter the types of pinned items that are returned.
     */
    types?: Maybe<Array<PinnableItemType>>;
  }) => PinnableItemConnection;
  /**
   * Returns how many more items this profile owner can pin to their profile.
   */
  pinnedItemsRemaining: ScalarsEnums["Int"];
  /**
   * Find project by number.
   */
  project: (args: {
    /**
     * The project number to find.
     */
    number: Scalars["Int"];
  }) => Maybe<Project>;
  /**
   * Find a project by number.
   */
  projectV2: (args: {
    /**
     * The project number.
     */
    number: Scalars["Int"];
  }) => Maybe<ProjectV2>;
  /**
   * A list of projects under the owner.
   */
  projects: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for projects returned from the connection
     */
    orderBy?: Maybe<ProjectOrder>;
    /**
     * Query to search projects by, currently only searching by name.
     */
    search?: Maybe<Scalars["String"]>;
    /**
     * A list of states to filter the projects by.
     */
    states?: Maybe<Array<ProjectState>>;
  }) => ProjectConnection;
  /**
   * The HTTP path listing user's projects
   */
  projectsResourcePath: ScalarsEnums["URI"];
  /**
   * The HTTP URL listing user's projects
   */
  projectsUrl: ScalarsEnums["URI"];
  /**
   * A list of projects under the owner.
   */
  projectsV2: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * How to order the returned projects.
     * @defaultValue `{"direction":"DESC","field":"NUMBER"}`
     */
    orderBy?: Maybe<ProjectV2Order>;
    /**
     * A project to search for under the the owner.
     */
    query?: Maybe<Scalars["String"]>;
  }) => ProjectV2Connection;
  /**
   * The user's profile pronouns
   */
  pronouns?: Maybe<ScalarsEnums["String"]>;
  /**
   * A list of public keys associated with this user.
   */
  publicKeys: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => PublicKeyConnection;
  /**
   * A list of pull requests associated with this user.
   */
  pullRequests: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * The base ref name to filter the pull requests by.
     */
    baseRefName?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The head ref name to filter the pull requests by.
     */
    headRefName?: Maybe<Scalars["String"]>;
    /**
     * A list of label names to filter the pull requests by.
     */
    labels?: Maybe<Array<Scalars["String"]>>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for pull requests returned from the connection.
     */
    orderBy?: Maybe<IssueOrder>;
    /**
     * A list of states to filter the pull requests by.
     */
    states?: Maybe<Array<PullRequestState>>;
  }) => PullRequestConnection;
  /**
   * Recent projects that this user has modified in the context of the owner.
   */
  recentProjects: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => ProjectV2Connection;
  /**
   * A list of repositories that the user owns.
   */
  repositories: (args?: {
    /**
     * Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
     */
    affiliations?: Maybe<Array<Maybe<RepositoryAffiliation>>>;
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * If non-null, filters repositories according to whether they have issues enabled
     */
    hasIssuesEnabled?: Maybe<Scalars["Boolean"]>;
    /**
     * If non-null, filters repositories according to whether they are archived and not maintained
     */
    isArchived?: Maybe<Scalars["Boolean"]>;
    /**
     * If non-null, filters repositories according to whether they are forks of another repository
     */
    isFork?: Maybe<Scalars["Boolean"]>;
    /**
     * If non-null, filters repositories according to whether they have been locked
     */
    isLocked?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for repositories returned from the connection
     */
    orderBy?: Maybe<RepositoryOrder>;
    /**
     * Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
     * @defaultValue `["OWNER","COLLABORATOR"]`
     */
    ownerAffiliations?: Maybe<Array<Maybe<RepositoryAffiliation>>>;
    /**
     * If non-null, filters repositories according to privacy
     */
    privacy?: Maybe<RepositoryPrivacy>;
  }) => RepositoryConnection;
  /**
   * A list of repositories that the user recently contributed to.
   */
  repositoriesContributedTo: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
     */
    contributionTypes?: Maybe<Array<Maybe<RepositoryContributionType>>>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * If non-null, filters repositories according to whether they have issues enabled
     */
    hasIssues?: Maybe<Scalars["Boolean"]>;
    /**
     * If true, include user repositories
     */
    includeUserRepositories?: Maybe<Scalars["Boolean"]>;
    /**
     * If non-null, filters repositories according to whether they have been locked
     */
    isLocked?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for repositories returned from the connection
     */
    orderBy?: Maybe<RepositoryOrder>;
    /**
     * If non-null, filters repositories according to privacy
     */
    privacy?: Maybe<RepositoryPrivacy>;
  }) => RepositoryConnection;
  /**
   * Find Repository.
   */
  repository: (args: {
    /**
     * Follow repository renames. If disabled, a repository referenced by its old name will return an error.
     * @defaultValue `true`
     */
    followRenames?: Maybe<Scalars["Boolean"]>;
    /**
     * Name of Repository to find.
     */
    name: Scalars["String"];
  }) => Maybe<Repository>;
  /**
   * Discussion comments this user has authored.
   */
  repositoryDiscussionComments: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter discussion comments to only those that were marked as the answer
     * @defaultValue `false`
     */
    onlyAnswers?: Maybe<Scalars["Boolean"]>;
    /**
     * Filter discussion comments to only those in a specific repository.
     */
    repositoryId?: Maybe<Scalars["ID"]>;
  }) => DiscussionCommentConnection;
  /**
   * Discussions this user has started.
   */
  repositoryDiscussions: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions.
     */
    answered?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for discussions returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<DiscussionOrder>;
    /**
     * Filter discussions to only those in a specific repository.
     */
    repositoryId?: Maybe<Scalars["ID"]>;
    /**
     * A list of states to filter the discussions by.
     * @defaultValue `[]`
     */
    states?: Maybe<Array<DiscussionState>>;
  }) => DiscussionConnection;
  /**
   * The HTTP path for this user
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * Replies this user has saved
   */
  savedReplies: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * The field to order saved replies by.
     * @defaultValue `{"direction":"DESC","field":"UPDATED_AT"}`
     */
    orderBy?: Maybe<SavedReplyOrder>;
  }) => Maybe<SavedReplyConnection>;
  /**
   * The user's social media accounts, ordered as they appear on the user's profile.
   */
  socialAccounts: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => SocialAccountConnection;
  /**
   * List of users and organizations this entity is sponsoring.
   */
  sponsoring: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for the users and organizations returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"RELEVANCE"}`
     */
    orderBy?: Maybe<SponsorOrder>;
  }) => SponsorConnection;
  /**
   * List of sponsors for this user or organization.
   */
  sponsors: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for sponsors returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"RELEVANCE"}`
     */
    orderBy?: Maybe<SponsorOrder>;
    /**
     * If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see.
     */
    tierId?: Maybe<Scalars["ID"]>;
  }) => SponsorConnection;
  /**
   * Events involving this sponsorable, such as new sponsorships.
   */
  sponsorsActivities: (args?: {
    /**
     * Filter activities to only the specified actions.
     * @defaultValue `[]`
     */
    actions?: Maybe<Array<SponsorsActivityAction>>;
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Whether to include those events where this sponsorable acted as the sponsor. Defaults to only including events where this sponsorable was the recipient of a sponsorship.
     * @defaultValue `false`
     */
    includeAsSponsor?: Maybe<Scalars["Boolean"]>;
    /**
     * Whether or not to include private activities in the result set. Defaults to including public and private activities.
     * @defaultValue `true`
     */
    includePrivate?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for activity returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"TIMESTAMP"}`
     */
    orderBy?: Maybe<SponsorsActivityOrder>;
    /**
     * Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. Will be ignored if `since` or `until` is given.
     * @defaultValue `"MONTH"`
     */
    period?: Maybe<SponsorsActivityPeriod>;
    /**
     * Filter activities to those that occurred on or after this time.
     */
    since?: Maybe<Scalars["DateTime"]>;
    /**
     * Filter activities to those that occurred before this time.
     */
    until?: Maybe<Scalars["DateTime"]>;
  }) => SponsorsActivityConnection;
  /**
   * The GitHub Sponsors listing for this user or organization.
   */
  sponsorsListing?: Maybe<SponsorsListing>;
  /**
   * The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
   */
  sponsorshipForViewerAsSponsor: (args?: {
    /**
     * Whether to return the sponsorship only if it's still active. Pass false to get the viewer's sponsorship back even if it has been cancelled.
     * @defaultValue `true`
     */
    activeOnly?: Maybe<Scalars["Boolean"]>;
  }) => Maybe<Sponsorship>;
  /**
   * The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
   */
  sponsorshipForViewerAsSponsorable: (args?: {
    /**
     * Whether to return the sponsorship only if it's still active. Pass false to get the sponsorship back even if it has been cancelled.
     * @defaultValue `true`
     */
    activeOnly?: Maybe<Scalars["Boolean"]>;
  }) => Maybe<Sponsorship>;
  /**
   * List of sponsorship updates sent from this sponsorable to sponsors.
   */
  sponsorshipNewsletters: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for sponsorship updates returned from the connection.
     * @defaultValue `{"direction":"DESC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<SponsorshipNewsletterOrder>;
  }) => SponsorshipNewsletterConnection;
  /**
   * The sponsorships where this user or organization is the maintainer receiving the funds.
   */
  sponsorshipsAsMaintainer: (args?: {
    /**
     * Whether to include only sponsorships that are active right now, versus all sponsorships this maintainer has ever received.
     * @defaultValue `true`
     */
    activeOnly?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Whether or not to include private sponsorships in the result set
     * @defaultValue `false`
     */
    includePrivate?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
     */
    orderBy?: Maybe<SponsorshipOrder>;
  }) => SponsorshipConnection;
  /**
   * The sponsorships where this user or organization is the funder.
   */
  sponsorshipsAsSponsor: (args?: {
    /**
     * Whether to include only sponsorships that are active right now, versus all sponsorships this sponsor has ever made.
     * @defaultValue `true`
     */
    activeOnly?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Filter sponsorships returned to those for the specified maintainers. That is, the recipient of the sponsorship is a user or organization with one of the given logins.
     */
    maintainerLogins?: Maybe<Array<Scalars["String"]>>;
    /**
     * Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
     */
    orderBy?: Maybe<SponsorshipOrder>;
  }) => SponsorshipConnection;
  /**
   * Repositories the user has starred.
   */
  starredRepositories: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Order for connection
     */
    orderBy?: Maybe<StarOrder>;
    /**
     * Filters starred repositories to only return repositories owned by the viewer.
     */
    ownedByViewer?: Maybe<Scalars["Boolean"]>;
  }) => StarredRepositoryConnection;
  /**
   * The user's description of what they're currently doing.
   */
  status?: Maybe<UserStatus>;
  /**
   * Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
   */
  topRepositories: (args: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for repositories returned from the connection
     */
    orderBy: RepositoryOrder;
    /**
     * How far back in time to fetch contributed repositories
     */
    since?: Maybe<Scalars["DateTime"]>;
  }) => RepositoryConnection;
  /**
   * The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has spent on GitHub to fund sponsorships. Only returns a value when viewed by the user themselves or by a user who can manage sponsorships for the requested organization.
   */
  totalSponsorshipAmountAsSponsorInCents: (args?: {
    /**
     * Filter payments to those that occurred on or after this time.
     */
    since?: Maybe<Scalars["DateTime"]>;
    /**
     * Filter payments to those made to the users or organizations with the specified usernames.
     * @defaultValue `[]`
     */
    sponsorableLogins?: Maybe<Array<Scalars["String"]>>;
    /**
     * Filter payments to those that occurred before this time.
     */
    until?: Maybe<Scalars["DateTime"]>;
  }) => Maybe<ScalarsEnums["Int"]>;
  /**
   * The user's Twitter username.
   */
  twitterUsername?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this user
   */
  url: ScalarsEnums["URI"];
  /**
   * Can the viewer pin repositories and gists to the profile?
   */
  viewerCanChangePinnedItems: ScalarsEnums["Boolean"];
  /**
   * Can the current viewer create new projects on this owner.
   */
  viewerCanCreateProjects: ScalarsEnums["Boolean"];
  /**
   * Whether or not the viewer is able to follow the user.
   */
  viewerCanFollow: ScalarsEnums["Boolean"];
  /**
   * Whether or not the viewer is able to sponsor this user/organization.
   */
  viewerCanSponsor: ScalarsEnums["Boolean"];
  /**
   * Whether or not this user is followed by the viewer. Inverse of isFollowingViewer.
   */
  viewerIsFollowing: ScalarsEnums["Boolean"];
  /**
   * True if the viewer is sponsoring this user/organization.
   */
  viewerIsSponsoring: ScalarsEnums["Boolean"];
  /**
   * A list of repositories the given user is watching.
   */
  watching: (args?: {
    /**
     * Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member.
     */
    affiliations?: Maybe<Array<Maybe<RepositoryAffiliation>>>;
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * If non-null, filters repositories according to whether they have issues enabled
     */
    hasIssuesEnabled?: Maybe<Scalars["Boolean"]>;
    /**
     * If non-null, filters repositories according to whether they have been locked
     */
    isLocked?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for repositories returned from the connection
     */
    orderBy?: Maybe<RepositoryOrder>;
    /**
     * Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
     * @defaultValue `["OWNER","COLLABORATOR"]`
     */
    ownerAffiliations?: Maybe<Array<Maybe<RepositoryAffiliation>>>;
    /**
     * If non-null, filters repositories according to privacy
     */
    privacy?: Maybe<RepositoryPrivacy>;
  }) => RepositoryConnection;
  /**
   * A URL pointing to the user's public website/blog.
   */
  websiteUrl?: Maybe<ScalarsEnums["URI"]>;
}

/**
 * Represents a 'user_blocked' event on a given user.
 */
export interface UserBlockedEvent {
  __typename?: "UserBlockedEvent";
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Maybe<Actor>;
  /**
   * Number of days that the user was blocked for.
   */
  blockDuration: ScalarsEnums["UserBlockDuration"];
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  id: ScalarsEnums["ID"];
  /**
   * The user who was blocked.
   */
  subject?: Maybe<User>;
}

/**
 * The connection type for User.
 */
export interface UserConnection {
  __typename?: "UserConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<User>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edit on user content
 */
export interface UserContentEdit {
  __typename?: "UserContentEdit";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the date and time when the object was deleted.
   */
  deletedAt?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * The actor who deleted this content
   */
  deletedBy?: Maybe<Actor>;
  /**
   * A summary of the changes for this edit
   */
  diff?: Maybe<ScalarsEnums["String"]>;
  /**
   * When this content was edited
   */
  editedAt: ScalarsEnums["DateTime"];
  /**
   * The actor who edited this content
   */
  editor?: Maybe<Actor>;
  id: ScalarsEnums["ID"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
}

/**
 * A list of edits to content.
 */
export interface UserContentEditConnection {
  __typename?: "UserContentEditConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<UserContentEditEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<UserContentEdit>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface UserContentEditEdge {
  __typename?: "UserContentEditEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<UserContentEdit>;
}

/**
 * Represents a user.
 */
export interface UserEdge {
  __typename?: "UserEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<User>;
}

/**
 * Email attributes from External Identity
 */
export interface UserEmailMetadata {
  __typename?: "UserEmailMetadata";
  /**
   * Boolean to identify primary emails
   */
  primary?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Type of email
   */
  type?: Maybe<ScalarsEnums["String"]>;
  /**
   * Email id
   */
  value: ScalarsEnums["String"];
}

/**
 * The user's description of what they're currently doing.
 */
export interface UserStatus {
  __typename?: "UserStatus";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * An emoji summarizing the user's status.
   */
  emoji?: Maybe<ScalarsEnums["String"]>;
  /**
   * The status emoji as HTML.
   */
  emojiHTML?: Maybe<ScalarsEnums["HTML"]>;
  /**
   * If set, the status will not be shown after this date.
   */
  expiresAt?: Maybe<ScalarsEnums["DateTime"]>;
  id: ScalarsEnums["ID"];
  /**
   * Whether this status indicates the user is not fully available on GitHub.
   */
  indicatesLimitedAvailability: ScalarsEnums["Boolean"];
  /**
   * A brief message describing what the user is doing.
   */
  message?: Maybe<ScalarsEnums["String"]>;
  /**
   * The organization whose members can see this status. If null, this status is publicly visible.
   */
  organization?: Maybe<Organization>;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The user who has this status.
   */
  user: User;
}

/**
 * The connection type for UserStatus.
 */
export interface UserStatusConnection {
  __typename?: "UserStatusConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<UserStatusEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<UserStatus>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface UserStatusEdge {
  __typename?: "UserStatusEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<UserStatus>;
}

/**
 * A domain that can be verified or approved for an organization or an enterprise.
 */
export interface VerifiableDomain {
  __typename?: "VerifiableDomain";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The DNS host name that should be used for verification.
   */
  dnsHostName?: Maybe<ScalarsEnums["URI"]>;
  /**
   * The unicode encoded domain.
   */
  domain: ScalarsEnums["URI"];
  /**
   * Whether a TXT record for verification with the expected host name was found.
   */
  hasFoundHostName: ScalarsEnums["Boolean"];
  /**
   * Whether a TXT record for verification with the expected verification token was found.
   */
  hasFoundVerificationToken: ScalarsEnums["Boolean"];
  id: ScalarsEnums["ID"];
  /**
   * Whether or not the domain is approved.
   */
  isApproved: ScalarsEnums["Boolean"];
  /**
   * Whether this domain is required to exist for an organization or enterprise policy to be enforced.
   */
  isRequiredForPolicyEnforcement: ScalarsEnums["Boolean"];
  /**
   * Whether or not the domain is verified.
   */
  isVerified: ScalarsEnums["Boolean"];
  /**
   * The owner of the domain.
   */
  owner: VerifiableDomainOwner;
  /**
   * The punycode encoded domain.
   */
  punycodeEncodedDomain: ScalarsEnums["URI"];
  /**
   * The time that the current verification token will expire.
   */
  tokenExpirationTime?: Maybe<ScalarsEnums["DateTime"]>;
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The current verification token for the domain.
   */
  verificationToken?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The connection type for VerifiableDomain.
 */
export interface VerifiableDomainConnection {
  __typename?: "VerifiableDomainConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<VerifiableDomainEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<VerifiableDomain>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface VerifiableDomainEdge {
  __typename?: "VerifiableDomainEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<VerifiableDomain>;
}

/**
 * Types that can own a verifiable domain.
 */
export interface VerifiableDomainOwner {
  __typename?: "Enterprise" | "Organization";
  $on: $VerifiableDomainOwner;
}

/**
 * Autogenerated return type of VerifyVerifiableDomain
 */
export interface VerifyVerifiableDomainPayload {
  __typename?: "VerifyVerifiableDomainPayload";
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The verifiable domain that was verified.
   */
  domain?: Maybe<VerifiableDomain>;
}

/**
 * A hovercard context with a message describing how the viewer is related.
 */
export interface ViewerHovercardContext {
  __typename?: "ViewerHovercardContext";
  /**
   * A string describing this context
   */
  message: ScalarsEnums["String"];
  /**
   * An octicon to accompany this context
   */
  octicon: ScalarsEnums["String"];
  /**
   * Identifies the user who is related to this context.
   */
  viewer: User;
}

/**
 * A subject that may be upvoted.
 */
export interface Votable {
  __typename?: "Discussion" | "DiscussionComment";
  /**
   * Number of upvotes that this subject has received.
   */
  upvoteCount: ScalarsEnums["Int"];
  /**
   * Whether or not the current user can add or remove an upvote on this subject.
   */
  viewerCanUpvote: ScalarsEnums["Boolean"];
  /**
   * Whether or not the current user has already upvoted this subject.
   */
  viewerHasUpvoted: ScalarsEnums["Boolean"];
  $on: $Votable;
}

/**
 * A workflow contains meta information about an Actions workflow file.
 */
export interface Workflow {
  __typename?: "Workflow";
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  id: ScalarsEnums["ID"];
  /**
   * The name of the workflow.
   */
  name: ScalarsEnums["String"];
  /**
   * The HTTP path for this workflow
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The runs of the workflow.
   */
  runs: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for the connection
     * @defaultValue `{"direction":"DESC","field":"CREATED_AT"}`
     */
    orderBy?: Maybe<WorkflowRunOrder>;
  }) => WorkflowRunConnection;
  /**
   * The state of the workflow.
   */
  state: ScalarsEnums["WorkflowState"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this workflow
   */
  url: ScalarsEnums["URI"];
}

/**
 * A workflow that must run for this rule to pass
 */
export interface WorkflowFileReference {
  __typename?: "WorkflowFileReference";
  /**
   * The path to the workflow file
   */
  path: ScalarsEnums["String"];
  /**
   * The ref (branch or tag) of the workflow file to use
   */
  ref?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the repository where the workflow is defined
   */
  repositoryId: ScalarsEnums["Int"];
  /**
   * The commit SHA of the workflow file to use
   */
  sha?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A workflow run.
 */
export interface WorkflowRun {
  __typename?: "WorkflowRun";
  /**
   * The check suite this workflow run belongs to.
   */
  checkSuite: CheckSuite;
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: ScalarsEnums["DateTime"];
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The log of deployment reviews
   */
  deploymentReviews: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => DeploymentReviewConnection;
  /**
   * The event that triggered the workflow run
   */
  event: ScalarsEnums["String"];
  /**
   * The workflow file
   */
  file?: Maybe<WorkflowRunFile>;
  id: ScalarsEnums["ID"];
  /**
   * The pending deployment requests of all check runs in this workflow run
   */
  pendingDeploymentRequests: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
  }) => DeploymentRequestConnection;
  /**
   * The HTTP path for this workflow run
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * A number that uniquely identifies this workflow run in its parent workflow.
   */
  runNumber: ScalarsEnums["Int"];
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: ScalarsEnums["DateTime"];
  /**
   * The HTTP URL for this workflow run
   */
  url: ScalarsEnums["URI"];
  /**
   * The workflow executed in this workflow run.
   */
  workflow: Workflow;
}

/**
 * The connection type for WorkflowRun.
 */
export interface WorkflowRunConnection {
  __typename?: "WorkflowRunConnection";
  /**
   * A list of edges.
   */
  edges?: Maybe<Array<Maybe<WorkflowRunEdge>>>;
  /**
   * A list of nodes.
   */
  nodes?: Maybe<Array<Maybe<WorkflowRun>>>;
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: ScalarsEnums["Int"];
}

/**
 * An edge in a connection.
 */
export interface WorkflowRunEdge {
  __typename?: "WorkflowRunEdge";
  /**
   * A cursor for use in pagination.
   */
  cursor: ScalarsEnums["String"];
  /**
   * The item at the end of the edge.
   */
  node?: Maybe<WorkflowRun>;
}

/**
 * An executed workflow file for a workflow run.
 */
export interface WorkflowRunFile {
  __typename?: "WorkflowRunFile";
  id: ScalarsEnums["ID"];
  /**
   * The path of the workflow file relative to its repository.
   */
  path: ScalarsEnums["String"];
  /**
   * The direct link to the file in the repository which stores the workflow file.
   */
  repositoryFileUrl: ScalarsEnums["URI"];
  /**
   * The repository name and owner which stores the workflow file.
   */
  repositoryName: ScalarsEnums["URI"];
  /**
   * The HTTP path for this workflow run file
   */
  resourcePath: ScalarsEnums["URI"];
  /**
   * The parent workflow run execution for this file.
   */
  run: WorkflowRun;
  /**
   * The HTTP URL for this workflow run file
   */
  url: ScalarsEnums["URI"];
  /**
   * If the viewer has permissions to push to the repository which stores the workflow.
   */
  viewerCanPushRepository: ScalarsEnums["Boolean"];
  /**
   * If the viewer has permissions to read the repository which stores the workflow.
   */
  viewerCanReadRepository: ScalarsEnums["Boolean"];
}

/**
 * Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
 */
export interface WorkflowsParameters {
  __typename?: "WorkflowsParameters";
  /**
   * Workflows that must pass for this rule to pass.
   */
  workflows: Array<WorkflowFileReference>;
}

/**
 * The root query for implementing GraphQL mutations.
 */
export interface Mutation {
  __typename?: "Mutation";
  /**
   * Clear all of a customer's queued migrations
   */
  abortQueuedMigrations: (args: {
    /**
     * Parameters for AbortQueuedMigrations
     */
    input: AbortQueuedMigrationsInput;
  }) => Maybe<AbortQueuedMigrationsPayload>;
  /**
   * Abort a repository migration queued or in progress.
   */
  abortRepositoryMigration: (args: {
    /**
     * Parameters for AbortRepositoryMigration
     */
    input: AbortRepositoryMigrationInput;
  }) => Maybe<AbortRepositoryMigrationPayload>;
  /**
   * Accepts a pending invitation for a user to become an administrator of an enterprise.
   */
  acceptEnterpriseAdministratorInvitation: (args: {
    /**
     * Parameters for AcceptEnterpriseAdministratorInvitation
     */
    input: AcceptEnterpriseAdministratorInvitationInput;
  }) => Maybe<AcceptEnterpriseAdministratorInvitationPayload>;
  /**
   * Applies a suggested topic to the repository.
   */
  acceptTopicSuggestion: (args: {
    /**
     * Parameters for AcceptTopicSuggestion
     */
    input: AcceptTopicSuggestionInput;
  }) => Maybe<AcceptTopicSuggestionPayload>;
  /**
   * Adds assignees to an assignable object.
   */
  addAssigneesToAssignable: (args: {
    /**
     * Parameters for AddAssigneesToAssignable
     */
    input: AddAssigneesToAssignableInput;
  }) => Maybe<AddAssigneesToAssignablePayload>;
  /**
   * Adds a comment to an Issue or Pull Request.
   */
  addComment: (args: {
    /**
     * Parameters for AddComment
     */
    input: AddCommentInput;
  }) => Maybe<AddCommentPayload>;
  /**
   * Adds a comment to a Discussion, possibly as a reply to another comment.
   */
  addDiscussionComment: (args: {
    /**
     * Parameters for AddDiscussionComment
     */
    input: AddDiscussionCommentInput;
  }) => Maybe<AddDiscussionCommentPayload>;
  /**
   * Vote for an option in a discussion poll.
   */
  addDiscussionPollVote: (args: {
    /**
     * Parameters for AddDiscussionPollVote
     */
    input: AddDiscussionPollVoteInput;
  }) => Maybe<AddDiscussionPollVotePayload>;
  /**
   * Adds enterprise members to an organization within the enterprise.
   */
  addEnterpriseOrganizationMember: (args: {
    /**
     * Parameters for AddEnterpriseOrganizationMember
     */
    input: AddEnterpriseOrganizationMemberInput;
  }) => Maybe<AddEnterpriseOrganizationMemberPayload>;
  /**
   * Adds a support entitlement to an enterprise member.
   */
  addEnterpriseSupportEntitlement: (args: {
    /**
     * Parameters for AddEnterpriseSupportEntitlement
     */
    input: AddEnterpriseSupportEntitlementInput;
  }) => Maybe<AddEnterpriseSupportEntitlementPayload>;
  /**
   * Adds labels to a labelable object.
   */
  addLabelsToLabelable: (args: {
    /**
     * Parameters for AddLabelsToLabelable
     */
    input: AddLabelsToLabelableInput;
  }) => Maybe<AddLabelsToLabelablePayload>;
  /**
   * Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both.
   */
  addProjectCard: (args: {
    /**
     * Parameters for AddProjectCard
     */
    input: AddProjectCardInput;
  }) => Maybe<AddProjectCardPayload>;
  /**
   * Adds a column to a Project.
   */
  addProjectColumn: (args: {
    /**
     * Parameters for AddProjectColumn
     */
    input: AddProjectColumnInput;
  }) => Maybe<AddProjectColumnPayload>;
  /**
   * Creates a new draft issue and add it to a Project.
   */
  addProjectV2DraftIssue: (args: {
    /**
     * Parameters for AddProjectV2DraftIssue
     */
    input: AddProjectV2DraftIssueInput;
  }) => Maybe<AddProjectV2DraftIssuePayload>;
  /**
   * Links an existing content instance to a Project.
   */
  addProjectV2ItemById: (args: {
    /**
     * Parameters for AddProjectV2ItemById
     */
    input: AddProjectV2ItemByIdInput;
  }) => Maybe<AddProjectV2ItemByIdPayload>;
  /**
   * Adds a review to a Pull Request.
   */
  addPullRequestReview: (args: {
    /**
     * Parameters for AddPullRequestReview
     */
    input: AddPullRequestReviewInput;
  }) => Maybe<AddPullRequestReviewPayload>;
  /**
   * Adds a comment to a review.
   */
  addPullRequestReviewComment: (args: {
    /**
     * Parameters for AddPullRequestReviewComment
     */
    input: AddPullRequestReviewCommentInput;
  }) => Maybe<AddPullRequestReviewCommentPayload>;
  /**
   * Adds a new thread to a pending Pull Request Review.
   */
  addPullRequestReviewThread: (args: {
    /**
     * Parameters for AddPullRequestReviewThread
     */
    input: AddPullRequestReviewThreadInput;
  }) => Maybe<AddPullRequestReviewThreadPayload>;
  /**
   * Adds a reply to an existing Pull Request Review Thread.
   */
  addPullRequestReviewThreadReply: (args: {
    /**
     * Parameters for AddPullRequestReviewThreadReply
     */
    input: AddPullRequestReviewThreadReplyInput;
  }) => Maybe<AddPullRequestReviewThreadReplyPayload>;
  /**
   * Adds a reaction to a subject.
   */
  addReaction: (args: {
    /**
     * Parameters for AddReaction
     */
    input: AddReactionInput;
  }) => Maybe<AddReactionPayload>;
  /**
   * Adds a star to a Starrable.
   */
  addStar: (args: {
    /**
     * Parameters for AddStar
     */
    input: AddStarInput;
  }) => Maybe<AddStarPayload>;
  /**
   * Add an upvote to a discussion or discussion comment.
   */
  addUpvote: (args: {
    /**
     * Parameters for AddUpvote
     */
    input: AddUpvoteInput;
  }) => Maybe<AddUpvotePayload>;
  /**
   * Adds a verifiable domain to an owning account.
   */
  addVerifiableDomain: (args: {
    /**
     * Parameters for AddVerifiableDomain
     */
    input: AddVerifiableDomainInput;
  }) => Maybe<AddVerifiableDomainPayload>;
  /**
   * Approve all pending deployments under one or more environments
   */
  approveDeployments: (args: {
    /**
     * Parameters for ApproveDeployments
     */
    input: ApproveDeploymentsInput;
  }) => Maybe<ApproveDeploymentsPayload>;
  /**
   * Approve a verifiable domain for notification delivery.
   */
  approveVerifiableDomain: (args: {
    /**
     * Parameters for ApproveVerifiableDomain
     */
    input: ApproveVerifiableDomainInput;
  }) => Maybe<ApproveVerifiableDomainPayload>;
  /**
   * Archives a ProjectV2Item
   */
  archiveProjectV2Item: (args: {
    /**
     * Parameters for ArchiveProjectV2Item
     */
    input: ArchiveProjectV2ItemInput;
  }) => Maybe<ArchiveProjectV2ItemPayload>;
  /**
   * Marks a repository as archived.
   */
  archiveRepository: (args: {
    /**
     * Parameters for ArchiveRepository
     */
    input: ArchiveRepositoryInput;
  }) => Maybe<ArchiveRepositoryPayload>;
  /**
   * Cancels a pending invitation for an administrator to join an enterprise.
   */
  cancelEnterpriseAdminInvitation: (args: {
    /**
     * Parameters for CancelEnterpriseAdminInvitation
     */
    input: CancelEnterpriseAdminInvitationInput;
  }) => Maybe<CancelEnterpriseAdminInvitationPayload>;
  /**
   * Cancel an active sponsorship.
   */
  cancelSponsorship: (args: {
    /**
     * Parameters for CancelSponsorship
     */
    input: CancelSponsorshipInput;
  }) => Maybe<CancelSponsorshipPayload>;
  /**
   * Update your status on GitHub.
   */
  changeUserStatus: (args: {
    /**
     * Parameters for ChangeUserStatus
     */
    input: ChangeUserStatusInput;
  }) => Maybe<ChangeUserStatusPayload>;
  /**
   * Clears all labels from a labelable object.
   */
  clearLabelsFromLabelable: (args: {
    /**
     * Parameters for ClearLabelsFromLabelable
     */
    input: ClearLabelsFromLabelableInput;
  }) => Maybe<ClearLabelsFromLabelablePayload>;
  /**
   * This mutation clears the value of a field for an item in a Project. Currently only text, number, date, assignees, labels, single-select, iteration and milestone fields are supported.
   */
  clearProjectV2ItemFieldValue: (args: {
    /**
     * Parameters for ClearProjectV2ItemFieldValue
     */
    input: ClearProjectV2ItemFieldValueInput;
  }) => Maybe<ClearProjectV2ItemFieldValuePayload>;
  /**
   * Creates a new project by cloning configuration from an existing project.
   */
  cloneProject: (args: {
    /**
     * Parameters for CloneProject
     */
    input: CloneProjectInput;
  }) => Maybe<CloneProjectPayload>;
  /**
   * Create a new repository with the same files and directory structure as a template repository.
   */
  cloneTemplateRepository: (args: {
    /**
     * Parameters for CloneTemplateRepository
     */
    input: CloneTemplateRepositoryInput;
  }) => Maybe<CloneTemplateRepositoryPayload>;
  /**
   * Close a discussion.
   */
  closeDiscussion: (args: {
    /**
     * Parameters for CloseDiscussion
     */
    input: CloseDiscussionInput;
  }) => Maybe<CloseDiscussionPayload>;
  /**
   * Close an issue.
   */
  closeIssue: (args: {
    /**
     * Parameters for CloseIssue
     */
    input: CloseIssueInput;
  }) => Maybe<CloseIssuePayload>;
  /**
   * Close a pull request.
   */
  closePullRequest: (args: {
    /**
     * Parameters for ClosePullRequest
     */
    input: ClosePullRequestInput;
  }) => Maybe<ClosePullRequestPayload>;
  /**
   * Convert a project note card to one associated with a newly created issue.
   */
  convertProjectCardNoteToIssue: (args: {
    /**
     * Parameters for ConvertProjectCardNoteToIssue
     */
    input: ConvertProjectCardNoteToIssueInput;
  }) => Maybe<ConvertProjectCardNoteToIssuePayload>;
  /**
   * Converts a pull request to draft
   */
  convertPullRequestToDraft: (args: {
    /**
     * Parameters for ConvertPullRequestToDraft
     */
    input: ConvertPullRequestToDraftInput;
  }) => Maybe<ConvertPullRequestToDraftPayload>;
  /**
   * Copy a project.
   */
  copyProjectV2: (args: {
    /**
     * Parameters for CopyProjectV2
     */
    input: CopyProjectV2Input;
  }) => Maybe<CopyProjectV2Payload>;
  /**
   * Invites a user to claim reattributable data
   */
  createAttributionInvitation: (args: {
    /**
     * Parameters for CreateAttributionInvitation
     */
    input: CreateAttributionInvitationInput;
  }) => Maybe<CreateAttributionInvitationPayload>;
  /**
   * Create a new branch protection rule
   */
  createBranchProtectionRule: (args: {
    /**
     * Parameters for CreateBranchProtectionRule
     */
    input: CreateBranchProtectionRuleInput;
  }) => Maybe<CreateBranchProtectionRulePayload>;
  /**
   * Create a check run.
   */
  createCheckRun: (args: {
    /**
     * Parameters for CreateCheckRun
     */
    input: CreateCheckRunInput;
  }) => Maybe<CreateCheckRunPayload>;
  /**
   * Create a check suite
   */
  createCheckSuite: (args: {
    /**
     * Parameters for CreateCheckSuite
     */
    input: CreateCheckSuiteInput;
  }) => Maybe<CreateCheckSuitePayload>;
  /**
   * Appends a commit to the given branch as the authenticated user.
   *
   * This mutation creates a commit whose parent is the HEAD of the provided
   * branch and also updates that branch to point to the new commit.
   * It can be thought of as similar to `git commit`.
   *
   * ### Locating a Branch
   *
   * Commits are appended to a `branch` of type `Ref`.
   * This must refer to a git branch (i.e.  the fully qualified path must
   * begin with `refs/heads/`, although including this prefix is optional.
   *
   * Callers may specify the `branch` to commit to either by its global node
   * ID or by passing both of `repositoryNameWithOwner` and `refName`.  For
   * more details see the documentation for `CommittableBranch`.
   *
   * ### Describing Changes
   *
   * `fileChanges` are specified as a `FilesChanges` object describing
   * `FileAdditions` and `FileDeletions`.
   *
   * Please see the documentation for `FileChanges` for more information on
   * how to use this argument to describe any set of file changes.
   *
   * ### Authorship
   *
   * Similar to the web commit interface, this mutation does not support
   * specifying the author or committer of the commit and will not add
   * support for this in the future.
   *
   * A commit created by a successful execution of this mutation will be
   * authored by the owner of the credential which authenticates the API
   * request.  The committer will be identical to that of commits authored
   * using the web interface.
   *
   * If you need full control over author and committer information, please
   * use the Git Database REST API instead.
   *
   * ### Commit Signing
   *
   * Commits made using this mutation are automatically signed by GitHub if
   * supported and will be marked as verified in the user interface.
   */
  createCommitOnBranch: (args: {
    /**
     * Parameters for CreateCommitOnBranch
     */
    input: CreateCommitOnBranchInput;
  }) => Maybe<CreateCommitOnBranchPayload>;
  /**
   * Create a discussion.
   */
  createDiscussion: (args: {
    /**
     * Parameters for CreateDiscussion
     */
    input: CreateDiscussionInput;
  }) => Maybe<CreateDiscussionPayload>;
  /**
   * Creates an organization as part of an enterprise account.
   */
  createEnterpriseOrganization: (args: {
    /**
     * Parameters for CreateEnterpriseOrganization
     */
    input: CreateEnterpriseOrganizationInput;
  }) => Maybe<CreateEnterpriseOrganizationPayload>;
  /**
   * Creates an environment or simply returns it if already exists.
   */
  createEnvironment: (args: {
    /**
     * Parameters for CreateEnvironment
     */
    input: CreateEnvironmentInput;
  }) => Maybe<CreateEnvironmentPayload>;
  /**
   * Creates a new IP allow list entry.
   */
  createIpAllowListEntry: (args: {
    /**
     * Parameters for CreateIpAllowListEntry
     */
    input: CreateIpAllowListEntryInput;
  }) => Maybe<CreateIpAllowListEntryPayload>;
  /**
   * Creates a new issue.
   */
  createIssue: (args: {
    /**
     * Parameters for CreateIssue
     */
    input: CreateIssueInput;
  }) => Maybe<CreateIssuePayload>;
  /**
   * Create a branch linked to an issue.
   */
  createLinkedBranch: (args: {
    /**
     * Parameters for CreateLinkedBranch
     */
    input: CreateLinkedBranchInput;
  }) => Maybe<CreateLinkedBranchPayload>;
  /**
   * Creates a GitHub Enterprise Importer (GEI) migration source.
   */
  createMigrationSource: (args: {
    /**
     * Parameters for CreateMigrationSource
     */
    input: CreateMigrationSourceInput;
  }) => Maybe<CreateMigrationSourcePayload>;
  /**
   * Creates a new project.
   */
  createProject: (args: {
    /**
     * Parameters for CreateProject
     */
    input: CreateProjectInput;
  }) => Maybe<CreateProjectPayload>;
  /**
   * Creates a new project.
   */
  createProjectV2: (args: {
    /**
     * Parameters for CreateProjectV2
     */
    input: CreateProjectV2Input;
  }) => Maybe<CreateProjectV2Payload>;
  /**
   * Create a new project field.
   */
  createProjectV2Field: (args: {
    /**
     * Parameters for CreateProjectV2Field
     */
    input: CreateProjectV2FieldInput;
  }) => Maybe<CreateProjectV2FieldPayload>;
  /**
   * Create a new pull request
   */
  createPullRequest: (args: {
    /**
     * Parameters for CreatePullRequest
     */
    input: CreatePullRequestInput;
  }) => Maybe<CreatePullRequestPayload>;
  /**
   * Create a new Git Ref.
   */
  createRef: (args: {
    /**
     * Parameters for CreateRef
     */
    input: CreateRefInput;
  }) => Maybe<CreateRefPayload>;
  /**
   * Create a new repository.
   */
  createRepository: (args: {
    /**
     * Parameters for CreateRepository
     */
    input: CreateRepositoryInput;
  }) => Maybe<CreateRepositoryPayload>;
  /**
   * Create a repository ruleset
   */
  createRepositoryRuleset: (args: {
    /**
     * Parameters for CreateRepositoryRuleset
     */
    input: CreateRepositoryRulesetInput;
  }) => Maybe<CreateRepositoryRulesetPayload>;
  /**
   * Adds a saved notification thread.
   */
  createSavedNotificationThread: (args: {
    /**
     * Parameters for CreateSavedNotificationThread
     */
    input: CreateSavedNotificationThreadInput;
  }) => Maybe<CreateSavedNotificationThreadPayload>;
  /**
   * Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
   */
  createSponsorsListing: (args: {
    /**
     * Parameters for CreateSponsorsListing
     */
    input: CreateSponsorsListingInput;
  }) => Maybe<CreateSponsorsListingPayload>;
  /**
   * Create a new payment tier for your GitHub Sponsors profile.
   */
  createSponsorsTier: (args: {
    /**
     * Parameters for CreateSponsorsTier
     */
    input: CreateSponsorsTierInput;
  }) => Maybe<CreateSponsorsTierPayload>;
  /**
   * Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship.
   */
  createSponsorship: (args: {
    /**
     * Parameters for CreateSponsorship
     */
    input: CreateSponsorshipInput;
  }) => Maybe<CreateSponsorshipPayload>;
  /**
   * Make many one-time sponsorships for different sponsorable users or organizations at once. Can only sponsor those who have a public GitHub Sponsors profile.
   */
  createSponsorships: (args: {
    /**
     * Parameters for CreateSponsorships
     */
    input: CreateSponsorshipsInput;
  }) => Maybe<CreateSponsorshipsPayload>;
  /**
   * Creates a new team discussion.
   */
  createTeamDiscussion: (args: {
    /**
     * Parameters for CreateTeamDiscussion
     */
    input: CreateTeamDiscussionInput;
  }) => Maybe<CreateTeamDiscussionPayload>;
  /**
   * Creates a new team discussion comment.
   */
  createTeamDiscussionComment: (args: {
    /**
     * Parameters for CreateTeamDiscussionComment
     */
    input: CreateTeamDiscussionCommentInput;
  }) => Maybe<CreateTeamDiscussionCommentPayload>;
  /**
   * Rejects a suggested topic for the repository.
   */
  declineTopicSuggestion: (args: {
    /**
     * Parameters for DeclineTopicSuggestion
     */
    input: DeclineTopicSuggestionInput;
  }) => Maybe<DeclineTopicSuggestionPayload>;
  /**
   * Delete a branch protection rule
   */
  deleteBranchProtectionRule: (args: {
    /**
     * Parameters for DeleteBranchProtectionRule
     */
    input: DeleteBranchProtectionRuleInput;
  }) => Maybe<DeleteBranchProtectionRulePayload>;
  /**
   * Deletes a deployment.
   */
  deleteDeployment: (args: {
    /**
     * Parameters for DeleteDeployment
     */
    input: DeleteDeploymentInput;
  }) => Maybe<DeleteDeploymentPayload>;
  /**
   * Delete a discussion and all of its replies.
   */
  deleteDiscussion: (args: {
    /**
     * Parameters for DeleteDiscussion
     */
    input: DeleteDiscussionInput;
  }) => Maybe<DeleteDiscussionPayload>;
  /**
   * Delete a discussion comment. If it has replies, wipe it instead.
   */
  deleteDiscussionComment: (args: {
    /**
     * Parameters for DeleteDiscussionComment
     */
    input: DeleteDiscussionCommentInput;
  }) => Maybe<DeleteDiscussionCommentPayload>;
  /**
   * Deletes an environment
   */
  deleteEnvironment: (args: {
    /**
     * Parameters for DeleteEnvironment
     */
    input: DeleteEnvironmentInput;
  }) => Maybe<DeleteEnvironmentPayload>;
  /**
   * Deletes an IP allow list entry.
   */
  deleteIpAllowListEntry: (args: {
    /**
     * Parameters for DeleteIpAllowListEntry
     */
    input: DeleteIpAllowListEntryInput;
  }) => Maybe<DeleteIpAllowListEntryPayload>;
  /**
   * Deletes an Issue object.
   */
  deleteIssue: (args: {
    /**
     * Parameters for DeleteIssue
     */
    input: DeleteIssueInput;
  }) => Maybe<DeleteIssuePayload>;
  /**
   * Deletes an IssueComment object.
   */
  deleteIssueComment: (args: {
    /**
     * Parameters for DeleteIssueComment
     */
    input: DeleteIssueCommentInput;
  }) => Maybe<DeleteIssueCommentPayload>;
  /**
   * Unlink a branch from an issue.
   */
  deleteLinkedBranch: (args: {
    /**
     * Parameters for DeleteLinkedBranch
     */
    input: DeleteLinkedBranchInput;
  }) => Maybe<DeleteLinkedBranchPayload>;
  /**
   * Deletes a project.
   */
  deleteProject: (args: {
    /**
     * Parameters for DeleteProject
     */
    input: DeleteProjectInput;
  }) => Maybe<DeleteProjectPayload>;
  /**
   * Deletes a project card.
   */
  deleteProjectCard: (args: {
    /**
     * Parameters for DeleteProjectCard
     */
    input: DeleteProjectCardInput;
  }) => Maybe<DeleteProjectCardPayload>;
  /**
   * Deletes a project column.
   */
  deleteProjectColumn: (args: {
    /**
     * Parameters for DeleteProjectColumn
     */
    input: DeleteProjectColumnInput;
  }) => Maybe<DeleteProjectColumnPayload>;
  /**
   * Delete a project.
   */
  deleteProjectV2: (args: {
    /**
     * Parameters for DeleteProjectV2
     */
    input: DeleteProjectV2Input;
  }) => Maybe<DeleteProjectV2Payload>;
  /**
   * Delete a project field.
   */
  deleteProjectV2Field: (args: {
    /**
     * Parameters for DeleteProjectV2Field
     */
    input: DeleteProjectV2FieldInput;
  }) => Maybe<DeleteProjectV2FieldPayload>;
  /**
   * Deletes an item from a Project.
   */
  deleteProjectV2Item: (args: {
    /**
     * Parameters for DeleteProjectV2Item
     */
    input: DeleteProjectV2ItemInput;
  }) => Maybe<DeleteProjectV2ItemPayload>;
  /**
   * Deletes a project workflow.
   */
  deleteProjectV2Workflow: (args: {
    /**
     * Parameters for DeleteProjectV2Workflow
     */
    input: DeleteProjectV2WorkflowInput;
  }) => Maybe<DeleteProjectV2WorkflowPayload>;
  /**
   * Deletes a pull request review.
   */
  deletePullRequestReview: (args: {
    /**
     * Parameters for DeletePullRequestReview
     */
    input: DeletePullRequestReviewInput;
  }) => Maybe<DeletePullRequestReviewPayload>;
  /**
   * Deletes a pull request review comment.
   */
  deletePullRequestReviewComment: (args: {
    /**
     * Parameters for DeletePullRequestReviewComment
     */
    input: DeletePullRequestReviewCommentInput;
  }) => Maybe<DeletePullRequestReviewCommentPayload>;
  /**
   * Delete a Git Ref.
   */
  deleteRef: (args: {
    /**
     * Parameters for DeleteRef
     */
    input: DeleteRefInput;
  }) => Maybe<DeleteRefPayload>;
  /**
   * Delete a repository ruleset
   */
  deleteRepositoryRuleset: (args: {
    /**
     * Parameters for DeleteRepositoryRuleset
     */
    input: DeleteRepositoryRulesetInput;
  }) => Maybe<DeleteRepositoryRulesetPayload>;
  /**
   * Deletes a saved notification thread.
   */
  deleteSavedNotificationThread: (args: {
    /**
     * Parameters for DeleteSavedNotificationThread
     */
    input: DeleteSavedNotificationThreadInput;
  }) => Maybe<DeleteSavedNotificationThreadPayload>;
  /**
   * Deletes a team discussion.
   */
  deleteTeamDiscussion: (args: {
    /**
     * Parameters for DeleteTeamDiscussion
     */
    input: DeleteTeamDiscussionInput;
  }) => Maybe<DeleteTeamDiscussionPayload>;
  /**
   * Deletes a team discussion comment.
   */
  deleteTeamDiscussionComment: (args: {
    /**
     * Parameters for DeleteTeamDiscussionComment
     */
    input: DeleteTeamDiscussionCommentInput;
  }) => Maybe<DeleteTeamDiscussionCommentPayload>;
  /**
   * Deletes a verifiable domain.
   */
  deleteVerifiableDomain: (args: {
    /**
     * Parameters for DeleteVerifiableDomain
     */
    input: DeleteVerifiableDomainInput;
  }) => Maybe<DeleteVerifiableDomainPayload>;
  /**
   * Remove a pull request from the merge queue.
   */
  dequeuePullRequest: (args: {
    /**
     * Parameters for DequeuePullRequest
     */
    input: DequeuePullRequestInput;
  }) => Maybe<DequeuePullRequestPayload>;
  /**
   * Disable auto merge on the given pull request
   */
  disablePullRequestAutoMerge: (args: {
    /**
     * Parameters for DisablePullRequestAutoMerge
     */
    input: DisablePullRequestAutoMergeInput;
  }) => Maybe<DisablePullRequestAutoMergePayload>;
  /**
   * Dismisses an approved or rejected pull request review.
   */
  dismissPullRequestReview: (args: {
    /**
     * Parameters for DismissPullRequestReview
     */
    input: DismissPullRequestReviewInput;
  }) => Maybe<DismissPullRequestReviewPayload>;
  /**
   * Dismisses the Dependabot alert.
   */
  dismissRepositoryVulnerabilityAlert: (args: {
    /**
     * Parameters for DismissRepositoryVulnerabilityAlert
     */
    input: DismissRepositoryVulnerabilityAlertInput;
  }) => Maybe<DismissRepositoryVulnerabilityAlertPayload>;
  /**
   * Enable the default auto-merge on a pull request.
   */
  enablePullRequestAutoMerge: (args: {
    /**
     * Parameters for EnablePullRequestAutoMerge
     */
    input: EnablePullRequestAutoMergeInput;
  }) => Maybe<EnablePullRequestAutoMergePayload>;
  /**
   * Add a pull request to the merge queue.
   */
  enqueuePullRequest: (args: {
    /**
     * Parameters for EnqueuePullRequest
     */
    input: EnqueuePullRequestInput;
  }) => Maybe<EnqueuePullRequestPayload>;
  /**
   * Follow an organization.
   */
  followOrganization: (args: {
    /**
     * Parameters for FollowOrganization
     */
    input: FollowOrganizationInput;
  }) => Maybe<FollowOrganizationPayload>;
  /**
   * Follow a user.
   */
  followUser: (args: {
    /**
     * Parameters for FollowUser
     */
    input: FollowUserInput;
  }) => Maybe<FollowUserPayload>;
  /**
   * Grant the migrator role to a user for all organizations under an enterprise account.
   */
  grantEnterpriseOrganizationsMigratorRole: (args: {
    /**
     * Parameters for GrantEnterpriseOrganizationsMigratorRole
     */
    input: GrantEnterpriseOrganizationsMigratorRoleInput;
  }) => Maybe<GrantEnterpriseOrganizationsMigratorRolePayload>;
  /**
   * Grant the migrator role to a user or a team.
   */
  grantMigratorRole: (args: {
    /**
     * Parameters for GrantMigratorRole
     */
    input: GrantMigratorRoleInput;
  }) => Maybe<GrantMigratorRolePayload>;
  /**
   * Invite someone to become an administrator of the enterprise.
   */
  inviteEnterpriseAdmin: (args: {
    /**
     * Parameters for InviteEnterpriseAdmin
     */
    input: InviteEnterpriseAdminInput;
  }) => Maybe<InviteEnterpriseAdminPayload>;
  /**
   * Links a project to a repository.
   */
  linkProjectV2ToRepository: (args: {
    /**
     * Parameters for LinkProjectV2ToRepository
     */
    input: LinkProjectV2ToRepositoryInput;
  }) => Maybe<LinkProjectV2ToRepositoryPayload>;
  /**
   * Links a project to a team.
   */
  linkProjectV2ToTeam: (args: {
    /**
     * Parameters for LinkProjectV2ToTeam
     */
    input: LinkProjectV2ToTeamInput;
  }) => Maybe<LinkProjectV2ToTeamPayload>;
  /**
   * Creates a repository link for a project.
   */
  linkRepositoryToProject: (args: {
    /**
     * Parameters for LinkRepositoryToProject
     */
    input: LinkRepositoryToProjectInput;
  }) => Maybe<LinkRepositoryToProjectPayload>;
  /**
   * Lock a lockable object
   */
  lockLockable: (args: {
    /**
     * Parameters for LockLockable
     */
    input: LockLockableInput;
  }) => Maybe<LockLockablePayload>;
  /**
   * Mark a discussion comment as the chosen answer for discussions in an answerable category.
   */
  markDiscussionCommentAsAnswer: (args: {
    /**
     * Parameters for MarkDiscussionCommentAsAnswer
     */
    input: MarkDiscussionCommentAsAnswerInput;
  }) => Maybe<MarkDiscussionCommentAsAnswerPayload>;
  /**
   * Mark a pull request file as viewed
   */
  markFileAsViewed: (args: {
    /**
     * Parameters for MarkFileAsViewed
     */
    input: MarkFileAsViewedInput;
  }) => Maybe<MarkFileAsViewedPayload>;
  /**
   * Marks a notification as done
   */
  markNotificationAsDone: (args: {
    /**
     * Parameters for MarkNotificationAsDone
     */
    input: MarkNotificationAsDoneInput;
  }) => Maybe<MarkNotificationAsDonePayload>;
  /**
   * Marks a notification as read
   */
  markNotificationAsRead: (args: {
    /**
     * Parameters for MarkNotificationAsRead
     */
    input: MarkNotificationAsReadInput;
  }) => Maybe<MarkNotificationAsReadPayload>;
  /**
   * Marks a notification as undone
   */
  markNotificationAsUndone: (args: {
    /**
     * Parameters for MarkNotificationAsUndone
     */
    input: MarkNotificationAsUndoneInput;
  }) => Maybe<MarkNotificationAsUndonePayload>;
  /**
   * Marks a notification as unread
   */
  markNotificationAsUnread: (args: {
    /**
     * Parameters for MarkNotificationAsUnread
     */
    input: MarkNotificationAsUnreadInput;
  }) => Maybe<MarkNotificationAsUnreadPayload>;
  /**
   * Marks a notification as read
   */
  markNotificationSubjectAsRead: (args: {
    /**
     * Parameters for MarkNotificationSubjectAsRead
     */
    input: MarkNotificationSubjectAsReadInput;
  }) => Maybe<MarkNotificationSubjectAsReadPayload>;
  /**
   * Marks a notification as done
   */
  markNotificationsAsDone: (args: {
    /**
     * Parameters for MarkNotificationsAsDone
     */
    input: MarkNotificationsAsDoneInput;
  }) => Maybe<MarkNotificationsAsDonePayload>;
  /**
   * Marks multiple notifications as read
   */
  markNotificationsAsRead: (args: {
    /**
     * Parameters for MarkNotificationsAsRead
     */
    input: MarkNotificationsAsReadInput;
  }) => Maybe<MarkNotificationsAsReadPayload>;
  /**
   * Marks a notification as undone
   */
  markNotificationsAsUndone: (args: {
    /**
     * Parameters for MarkNotificationsAsUndone
     */
    input: MarkNotificationsAsUndoneInput;
  }) => Maybe<MarkNotificationsAsUndonePayload>;
  /**
   * Marks notifications as unread
   */
  markNotificationsAsUnread: (args: {
    /**
     * Parameters for MarkNotificationsAsUnread
     */
    input: MarkNotificationsAsUnreadInput;
  }) => Maybe<MarkNotificationsAsUnreadPayload>;
  /**
   * Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
   */
  markProjectV2AsTemplate: (args: {
    /**
     * Parameters for MarkProjectV2AsTemplate
     */
    input: MarkProjectV2AsTemplateInput;
  }) => Maybe<MarkProjectV2AsTemplatePayload>;
  /**
   * Marks a pull request ready for review.
   */
  markPullRequestReadyForReview: (args: {
    /**
     * Parameters for MarkPullRequestReadyForReview
     */
    input: MarkPullRequestReadyForReviewInput;
  }) => Maybe<MarkPullRequestReadyForReviewPayload>;
  /**
   * Merge a head into a branch.
   */
  mergeBranch: (args: {
    /**
     * Parameters for MergeBranch
     */
    input: MergeBranchInput;
  }) => Maybe<MergeBranchPayload>;
  /**
   * Merge a pull request.
   */
  mergePullRequest: (args: {
    /**
     * Parameters for MergePullRequest
     */
    input: MergePullRequestInput;
  }) => Maybe<MergePullRequestPayload>;
  /**
   * Minimizes a comment on an Issue, Commit, Pull Request, or Gist
   */
  minimizeComment: (args: {
    /**
     * Parameters for MinimizeComment
     */
    input: MinimizeCommentInput;
  }) => Maybe<MinimizeCommentPayload>;
  /**
   * Moves a project card to another place.
   */
  moveProjectCard: (args: {
    /**
     * Parameters for MoveProjectCard
     */
    input: MoveProjectCardInput;
  }) => Maybe<MoveProjectCardPayload>;
  /**
   * Moves a project column to another place.
   */
  moveProjectColumn: (args: {
    /**
     * Parameters for MoveProjectColumn
     */
    input: MoveProjectColumnInput;
  }) => Maybe<MoveProjectColumnPayload>;
  /**
   * Pin an issue to a repository
   */
  pinIssue: (args: {
    /**
     * Parameters for PinIssue
     */
    input: PinIssueInput;
  }) => Maybe<PinIssuePayload>;
  /**
   * Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
   */
  publishSponsorsTier: (args: {
    /**
     * Parameters for PublishSponsorsTier
     */
    input: PublishSponsorsTierInput;
  }) => Maybe<PublishSponsorsTierPayload>;
  /**
   * Regenerates the identity provider recovery codes for an enterprise
   */
  regenerateEnterpriseIdentityProviderRecoveryCodes: (args: {
    /**
     * Parameters for RegenerateEnterpriseIdentityProviderRecoveryCodes
     */
    input: RegenerateEnterpriseIdentityProviderRecoveryCodesInput;
  }) => Maybe<RegenerateEnterpriseIdentityProviderRecoveryCodesPayload>;
  /**
   * Regenerates a verifiable domain's verification token.
   */
  regenerateVerifiableDomainToken: (args: {
    /**
     * Parameters for RegenerateVerifiableDomainToken
     */
    input: RegenerateVerifiableDomainTokenInput;
  }) => Maybe<RegenerateVerifiableDomainTokenPayload>;
  /**
   * Reject all pending deployments under one or more environments
   */
  rejectDeployments: (args: {
    /**
     * Parameters for RejectDeployments
     */
    input: RejectDeploymentsInput;
  }) => Maybe<RejectDeploymentsPayload>;
  /**
   * Removes assignees from an assignable object.
   */
  removeAssigneesFromAssignable: (args: {
    /**
     * Parameters for RemoveAssigneesFromAssignable
     */
    input: RemoveAssigneesFromAssignableInput;
  }) => Maybe<RemoveAssigneesFromAssignablePayload>;
  /**
   * Removes an administrator from the enterprise.
   */
  removeEnterpriseAdmin: (args: {
    /**
     * Parameters for RemoveEnterpriseAdmin
     */
    input: RemoveEnterpriseAdminInput;
  }) => Maybe<RemoveEnterpriseAdminPayload>;
  /**
   * Removes the identity provider from an enterprise
   */
  removeEnterpriseIdentityProvider: (args: {
    /**
     * Parameters for RemoveEnterpriseIdentityProvider
     */
    input: RemoveEnterpriseIdentityProviderInput;
  }) => Maybe<RemoveEnterpriseIdentityProviderPayload>;
  /**
   * Removes a user from all organizations within the enterprise
   */
  removeEnterpriseMember: (args: {
    /**
     * Parameters for RemoveEnterpriseMember
     */
    input: RemoveEnterpriseMemberInput;
  }) => Maybe<RemoveEnterpriseMemberPayload>;
  /**
   * Removes an organization from the enterprise
   */
  removeEnterpriseOrganization: (args: {
    /**
     * Parameters for RemoveEnterpriseOrganization
     */
    input: RemoveEnterpriseOrganizationInput;
  }) => Maybe<RemoveEnterpriseOrganizationPayload>;
  /**
   * Removes a support entitlement from an enterprise member.
   */
  removeEnterpriseSupportEntitlement: (args: {
    /**
     * Parameters for RemoveEnterpriseSupportEntitlement
     */
    input: RemoveEnterpriseSupportEntitlementInput;
  }) => Maybe<RemoveEnterpriseSupportEntitlementPayload>;
  /**
   * Removes labels from a Labelable object.
   */
  removeLabelsFromLabelable: (args: {
    /**
     * Parameters for RemoveLabelsFromLabelable
     */
    input: RemoveLabelsFromLabelableInput;
  }) => Maybe<RemoveLabelsFromLabelablePayload>;
  /**
   * Removes outside collaborator from all repositories in an organization.
   */
  removeOutsideCollaborator: (args: {
    /**
     * Parameters for RemoveOutsideCollaborator
     */
    input: RemoveOutsideCollaboratorInput;
  }) => Maybe<RemoveOutsideCollaboratorPayload>;
  /**
   * Removes a reaction from a subject.
   */
  removeReaction: (args: {
    /**
     * Parameters for RemoveReaction
     */
    input: RemoveReactionInput;
  }) => Maybe<RemoveReactionPayload>;
  /**
   * Removes a star from a Starrable.
   */
  removeStar: (args: {
    /**
     * Parameters for RemoveStar
     */
    input: RemoveStarInput;
  }) => Maybe<RemoveStarPayload>;
  /**
   * Remove an upvote to a discussion or discussion comment.
   */
  removeUpvote: (args: {
    /**
     * Parameters for RemoveUpvote
     */
    input: RemoveUpvoteInput;
  }) => Maybe<RemoveUpvotePayload>;
  /**
   * Reopen a discussion.
   */
  reopenDiscussion: (args: {
    /**
     * Parameters for ReopenDiscussion
     */
    input: ReopenDiscussionInput;
  }) => Maybe<ReopenDiscussionPayload>;
  /**
   * Reopen a issue.
   */
  reopenIssue: (args: {
    /**
     * Parameters for ReopenIssue
     */
    input: ReopenIssueInput;
  }) => Maybe<ReopenIssuePayload>;
  /**
   * Reopen a pull request.
   */
  reopenPullRequest: (args: {
    /**
     * Parameters for ReopenPullRequest
     */
    input: ReopenPullRequestInput;
  }) => Maybe<ReopenPullRequestPayload>;
  /**
   * Set review requests on a pull request.
   */
  requestReviews: (args: {
    /**
     * Parameters for RequestReviews
     */
    input: RequestReviewsInput;
  }) => Maybe<RequestReviewsPayload>;
  /**
   * Rerequests an existing check suite.
   */
  rerequestCheckSuite: (args: {
    /**
     * Parameters for RerequestCheckSuite
     */
    input: RerequestCheckSuiteInput;
  }) => Maybe<RerequestCheckSuitePayload>;
  /**
   * Marks a review thread as resolved.
   */
  resolveReviewThread: (args: {
    /**
     * Parameters for ResolveReviewThread
     */
    input: ResolveReviewThreadInput;
  }) => Maybe<ResolveReviewThreadPayload>;
  /**
   * Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
   */
  retireSponsorsTier: (args: {
    /**
     * Parameters for RetireSponsorsTier
     */
    input: RetireSponsorsTierInput;
  }) => Maybe<RetireSponsorsTierPayload>;
  /**
   * Create a pull request that reverts the changes from a merged pull request.
   */
  revertPullRequest: (args: {
    /**
     * Parameters for RevertPullRequest
     */
    input: RevertPullRequestInput;
  }) => Maybe<RevertPullRequestPayload>;
  /**
   * Revoke the migrator role to a user for all organizations under an enterprise account.
   */
  revokeEnterpriseOrganizationsMigratorRole: (args: {
    /**
     * Parameters for RevokeEnterpriseOrganizationsMigratorRole
     */
    input: RevokeEnterpriseOrganizationsMigratorRoleInput;
  }) => Maybe<RevokeEnterpriseOrganizationsMigratorRolePayload>;
  /**
   * Revoke the migrator role from a user or a team.
   */
  revokeMigratorRole: (args: {
    /**
     * Parameters for RevokeMigratorRole
     */
    input: RevokeMigratorRoleInput;
  }) => Maybe<RevokeMigratorRolePayload>;
  /**
   * Creates or updates the identity provider for an enterprise.
   */
  setEnterpriseIdentityProvider: (args: {
    /**
     * Parameters for SetEnterpriseIdentityProvider
     */
    input: SetEnterpriseIdentityProviderInput;
  }) => Maybe<SetEnterpriseIdentityProviderPayload>;
  /**
   * Set an organization level interaction limit for an organization's public repositories.
   */
  setOrganizationInteractionLimit: (args: {
    /**
     * Parameters for SetOrganizationInteractionLimit
     */
    input: SetOrganizationInteractionLimitInput;
  }) => Maybe<SetOrganizationInteractionLimitPayload>;
  /**
   * Sets an interaction limit setting for a repository.
   */
  setRepositoryInteractionLimit: (args: {
    /**
     * Parameters for SetRepositoryInteractionLimit
     */
    input: SetRepositoryInteractionLimitInput;
  }) => Maybe<SetRepositoryInteractionLimitPayload>;
  /**
   * Set a user level interaction limit for an user's public repositories.
   */
  setUserInteractionLimit: (args: {
    /**
     * Parameters for SetUserInteractionLimit
     */
    input: SetUserInteractionLimitInput;
  }) => Maybe<SetUserInteractionLimitPayload>;
  /**
   * Starts a GitHub Enterprise Importer organization migration.
   */
  startOrganizationMigration: (args: {
    /**
     * Parameters for StartOrganizationMigration
     */
    input: StartOrganizationMigrationInput;
  }) => Maybe<StartOrganizationMigrationPayload>;
  /**
   * Starts a GitHub Enterprise Importer (GEI) repository migration.
   */
  startRepositoryMigration: (args: {
    /**
     * Parameters for StartRepositoryMigration
     */
    input: StartRepositoryMigrationInput;
  }) => Maybe<StartRepositoryMigrationPayload>;
  /**
   * Submits a pending pull request review.
   */
  submitPullRequestReview: (args: {
    /**
     * Parameters for SubmitPullRequestReview
     */
    input: SubmitPullRequestReviewInput;
  }) => Maybe<SubmitPullRequestReviewPayload>;
  /**
   * Transfer an organization from one enterprise to another enterprise.
   */
  transferEnterpriseOrganization: (args: {
    /**
     * Parameters for TransferEnterpriseOrganization
     */
    input: TransferEnterpriseOrganizationInput;
  }) => Maybe<TransferEnterpriseOrganizationPayload>;
  /**
   * Transfer an issue to a different repository
   */
  transferIssue: (args: {
    /**
     * Parameters for TransferIssue
     */
    input: TransferIssueInput;
  }) => Maybe<TransferIssuePayload>;
  /**
   * Unarchives a ProjectV2Item
   */
  unarchiveProjectV2Item: (args: {
    /**
     * Parameters for UnarchiveProjectV2Item
     */
    input: UnarchiveProjectV2ItemInput;
  }) => Maybe<UnarchiveProjectV2ItemPayload>;
  /**
   * Unarchives a repository.
   */
  unarchiveRepository: (args: {
    /**
     * Parameters for UnarchiveRepository
     */
    input: UnarchiveRepositoryInput;
  }) => Maybe<UnarchiveRepositoryPayload>;
  /**
   * Unfollow an organization.
   */
  unfollowOrganization: (args: {
    /**
     * Parameters for UnfollowOrganization
     */
    input: UnfollowOrganizationInput;
  }) => Maybe<UnfollowOrganizationPayload>;
  /**
   * Unfollow a user.
   */
  unfollowUser: (args: {
    /**
     * Parameters for UnfollowUser
     */
    input: UnfollowUserInput;
  }) => Maybe<UnfollowUserPayload>;
  /**
   * Unlinks a project from a repository.
   */
  unlinkProjectV2FromRepository: (args: {
    /**
     * Parameters for UnlinkProjectV2FromRepository
     */
    input: UnlinkProjectV2FromRepositoryInput;
  }) => Maybe<UnlinkProjectV2FromRepositoryPayload>;
  /**
   * Unlinks a project to a team.
   */
  unlinkProjectV2FromTeam: (args: {
    /**
     * Parameters for UnlinkProjectV2FromTeam
     */
    input: UnlinkProjectV2FromTeamInput;
  }) => Maybe<UnlinkProjectV2FromTeamPayload>;
  /**
   * Deletes a repository link from a project.
   */
  unlinkRepositoryFromProject: (args: {
    /**
     * Parameters for UnlinkRepositoryFromProject
     */
    input: UnlinkRepositoryFromProjectInput;
  }) => Maybe<UnlinkRepositoryFromProjectPayload>;
  /**
   * Unlock a lockable object
   */
  unlockLockable: (args: {
    /**
     * Parameters for UnlockLockable
     */
    input: UnlockLockableInput;
  }) => Maybe<UnlockLockablePayload>;
  /**
   * Unmark a discussion comment as the chosen answer for discussions in an answerable category.
   */
  unmarkDiscussionCommentAsAnswer: (args: {
    /**
     * Parameters for UnmarkDiscussionCommentAsAnswer
     */
    input: UnmarkDiscussionCommentAsAnswerInput;
  }) => Maybe<UnmarkDiscussionCommentAsAnswerPayload>;
  /**
   * Unmark a pull request file as viewed
   */
  unmarkFileAsViewed: (args: {
    /**
     * Parameters for UnmarkFileAsViewed
     */
    input: UnmarkFileAsViewedInput;
  }) => Maybe<UnmarkFileAsViewedPayload>;
  /**
   * Unmark an issue as a duplicate of another issue.
   */
  unmarkIssueAsDuplicate: (args: {
    /**
     * Parameters for UnmarkIssueAsDuplicate
     */
    input: UnmarkIssueAsDuplicateInput;
  }) => Maybe<UnmarkIssueAsDuplicatePayload>;
  /**
   * Unmark a project as a template.
   */
  unmarkProjectV2AsTemplate: (args: {
    /**
     * Parameters for UnmarkProjectV2AsTemplate
     */
    input: UnmarkProjectV2AsTemplateInput;
  }) => Maybe<UnmarkProjectV2AsTemplatePayload>;
  /**
   * Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
   */
  unminimizeComment: (args: {
    /**
     * Parameters for UnminimizeComment
     */
    input: UnminimizeCommentInput;
  }) => Maybe<UnminimizeCommentPayload>;
  /**
   * Unpin a pinned issue from a repository
   */
  unpinIssue: (args: {
    /**
     * Parameters for UnpinIssue
     */
    input: UnpinIssueInput;
  }) => Maybe<UnpinIssuePayload>;
  /**
   * Marks a review thread as unresolved.
   */
  unresolveReviewThread: (args: {
    /**
     * Parameters for UnresolveReviewThread
     */
    input: UnresolveReviewThreadInput;
  }) => Maybe<UnresolveReviewThreadPayload>;
  /**
   * Update a branch protection rule
   */
  updateBranchProtectionRule: (args: {
    /**
     * Parameters for UpdateBranchProtectionRule
     */
    input: UpdateBranchProtectionRuleInput;
  }) => Maybe<UpdateBranchProtectionRulePayload>;
  /**
   * Update a check run
   */
  updateCheckRun: (args: {
    /**
     * Parameters for UpdateCheckRun
     */
    input: UpdateCheckRunInput;
  }) => Maybe<UpdateCheckRunPayload>;
  /**
   * Modifies the settings of an existing check suite
   */
  updateCheckSuitePreferences: (args: {
    /**
     * Parameters for UpdateCheckSuitePreferences
     */
    input: UpdateCheckSuitePreferencesInput;
  }) => Maybe<UpdateCheckSuitePreferencesPayload>;
  /**
   * Update a discussion
   */
  updateDiscussion: (args: {
    /**
     * Parameters for UpdateDiscussion
     */
    input: UpdateDiscussionInput;
  }) => Maybe<UpdateDiscussionPayload>;
  /**
   * Update the contents of a comment on a Discussion
   */
  updateDiscussionComment: (args: {
    /**
     * Parameters for UpdateDiscussionComment
     */
    input: UpdateDiscussionCommentInput;
  }) => Maybe<UpdateDiscussionCommentPayload>;
  /**
   * Updates the role of an enterprise administrator.
   */
  updateEnterpriseAdministratorRole: (args: {
    /**
     * Parameters for UpdateEnterpriseAdministratorRole
     */
    input: UpdateEnterpriseAdministratorRoleInput;
  }) => Maybe<UpdateEnterpriseAdministratorRolePayload>;
  /**
   * Sets whether private repository forks are enabled for an enterprise.
   */
  updateEnterpriseAllowPrivateRepositoryForkingSetting: (args: {
    /**
     * Parameters for UpdateEnterpriseAllowPrivateRepositoryForkingSetting
     */
    input: UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput;
  }) => Maybe<UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload>;
  /**
   * Sets the base repository permission for organizations in an enterprise.
   */
  updateEnterpriseDefaultRepositoryPermissionSetting: (args: {
    /**
     * Parameters for UpdateEnterpriseDefaultRepositoryPermissionSetting
     */
    input: UpdateEnterpriseDefaultRepositoryPermissionSettingInput;
  }) => Maybe<UpdateEnterpriseDefaultRepositoryPermissionSettingPayload>;
  /**
   * Sets whether organization members with admin permissions on a repository can change repository visibility.
   */
  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting: (args: {
    /**
     * Parameters for UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
     */
    input: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput;
  }) => Maybe<UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload>;
  /**
   * Sets the members can create repositories setting for an enterprise.
   */
  updateEnterpriseMembersCanCreateRepositoriesSetting: (args: {
    /**
     * Parameters for UpdateEnterpriseMembersCanCreateRepositoriesSetting
     */
    input: UpdateEnterpriseMembersCanCreateRepositoriesSettingInput;
  }) => Maybe<UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload>;
  /**
   * Sets the members can delete issues setting for an enterprise.
   */
  updateEnterpriseMembersCanDeleteIssuesSetting: (args: {
    /**
     * Parameters for UpdateEnterpriseMembersCanDeleteIssuesSetting
     */
    input: UpdateEnterpriseMembersCanDeleteIssuesSettingInput;
  }) => Maybe<UpdateEnterpriseMembersCanDeleteIssuesSettingPayload>;
  /**
   * Sets the members can delete repositories setting for an enterprise.
   */
  updateEnterpriseMembersCanDeleteRepositoriesSetting: (args: {
    /**
     * Parameters for UpdateEnterpriseMembersCanDeleteRepositoriesSetting
     */
    input: UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput;
  }) => Maybe<UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload>;
  /**
   * Sets whether members can invite collaborators are enabled for an enterprise.
   */
  updateEnterpriseMembersCanInviteCollaboratorsSetting: (args: {
    /**
     * Parameters for UpdateEnterpriseMembersCanInviteCollaboratorsSetting
     */
    input: UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput;
  }) => Maybe<UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload>;
  /**
   * Sets whether or not an organization admin can make purchases.
   */
  updateEnterpriseMembersCanMakePurchasesSetting: (args: {
    /**
     * Parameters for UpdateEnterpriseMembersCanMakePurchasesSetting
     */
    input: UpdateEnterpriseMembersCanMakePurchasesSettingInput;
  }) => Maybe<UpdateEnterpriseMembersCanMakePurchasesSettingPayload>;
  /**
   * Sets the members can update protected branches setting for an enterprise.
   */
  updateEnterpriseMembersCanUpdateProtectedBranchesSetting: (args: {
    /**
     * Parameters for UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
     */
    input: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput;
  }) => Maybe<UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload>;
  /**
   * Sets the members can view dependency insights for an enterprise.
   */
  updateEnterpriseMembersCanViewDependencyInsightsSetting: (args: {
    /**
     * Parameters for UpdateEnterpriseMembersCanViewDependencyInsightsSetting
     */
    input: UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput;
  }) => Maybe<UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload>;
  /**
   * Sets whether organization projects are enabled for an enterprise.
   */
  updateEnterpriseOrganizationProjectsSetting: (args: {
    /**
     * Parameters for UpdateEnterpriseOrganizationProjectsSetting
     */
    input: UpdateEnterpriseOrganizationProjectsSettingInput;
  }) => Maybe<UpdateEnterpriseOrganizationProjectsSettingPayload>;
  /**
   * Updates the role of an enterprise owner with an organization.
   */
  updateEnterpriseOwnerOrganizationRole: (args: {
    /**
     * Parameters for UpdateEnterpriseOwnerOrganizationRole
     */
    input: UpdateEnterpriseOwnerOrganizationRoleInput;
  }) => Maybe<UpdateEnterpriseOwnerOrganizationRolePayload>;
  /**
   * Updates an enterprise's profile.
   */
  updateEnterpriseProfile: (args: {
    /**
     * Parameters for UpdateEnterpriseProfile
     */
    input: UpdateEnterpriseProfileInput;
  }) => Maybe<UpdateEnterpriseProfilePayload>;
  /**
   * Sets whether repository projects are enabled for a enterprise.
   */
  updateEnterpriseRepositoryProjectsSetting: (args: {
    /**
     * Parameters for UpdateEnterpriseRepositoryProjectsSetting
     */
    input: UpdateEnterpriseRepositoryProjectsSettingInput;
  }) => Maybe<UpdateEnterpriseRepositoryProjectsSettingPayload>;
  /**
   * Sets whether team discussions are enabled for an enterprise.
   */
  updateEnterpriseTeamDiscussionsSetting: (args: {
    /**
     * Parameters for UpdateEnterpriseTeamDiscussionsSetting
     */
    input: UpdateEnterpriseTeamDiscussionsSettingInput;
  }) => Maybe<UpdateEnterpriseTeamDiscussionsSettingPayload>;
  /**
   * Sets whether two factor authentication is required for all users in an enterprise.
   */
  updateEnterpriseTwoFactorAuthenticationRequiredSetting: (args: {
    /**
     * Parameters for UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
     */
    input: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput;
  }) => Maybe<UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload>;
  /**
   * Updates an environment.
   */
  updateEnvironment: (args: {
    /**
     * Parameters for UpdateEnvironment
     */
    input: UpdateEnvironmentInput;
  }) => Maybe<UpdateEnvironmentPayload>;
  /**
   * Sets whether an IP allow list is enabled on an owner.
   */
  updateIpAllowListEnabledSetting: (args: {
    /**
     * Parameters for UpdateIpAllowListEnabledSetting
     */
    input: UpdateIpAllowListEnabledSettingInput;
  }) => Maybe<UpdateIpAllowListEnabledSettingPayload>;
  /**
   * Updates an IP allow list entry.
   */
  updateIpAllowListEntry: (args: {
    /**
     * Parameters for UpdateIpAllowListEntry
     */
    input: UpdateIpAllowListEntryInput;
  }) => Maybe<UpdateIpAllowListEntryPayload>;
  /**
   * Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner.
   */
  updateIpAllowListForInstalledAppsEnabledSetting: (args: {
    /**
     * Parameters for UpdateIpAllowListForInstalledAppsEnabledSetting
     */
    input: UpdateIpAllowListForInstalledAppsEnabledSettingInput;
  }) => Maybe<UpdateIpAllowListForInstalledAppsEnabledSettingPayload>;
  /**
   * Updates an Issue.
   */
  updateIssue: (args: {
    /**
     * Parameters for UpdateIssue
     */
    input: UpdateIssueInput;
  }) => Maybe<UpdateIssuePayload>;
  /**
   * Updates an IssueComment object.
   */
  updateIssueComment: (args: {
    /**
     * Parameters for UpdateIssueComment
     */
    input: UpdateIssueCommentInput;
  }) => Maybe<UpdateIssueCommentPayload>;
  /**
   * Update the setting to restrict notifications to only verified or approved domains available to an owner.
   */
  updateNotificationRestrictionSetting: (args: {
    /**
     * Parameters for UpdateNotificationRestrictionSetting
     */
    input: UpdateNotificationRestrictionSettingInput;
  }) => Maybe<UpdateNotificationRestrictionSettingPayload>;
  /**
   * Sets whether private repository forks are enabled for an organization.
   */
  updateOrganizationAllowPrivateRepositoryForkingSetting: (args: {
    /**
     * Parameters for UpdateOrganizationAllowPrivateRepositoryForkingSetting
     */
    input: UpdateOrganizationAllowPrivateRepositoryForkingSettingInput;
  }) => Maybe<UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload>;
  /**
   * Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
   */
  updateOrganizationWebCommitSignoffSetting: (args: {
    /**
     * Parameters for UpdateOrganizationWebCommitSignoffSetting
     */
    input: UpdateOrganizationWebCommitSignoffSettingInput;
  }) => Maybe<UpdateOrganizationWebCommitSignoffSettingPayload>;
  /**
   * Updates an existing project.
   */
  updateProject: (args: {
    /**
     * Parameters for UpdateProject
     */
    input: UpdateProjectInput;
  }) => Maybe<UpdateProjectPayload>;
  /**
   * Updates an existing project card.
   */
  updateProjectCard: (args: {
    /**
     * Parameters for UpdateProjectCard
     */
    input: UpdateProjectCardInput;
  }) => Maybe<UpdateProjectCardPayload>;
  /**
   * Updates an existing project column.
   */
  updateProjectColumn: (args: {
    /**
     * Parameters for UpdateProjectColumn
     */
    input: UpdateProjectColumnInput;
  }) => Maybe<UpdateProjectColumnPayload>;
  /**
   * Updates an existing project (beta).
   */
  updateProjectV2: (args: {
    /**
     * Parameters for UpdateProjectV2
     */
    input: UpdateProjectV2Input;
  }) => Maybe<UpdateProjectV2Payload>;
  /**
   * Update the collaborators on a team or a project
   */
  updateProjectV2Collaborators: (args: {
    /**
     * Parameters for UpdateProjectV2Collaborators
     */
    input: UpdateProjectV2CollaboratorsInput;
  }) => Maybe<UpdateProjectV2CollaboratorsPayload>;
  /**
   * Updates a draft issue within a Project.
   */
  updateProjectV2DraftIssue: (args: {
    /**
     * Parameters for UpdateProjectV2DraftIssue
     */
    input: UpdateProjectV2DraftIssueInput;
  }) => Maybe<UpdateProjectV2DraftIssuePayload>;
  /**
   * This mutation updates the value of a field for an item in a Project. Currently only single-select, text, number, date, and iteration fields are supported.
   */
  updateProjectV2ItemFieldValue: (args: {
    /**
     * Parameters for UpdateProjectV2ItemFieldValue
     */
    input: UpdateProjectV2ItemFieldValueInput;
  }) => Maybe<UpdateProjectV2ItemFieldValuePayload>;
  /**
   * This mutation updates the position of the item in the project, where the position represents the priority of an item.
   */
  updateProjectV2ItemPosition: (args: {
    /**
     * Parameters for UpdateProjectV2ItemPosition
     */
    input: UpdateProjectV2ItemPositionInput;
  }) => Maybe<UpdateProjectV2ItemPositionPayload>;
  /**
   * Update a pull request
   */
  updatePullRequest: (args: {
    /**
     * Parameters for UpdatePullRequest
     */
    input: UpdatePullRequestInput;
  }) => Maybe<UpdatePullRequestPayload>;
  /**
   * Merge or Rebase HEAD from upstream branch into pull request branch
   */
  updatePullRequestBranch: (args: {
    /**
     * Parameters for UpdatePullRequestBranch
     */
    input: UpdatePullRequestBranchInput;
  }) => Maybe<UpdatePullRequestBranchPayload>;
  /**
   * Updates the body of a pull request review.
   */
  updatePullRequestReview: (args: {
    /**
     * Parameters for UpdatePullRequestReview
     */
    input: UpdatePullRequestReviewInput;
  }) => Maybe<UpdatePullRequestReviewPayload>;
  /**
   * Updates a pull request review comment.
   */
  updatePullRequestReviewComment: (args: {
    /**
     * Parameters for UpdatePullRequestReviewComment
     */
    input: UpdatePullRequestReviewCommentInput;
  }) => Maybe<UpdatePullRequestReviewCommentPayload>;
  /**
   * Update a Git Ref.
   */
  updateRef: (args: {
    /**
     * Parameters for UpdateRef
     */
    input: UpdateRefInput;
  }) => Maybe<UpdateRefPayload>;
  /**
   * Update information about a repository.
   */
  updateRepository: (args: {
    /**
     * Parameters for UpdateRepository
     */
    input: UpdateRepositoryInput;
  }) => Maybe<UpdateRepositoryPayload>;
  /**
   * Update a repository ruleset
   */
  updateRepositoryRuleset: (args: {
    /**
     * Parameters for UpdateRepositoryRuleset
     */
    input: UpdateRepositoryRulesetInput;
  }) => Maybe<UpdateRepositoryRulesetPayload>;
  /**
   * Sets whether contributors are required to sign off on web-based commits for a repository.
   */
  updateRepositoryWebCommitSignoffSetting: (args: {
    /**
     * Parameters for UpdateRepositoryWebCommitSignoffSetting
     */
    input: UpdateRepositoryWebCommitSignoffSettingInput;
  }) => Maybe<UpdateRepositoryWebCommitSignoffSettingPayload>;
  /**
   * Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
   */
  updateSponsorshipPreferences: (args: {
    /**
     * Parameters for UpdateSponsorshipPreferences
     */
    input: UpdateSponsorshipPreferencesInput;
  }) => Maybe<UpdateSponsorshipPreferencesPayload>;
  /**
   * Updates the state for subscribable subjects.
   */
  updateSubscription: (args: {
    /**
     * Parameters for UpdateSubscription
     */
    input: UpdateSubscriptionInput;
  }) => Maybe<UpdateSubscriptionPayload>;
  /**
   * Updates a team discussion.
   */
  updateTeamDiscussion: (args: {
    /**
     * Parameters for UpdateTeamDiscussion
     */
    input: UpdateTeamDiscussionInput;
  }) => Maybe<UpdateTeamDiscussionPayload>;
  /**
   * Updates a discussion comment.
   */
  updateTeamDiscussionComment: (args: {
    /**
     * Parameters for UpdateTeamDiscussionComment
     */
    input: UpdateTeamDiscussionCommentInput;
  }) => Maybe<UpdateTeamDiscussionCommentPayload>;
  /**
   * Update team repository.
   */
  updateTeamsRepository: (args: {
    /**
     * Parameters for UpdateTeamsRepository
     */
    input: UpdateTeamsRepositoryInput;
  }) => Maybe<UpdateTeamsRepositoryPayload>;
  /**
   * Replaces the repository's topics with the given topics.
   */
  updateTopics: (args: {
    /**
     * Parameters for UpdateTopics
     */
    input: UpdateTopicsInput;
  }) => Maybe<UpdateTopicsPayload>;
  /**
   * Verify that a verifiable domain has the expected DNS record.
   */
  verifyVerifiableDomain: (args: {
    /**
     * Parameters for VerifyVerifiableDomain
     */
    input: VerifyVerifiableDomainInput;
  }) => Maybe<VerifyVerifiableDomainPayload>;
}

/**
 * The query root of GitHub's GraphQL interface.
 */
export interface Query {
  __typename?: "Query";
  /**
   * Look up a code of conduct by its key
   */
  codeOfConduct: (args: {
    /**
     * The code of conduct's key
     */
    key: Scalars["String"];
  }) => Maybe<CodeOfConduct>;
  /**
   * Look up a code of conduct by its key
   */
  codesOfConduct?: Maybe<Array<Maybe<CodeOfConduct>>>;
  /**
   * Look up an enterprise by URL slug.
   */
  enterprise: (args: {
    /**
     * The enterprise invitation token.
     */
    invitationToken?: Maybe<Scalars["String"]>;
    /**
     * The enterprise URL slug.
     */
    slug: Scalars["String"];
  }) => Maybe<Enterprise>;
  /**
   * Look up a pending enterprise administrator invitation by invitee, enterprise and role.
   */
  enterpriseAdministratorInvitation: (args: {
    /**
     * The slug of the enterprise the user was invited to join.
     */
    enterpriseSlug: Scalars["String"];
    /**
     * The role for the business member invitation.
     */
    role: EnterpriseAdministratorRole;
    /**
     * The login of the user invited to join the business.
     */
    userLogin: Scalars["String"];
  }) => Maybe<EnterpriseAdministratorInvitation>;
  /**
   * Look up a pending enterprise administrator invitation by invitation token.
   */
  enterpriseAdministratorInvitationByToken: (args: {
    /**
     * The invitation token sent with the invitation email.
     */
    invitationToken: Scalars["String"];
  }) => Maybe<EnterpriseAdministratorInvitation>;
  /**
   * Look up an open source license by its key
   */
  license: (args: {
    /**
     * The license's downcased SPDX ID
     */
    key: Scalars["String"];
  }) => Maybe<License>;
  /**
   * Return a list of known open source licenses
   */
  licenses: Array<Maybe<License>>;
  /**
   * Get alphabetically sorted list of Marketplace categories
   */
  marketplaceCategories: (args?: {
    /**
     * Exclude categories with no listings.
     */
    excludeEmpty?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns top level categories only, excluding any subcategories.
     */
    excludeSubcategories?: Maybe<Scalars["Boolean"]>;
    /**
     * Return only the specified categories.
     */
    includeCategories?: Maybe<Array<Scalars["String"]>>;
  }) => Array<MarketplaceCategory>;
  /**
   * Look up a Marketplace category by its slug.
   */
  marketplaceCategory: (args: {
    /**
     * The URL slug of the category.
     */
    slug: Scalars["String"];
    /**
     * Also check topic aliases for the category slug
     */
    useTopicAliases?: Maybe<Scalars["Boolean"]>;
  }) => Maybe<MarketplaceCategory>;
  /**
   * Look up a single Marketplace listing
   */
  marketplaceListing: (args: {
    /**
     * Select the listing that matches this slug. It's the short name of the listing used in its URL.
     */
    slug: Scalars["String"];
  }) => Maybe<MarketplaceListing>;
  /**
   * Look up Marketplace listings
   */
  marketplaceListings: (args?: {
    /**
     * Select listings that can be administered by the specified user.
     */
    adminId?: Maybe<Scalars["ID"]>;
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Select listings visible to the viewer even if they are not approved. If omitted or
     * false, only approved listings will be returned.
     */
    allStates?: Maybe<Scalars["Boolean"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Select only listings with the given category.
     */
    categorySlug?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Select listings for products owned by the specified organization.
     */
    organizationId?: Maybe<Scalars["ID"]>;
    /**
     * Select only listings where the primary category matches the given category slug.
     * @defaultValue `false`
     */
    primaryCategoryOnly?: Maybe<Scalars["Boolean"]>;
    /**
     * Select the listings with these slugs, if they are visible to the viewer.
     */
    slugs?: Maybe<Array<Maybe<Scalars["String"]>>>;
    /**
     * Also check topic aliases for the category slug
     */
    useTopicAliases?: Maybe<Scalars["Boolean"]>;
    /**
     * Select listings to which user has admin access. If omitted, listings visible to the
     * viewer are returned.
     */
    viewerCanAdmin?: Maybe<Scalars["Boolean"]>;
    /**
     * Select only listings that offer a free trial.
     * @defaultValue `false`
     */
    withFreeTrialsOnly?: Maybe<Scalars["Boolean"]>;
  }) => MarketplaceListingConnection;
  /**
   * Return information about the GitHub instance
   */
  meta: GitHubMetadata;
  /**
   * Fetches an object given its ID.
   */
  node: (args: {
    /**
     * ID of the object.
     */
    id: Scalars["ID"];
  }) => Maybe<Node>;
  /**
   * Lookup nodes by a list of IDs.
   */
  nodes: (args: {
    /**
     * The list of node IDs.
     */
    ids: Array<Scalars["ID"]>;
  }) => Array<Maybe<Node>>;
  /**
   * Lookup a organization by login.
   */
  organization: (args: {
    /**
     * The organization's login.
     */
    login: Scalars["String"];
  }) => Maybe<Organization>;
  /**
   * The client's rate limit information.
   */
  rateLimit: (args?: {
    /**
     * If true, calculate the cost for the query without evaluating it
     * @defaultValue `false`
     */
    dryRun?: Maybe<Scalars["Boolean"]>;
  }) => Maybe<RateLimit>;
  /**
   * Workaround for re-exposing the root query object. (Refer to https://github.com/facebook/relay/issues/112 for more information.)
   */
  relay: Query;
  /**
   * Lookup a given repository by the owner and repository name.
   */
  repository: (args: {
    /**
     * Follow repository renames. If disabled, a repository referenced by its old name will return an error.
     * @defaultValue `true`
     */
    followRenames?: Maybe<Scalars["Boolean"]>;
    /**
     * The name of the repository
     */
    name: Scalars["String"];
    /**
     * The login field of a user or organization
     */
    owner: Scalars["String"];
  }) => Maybe<Repository>;
  /**
   * Lookup a repository owner (ie. either a User or an Organization) by login.
   */
  repositoryOwner: (args: {
    /**
     * The username to lookup the owner by.
     */
    login: Scalars["String"];
  }) => Maybe<RepositoryOwner>;
  /**
   * Lookup resource by a URL.
   */
  resource: (args: {
    /**
     * The URL.
     */
    url: Scalars["URI"];
  }) => Maybe<UniformResourceLocatable>;
  /**
   * Perform a search across resources, returning a maximum of 1,000 results.
   */
  search: (args: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * The search string to look for.
     */
    query: Scalars["String"];
    /**
     * The types of search items to search within.
     */
    type: SearchType;
  }) => SearchResultItemConnection;
  /**
   * GitHub Security Advisories
   */
  securityAdvisories: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * A list of classifications to filter advisories by.
     */
    classifications?: Maybe<Array<SecurityAdvisoryClassification>>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Filter advisories by identifier, e.g. GHSA or CVE.
     */
    identifier?: Maybe<SecurityAdvisoryIdentifierFilter>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for the returned topics.
     * @defaultValue `{"direction":"DESC","field":"UPDATED_AT"}`
     */
    orderBy?: Maybe<SecurityAdvisoryOrder>;
    /**
     * Filter advisories to those published since a time in the past.
     */
    publishedSince?: Maybe<Scalars["DateTime"]>;
    /**
     * Filter advisories to those updated since a time in the past.
     */
    updatedSince?: Maybe<Scalars["DateTime"]>;
  }) => SecurityAdvisoryConnection;
  /**
   * Fetch a Security Advisory by its GHSA ID
   */
  securityAdvisory: (args: {
    /**
     * GitHub Security Advisory ID.
     */
    ghsaId: Scalars["String"];
  }) => Maybe<SecurityAdvisory>;
  /**
   * Software Vulnerabilities documented by GitHub Security Advisories
   */
  securityVulnerabilities: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * A list of advisory classifications to filter vulnerabilities by.
     */
    classifications?: Maybe<Array<SecurityAdvisoryClassification>>;
    /**
     * An ecosystem to filter vulnerabilities by.
     */
    ecosystem?: Maybe<SecurityAdvisoryEcosystem>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Ordering options for the returned topics.
     * @defaultValue `{"direction":"DESC","field":"UPDATED_AT"}`
     */
    orderBy?: Maybe<SecurityVulnerabilityOrder>;
    /**
     * A package name to filter vulnerabilities by.
     */
    package?: Maybe<Scalars["String"]>;
    /**
     * A list of severities to filter vulnerabilities by.
     */
    severities?: Maybe<Array<SecurityAdvisorySeverity>>;
  }) => SecurityVulnerabilityConnection;
  /**
   * Users and organizations who can be sponsored via GitHub Sponsors.
   */
  sponsorables: (args?: {
    /**
     * Returns the elements in the list that come after the specified cursor.
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Returns the elements in the list that come before the specified cursor.
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * Optional filter for which dependencies should be checked for sponsorable owners. Only sponsorable owners of dependencies in this ecosystem will be included. Used when onlyDependencies = true.
     *
     * **Upcoming Change on 2022-07-01 UTC**
     * **Description:** `dependencyEcosystem` will be removed. Use the ecosystem argument instead.
     * **Reason:** The type is switching from SecurityAdvisoryEcosystem to DependencyGraphEcosystem.
     */
    dependencyEcosystem?: Maybe<SecurityAdvisoryEcosystem>;
    /**
     * Optional filter for which dependencies should be checked for sponsorable owners. Only sponsorable owners of dependencies in this ecosystem will be included. Used when onlyDependencies = true.
     */
    ecosystem?: Maybe<DependencyGraphEcosystem>;
    /**
     * Returns the first _n_ elements from the list.
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * Returns the last _n_ elements from the list.
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Whether only sponsorables who own the viewer's dependencies will be returned. Must be authenticated to use. Can check an organization instead for their dependencies owned by sponsorables by passing orgLoginForDependencies.
     * @defaultValue `false`
     */
    onlyDependencies?: Maybe<Scalars["Boolean"]>;
    /**
     * Ordering options for users and organizations returned from the connection.
     * @defaultValue `{"direction":"ASC","field":"LOGIN"}`
     */
    orderBy?: Maybe<SponsorableOrder>;
    /**
     * Optional organization username for whose dependencies should be checked. Used when onlyDependencies = true. Omit to check your own dependencies. If you are not an administrator of the organization, only dependencies from its public repositories will be considered.
     */
    orgLoginForDependencies?: Maybe<Scalars["String"]>;
  }) => SponsorableItemConnection;
  /**
   * Look up a topic by name.
   */
  topic: (args: {
    /**
     * The topic's name.
     */
    name: Scalars["String"];
  }) => Maybe<Topic>;
  /**
   * Lookup a user by login.
   */
  user: (args: {
    /**
     * The user's login.
     */
    login: Scalars["String"];
  }) => Maybe<User>;
  /**
   * The currently authenticated user.
   */
  viewer: User;
}

export interface Subscription {
  __typename?: "Subscription";
}

export interface $Actor {
  Bot?: Bot;
  EnterpriseUserAccount?: EnterpriseUserAccount;
  Mannequin?: Mannequin;
  Organization?: Organization;
  User?: User;
}

export interface $AnnouncementBanner {
  Enterprise?: Enterprise;
  Organization?: Organization;
}

export interface $Assignable {
  Issue?: Issue;
  PullRequest?: PullRequest;
}

export interface $Assignee {
  Bot?: Bot;
  Mannequin?: Mannequin;
  Organization?: Organization;
  User?: User;
}

export interface $AuditEntry {
  MembersCanDeleteReposClearAuditEntry?: MembersCanDeleteReposClearAuditEntry;
  MembersCanDeleteReposDisableAuditEntry?: MembersCanDeleteReposDisableAuditEntry;
  MembersCanDeleteReposEnableAuditEntry?: MembersCanDeleteReposEnableAuditEntry;
  OauthApplicationCreateAuditEntry?: OauthApplicationCreateAuditEntry;
  OrgAddBillingManagerAuditEntry?: OrgAddBillingManagerAuditEntry;
  OrgAddMemberAuditEntry?: OrgAddMemberAuditEntry;
  OrgBlockUserAuditEntry?: OrgBlockUserAuditEntry;
  OrgConfigDisableCollaboratorsOnlyAuditEntry?: OrgConfigDisableCollaboratorsOnlyAuditEntry;
  OrgConfigEnableCollaboratorsOnlyAuditEntry?: OrgConfigEnableCollaboratorsOnlyAuditEntry;
  OrgCreateAuditEntry?: OrgCreateAuditEntry;
  OrgDisableOauthAppRestrictionsAuditEntry?: OrgDisableOauthAppRestrictionsAuditEntry;
  OrgDisableSamlAuditEntry?: OrgDisableSamlAuditEntry;
  OrgDisableTwoFactorRequirementAuditEntry?: OrgDisableTwoFactorRequirementAuditEntry;
  OrgEnableOauthAppRestrictionsAuditEntry?: OrgEnableOauthAppRestrictionsAuditEntry;
  OrgEnableSamlAuditEntry?: OrgEnableSamlAuditEntry;
  OrgEnableTwoFactorRequirementAuditEntry?: OrgEnableTwoFactorRequirementAuditEntry;
  OrgInviteMemberAuditEntry?: OrgInviteMemberAuditEntry;
  OrgInviteToBusinessAuditEntry?: OrgInviteToBusinessAuditEntry;
  OrgOauthAppAccessApprovedAuditEntry?: OrgOauthAppAccessApprovedAuditEntry;
  OrgOauthAppAccessBlockedAuditEntry?: OrgOauthAppAccessBlockedAuditEntry;
  OrgOauthAppAccessDeniedAuditEntry?: OrgOauthAppAccessDeniedAuditEntry;
  OrgOauthAppAccessRequestedAuditEntry?: OrgOauthAppAccessRequestedAuditEntry;
  OrgOauthAppAccessUnblockedAuditEntry?: OrgOauthAppAccessUnblockedAuditEntry;
  OrgRemoveBillingManagerAuditEntry?: OrgRemoveBillingManagerAuditEntry;
  OrgRemoveMemberAuditEntry?: OrgRemoveMemberAuditEntry;
  OrgRemoveOutsideCollaboratorAuditEntry?: OrgRemoveOutsideCollaboratorAuditEntry;
  OrgRestoreMemberAuditEntry?: OrgRestoreMemberAuditEntry;
  OrgUnblockUserAuditEntry?: OrgUnblockUserAuditEntry;
  OrgUpdateDefaultRepositoryPermissionAuditEntry?: OrgUpdateDefaultRepositoryPermissionAuditEntry;
  OrgUpdateMemberAuditEntry?: OrgUpdateMemberAuditEntry;
  OrgUpdateMemberRepositoryCreationPermissionAuditEntry?: OrgUpdateMemberRepositoryCreationPermissionAuditEntry;
  OrgUpdateMemberRepositoryInvitationPermissionAuditEntry?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntry;
  PrivateRepositoryForkingDisableAuditEntry?: PrivateRepositoryForkingDisableAuditEntry;
  PrivateRepositoryForkingEnableAuditEntry?: PrivateRepositoryForkingEnableAuditEntry;
  RepoAccessAuditEntry?: RepoAccessAuditEntry;
  RepoAddMemberAuditEntry?: RepoAddMemberAuditEntry;
  RepoAddTopicAuditEntry?: RepoAddTopicAuditEntry;
  RepoArchivedAuditEntry?: RepoArchivedAuditEntry;
  RepoChangeMergeSettingAuditEntry?: RepoChangeMergeSettingAuditEntry;
  RepoConfigDisableAnonymousGitAccessAuditEntry?: RepoConfigDisableAnonymousGitAccessAuditEntry;
  RepoConfigDisableCollaboratorsOnlyAuditEntry?: RepoConfigDisableCollaboratorsOnlyAuditEntry;
  RepoConfigDisableContributorsOnlyAuditEntry?: RepoConfigDisableContributorsOnlyAuditEntry;
  RepoConfigDisableSockpuppetDisallowedAuditEntry?: RepoConfigDisableSockpuppetDisallowedAuditEntry;
  RepoConfigEnableAnonymousGitAccessAuditEntry?: RepoConfigEnableAnonymousGitAccessAuditEntry;
  RepoConfigEnableCollaboratorsOnlyAuditEntry?: RepoConfigEnableCollaboratorsOnlyAuditEntry;
  RepoConfigEnableContributorsOnlyAuditEntry?: RepoConfigEnableContributorsOnlyAuditEntry;
  RepoConfigEnableSockpuppetDisallowedAuditEntry?: RepoConfigEnableSockpuppetDisallowedAuditEntry;
  RepoConfigLockAnonymousGitAccessAuditEntry?: RepoConfigLockAnonymousGitAccessAuditEntry;
  RepoConfigUnlockAnonymousGitAccessAuditEntry?: RepoConfigUnlockAnonymousGitAccessAuditEntry;
  RepoCreateAuditEntry?: RepoCreateAuditEntry;
  RepoDestroyAuditEntry?: RepoDestroyAuditEntry;
  RepoRemoveMemberAuditEntry?: RepoRemoveMemberAuditEntry;
  RepoRemoveTopicAuditEntry?: RepoRemoveTopicAuditEntry;
  RepositoryVisibilityChangeDisableAuditEntry?: RepositoryVisibilityChangeDisableAuditEntry;
  RepositoryVisibilityChangeEnableAuditEntry?: RepositoryVisibilityChangeEnableAuditEntry;
  TeamAddMemberAuditEntry?: TeamAddMemberAuditEntry;
  TeamAddRepositoryAuditEntry?: TeamAddRepositoryAuditEntry;
  TeamChangeParentTeamAuditEntry?: TeamChangeParentTeamAuditEntry;
  TeamRemoveMemberAuditEntry?: TeamRemoveMemberAuditEntry;
  TeamRemoveRepositoryAuditEntry?: TeamRemoveRepositoryAuditEntry;
}

export interface $AuditEntryActor {
  Bot?: Bot;
  Organization?: Organization;
  User?: User;
}

export interface $BranchActorAllowanceActor {
  App?: App;
  Team?: Team;
  User?: User;
}

export interface $BypassActor {
  App?: App;
  Team?: Team;
}

export interface $Claimable {
  Mannequin?: Mannequin;
  User?: User;
}

export interface $Closable {
  Discussion?: Discussion;
  Issue?: Issue;
  Milestone?: Milestone;
  Project?: Project;
  ProjectV2?: ProjectV2;
  PullRequest?: PullRequest;
}

export interface $Closer {
  Commit?: Commit;
  PullRequest?: PullRequest;
}

export interface $Comment {
  CommitComment?: CommitComment;
  Discussion?: Discussion;
  DiscussionComment?: DiscussionComment;
  GistComment?: GistComment;
  Issue?: Issue;
  IssueComment?: IssueComment;
  PullRequest?: PullRequest;
  PullRequestReview?: PullRequestReview;
  PullRequestReviewComment?: PullRequestReviewComment;
  TeamDiscussion?: TeamDiscussion;
  TeamDiscussionComment?: TeamDiscussionComment;
}

export interface $Contribution {
  CreatedCommitContribution?: CreatedCommitContribution;
  CreatedIssueContribution?: CreatedIssueContribution;
  CreatedPullRequestContribution?: CreatedPullRequestContribution;
  CreatedPullRequestReviewContribution?: CreatedPullRequestReviewContribution;
  CreatedRepositoryContribution?: CreatedRepositoryContribution;
  JoinedGitHubContribution?: JoinedGitHubContribution;
  RestrictedContribution?: RestrictedContribution;
}

export interface $CreatedIssueOrRestrictedContribution {
  CreatedIssueContribution?: CreatedIssueContribution;
  RestrictedContribution?: RestrictedContribution;
}

export interface $CreatedPullRequestOrRestrictedContribution {
  CreatedPullRequestContribution?: CreatedPullRequestContribution;
  RestrictedContribution?: RestrictedContribution;
}

export interface $CreatedRepositoryOrRestrictedContribution {
  CreatedRepositoryContribution?: CreatedRepositoryContribution;
  RestrictedContribution?: RestrictedContribution;
}

export interface $Deletable {
  CommitComment?: CommitComment;
  Discussion?: Discussion;
  DiscussionComment?: DiscussionComment;
  GistComment?: GistComment;
  Issue?: Issue;
  IssueComment?: IssueComment;
  PullRequestReview?: PullRequestReview;
  PullRequestReviewComment?: PullRequestReviewComment;
  TeamDiscussion?: TeamDiscussion;
  TeamDiscussionComment?: TeamDiscussionComment;
}

export interface $DeploymentReviewer {
  Team?: Team;
  User?: User;
}

export interface $EnterpriseAuditEntryData {
  MembersCanDeleteReposClearAuditEntry?: MembersCanDeleteReposClearAuditEntry;
  MembersCanDeleteReposDisableAuditEntry?: MembersCanDeleteReposDisableAuditEntry;
  MembersCanDeleteReposEnableAuditEntry?: MembersCanDeleteReposEnableAuditEntry;
  OrgInviteToBusinessAuditEntry?: OrgInviteToBusinessAuditEntry;
  PrivateRepositoryForkingDisableAuditEntry?: PrivateRepositoryForkingDisableAuditEntry;
  PrivateRepositoryForkingEnableAuditEntry?: PrivateRepositoryForkingEnableAuditEntry;
  RepositoryVisibilityChangeDisableAuditEntry?: RepositoryVisibilityChangeDisableAuditEntry;
  RepositoryVisibilityChangeEnableAuditEntry?: RepositoryVisibilityChangeEnableAuditEntry;
}

export interface $EnterpriseMember {
  EnterpriseUserAccount?: EnterpriseUserAccount;
  User?: User;
}

export interface $GitObject {
  Blob?: Blob;
  Commit?: Commit;
  Tag?: Tag;
  Tree?: Tree;
}

export interface $GitSignature {
  GpgSignature?: GpgSignature;
  SmimeSignature?: SmimeSignature;
  SshSignature?: SshSignature;
  UnknownSignature?: UnknownSignature;
}

export interface $HovercardContext {
  GenericHovercardContext?: GenericHovercardContext;
  OrganizationTeamsHovercardContext?: OrganizationTeamsHovercardContext;
  OrganizationsHovercardContext?: OrganizationsHovercardContext;
  ReviewStatusHovercardContext?: ReviewStatusHovercardContext;
  ViewerHovercardContext?: ViewerHovercardContext;
}

export interface $IpAllowListOwner {
  App?: App;
  Enterprise?: Enterprise;
  Organization?: Organization;
}

export interface $IssueOrPullRequest {
  Issue?: Issue;
  PullRequest?: PullRequest;
}

export interface $IssueTimelineItem {
  AssignedEvent?: AssignedEvent;
  ClosedEvent?: ClosedEvent;
  Commit?: Commit;
  CrossReferencedEvent?: CrossReferencedEvent;
  DemilestonedEvent?: DemilestonedEvent;
  IssueComment?: IssueComment;
  LabeledEvent?: LabeledEvent;
  LockedEvent?: LockedEvent;
  MilestonedEvent?: MilestonedEvent;
  ReferencedEvent?: ReferencedEvent;
  RenamedTitleEvent?: RenamedTitleEvent;
  ReopenedEvent?: ReopenedEvent;
  SubscribedEvent?: SubscribedEvent;
  TransferredEvent?: TransferredEvent;
  UnassignedEvent?: UnassignedEvent;
  UnlabeledEvent?: UnlabeledEvent;
  UnlockedEvent?: UnlockedEvent;
  UnsubscribedEvent?: UnsubscribedEvent;
  UserBlockedEvent?: UserBlockedEvent;
}

export interface $IssueTimelineItems {
  AddedToProjectEvent?: AddedToProjectEvent;
  AssignedEvent?: AssignedEvent;
  ClosedEvent?: ClosedEvent;
  CommentDeletedEvent?: CommentDeletedEvent;
  ConnectedEvent?: ConnectedEvent;
  ConvertedNoteToIssueEvent?: ConvertedNoteToIssueEvent;
  ConvertedToDiscussionEvent?: ConvertedToDiscussionEvent;
  CrossReferencedEvent?: CrossReferencedEvent;
  DemilestonedEvent?: DemilestonedEvent;
  DisconnectedEvent?: DisconnectedEvent;
  IssueComment?: IssueComment;
  LabeledEvent?: LabeledEvent;
  LockedEvent?: LockedEvent;
  MarkedAsDuplicateEvent?: MarkedAsDuplicateEvent;
  MentionedEvent?: MentionedEvent;
  MilestonedEvent?: MilestonedEvent;
  MovedColumnsInProjectEvent?: MovedColumnsInProjectEvent;
  PinnedEvent?: PinnedEvent;
  ReferencedEvent?: ReferencedEvent;
  RemovedFromProjectEvent?: RemovedFromProjectEvent;
  RenamedTitleEvent?: RenamedTitleEvent;
  ReopenedEvent?: ReopenedEvent;
  SubscribedEvent?: SubscribedEvent;
  TransferredEvent?: TransferredEvent;
  UnassignedEvent?: UnassignedEvent;
  UnlabeledEvent?: UnlabeledEvent;
  UnlockedEvent?: UnlockedEvent;
  UnmarkedAsDuplicateEvent?: UnmarkedAsDuplicateEvent;
  UnpinnedEvent?: UnpinnedEvent;
  UnsubscribedEvent?: UnsubscribedEvent;
  UserBlockedEvent?: UserBlockedEvent;
}

export interface $Labelable {
  Discussion?: Discussion;
  Issue?: Issue;
  PullRequest?: PullRequest;
}

export interface $Lockable {
  Discussion?: Discussion;
  Issue?: Issue;
  PullRequest?: PullRequest;
}

export interface $MemberStatusable {
  Organization?: Organization;
  Team?: Team;
}

export interface $Migration {
  RepositoryMigration?: RepositoryMigration;
}

export interface $MilestoneItem {
  Issue?: Issue;
  PullRequest?: PullRequest;
}

export interface $Minimizable {
  CommitComment?: CommitComment;
  DiscussionComment?: DiscussionComment;
  GistComment?: GistComment;
  IssueComment?: IssueComment;
  PullRequestReview?: PullRequestReview;
  PullRequestReviewComment?: PullRequestReviewComment;
}

export interface $Node {
  AddedToMergeQueueEvent?: AddedToMergeQueueEvent;
  AddedToProjectEvent?: AddedToProjectEvent;
  App?: App;
  AssignedEvent?: AssignedEvent;
  AutoMergeDisabledEvent?: AutoMergeDisabledEvent;
  AutoMergeEnabledEvent?: AutoMergeEnabledEvent;
  AutoRebaseEnabledEvent?: AutoRebaseEnabledEvent;
  AutoSquashEnabledEvent?: AutoSquashEnabledEvent;
  AutomaticBaseChangeFailedEvent?: AutomaticBaseChangeFailedEvent;
  AutomaticBaseChangeSucceededEvent?: AutomaticBaseChangeSucceededEvent;
  BaseRefChangedEvent?: BaseRefChangedEvent;
  BaseRefDeletedEvent?: BaseRefDeletedEvent;
  BaseRefForcePushedEvent?: BaseRefForcePushedEvent;
  Blob?: Blob;
  Bot?: Bot;
  BranchProtectionRule?: BranchProtectionRule;
  BypassForcePushAllowance?: BypassForcePushAllowance;
  BypassPullRequestAllowance?: BypassPullRequestAllowance;
  CWE?: CWE;
  CheckRun?: CheckRun;
  CheckSuite?: CheckSuite;
  ClosedEvent?: ClosedEvent;
  CodeOfConduct?: CodeOfConduct;
  CommentDeletedEvent?: CommentDeletedEvent;
  Commit?: Commit;
  CommitComment?: CommitComment;
  CommitCommentThread?: CommitCommentThread;
  Comparison?: Comparison;
  ConnectedEvent?: ConnectedEvent;
  ConvertToDraftEvent?: ConvertToDraftEvent;
  ConvertedNoteToIssueEvent?: ConvertedNoteToIssueEvent;
  ConvertedToDiscussionEvent?: ConvertedToDiscussionEvent;
  CrossReferencedEvent?: CrossReferencedEvent;
  DemilestonedEvent?: DemilestonedEvent;
  DeployKey?: DeployKey;
  DeployedEvent?: DeployedEvent;
  Deployment?: Deployment;
  DeploymentEnvironmentChangedEvent?: DeploymentEnvironmentChangedEvent;
  DeploymentReview?: DeploymentReview;
  DeploymentStatus?: DeploymentStatus;
  DisconnectedEvent?: DisconnectedEvent;
  Discussion?: Discussion;
  DiscussionCategory?: DiscussionCategory;
  DiscussionComment?: DiscussionComment;
  DiscussionPoll?: DiscussionPoll;
  DiscussionPollOption?: DiscussionPollOption;
  DraftIssue?: DraftIssue;
  Enterprise?: Enterprise;
  EnterpriseAdministratorInvitation?: EnterpriseAdministratorInvitation;
  EnterpriseIdentityProvider?: EnterpriseIdentityProvider;
  EnterpriseRepositoryInfo?: EnterpriseRepositoryInfo;
  EnterpriseServerInstallation?: EnterpriseServerInstallation;
  EnterpriseServerUserAccount?: EnterpriseServerUserAccount;
  EnterpriseServerUserAccountEmail?: EnterpriseServerUserAccountEmail;
  EnterpriseServerUserAccountsUpload?: EnterpriseServerUserAccountsUpload;
  EnterpriseUserAccount?: EnterpriseUserAccount;
  Environment?: Environment;
  ExternalIdentity?: ExternalIdentity;
  Gist?: Gist;
  GistComment?: GistComment;
  HeadRefDeletedEvent?: HeadRefDeletedEvent;
  HeadRefForcePushedEvent?: HeadRefForcePushedEvent;
  HeadRefRestoredEvent?: HeadRefRestoredEvent;
  IpAllowListEntry?: IpAllowListEntry;
  Issue?: Issue;
  IssueComment?: IssueComment;
  Label?: Label;
  LabeledEvent?: LabeledEvent;
  Language?: Language;
  License?: License;
  LinkedBranch?: LinkedBranch;
  LockedEvent?: LockedEvent;
  Mannequin?: Mannequin;
  MarkedAsDuplicateEvent?: MarkedAsDuplicateEvent;
  MarketplaceCategory?: MarketplaceCategory;
  MarketplaceListing?: MarketplaceListing;
  MembersCanDeleteReposClearAuditEntry?: MembersCanDeleteReposClearAuditEntry;
  MembersCanDeleteReposDisableAuditEntry?: MembersCanDeleteReposDisableAuditEntry;
  MembersCanDeleteReposEnableAuditEntry?: MembersCanDeleteReposEnableAuditEntry;
  MentionedEvent?: MentionedEvent;
  MergeQueue?: MergeQueue;
  MergeQueueEntry?: MergeQueueEntry;
  MergedEvent?: MergedEvent;
  MigrationSource?: MigrationSource;
  Milestone?: Milestone;
  MilestonedEvent?: MilestonedEvent;
  MovedColumnsInProjectEvent?: MovedColumnsInProjectEvent;
  NotificationThread?: NotificationThread;
  OIDCProvider?: OIDCProvider;
  OauthApplicationCreateAuditEntry?: OauthApplicationCreateAuditEntry;
  OrgAddBillingManagerAuditEntry?: OrgAddBillingManagerAuditEntry;
  OrgAddMemberAuditEntry?: OrgAddMemberAuditEntry;
  OrgBlockUserAuditEntry?: OrgBlockUserAuditEntry;
  OrgConfigDisableCollaboratorsOnlyAuditEntry?: OrgConfigDisableCollaboratorsOnlyAuditEntry;
  OrgConfigEnableCollaboratorsOnlyAuditEntry?: OrgConfigEnableCollaboratorsOnlyAuditEntry;
  OrgCreateAuditEntry?: OrgCreateAuditEntry;
  OrgDisableOauthAppRestrictionsAuditEntry?: OrgDisableOauthAppRestrictionsAuditEntry;
  OrgDisableSamlAuditEntry?: OrgDisableSamlAuditEntry;
  OrgDisableTwoFactorRequirementAuditEntry?: OrgDisableTwoFactorRequirementAuditEntry;
  OrgEnableOauthAppRestrictionsAuditEntry?: OrgEnableOauthAppRestrictionsAuditEntry;
  OrgEnableSamlAuditEntry?: OrgEnableSamlAuditEntry;
  OrgEnableTwoFactorRequirementAuditEntry?: OrgEnableTwoFactorRequirementAuditEntry;
  OrgInviteMemberAuditEntry?: OrgInviteMemberAuditEntry;
  OrgInviteToBusinessAuditEntry?: OrgInviteToBusinessAuditEntry;
  OrgOauthAppAccessApprovedAuditEntry?: OrgOauthAppAccessApprovedAuditEntry;
  OrgOauthAppAccessBlockedAuditEntry?: OrgOauthAppAccessBlockedAuditEntry;
  OrgOauthAppAccessDeniedAuditEntry?: OrgOauthAppAccessDeniedAuditEntry;
  OrgOauthAppAccessRequestedAuditEntry?: OrgOauthAppAccessRequestedAuditEntry;
  OrgOauthAppAccessUnblockedAuditEntry?: OrgOauthAppAccessUnblockedAuditEntry;
  OrgRemoveBillingManagerAuditEntry?: OrgRemoveBillingManagerAuditEntry;
  OrgRemoveMemberAuditEntry?: OrgRemoveMemberAuditEntry;
  OrgRemoveOutsideCollaboratorAuditEntry?: OrgRemoveOutsideCollaboratorAuditEntry;
  OrgRestoreMemberAuditEntry?: OrgRestoreMemberAuditEntry;
  OrgUnblockUserAuditEntry?: OrgUnblockUserAuditEntry;
  OrgUpdateDefaultRepositoryPermissionAuditEntry?: OrgUpdateDefaultRepositoryPermissionAuditEntry;
  OrgUpdateMemberAuditEntry?: OrgUpdateMemberAuditEntry;
  OrgUpdateMemberRepositoryCreationPermissionAuditEntry?: OrgUpdateMemberRepositoryCreationPermissionAuditEntry;
  OrgUpdateMemberRepositoryInvitationPermissionAuditEntry?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntry;
  Organization?: Organization;
  OrganizationIdentityProvider?: OrganizationIdentityProvider;
  OrganizationInvitation?: OrganizationInvitation;
  OrganizationMigration?: OrganizationMigration;
  Package?: Package;
  PackageFile?: PackageFile;
  PackageTag?: PackageTag;
  PackageVersion?: PackageVersion;
  PinnedDiscussion?: PinnedDiscussion;
  PinnedEvent?: PinnedEvent;
  PinnedIssue?: PinnedIssue;
  PrivateRepositoryForkingDisableAuditEntry?: PrivateRepositoryForkingDisableAuditEntry;
  PrivateRepositoryForkingEnableAuditEntry?: PrivateRepositoryForkingEnableAuditEntry;
  Project?: Project;
  ProjectCard?: ProjectCard;
  ProjectColumn?: ProjectColumn;
  ProjectV2?: ProjectV2;
  ProjectV2Field?: ProjectV2Field;
  ProjectV2Item?: ProjectV2Item;
  ProjectV2ItemFieldDateValue?: ProjectV2ItemFieldDateValue;
  ProjectV2ItemFieldIterationValue?: ProjectV2ItemFieldIterationValue;
  ProjectV2ItemFieldNumberValue?: ProjectV2ItemFieldNumberValue;
  ProjectV2ItemFieldSingleSelectValue?: ProjectV2ItemFieldSingleSelectValue;
  ProjectV2ItemFieldTextValue?: ProjectV2ItemFieldTextValue;
  ProjectV2IterationField?: ProjectV2IterationField;
  ProjectV2SingleSelectField?: ProjectV2SingleSelectField;
  ProjectV2View?: ProjectV2View;
  ProjectV2Workflow?: ProjectV2Workflow;
  PublicKey?: PublicKey;
  PullRequest?: PullRequest;
  PullRequestCommit?: PullRequestCommit;
  PullRequestCommitCommentThread?: PullRequestCommitCommentThread;
  PullRequestReview?: PullRequestReview;
  PullRequestReviewComment?: PullRequestReviewComment;
  PullRequestReviewThread?: PullRequestReviewThread;
  PullRequestThread?: PullRequestThread;
  Push?: Push;
  PushAllowance?: PushAllowance;
  Reaction?: Reaction;
  ReadyForReviewEvent?: ReadyForReviewEvent;
  Ref?: Ref;
  ReferencedEvent?: ReferencedEvent;
  Release?: Release;
  ReleaseAsset?: ReleaseAsset;
  RemovedFromMergeQueueEvent?: RemovedFromMergeQueueEvent;
  RemovedFromProjectEvent?: RemovedFromProjectEvent;
  RenamedTitleEvent?: RenamedTitleEvent;
  ReopenedEvent?: ReopenedEvent;
  RepoAccessAuditEntry?: RepoAccessAuditEntry;
  RepoAddMemberAuditEntry?: RepoAddMemberAuditEntry;
  RepoAddTopicAuditEntry?: RepoAddTopicAuditEntry;
  RepoArchivedAuditEntry?: RepoArchivedAuditEntry;
  RepoChangeMergeSettingAuditEntry?: RepoChangeMergeSettingAuditEntry;
  RepoConfigDisableAnonymousGitAccessAuditEntry?: RepoConfigDisableAnonymousGitAccessAuditEntry;
  RepoConfigDisableCollaboratorsOnlyAuditEntry?: RepoConfigDisableCollaboratorsOnlyAuditEntry;
  RepoConfigDisableContributorsOnlyAuditEntry?: RepoConfigDisableContributorsOnlyAuditEntry;
  RepoConfigDisableSockpuppetDisallowedAuditEntry?: RepoConfigDisableSockpuppetDisallowedAuditEntry;
  RepoConfigEnableAnonymousGitAccessAuditEntry?: RepoConfigEnableAnonymousGitAccessAuditEntry;
  RepoConfigEnableCollaboratorsOnlyAuditEntry?: RepoConfigEnableCollaboratorsOnlyAuditEntry;
  RepoConfigEnableContributorsOnlyAuditEntry?: RepoConfigEnableContributorsOnlyAuditEntry;
  RepoConfigEnableSockpuppetDisallowedAuditEntry?: RepoConfigEnableSockpuppetDisallowedAuditEntry;
  RepoConfigLockAnonymousGitAccessAuditEntry?: RepoConfigLockAnonymousGitAccessAuditEntry;
  RepoConfigUnlockAnonymousGitAccessAuditEntry?: RepoConfigUnlockAnonymousGitAccessAuditEntry;
  RepoCreateAuditEntry?: RepoCreateAuditEntry;
  RepoDestroyAuditEntry?: RepoDestroyAuditEntry;
  RepoRemoveMemberAuditEntry?: RepoRemoveMemberAuditEntry;
  RepoRemoveTopicAuditEntry?: RepoRemoveTopicAuditEntry;
  Repository?: Repository;
  RepositoryDependabotAlertsThread?: RepositoryDependabotAlertsThread;
  RepositoryInvitation?: RepositoryInvitation;
  RepositoryMigration?: RepositoryMigration;
  RepositoryRule?: RepositoryRule;
  RepositoryRuleset?: RepositoryRuleset;
  RepositoryRulesetBypassActor?: RepositoryRulesetBypassActor;
  RepositoryTopic?: RepositoryTopic;
  RepositoryVisibilityChangeDisableAuditEntry?: RepositoryVisibilityChangeDisableAuditEntry;
  RepositoryVisibilityChangeEnableAuditEntry?: RepositoryVisibilityChangeEnableAuditEntry;
  RepositoryVulnerabilityAlert?: RepositoryVulnerabilityAlert;
  ReviewDismissalAllowance?: ReviewDismissalAllowance;
  ReviewDismissedEvent?: ReviewDismissedEvent;
  ReviewRequest?: ReviewRequest;
  ReviewRequestRemovedEvent?: ReviewRequestRemovedEvent;
  ReviewRequestedEvent?: ReviewRequestedEvent;
  SavedReply?: SavedReply;
  SecurityAdvisory?: SecurityAdvisory;
  SponsorsActivity?: SponsorsActivity;
  SponsorsListing?: SponsorsListing;
  SponsorsListingFeaturedItem?: SponsorsListingFeaturedItem;
  SponsorsTier?: SponsorsTier;
  Sponsorship?: Sponsorship;
  SponsorshipNewsletter?: SponsorshipNewsletter;
  Status?: Status;
  StatusCheckRollup?: StatusCheckRollup;
  StatusContext?: StatusContext;
  SubscribedEvent?: SubscribedEvent;
  Tag?: Tag;
  Team?: Team;
  TeamAddMemberAuditEntry?: TeamAddMemberAuditEntry;
  TeamAddRepositoryAuditEntry?: TeamAddRepositoryAuditEntry;
  TeamChangeParentTeamAuditEntry?: TeamChangeParentTeamAuditEntry;
  TeamDiscussion?: TeamDiscussion;
  TeamDiscussionComment?: TeamDiscussionComment;
  TeamRemoveMemberAuditEntry?: TeamRemoveMemberAuditEntry;
  TeamRemoveRepositoryAuditEntry?: TeamRemoveRepositoryAuditEntry;
  Topic?: Topic;
  TransferredEvent?: TransferredEvent;
  Tree?: Tree;
  UnassignedEvent?: UnassignedEvent;
  UnlabeledEvent?: UnlabeledEvent;
  UnlockedEvent?: UnlockedEvent;
  UnmarkedAsDuplicateEvent?: UnmarkedAsDuplicateEvent;
  UnpinnedEvent?: UnpinnedEvent;
  UnsubscribedEvent?: UnsubscribedEvent;
  User?: User;
  UserBlockedEvent?: UserBlockedEvent;
  UserContentEdit?: UserContentEdit;
  UserStatus?: UserStatus;
  VerifiableDomain?: VerifiableDomain;
  Workflow?: Workflow;
  WorkflowRun?: WorkflowRun;
  WorkflowRunFile?: WorkflowRunFile;
}

export interface $NotificationsList {
  Organization?: Organization;
  Repository?: Repository;
  Team?: Team;
  User?: User;
}

export interface $NotificationsSubject {
  CheckSuite?: CheckSuite;
  Commit?: Commit;
  Discussion?: Discussion;
  Gist?: Gist;
  Issue?: Issue;
  PullRequest?: PullRequest;
  Release?: Release;
  RepositoryDependabotAlertsThread?: RepositoryDependabotAlertsThread;
  RepositoryInvitation?: RepositoryInvitation;
  RepositoryVulnerabilityAlert?: RepositoryVulnerabilityAlert;
  SecurityAdvisory?: SecurityAdvisory;
  TeamDiscussion?: TeamDiscussion;
  WorkflowRun?: WorkflowRun;
}

export interface $OauthApplicationAuditEntryData {
  OauthApplicationCreateAuditEntry?: OauthApplicationCreateAuditEntry;
  OrgOauthAppAccessApprovedAuditEntry?: OrgOauthAppAccessApprovedAuditEntry;
  OrgOauthAppAccessBlockedAuditEntry?: OrgOauthAppAccessBlockedAuditEntry;
  OrgOauthAppAccessDeniedAuditEntry?: OrgOauthAppAccessDeniedAuditEntry;
  OrgOauthAppAccessRequestedAuditEntry?: OrgOauthAppAccessRequestedAuditEntry;
  OrgOauthAppAccessUnblockedAuditEntry?: OrgOauthAppAccessUnblockedAuditEntry;
}

export interface $OrgRestoreMemberAuditEntryMembership {
  OrgRestoreMemberMembershipOrganizationAuditEntryData?: OrgRestoreMemberMembershipOrganizationAuditEntryData;
  OrgRestoreMemberMembershipRepositoryAuditEntryData?: OrgRestoreMemberMembershipRepositoryAuditEntryData;
  OrgRestoreMemberMembershipTeamAuditEntryData?: OrgRestoreMemberMembershipTeamAuditEntryData;
}

export interface $OrganizationAuditEntry {
  MembersCanDeleteReposClearAuditEntry?: MembersCanDeleteReposClearAuditEntry;
  MembersCanDeleteReposDisableAuditEntry?: MembersCanDeleteReposDisableAuditEntry;
  MembersCanDeleteReposEnableAuditEntry?: MembersCanDeleteReposEnableAuditEntry;
  OauthApplicationCreateAuditEntry?: OauthApplicationCreateAuditEntry;
  OrgAddBillingManagerAuditEntry?: OrgAddBillingManagerAuditEntry;
  OrgAddMemberAuditEntry?: OrgAddMemberAuditEntry;
  OrgBlockUserAuditEntry?: OrgBlockUserAuditEntry;
  OrgConfigDisableCollaboratorsOnlyAuditEntry?: OrgConfigDisableCollaboratorsOnlyAuditEntry;
  OrgConfigEnableCollaboratorsOnlyAuditEntry?: OrgConfigEnableCollaboratorsOnlyAuditEntry;
  OrgCreateAuditEntry?: OrgCreateAuditEntry;
  OrgDisableOauthAppRestrictionsAuditEntry?: OrgDisableOauthAppRestrictionsAuditEntry;
  OrgDisableSamlAuditEntry?: OrgDisableSamlAuditEntry;
  OrgDisableTwoFactorRequirementAuditEntry?: OrgDisableTwoFactorRequirementAuditEntry;
  OrgEnableOauthAppRestrictionsAuditEntry?: OrgEnableOauthAppRestrictionsAuditEntry;
  OrgEnableSamlAuditEntry?: OrgEnableSamlAuditEntry;
  OrgEnableTwoFactorRequirementAuditEntry?: OrgEnableTwoFactorRequirementAuditEntry;
  OrgInviteMemberAuditEntry?: OrgInviteMemberAuditEntry;
  OrgInviteToBusinessAuditEntry?: OrgInviteToBusinessAuditEntry;
  OrgOauthAppAccessApprovedAuditEntry?: OrgOauthAppAccessApprovedAuditEntry;
  OrgOauthAppAccessBlockedAuditEntry?: OrgOauthAppAccessBlockedAuditEntry;
  OrgOauthAppAccessDeniedAuditEntry?: OrgOauthAppAccessDeniedAuditEntry;
  OrgOauthAppAccessRequestedAuditEntry?: OrgOauthAppAccessRequestedAuditEntry;
  OrgOauthAppAccessUnblockedAuditEntry?: OrgOauthAppAccessUnblockedAuditEntry;
  OrgRemoveBillingManagerAuditEntry?: OrgRemoveBillingManagerAuditEntry;
  OrgRemoveMemberAuditEntry?: OrgRemoveMemberAuditEntry;
  OrgRemoveOutsideCollaboratorAuditEntry?: OrgRemoveOutsideCollaboratorAuditEntry;
  OrgRestoreMemberAuditEntry?: OrgRestoreMemberAuditEntry;
  OrgUnblockUserAuditEntry?: OrgUnblockUserAuditEntry;
  OrgUpdateDefaultRepositoryPermissionAuditEntry?: OrgUpdateDefaultRepositoryPermissionAuditEntry;
  OrgUpdateMemberAuditEntry?: OrgUpdateMemberAuditEntry;
  OrgUpdateMemberRepositoryCreationPermissionAuditEntry?: OrgUpdateMemberRepositoryCreationPermissionAuditEntry;
  OrgUpdateMemberRepositoryInvitationPermissionAuditEntry?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntry;
  PrivateRepositoryForkingDisableAuditEntry?: PrivateRepositoryForkingDisableAuditEntry;
  PrivateRepositoryForkingEnableAuditEntry?: PrivateRepositoryForkingEnableAuditEntry;
  RepoAccessAuditEntry?: RepoAccessAuditEntry;
  RepoAddMemberAuditEntry?: RepoAddMemberAuditEntry;
  RepoAddTopicAuditEntry?: RepoAddTopicAuditEntry;
  RepoArchivedAuditEntry?: RepoArchivedAuditEntry;
  RepoChangeMergeSettingAuditEntry?: RepoChangeMergeSettingAuditEntry;
  RepoConfigDisableAnonymousGitAccessAuditEntry?: RepoConfigDisableAnonymousGitAccessAuditEntry;
  RepoConfigDisableCollaboratorsOnlyAuditEntry?: RepoConfigDisableCollaboratorsOnlyAuditEntry;
  RepoConfigDisableContributorsOnlyAuditEntry?: RepoConfigDisableContributorsOnlyAuditEntry;
  RepoConfigDisableSockpuppetDisallowedAuditEntry?: RepoConfigDisableSockpuppetDisallowedAuditEntry;
  RepoConfigEnableAnonymousGitAccessAuditEntry?: RepoConfigEnableAnonymousGitAccessAuditEntry;
  RepoConfigEnableCollaboratorsOnlyAuditEntry?: RepoConfigEnableCollaboratorsOnlyAuditEntry;
  RepoConfigEnableContributorsOnlyAuditEntry?: RepoConfigEnableContributorsOnlyAuditEntry;
  RepoConfigEnableSockpuppetDisallowedAuditEntry?: RepoConfigEnableSockpuppetDisallowedAuditEntry;
  RepoConfigLockAnonymousGitAccessAuditEntry?: RepoConfigLockAnonymousGitAccessAuditEntry;
  RepoConfigUnlockAnonymousGitAccessAuditEntry?: RepoConfigUnlockAnonymousGitAccessAuditEntry;
  RepoCreateAuditEntry?: RepoCreateAuditEntry;
  RepoDestroyAuditEntry?: RepoDestroyAuditEntry;
  RepoRemoveMemberAuditEntry?: RepoRemoveMemberAuditEntry;
  RepoRemoveTopicAuditEntry?: RepoRemoveTopicAuditEntry;
  RepositoryVisibilityChangeDisableAuditEntry?: RepositoryVisibilityChangeDisableAuditEntry;
  RepositoryVisibilityChangeEnableAuditEntry?: RepositoryVisibilityChangeEnableAuditEntry;
  TeamAddMemberAuditEntry?: TeamAddMemberAuditEntry;
  TeamAddRepositoryAuditEntry?: TeamAddRepositoryAuditEntry;
  TeamChangeParentTeamAuditEntry?: TeamChangeParentTeamAuditEntry;
  TeamRemoveMemberAuditEntry?: TeamRemoveMemberAuditEntry;
  TeamRemoveRepositoryAuditEntry?: TeamRemoveRepositoryAuditEntry;
}

export interface $OrganizationAuditEntryData {
  MembersCanDeleteReposClearAuditEntry?: MembersCanDeleteReposClearAuditEntry;
  MembersCanDeleteReposDisableAuditEntry?: MembersCanDeleteReposDisableAuditEntry;
  MembersCanDeleteReposEnableAuditEntry?: MembersCanDeleteReposEnableAuditEntry;
  OauthApplicationCreateAuditEntry?: OauthApplicationCreateAuditEntry;
  OrgAddBillingManagerAuditEntry?: OrgAddBillingManagerAuditEntry;
  OrgAddMemberAuditEntry?: OrgAddMemberAuditEntry;
  OrgBlockUserAuditEntry?: OrgBlockUserAuditEntry;
  OrgConfigDisableCollaboratorsOnlyAuditEntry?: OrgConfigDisableCollaboratorsOnlyAuditEntry;
  OrgConfigEnableCollaboratorsOnlyAuditEntry?: OrgConfigEnableCollaboratorsOnlyAuditEntry;
  OrgCreateAuditEntry?: OrgCreateAuditEntry;
  OrgDisableOauthAppRestrictionsAuditEntry?: OrgDisableOauthAppRestrictionsAuditEntry;
  OrgDisableSamlAuditEntry?: OrgDisableSamlAuditEntry;
  OrgDisableTwoFactorRequirementAuditEntry?: OrgDisableTwoFactorRequirementAuditEntry;
  OrgEnableOauthAppRestrictionsAuditEntry?: OrgEnableOauthAppRestrictionsAuditEntry;
  OrgEnableSamlAuditEntry?: OrgEnableSamlAuditEntry;
  OrgEnableTwoFactorRequirementAuditEntry?: OrgEnableTwoFactorRequirementAuditEntry;
  OrgInviteMemberAuditEntry?: OrgInviteMemberAuditEntry;
  OrgInviteToBusinessAuditEntry?: OrgInviteToBusinessAuditEntry;
  OrgOauthAppAccessApprovedAuditEntry?: OrgOauthAppAccessApprovedAuditEntry;
  OrgOauthAppAccessBlockedAuditEntry?: OrgOauthAppAccessBlockedAuditEntry;
  OrgOauthAppAccessDeniedAuditEntry?: OrgOauthAppAccessDeniedAuditEntry;
  OrgOauthAppAccessRequestedAuditEntry?: OrgOauthAppAccessRequestedAuditEntry;
  OrgOauthAppAccessUnblockedAuditEntry?: OrgOauthAppAccessUnblockedAuditEntry;
  OrgRemoveBillingManagerAuditEntry?: OrgRemoveBillingManagerAuditEntry;
  OrgRemoveMemberAuditEntry?: OrgRemoveMemberAuditEntry;
  OrgRemoveOutsideCollaboratorAuditEntry?: OrgRemoveOutsideCollaboratorAuditEntry;
  OrgRestoreMemberAuditEntry?: OrgRestoreMemberAuditEntry;
  OrgRestoreMemberMembershipOrganizationAuditEntryData?: OrgRestoreMemberMembershipOrganizationAuditEntryData;
  OrgUnblockUserAuditEntry?: OrgUnblockUserAuditEntry;
  OrgUpdateDefaultRepositoryPermissionAuditEntry?: OrgUpdateDefaultRepositoryPermissionAuditEntry;
  OrgUpdateMemberAuditEntry?: OrgUpdateMemberAuditEntry;
  OrgUpdateMemberRepositoryCreationPermissionAuditEntry?: OrgUpdateMemberRepositoryCreationPermissionAuditEntry;
  OrgUpdateMemberRepositoryInvitationPermissionAuditEntry?: OrgUpdateMemberRepositoryInvitationPermissionAuditEntry;
  PrivateRepositoryForkingDisableAuditEntry?: PrivateRepositoryForkingDisableAuditEntry;
  PrivateRepositoryForkingEnableAuditEntry?: PrivateRepositoryForkingEnableAuditEntry;
  RepoAccessAuditEntry?: RepoAccessAuditEntry;
  RepoAddMemberAuditEntry?: RepoAddMemberAuditEntry;
  RepoAddTopicAuditEntry?: RepoAddTopicAuditEntry;
  RepoArchivedAuditEntry?: RepoArchivedAuditEntry;
  RepoChangeMergeSettingAuditEntry?: RepoChangeMergeSettingAuditEntry;
  RepoConfigDisableAnonymousGitAccessAuditEntry?: RepoConfigDisableAnonymousGitAccessAuditEntry;
  RepoConfigDisableCollaboratorsOnlyAuditEntry?: RepoConfigDisableCollaboratorsOnlyAuditEntry;
  RepoConfigDisableContributorsOnlyAuditEntry?: RepoConfigDisableContributorsOnlyAuditEntry;
  RepoConfigDisableSockpuppetDisallowedAuditEntry?: RepoConfigDisableSockpuppetDisallowedAuditEntry;
  RepoConfigEnableAnonymousGitAccessAuditEntry?: RepoConfigEnableAnonymousGitAccessAuditEntry;
  RepoConfigEnableCollaboratorsOnlyAuditEntry?: RepoConfigEnableCollaboratorsOnlyAuditEntry;
  RepoConfigEnableContributorsOnlyAuditEntry?: RepoConfigEnableContributorsOnlyAuditEntry;
  RepoConfigEnableSockpuppetDisallowedAuditEntry?: RepoConfigEnableSockpuppetDisallowedAuditEntry;
  RepoConfigLockAnonymousGitAccessAuditEntry?: RepoConfigLockAnonymousGitAccessAuditEntry;
  RepoConfigUnlockAnonymousGitAccessAuditEntry?: RepoConfigUnlockAnonymousGitAccessAuditEntry;
  RepoCreateAuditEntry?: RepoCreateAuditEntry;
  RepoDestroyAuditEntry?: RepoDestroyAuditEntry;
  RepoRemoveMemberAuditEntry?: RepoRemoveMemberAuditEntry;
  RepoRemoveTopicAuditEntry?: RepoRemoveTopicAuditEntry;
  RepositoryVisibilityChangeDisableAuditEntry?: RepositoryVisibilityChangeDisableAuditEntry;
  RepositoryVisibilityChangeEnableAuditEntry?: RepositoryVisibilityChangeEnableAuditEntry;
  TeamAddMemberAuditEntry?: TeamAddMemberAuditEntry;
  TeamAddRepositoryAuditEntry?: TeamAddRepositoryAuditEntry;
  TeamChangeParentTeamAuditEntry?: TeamChangeParentTeamAuditEntry;
  TeamRemoveMemberAuditEntry?: TeamRemoveMemberAuditEntry;
  TeamRemoveRepositoryAuditEntry?: TeamRemoveRepositoryAuditEntry;
}

export interface $OrganizationOrUser {
  Organization?: Organization;
  User?: User;
}

export interface $PackageOwner {
  Organization?: Organization;
  Repository?: Repository;
  User?: User;
}

export interface $PermissionGranter {
  Organization?: Organization;
  Repository?: Repository;
  Team?: Team;
}

export interface $PinnableItem {
  Gist?: Gist;
  Repository?: Repository;
}

export interface $ProfileOwner {
  Organization?: Organization;
  User?: User;
}

export interface $ProjectCardItem {
  Issue?: Issue;
  PullRequest?: PullRequest;
}

export interface $ProjectOwner {
  Organization?: Organization;
  Repository?: Repository;
  User?: User;
}

export interface $ProjectV2Actor {
  Team?: Team;
  User?: User;
}

export interface $ProjectV2FieldCommon {
  ProjectV2Field?: ProjectV2Field;
  ProjectV2IterationField?: ProjectV2IterationField;
  ProjectV2SingleSelectField?: ProjectV2SingleSelectField;
}

export interface $ProjectV2FieldConfiguration {
  ProjectV2Field?: ProjectV2Field;
  ProjectV2IterationField?: ProjectV2IterationField;
  ProjectV2SingleSelectField?: ProjectV2SingleSelectField;
}

export interface $ProjectV2ItemContent {
  DraftIssue?: DraftIssue;
  Issue?: Issue;
  PullRequest?: PullRequest;
}

export interface $ProjectV2ItemFieldValue {
  ProjectV2ItemFieldDateValue?: ProjectV2ItemFieldDateValue;
  ProjectV2ItemFieldIterationValue?: ProjectV2ItemFieldIterationValue;
  ProjectV2ItemFieldLabelValue?: ProjectV2ItemFieldLabelValue;
  ProjectV2ItemFieldMilestoneValue?: ProjectV2ItemFieldMilestoneValue;
  ProjectV2ItemFieldNumberValue?: ProjectV2ItemFieldNumberValue;
  ProjectV2ItemFieldPullRequestValue?: ProjectV2ItemFieldPullRequestValue;
  ProjectV2ItemFieldRepositoryValue?: ProjectV2ItemFieldRepositoryValue;
  ProjectV2ItemFieldReviewerValue?: ProjectV2ItemFieldReviewerValue;
  ProjectV2ItemFieldSingleSelectValue?: ProjectV2ItemFieldSingleSelectValue;
  ProjectV2ItemFieldTextValue?: ProjectV2ItemFieldTextValue;
  ProjectV2ItemFieldUserValue?: ProjectV2ItemFieldUserValue;
}

export interface $ProjectV2ItemFieldValueCommon {
  ProjectV2ItemFieldDateValue?: ProjectV2ItemFieldDateValue;
  ProjectV2ItemFieldIterationValue?: ProjectV2ItemFieldIterationValue;
  ProjectV2ItemFieldNumberValue?: ProjectV2ItemFieldNumberValue;
  ProjectV2ItemFieldSingleSelectValue?: ProjectV2ItemFieldSingleSelectValue;
  ProjectV2ItemFieldTextValue?: ProjectV2ItemFieldTextValue;
}

export interface $ProjectV2Owner {
  Issue?: Issue;
  Organization?: Organization;
  PullRequest?: PullRequest;
  User?: User;
}

export interface $ProjectV2Recent {
  Organization?: Organization;
  Repository?: Repository;
  User?: User;
}

export interface $PullRequestTimelineItem {
  AssignedEvent?: AssignedEvent;
  BaseRefDeletedEvent?: BaseRefDeletedEvent;
  BaseRefForcePushedEvent?: BaseRefForcePushedEvent;
  ClosedEvent?: ClosedEvent;
  Commit?: Commit;
  CommitCommentThread?: CommitCommentThread;
  CrossReferencedEvent?: CrossReferencedEvent;
  DemilestonedEvent?: DemilestonedEvent;
  DeployedEvent?: DeployedEvent;
  DeploymentEnvironmentChangedEvent?: DeploymentEnvironmentChangedEvent;
  HeadRefDeletedEvent?: HeadRefDeletedEvent;
  HeadRefForcePushedEvent?: HeadRefForcePushedEvent;
  HeadRefRestoredEvent?: HeadRefRestoredEvent;
  IssueComment?: IssueComment;
  LabeledEvent?: LabeledEvent;
  LockedEvent?: LockedEvent;
  MergedEvent?: MergedEvent;
  MilestonedEvent?: MilestonedEvent;
  PullRequestReview?: PullRequestReview;
  PullRequestReviewComment?: PullRequestReviewComment;
  PullRequestReviewThread?: PullRequestReviewThread;
  ReferencedEvent?: ReferencedEvent;
  RenamedTitleEvent?: RenamedTitleEvent;
  ReopenedEvent?: ReopenedEvent;
  ReviewDismissedEvent?: ReviewDismissedEvent;
  ReviewRequestRemovedEvent?: ReviewRequestRemovedEvent;
  ReviewRequestedEvent?: ReviewRequestedEvent;
  SubscribedEvent?: SubscribedEvent;
  UnassignedEvent?: UnassignedEvent;
  UnlabeledEvent?: UnlabeledEvent;
  UnlockedEvent?: UnlockedEvent;
  UnsubscribedEvent?: UnsubscribedEvent;
  UserBlockedEvent?: UserBlockedEvent;
}

export interface $PullRequestTimelineItems {
  AddedToMergeQueueEvent?: AddedToMergeQueueEvent;
  AddedToProjectEvent?: AddedToProjectEvent;
  AssignedEvent?: AssignedEvent;
  AutoMergeDisabledEvent?: AutoMergeDisabledEvent;
  AutoMergeEnabledEvent?: AutoMergeEnabledEvent;
  AutoRebaseEnabledEvent?: AutoRebaseEnabledEvent;
  AutoSquashEnabledEvent?: AutoSquashEnabledEvent;
  AutomaticBaseChangeFailedEvent?: AutomaticBaseChangeFailedEvent;
  AutomaticBaseChangeSucceededEvent?: AutomaticBaseChangeSucceededEvent;
  BaseRefChangedEvent?: BaseRefChangedEvent;
  BaseRefDeletedEvent?: BaseRefDeletedEvent;
  BaseRefForcePushedEvent?: BaseRefForcePushedEvent;
  ClosedEvent?: ClosedEvent;
  CommentDeletedEvent?: CommentDeletedEvent;
  ConnectedEvent?: ConnectedEvent;
  ConvertToDraftEvent?: ConvertToDraftEvent;
  ConvertedNoteToIssueEvent?: ConvertedNoteToIssueEvent;
  ConvertedToDiscussionEvent?: ConvertedToDiscussionEvent;
  CrossReferencedEvent?: CrossReferencedEvent;
  DemilestonedEvent?: DemilestonedEvent;
  DeployedEvent?: DeployedEvent;
  DeploymentEnvironmentChangedEvent?: DeploymentEnvironmentChangedEvent;
  DisconnectedEvent?: DisconnectedEvent;
  HeadRefDeletedEvent?: HeadRefDeletedEvent;
  HeadRefForcePushedEvent?: HeadRefForcePushedEvent;
  HeadRefRestoredEvent?: HeadRefRestoredEvent;
  IssueComment?: IssueComment;
  LabeledEvent?: LabeledEvent;
  LockedEvent?: LockedEvent;
  MarkedAsDuplicateEvent?: MarkedAsDuplicateEvent;
  MentionedEvent?: MentionedEvent;
  MergedEvent?: MergedEvent;
  MilestonedEvent?: MilestonedEvent;
  MovedColumnsInProjectEvent?: MovedColumnsInProjectEvent;
  PinnedEvent?: PinnedEvent;
  PullRequestCommit?: PullRequestCommit;
  PullRequestCommitCommentThread?: PullRequestCommitCommentThread;
  PullRequestReview?: PullRequestReview;
  PullRequestReviewThread?: PullRequestReviewThread;
  PullRequestRevisionMarker?: PullRequestRevisionMarker;
  ReadyForReviewEvent?: ReadyForReviewEvent;
  ReferencedEvent?: ReferencedEvent;
  RemovedFromMergeQueueEvent?: RemovedFromMergeQueueEvent;
  RemovedFromProjectEvent?: RemovedFromProjectEvent;
  RenamedTitleEvent?: RenamedTitleEvent;
  ReopenedEvent?: ReopenedEvent;
  ReviewDismissedEvent?: ReviewDismissedEvent;
  ReviewRequestRemovedEvent?: ReviewRequestRemovedEvent;
  ReviewRequestedEvent?: ReviewRequestedEvent;
  SubscribedEvent?: SubscribedEvent;
  TransferredEvent?: TransferredEvent;
  UnassignedEvent?: UnassignedEvent;
  UnlabeledEvent?: UnlabeledEvent;
  UnlockedEvent?: UnlockedEvent;
  UnmarkedAsDuplicateEvent?: UnmarkedAsDuplicateEvent;
  UnpinnedEvent?: UnpinnedEvent;
  UnsubscribedEvent?: UnsubscribedEvent;
  UserBlockedEvent?: UserBlockedEvent;
}

export interface $PushAllowanceActor {
  App?: App;
  Team?: Team;
  User?: User;
}

export interface $Reactable {
  CommitComment?: CommitComment;
  Discussion?: Discussion;
  DiscussionComment?: DiscussionComment;
  Issue?: Issue;
  IssueComment?: IssueComment;
  PullRequest?: PullRequest;
  PullRequestReview?: PullRequestReview;
  PullRequestReviewComment?: PullRequestReviewComment;
  Release?: Release;
  TeamDiscussion?: TeamDiscussion;
  TeamDiscussionComment?: TeamDiscussionComment;
}

export interface $Reactor {
  Bot?: Bot;
  Mannequin?: Mannequin;
  Organization?: Organization;
  User?: User;
}

export interface $ReferencedSubject {
  Issue?: Issue;
  PullRequest?: PullRequest;
}

export interface $RenamedTitleSubject {
  Issue?: Issue;
  PullRequest?: PullRequest;
}

export interface $RepositoryAuditEntryData {
  OrgRestoreMemberMembershipRepositoryAuditEntryData?: OrgRestoreMemberMembershipRepositoryAuditEntryData;
  PrivateRepositoryForkingDisableAuditEntry?: PrivateRepositoryForkingDisableAuditEntry;
  PrivateRepositoryForkingEnableAuditEntry?: PrivateRepositoryForkingEnableAuditEntry;
  RepoAccessAuditEntry?: RepoAccessAuditEntry;
  RepoAddMemberAuditEntry?: RepoAddMemberAuditEntry;
  RepoAddTopicAuditEntry?: RepoAddTopicAuditEntry;
  RepoArchivedAuditEntry?: RepoArchivedAuditEntry;
  RepoChangeMergeSettingAuditEntry?: RepoChangeMergeSettingAuditEntry;
  RepoConfigDisableAnonymousGitAccessAuditEntry?: RepoConfigDisableAnonymousGitAccessAuditEntry;
  RepoConfigDisableCollaboratorsOnlyAuditEntry?: RepoConfigDisableCollaboratorsOnlyAuditEntry;
  RepoConfigDisableContributorsOnlyAuditEntry?: RepoConfigDisableContributorsOnlyAuditEntry;
  RepoConfigDisableSockpuppetDisallowedAuditEntry?: RepoConfigDisableSockpuppetDisallowedAuditEntry;
  RepoConfigEnableAnonymousGitAccessAuditEntry?: RepoConfigEnableAnonymousGitAccessAuditEntry;
  RepoConfigEnableCollaboratorsOnlyAuditEntry?: RepoConfigEnableCollaboratorsOnlyAuditEntry;
  RepoConfigEnableContributorsOnlyAuditEntry?: RepoConfigEnableContributorsOnlyAuditEntry;
  RepoConfigEnableSockpuppetDisallowedAuditEntry?: RepoConfigEnableSockpuppetDisallowedAuditEntry;
  RepoConfigLockAnonymousGitAccessAuditEntry?: RepoConfigLockAnonymousGitAccessAuditEntry;
  RepoConfigUnlockAnonymousGitAccessAuditEntry?: RepoConfigUnlockAnonymousGitAccessAuditEntry;
  RepoCreateAuditEntry?: RepoCreateAuditEntry;
  RepoDestroyAuditEntry?: RepoDestroyAuditEntry;
  RepoRemoveMemberAuditEntry?: RepoRemoveMemberAuditEntry;
  RepoRemoveTopicAuditEntry?: RepoRemoveTopicAuditEntry;
  TeamAddRepositoryAuditEntry?: TeamAddRepositoryAuditEntry;
  TeamRemoveRepositoryAuditEntry?: TeamRemoveRepositoryAuditEntry;
}

export interface $RepositoryDiscussionAuthor {
  Organization?: Organization;
  User?: User;
}

export interface $RepositoryDiscussionCommentAuthor {
  Organization?: Organization;
  User?: User;
}

export interface $RepositoryInfo {
  Repository?: Repository;
}

export interface $RepositoryNode {
  CommitComment?: CommitComment;
  CommitCommentThread?: CommitCommentThread;
  DependabotUpdate?: DependabotUpdate;
  Discussion?: Discussion;
  DiscussionCategory?: DiscussionCategory;
  Issue?: Issue;
  IssueComment?: IssueComment;
  PinnedDiscussion?: PinnedDiscussion;
  PullRequest?: PullRequest;
  PullRequestCommitCommentThread?: PullRequestCommitCommentThread;
  PullRequestReview?: PullRequestReview;
  PullRequestReviewComment?: PullRequestReviewComment;
  RepositoryDependabotAlertsThread?: RepositoryDependabotAlertsThread;
  RepositoryVulnerabilityAlert?: RepositoryVulnerabilityAlert;
}

export interface $RepositoryOwner {
  Organization?: Organization;
  User?: User;
}

export interface $RequestedReviewer {
  Bot?: Bot;
  Mannequin?: Mannequin;
  Team?: Team;
  User?: User;
}

export interface $RequirableByPullRequest {
  CheckRun?: CheckRun;
  StatusContext?: StatusContext;
}

export interface $ReviewDismissalAllowanceActor {
  App?: App;
  Team?: Team;
  User?: User;
}

export interface $RuleParameters {
  BranchNamePatternParameters?: BranchNamePatternParameters;
  CommitAuthorEmailPatternParameters?: CommitAuthorEmailPatternParameters;
  CommitMessagePatternParameters?: CommitMessagePatternParameters;
  CommitterEmailPatternParameters?: CommitterEmailPatternParameters;
  PullRequestParameters?: PullRequestParameters;
  RequiredDeploymentsParameters?: RequiredDeploymentsParameters;
  RequiredStatusChecksParameters?: RequiredStatusChecksParameters;
  TagNamePatternParameters?: TagNamePatternParameters;
  UpdateParameters?: UpdateParameters;
  WorkflowsParameters?: WorkflowsParameters;
}

export interface $RuleSource {
  Organization?: Organization;
  Repository?: Repository;
}

export interface $SearchResultItem {
  App?: App;
  Discussion?: Discussion;
  Issue?: Issue;
  MarketplaceListing?: MarketplaceListing;
  Organization?: Organization;
  PullRequest?: PullRequest;
  Repository?: Repository;
  User?: User;
}

export interface $Sponsor {
  Organization?: Organization;
  User?: User;
}

export interface $Sponsorable {
  Organization?: Organization;
  User?: User;
}

export interface $SponsorableItem {
  Organization?: Organization;
  User?: User;
}

export interface $SponsorsListingFeatureableItem {
  Repository?: Repository;
  User?: User;
}

export interface $Starrable {
  Gist?: Gist;
  Repository?: Repository;
  Topic?: Topic;
}

export interface $StatusCheckRollupContext {
  CheckRun?: CheckRun;
  StatusContext?: StatusContext;
}

export interface $Subscribable {
  Commit?: Commit;
  Discussion?: Discussion;
  Issue?: Issue;
  PullRequest?: PullRequest;
  Repository?: Repository;
  Team?: Team;
  TeamDiscussion?: TeamDiscussion;
}

export interface $SubscribableThread {
  Issue?: Issue;
}

export interface $TeamAuditEntryData {
  OrgRestoreMemberMembershipTeamAuditEntryData?: OrgRestoreMemberMembershipTeamAuditEntryData;
  TeamAddMemberAuditEntry?: TeamAddMemberAuditEntry;
  TeamAddRepositoryAuditEntry?: TeamAddRepositoryAuditEntry;
  TeamChangeParentTeamAuditEntry?: TeamChangeParentTeamAuditEntry;
  TeamRemoveMemberAuditEntry?: TeamRemoveMemberAuditEntry;
  TeamRemoveRepositoryAuditEntry?: TeamRemoveRepositoryAuditEntry;
}

export interface $TopicAuditEntryData {
  RepoAddTopicAuditEntry?: RepoAddTopicAuditEntry;
  RepoRemoveTopicAuditEntry?: RepoRemoveTopicAuditEntry;
}

export interface $UniformResourceLocatable {
  Bot?: Bot;
  CheckRun?: CheckRun;
  ClosedEvent?: ClosedEvent;
  Commit?: Commit;
  ConvertToDraftEvent?: ConvertToDraftEvent;
  CrossReferencedEvent?: CrossReferencedEvent;
  Gist?: Gist;
  Issue?: Issue;
  Mannequin?: Mannequin;
  MergedEvent?: MergedEvent;
  Milestone?: Milestone;
  Organization?: Organization;
  PullRequest?: PullRequest;
  PullRequestCommit?: PullRequestCommit;
  ReadyForReviewEvent?: ReadyForReviewEvent;
  Release?: Release;
  Repository?: Repository;
  RepositoryTopic?: RepositoryTopic;
  ReviewDismissedEvent?: ReviewDismissedEvent;
  TeamDiscussion?: TeamDiscussion;
  TeamDiscussionComment?: TeamDiscussionComment;
  User?: User;
  Workflow?: Workflow;
  WorkflowRun?: WorkflowRun;
  WorkflowRunFile?: WorkflowRunFile;
}

export interface $Updatable {
  CommitComment?: CommitComment;
  Discussion?: Discussion;
  DiscussionComment?: DiscussionComment;
  GistComment?: GistComment;
  Issue?: Issue;
  IssueComment?: IssueComment;
  Project?: Project;
  ProjectV2?: ProjectV2;
  PullRequest?: PullRequest;
  PullRequestReview?: PullRequestReview;
  PullRequestReviewComment?: PullRequestReviewComment;
  TeamDiscussion?: TeamDiscussion;
  TeamDiscussionComment?: TeamDiscussionComment;
}

export interface $UpdatableComment {
  CommitComment?: CommitComment;
  DiscussionComment?: DiscussionComment;
  GistComment?: GistComment;
  Issue?: Issue;
  IssueComment?: IssueComment;
  PullRequest?: PullRequest;
  PullRequestReview?: PullRequestReview;
  PullRequestReviewComment?: PullRequestReviewComment;
  TeamDiscussion?: TeamDiscussion;
  TeamDiscussionComment?: TeamDiscussionComment;
}

export interface $VerifiableDomainOwner {
  Enterprise?: Enterprise;
  Organization?: Organization;
}

export interface $Votable {
  Discussion?: Discussion;
  DiscussionComment?: DiscussionComment;
}

export interface GeneratedSchema {
  query: Query;
  mutation: Mutation;
  subscription: Subscription;
}

export type MakeNullable<T> = {
  [K in keyof T]: T[K] | undefined;
};

export interface ScalarsEnums extends MakeNullable<Scalars> {
  ActorType: ActorType | undefined;
  AuditLogOrderField: AuditLogOrderField | undefined;
  CheckAnnotationLevel: CheckAnnotationLevel | undefined;
  CheckConclusionState: CheckConclusionState | undefined;
  CheckRunState: CheckRunState | undefined;
  CheckRunType: CheckRunType | undefined;
  CheckStatusState: CheckStatusState | undefined;
  CollaboratorAffiliation: CollaboratorAffiliation | undefined;
  CommentAuthorAssociation: CommentAuthorAssociation | undefined;
  CommentCannotUpdateReason: CommentCannotUpdateReason | undefined;
  CommitContributionOrderField: CommitContributionOrderField | undefined;
  ComparisonStatus: ComparisonStatus | undefined;
  ContributionLevel: ContributionLevel | undefined;
  DefaultRepositoryPermissionField:
    | DefaultRepositoryPermissionField
    | undefined;
  DependencyGraphEcosystem: DependencyGraphEcosystem | undefined;
  DeploymentOrderField: DeploymentOrderField | undefined;
  DeploymentProtectionRuleType: DeploymentProtectionRuleType | undefined;
  DeploymentReviewState: DeploymentReviewState | undefined;
  DeploymentState: DeploymentState | undefined;
  DeploymentStatusState: DeploymentStatusState | undefined;
  DiffSide: DiffSide | undefined;
  DiscussionCloseReason: DiscussionCloseReason | undefined;
  DiscussionOrderField: DiscussionOrderField | undefined;
  DiscussionPollOptionOrderField: DiscussionPollOptionOrderField | undefined;
  DiscussionState: DiscussionState | undefined;
  DiscussionStateReason: DiscussionStateReason | undefined;
  DismissReason: DismissReason | undefined;
  EnterpriseAdministratorInvitationOrderField:
    | EnterpriseAdministratorInvitationOrderField
    | undefined;
  EnterpriseAdministratorRole: EnterpriseAdministratorRole | undefined;
  EnterpriseAllowPrivateRepositoryForkingPolicyValue:
    | EnterpriseAllowPrivateRepositoryForkingPolicyValue
    | undefined;
  EnterpriseDefaultRepositoryPermissionSettingValue:
    | EnterpriseDefaultRepositoryPermissionSettingValue
    | undefined;
  EnterpriseEnabledDisabledSettingValue:
    | EnterpriseEnabledDisabledSettingValue
    | undefined;
  EnterpriseEnabledSettingValue: EnterpriseEnabledSettingValue | undefined;
  EnterpriseMemberOrderField: EnterpriseMemberOrderField | undefined;
  EnterpriseMembersCanCreateRepositoriesSettingValue:
    | EnterpriseMembersCanCreateRepositoriesSettingValue
    | undefined;
  EnterpriseMembersCanMakePurchasesSettingValue:
    | EnterpriseMembersCanMakePurchasesSettingValue
    | undefined;
  EnterpriseMembershipType: EnterpriseMembershipType | undefined;
  EnterpriseOrderField: EnterpriseOrderField | undefined;
  EnterpriseServerInstallationOrderField:
    | EnterpriseServerInstallationOrderField
    | undefined;
  EnterpriseServerUserAccountEmailOrderField:
    | EnterpriseServerUserAccountEmailOrderField
    | undefined;
  EnterpriseServerUserAccountOrderField:
    | EnterpriseServerUserAccountOrderField
    | undefined;
  EnterpriseServerUserAccountsUploadOrderField:
    | EnterpriseServerUserAccountsUploadOrderField
    | undefined;
  EnterpriseServerUserAccountsUploadSyncState:
    | EnterpriseServerUserAccountsUploadSyncState
    | undefined;
  EnterpriseUserAccountMembershipRole:
    | EnterpriseUserAccountMembershipRole
    | undefined;
  EnterpriseUserDeployment: EnterpriseUserDeployment | undefined;
  EnvironmentOrderField: EnvironmentOrderField | undefined;
  FileViewedState: FileViewedState | undefined;
  FundingPlatform: FundingPlatform | undefined;
  GistOrderField: GistOrderField | undefined;
  GistPrivacy: GistPrivacy | undefined;
  GitSignatureState: GitSignatureState | undefined;
  IdentityProviderConfigurationState:
    | IdentityProviderConfigurationState
    | undefined;
  IpAllowListEnabledSettingValue: IpAllowListEnabledSettingValue | undefined;
  IpAllowListEntryOrderField: IpAllowListEntryOrderField | undefined;
  IpAllowListForInstalledAppsEnabledSettingValue:
    | IpAllowListForInstalledAppsEnabledSettingValue
    | undefined;
  IssueClosedStateReason: IssueClosedStateReason | undefined;
  IssueCommentOrderField: IssueCommentOrderField | undefined;
  IssueOrderField: IssueOrderField | undefined;
  IssueState: IssueState | undefined;
  IssueStateReason: IssueStateReason | undefined;
  IssueTimelineItemsItemType: IssueTimelineItemsItemType | undefined;
  LabelOrderField: LabelOrderField | undefined;
  LanguageOrderField: LanguageOrderField | undefined;
  LockReason: LockReason | undefined;
  MannequinOrderField: MannequinOrderField | undefined;
  MergeCommitMessage: MergeCommitMessage | undefined;
  MergeCommitTitle: MergeCommitTitle | undefined;
  MergeQueueEntryState: MergeQueueEntryState | undefined;
  MergeQueueMergingStrategy: MergeQueueMergingStrategy | undefined;
  MergeableState: MergeableState | undefined;
  MigrationSourceType: MigrationSourceType | undefined;
  MigrationState: MigrationState | undefined;
  MilestoneOrderField: MilestoneOrderField | undefined;
  MilestoneState: MilestoneState | undefined;
  NotificationReason: NotificationReason | undefined;
  NotificationRestrictionSettingValue:
    | NotificationRestrictionSettingValue
    | undefined;
  NotificationStatus: NotificationStatus | undefined;
  NotificationThreadSubscriptionState:
    | NotificationThreadSubscriptionState
    | undefined;
  OIDCProviderType: OIDCProviderType | undefined;
  OauthApplicationCreateAuditEntryState:
    | OauthApplicationCreateAuditEntryState
    | undefined;
  OperationType: OperationType | undefined;
  OrderDirection: OrderDirection | undefined;
  OrgAddMemberAuditEntryPermission:
    | OrgAddMemberAuditEntryPermission
    | undefined;
  OrgCreateAuditEntryBillingPlan: OrgCreateAuditEntryBillingPlan | undefined;
  OrgEnterpriseOwnerOrderField: OrgEnterpriseOwnerOrderField | undefined;
  OrgRemoveBillingManagerAuditEntryReason:
    | OrgRemoveBillingManagerAuditEntryReason
    | undefined;
  OrgRemoveMemberAuditEntryMembershipType:
    | OrgRemoveMemberAuditEntryMembershipType
    | undefined;
  OrgRemoveMemberAuditEntryReason: OrgRemoveMemberAuditEntryReason | undefined;
  OrgRemoveOutsideCollaboratorAuditEntryMembershipType:
    | OrgRemoveOutsideCollaboratorAuditEntryMembershipType
    | undefined;
  OrgRemoveOutsideCollaboratorAuditEntryReason:
    | OrgRemoveOutsideCollaboratorAuditEntryReason
    | undefined;
  OrgUpdateDefaultRepositoryPermissionAuditEntryPermission:
    | OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
    | undefined;
  OrgUpdateMemberAuditEntryPermission:
    | OrgUpdateMemberAuditEntryPermission
    | undefined;
  OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility:
    | OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
    | undefined;
  OrganizationInvitationRole: OrganizationInvitationRole | undefined;
  OrganizationInvitationSource: OrganizationInvitationSource | undefined;
  OrganizationInvitationType: OrganizationInvitationType | undefined;
  OrganizationMemberRole: OrganizationMemberRole | undefined;
  OrganizationMembersCanCreateRepositoriesSettingValue:
    | OrganizationMembersCanCreateRepositoriesSettingValue
    | undefined;
  OrganizationMigrationState: OrganizationMigrationState | undefined;
  OrganizationOrderField: OrganizationOrderField | undefined;
  PackageFileOrderField: PackageFileOrderField | undefined;
  PackageOrderField: PackageOrderField | undefined;
  PackageType: PackageType | undefined;
  PackageVersionOrderField: PackageVersionOrderField | undefined;
  PatchStatus: PatchStatus | undefined;
  PinnableItemType: PinnableItemType | undefined;
  PinnedDiscussionGradient: PinnedDiscussionGradient | undefined;
  PinnedDiscussionPattern: PinnedDiscussionPattern | undefined;
  ProjectCardArchivedState: ProjectCardArchivedState | undefined;
  ProjectCardState: ProjectCardState | undefined;
  ProjectColumnPurpose: ProjectColumnPurpose | undefined;
  ProjectOrderField: ProjectOrderField | undefined;
  ProjectState: ProjectState | undefined;
  ProjectTemplate: ProjectTemplate | undefined;
  ProjectV2CustomFieldType: ProjectV2CustomFieldType | undefined;
  ProjectV2FieldOrderField: ProjectV2FieldOrderField | undefined;
  ProjectV2FieldType: ProjectV2FieldType | undefined;
  ProjectV2ItemFieldValueOrderField:
    | ProjectV2ItemFieldValueOrderField
    | undefined;
  ProjectV2ItemOrderField: ProjectV2ItemOrderField | undefined;
  ProjectV2ItemType: ProjectV2ItemType | undefined;
  ProjectV2OrderField: ProjectV2OrderField | undefined;
  ProjectV2Roles: ProjectV2Roles | undefined;
  ProjectV2SingleSelectFieldOptionColor:
    | ProjectV2SingleSelectFieldOptionColor
    | undefined;
  ProjectV2State: ProjectV2State | undefined;
  ProjectV2ViewLayout: ProjectV2ViewLayout | undefined;
  ProjectV2ViewOrderField: ProjectV2ViewOrderField | undefined;
  ProjectV2WorkflowsOrderField: ProjectV2WorkflowsOrderField | undefined;
  PullRequestBranchUpdateMethod: PullRequestBranchUpdateMethod | undefined;
  PullRequestMergeMethod: PullRequestMergeMethod | undefined;
  PullRequestOrderField: PullRequestOrderField | undefined;
  PullRequestReviewCommentState: PullRequestReviewCommentState | undefined;
  PullRequestReviewDecision: PullRequestReviewDecision | undefined;
  PullRequestReviewEvent: PullRequestReviewEvent | undefined;
  PullRequestReviewState: PullRequestReviewState | undefined;
  PullRequestReviewThreadSubjectType:
    | PullRequestReviewThreadSubjectType
    | undefined;
  PullRequestState: PullRequestState | undefined;
  PullRequestTimelineItemsItemType:
    | PullRequestTimelineItemsItemType
    | undefined;
  PullRequestUpdateState: PullRequestUpdateState | undefined;
  ReactionContent: ReactionContent | undefined;
  ReactionOrderField: ReactionOrderField | undefined;
  RefOrderField: RefOrderField | undefined;
  ReleaseOrderField: ReleaseOrderField | undefined;
  RepoAccessAuditEntryVisibility: RepoAccessAuditEntryVisibility | undefined;
  RepoAddMemberAuditEntryVisibility:
    | RepoAddMemberAuditEntryVisibility
    | undefined;
  RepoArchivedAuditEntryVisibility:
    | RepoArchivedAuditEntryVisibility
    | undefined;
  RepoChangeMergeSettingAuditEntryMergeType:
    | RepoChangeMergeSettingAuditEntryMergeType
    | undefined;
  RepoCreateAuditEntryVisibility: RepoCreateAuditEntryVisibility | undefined;
  RepoDestroyAuditEntryVisibility: RepoDestroyAuditEntryVisibility | undefined;
  RepoRemoveMemberAuditEntryVisibility:
    | RepoRemoveMemberAuditEntryVisibility
    | undefined;
  ReportedContentClassifiers: ReportedContentClassifiers | undefined;
  RepositoryAffiliation: RepositoryAffiliation | undefined;
  RepositoryContributionType: RepositoryContributionType | undefined;
  RepositoryInteractionLimit: RepositoryInteractionLimit | undefined;
  RepositoryInteractionLimitExpiry:
    | RepositoryInteractionLimitExpiry
    | undefined;
  RepositoryInteractionLimitOrigin:
    | RepositoryInteractionLimitOrigin
    | undefined;
  RepositoryInvitationOrderField: RepositoryInvitationOrderField | undefined;
  RepositoryLockReason: RepositoryLockReason | undefined;
  RepositoryMigrationOrderDirection:
    | RepositoryMigrationOrderDirection
    | undefined;
  RepositoryMigrationOrderField: RepositoryMigrationOrderField | undefined;
  RepositoryOrderField: RepositoryOrderField | undefined;
  RepositoryPermission: RepositoryPermission | undefined;
  RepositoryPrivacy: RepositoryPrivacy | undefined;
  RepositoryRuleType: RepositoryRuleType | undefined;
  RepositoryRulesetBypassActorBypassMode:
    | RepositoryRulesetBypassActorBypassMode
    | undefined;
  RepositoryRulesetTarget: RepositoryRulesetTarget | undefined;
  RepositoryVisibility: RepositoryVisibility | undefined;
  RepositoryVulnerabilityAlertDependencyScope:
    | RepositoryVulnerabilityAlertDependencyScope
    | undefined;
  RepositoryVulnerabilityAlertState:
    | RepositoryVulnerabilityAlertState
    | undefined;
  RequestableCheckStatusState: RequestableCheckStatusState | undefined;
  RoleInOrganization: RoleInOrganization | undefined;
  RuleEnforcement: RuleEnforcement | undefined;
  SamlDigestAlgorithm: SamlDigestAlgorithm | undefined;
  SamlSignatureAlgorithm: SamlSignatureAlgorithm | undefined;
  SavedReplyOrderField: SavedReplyOrderField | undefined;
  SearchType: SearchType | undefined;
  SecurityAdvisoryClassification: SecurityAdvisoryClassification | undefined;
  SecurityAdvisoryEcosystem: SecurityAdvisoryEcosystem | undefined;
  SecurityAdvisoryIdentifierType: SecurityAdvisoryIdentifierType | undefined;
  SecurityAdvisoryOrderField: SecurityAdvisoryOrderField | undefined;
  SecurityAdvisorySeverity: SecurityAdvisorySeverity | undefined;
  SecurityVulnerabilityOrderField: SecurityVulnerabilityOrderField | undefined;
  SocialAccountProvider: SocialAccountProvider | undefined;
  SponsorOrderField: SponsorOrderField | undefined;
  SponsorableOrderField: SponsorableOrderField | undefined;
  SponsorsActivityAction: SponsorsActivityAction | undefined;
  SponsorsActivityOrderField: SponsorsActivityOrderField | undefined;
  SponsorsActivityPeriod: SponsorsActivityPeriod | undefined;
  SponsorsCountryOrRegionCode: SponsorsCountryOrRegionCode | undefined;
  SponsorsGoalKind: SponsorsGoalKind | undefined;
  SponsorsListingFeaturedItemFeatureableType:
    | SponsorsListingFeaturedItemFeatureableType
    | undefined;
  SponsorsTierOrderField: SponsorsTierOrderField | undefined;
  SponsorshipNewsletterOrderField: SponsorshipNewsletterOrderField | undefined;
  SponsorshipOrderField: SponsorshipOrderField | undefined;
  SponsorshipPaymentSource: SponsorshipPaymentSource | undefined;
  SponsorshipPrivacy: SponsorshipPrivacy | undefined;
  SquashMergeCommitMessage: SquashMergeCommitMessage | undefined;
  SquashMergeCommitTitle: SquashMergeCommitTitle | undefined;
  StarOrderField: StarOrderField | undefined;
  StatusState: StatusState | undefined;
  SubscriptionState: SubscriptionState | undefined;
  TeamDiscussionCommentOrderField: TeamDiscussionCommentOrderField | undefined;
  TeamDiscussionOrderField: TeamDiscussionOrderField | undefined;
  TeamMemberOrderField: TeamMemberOrderField | undefined;
  TeamMemberRole: TeamMemberRole | undefined;
  TeamMembershipType: TeamMembershipType | undefined;
  TeamNotificationSetting: TeamNotificationSetting | undefined;
  TeamOrderField: TeamOrderField | undefined;
  TeamPrivacy: TeamPrivacy | undefined;
  TeamRepositoryOrderField: TeamRepositoryOrderField | undefined;
  TeamRole: TeamRole | undefined;
  ThreadSubscriptionFormAction: ThreadSubscriptionFormAction | undefined;
  ThreadSubscriptionState: ThreadSubscriptionState | undefined;
  TopicSuggestionDeclineReason: TopicSuggestionDeclineReason | undefined;
  TrackedIssueStates: TrackedIssueStates | undefined;
  UserBlockDuration: UserBlockDuration | undefined;
  UserStatusOrderField: UserStatusOrderField | undefined;
  VerifiableDomainOrderField: VerifiableDomainOrderField | undefined;
  WorkflowRunOrderField: WorkflowRunOrderField | undefined;
  WorkflowState: WorkflowState | undefined;
}
